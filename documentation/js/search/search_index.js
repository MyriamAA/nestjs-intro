var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.02,1,2.226]],["body/controllers/AppController.html",[0,1.778,1,3.88,2,1.611,3,0.424,4,0.373,5,0.324,6,4.171,7,0.502,8,0.027,9,1.052,10,3.429,11,4.171,12,0.424,13,0.02,14,3.279,15,1.992,16,0.023,17,0.023]],["title/modules/AppModule.html",[18,1.02,19,2.226]],["body/modules/AppModule.html",[1,3.302,2,1.407,3,0.265,4,0.233,5,0.203,7,0.553,8,0.028,9,0.658,10,3.233,11,2.609,12,0.265,13,0.012,16,0.017,17,0.017,18,1.513,19,4.39,20,1.341,21,1.16,22,1.566,23,1.566,24,1.341,25,2.521,26,1.566,27,2.609,28,2.609,29,2.609,30,3.233,31,3.534,32,3.534,33,3.233,34,2.974,35,2.187,36,1.566,37,1.447,38,2.29,39,2.74,40,3.094,41,3.094,42,3.094,43,3.094,44,1.86,45,1.246,46,3.094,47,1.341,48,1.447,49,3.094,50,3.645,51,4.784,52,2.051,53,4.322,54,3.094,55,2.609,56,3.094,57,2.29,58,4.322,59,3.094,60,1.702,61,3.686,62,2.609,63,2.609,64,3.094,65,3.094,66,2.29,67,2.609,68,3.094,69,3.094,70,3.094,71,1.246,72,3.094,73,3.094,74,3.094,75,3.094,76,2.609,77,3.094,78,1.86,79,3.094,80,0.566,81,3.094,82,1.447,83,1.008,84,3.094,85,3.094,86,3.094,87,3.094,88,3.094,89,3.094,90,1.246,91,3.094,92,2.609,93,3.094,94,2.609,95,3.094,96,3.094,97,3.094,98,2.051,99,3.094,100,3.094,101,3.094,102,1.86,103,3.094,104,2.29,105,3.094,106,3.094]],["title/injectables/AppService.html",[10,1.847,107,1.094]],["body/injectables/AppService.html",[3,0.414,4,0.364,5,0.316,7,0.414,8,0.027,9,1.027,10,3.172,12,0.414,13,0.019,16,0.023,17,0.023,107,1.878,108,2.442,109,4.069,110,0.689,111,2.323,112,6.392,113,0.953,114,4.826,115,1.944,116,1.878,117,1.944,118,4.826,119,4.826]],["title/controllers/AuthController.html",[0,1.02,120,2.226]],["body/controllers/AuthController.html",[0,1.733,2,1.543,3,0.406,4,0.358,5,0.311,7,0.489,8,0.027,9,1.008,12,0.406,13,0.019,15,1.909,16,0.023,17,0.023,120,3.782,121,3.996,122,2.849,123,4.53,124,3.098,125,3.996,126,2.849,127,2.849,128,3.141,129,4.74,130,2.398,131,3.141,132,1.909,133,2.398]],["title/modules/AuthModule.html",[18,1.02,30,1.847]],["body/modules/AuthModule.html",[2,1.713,3,0.356,4,0.314,5,0.272,7,0.52,8,0.027,9,0.884,12,0.356,13,0.016,16,0.021,17,0.021,18,1.843,20,1.801,21,1.558,22,2.103,23,2.103,24,1.801,25,2.921,26,2.921,30,3.572,34,2.921,35,2.662,36,2.103,37,1.943,39,2.893,120,3.827,123,3.075,124,3.42,125,3.504,126,2.499,127,2.499,134,3.504,135,3.504,136,3.504,137,4.156,138,3.487,139,4.156,140,3.504,141,3.504,142,2.755,143,3.075]],["title/injectables/AuthService.html",[107,1.094,124,1.7]],["body/injectables/AuthService.html",[3,0.325,4,0.286,5,0.248,7,0.425,8,0.027,9,0.806,12,0.325,13,0.015,15,1.526,16,0.02,17,0.02,60,2.084,71,1.526,78,2.278,80,0.906,83,1.799,98,3.662,107,1.614,108,1.917,110,0.541,111,1.997,113,1.091,115,1.997,116,2.07,117,2.225,124,2.508,126,2.278,127,2.278,128,2.511,130,2.508,131,2.511,132,1.997,133,1.917,138,2.511,142,2.511,143,2.803,144,3.195,145,2.705,146,5.861,147,5.525,148,3.195,149,2.973,150,3.789,151,2.149,152,1.731,153,1.404,154,3.789,155,3.789,156,4.957,157,3.789,158,2.511,159,3.195,160,3.789,161,2.803,162,2.511,163,3.789,164,3.195,165,2.278,166,3.195,167,3.789,168,3.789,169,3.789]],["title/classes/CreatePostDto.html",[13,0.013,170,1.847]],["body/classes/CreatePostDto.html",[3,0.14,4,0.124,5,0.107,7,0.393,8,0.028,12,0.14,13,0.013,16,0.011,17,0.011,47,1.686,71,1.848,80,1.136,90,1.075,110,0.234,113,1.083,116,1.786,153,1.585,170,1.468,171,0.767,172,4.718,173,1.213,174,1.677,175,1.724,176,3.395,177,1.075,178,4.14,179,1.643,180,1.358,181,3.375,182,4.397,183,2.846,184,2.497,185,3.731,186,2.846,187,2.237,188,3.456,189,2.574,190,1.708,191,4.397,192,1.101,193,1.666,194,1.639,195,2.669,196,2.878,197,1.358,198,2.338,199,2.823,200,1.639,201,1.639,202,3.168,203,3.279,204,1.639,205,1.639,206,3.041,207,2.578,208,2.578,209,1.639,210,1.639,211,2.139,212,2.669,213,1.639,214,2.354,215,2.669,216,1.639,217,1.639,218,1.639,219,2.25,220,2.029,221,2.669,222,3.279,223,3.889,224,2.338,225,2.878,226,1.639,227,1.639,228,3.869,229,2.497,230,3.041,231,3.168,232,2.669,233,2.669,234,1.639,235,1.639,236,3.889,237,2.669,238,2.524,239,2.029,240,2.574,241,2.669,242,1.639,243,1.639,244,1.639,245,1.639,246,1.213,247,1.639,248,3.279,249,3.279,250,1.468,251,2.25,252,1.604,253,2.669,254,1.639,255,2.25,256,2.25,257,3.168,258,2.878,259,3.279,260,3.279,261,1.639,262,1.639,263,2.878,264,1.566,265,3.279,266,2.878,267,1.639,268,1.639,269,1.639,270,1.639,271,1.639,272,2.669,273,1.639,274,2.497,275,2.669,276,1.975,277,2.759,278,3.206,279,2.578,280,2.25,281,1.975,282,1.213,283,1.213,284,2.669,285,0.83,286,2.25,287,1.382,288,1.382,289,1.213,290,1.213,291,3.395,292,3.579,293,0.83,294,1.213,295,3.375,296,1.382,297,2.25,298,1.639,299,1.382,300,1.382,301,1.639,302,1.639,303,1.639,304,1.639,305,1.639,306,1.382,307,1.639,308,1.769,309,1.639,310,2.669,311,1.213,312,1.382,313,1.639,314,1.639,315,1.639,316,0.986,317,1.382,318,1.639,319,1.639]],["title/classes/CreatePostMetaOptionsDto.html",[13,0.013,211,1.847]],["body/classes/CreatePostMetaOptionsDto.html",[3,0.368,4,0.324,5,0.281,7,0.368,8,0.027,12,0.368,13,0.021,16,0.021,17,0.021,47,2.661,71,1.728,80,0.784,110,0.612,113,0.847,116,1.999,171,2.006,174,1.215,175,2.162,176,3.972,179,1.51,180,1.875,193,1.303,199,2.51,211,2.952,220,3.227,238,2.952,240,3.227,276,3.972,277,3.227,279,2.844,285,2.171,289,3.972,311,4.335,312,3.618,320,2.327,321,3.618,322,4.291,323,4.291,324,3.972]],["title/classes/CreateTagDto.html",[13,0.013,325,2.019]],["body/classes/CreateTagDto.html",[3,0.219,4,0.193,5,0.168,7,0.323,8,0.028,12,0.219,13,0.015,16,0.015,17,0.015,80,0.963,110,0.365,113,1.04,116,1.977,152,1.99,171,1.195,174,1.783,175,1.518,176,2.788,177,1.518,180,1.316,187,2.967,188,3.957,193,1.599,199,3.098,202,3.312,206,3.491,207,3.274,208,3.274,214,2.072,238,2.716,240,2.97,246,2.788,248,4.165,249,4.165,250,2.072,251,3.177,252,2.265,255,4.165,256,4.165,264,2.668,266,3.655,276,2.788,277,2.691,278,3.274,279,3.274,280,3.177,281,1.891,282,1.891,283,1.891,285,1.293,291,3.312,292,3.655,293,1.293,296,2.155,299,2.155,300,2.155,306,2.155,325,2.265,326,4.647,327,2.155,328,2.265,329,3.177,330,3.774,331,4.94,332,2.265,333,2.461,334,4.805,335,2.556,336,2.556,337,3.774,338,2.556,339,2.556,340,2.556,341,2.556,342,3.774,343,2.556,344,2.556,345,2.265,346,2.556,347,3.768,348,3.768,349,2.556,350,2.556,351,2.155,352,3.177,353,3.177,354,3.177]],["title/classes/CreateUserDto.html",[13,0.013,355,1.847]],["body/classes/CreateUserDto.html",[3,0.32,4,0.282,5,0.245,7,0.32,8,0.027,12,0.32,13,0.019,16,0.019,17,0.019,80,1.065,98,3.637,110,0.533,113,1.151,116,2.093,153,1.391,158,3.637,171,1.747,180,1.715,192,1.391,193,1.77,250,2.701,277,3.504,278,3.255,279,3.863,281,2.764,282,2.764,283,2.764,285,1.89,351,4.141,355,2.701,356,5.106,357,2.764,358,4.06,359,4.627,360,3.735,361,3.735,362,3.735,363,3.735,364,3.735,365,3.735,366,3.735,367,5.829,368,4.911,369,4.911,370,4.911,371,4.911,372,4.911,373,4.911,374,4.599,375,4.911,376,4.911,377,4.911,378,3.735,379,4.911,380,5.829,381,3.735,382,3.735]],["title/classes/GetUsersParamDto.html",[13,0.013,383,2.019]],["body/classes/GetUsersParamDto.html",[3,0.376,4,0.331,5,0.287,7,0.507,8,0.027,12,0.376,13,0.023,16,0.022,17,0.022,80,1.081,83,1.772,110,0.626,113,0.866,153,1.541,171,2.051,174,1.242,180,1.9,192,1.676,193,1.332,197,2.221,199,2.545,202,3.245,274,4.027,278,3.607,285,2.219,292,4.027,293,2.219,294,3.245,383,3.272,384,4.589,385,3.272,386,3.698,387,4.027,388,4.386,389,4.386,390,4.386]],["title/entities/MetaOption.html",[391,1.259,392,1.571]],["body/entities/MetaOption.html",[3,0.315,4,0.277,5,0.241,7,0.416,8,0.027,12,0.315,13,0.015,16,0.019,17,0.019,48,2.893,80,1.131,82,1.718,90,1.957,110,0.524,113,1.189,116,1.582,179,1.595,180,1.697,192,1.376,193,1.829,197,1.901,230,3.839,238,2.993,311,4.028,320,2.682,391,1.821,392,2.272,393,3.099,394,4.59,395,4.59,396,4.59,397,3.675,398,3.608,399,3.675,400,2.436,401,3.22,402,3.675,403,3.099,404,4.859,405,4.097,406,3.675,407,3.675,408,4.59,409,3.675,410,2.719,411,3.22,412,4.097,413,4.097,414,1.593,415,2.436,416,3.675,417,3.675,418,3.675,419,3.675,420,2.436]],["title/controllers/MetaOptionsController.html",[0,1.02,421,2.226]],["body/controllers/MetaOptionsController.html",[0,1.289,2,1.382,3,0.364,4,0.32,5,0.278,7,0.5,8,0.027,9,0.903,12,0.364,13,0.017,14,2.814,15,1.71,16,0.021,17,0.021,47,2.311,48,2.493,80,0.776,110,0.606,111,2.147,113,0.838,115,1.71,117,1.71,122,2.552,145,2.527,151,1.84,152,1.482,153,1.202,179,1.504,193,1.289,211,3.363,220,3.206,290,3.141,320,2.311,421,3.534,422,3.579,423,5.83,424,4.245,425,4.245,426,5.332,427,3.206,428,2.334,429,3.206,430,3.579,431,3.579,432,4.245,433,4.245]],["title/modules/MetaOptionsModule.html",[18,1.02,31,2.019]],["body/modules/MetaOptionsModule.html",[2,1.757,3,0.371,4,0.326,5,0.284,7,0.543,8,0.027,9,0.92,12,0.371,13,0.017,16,0.021,17,0.021,18,1.786,20,1.875,21,1.621,22,2.189,23,2.189,24,1.875,25,2.976,26,2.189,31,3.884,35,2.73,36,2.189,37,2.023,39,2.379,44,2.601,45,1.742,47,2.339,48,2.023,320,1.875,392,2.023,421,3.897,429,3.553,430,3.648,431,3.648,434,3.648,435,3.648,436,4.326,437,4.326,438,2.601,439,4.326]],["title/injectables/MetaOptionsService.html",[107,1.094,429,1.847]],["body/injectables/MetaOptionsService.html",[3,0.339,4,0.299,5,0.26,7,0.529,8,0.027,9,0.842,12,0.339,13,0.016,16,0.02,17,0.02,45,1.594,47,2.211,60,2.177,78,2.38,80,0.932,107,1.661,108,2.003,110,0.565,111,2.054,113,1.007,115,1.594,117,1.594,130,2.581,133,2.003,145,2.446,151,2.211,152,1.781,153,1.445,179,0.974,211,3.278,290,2.929,320,2.446,392,2.385,414,1.716,428,2.177,429,2.805,438,2.38,440,4.758,441,3.338,442,3.393,443,2.385,444,3.959,445,3.583,446,3.959,447,5.101,448,5.101,449,3.959,450,3.959,451,2.38,452,2.624,453,3.338,454,3.338,455,3.959,456,2.624,457,3.959]],["title/classes/PatchPostDto.html",[13,0.013,458,2.019]],["body/classes/PatchPostDto.html",[3,0.342,4,0.301,5,0.261,7,0.485,8,0.027,12,0.342,13,0.02,16,0.02,17,0.02,80,0.729,110,0.569,113,0.787,153,1.452,170,3.114,171,1.865,173,2.952,174,1.452,175,2.064,179,1.556,180,1.79,192,1.452,193,1.211,197,2.3,199,2.397,246,2.952,274,3.793,277,3.081,285,2.018,291,3.793,293,2.018,308,2.644,443,1.865,458,3.081,459,4.322,460,5.125,461,3.793,462,5.04,463,5.125,464,4.322,465,5.125,466,5.125,467,5.125,468,3.962,469,3.989,470,3.989,471,3.363,472,2.952]],["title/classes/PatchUserDto.html",[13,0.013,473,2.226]],["body/classes/PatchUserDto.html",[3,0.415,4,0.365,5,0.317,7,0.495,8,0.027,12,0.415,13,0.019,16,0.023,17,0.023,83,1.576,171,2.264,175,1.95,355,2.662,357,3.582,443,2.702,462,4.873,471,4.082,473,3.83,474,4.082,475,5.779,476,4.082,477,4.082,478,3.582,479,4.841,480,4.841,481,4.082]],["title/entities/Post.html",[179,0.826,391,1.259]],["body/entities/Post.html",[3,0.164,4,0.144,5,0.125,7,0.421,8,0.028,12,0.164,13,0.008,16,0.012,17,0.012,47,1.31,48,0.895,57,3.146,71,2.486,80,1.165,82,0.895,83,1.738,90,2.149,110,0.273,113,1.152,116,1.9,153,1.652,174,0.542,178,2.236,179,1.595,180,1.055,182,3.902,183,3.157,184,3.639,185,3.949,186,3.157,187,3.067,188,2.481,189,2.782,190,2.342,191,3.902,192,0.856,193,1.772,197,1.307,198,2.782,203,2.548,206,2.818,207,2.003,208,2.003,220,1.817,224,1.817,225,2.236,228,2.548,229,2.236,230,2.818,231,3.146,238,1.662,257,3.424,258,2.236,264,1.981,266,3.146,286,2.548,287,1.614,288,1.614,297,4.5,320,0.83,328,1.817,332,1.529,345,2.556,374,3.639,391,1.593,392,1.988,398,2.481,400,3.537,401,4.055,403,1.614,411,3.641,412,1.614,413,2.548,414,0.83,420,2.003,438,1.151,482,1.614,483,3.022,484,1.914,485,3.022,486,4.918,487,1.914,488,3.26,489,4.147,490,3.585,491,1.914,492,3.022,493,3.639,494,3.639,495,2.548,496,1.914,497,1.914,498,2.818,499,3.022,500,1.914,501,3.022,502,3.022,503,1.914,504,2.548,505,1.914,506,2.548,507,1.914,508,3.022,509,2.548,510,1.914,511,2.548,512,1.914,513,3.022,514,1.614,515,3.022,516,1.914,517,1.914,518,2.548,519,1.914,520,3.022,521,2.548,522,3.022,523,1.914,524,1.914,525,1.914,526,1.914,527,1.914,528,1.614]],["title/controllers/PostsController.html",[0,1.02,529,2.226]],["body/controllers/PostsController.html",[0,1.185,2,0.665,3,0.175,4,0.154,5,0.134,7,0.409,8,0.027,9,0.435,12,0.175,13,0.008,14,1.354,15,0.823,16,0.013,17,0.013,71,1.28,80,0.924,83,1.718,90,1.28,110,0.291,111,1.28,113,0.869,115,2.308,116,1.271,117,1.774,122,1.228,132,0.823,145,2.57,151,1.909,152,1.765,153,1.494,170,2.902,174,1.83,177,2.036,178,4.037,179,1.642,189,3.172,190,1.609,192,1.352,193,1.338,196,3.259,197,2.164,250,1.748,293,1.034,316,2.869,317,1.722,328,2.869,332,3.04,387,3.259,427,1.228,458,3.172,461,3.259,468,3.35,472,2.352,529,2.587,530,1.722,531,2.107,532,3.179,533,3.497,534,3.179,535,3.179,536,2.043,537,3.903,538,3.179,539,4.405,540,2.648,541,3.903,542,3.179,543,3.179,544,3.179,545,2.043,546,2.043,547,1.354,548,2.919,549,2.043,550,2.043,551,3.714,552,1.911,553,4.405,554,2.043,555,2.043,556,2.681,557,2.043,558,2.043,559,3.259,560,2.043,561,4.024,562,2.043,563,2.648,564,2.043,565,2.043,566,3.259,567,2.043,568,2.043,569,2.779,570,2.352,571,2.681,572,1.354,573,2.422,574,1.722,575,4.024,576,4.601,577,1.722,578,3.179,579,2.681,580,1.722,581,1.722,582,2.043,583,2.043,584,2.043,585,3.714,586,2.043,587,2.043,588,3.291,589,2.043,590,2.043,591,2.352,592,2.043,593,2.043,594,1.722,595,2.043,596,2.043,597,2.043,598,1.511,599,2.043,600,2.043,601,1.722,602,2.043]],["title/modules/PostsModule.html",[18,1.02,32,2.019]],["body/modules/PostsModule.html",[2,1.607,3,0.322,4,0.284,5,0.247,7,0.563,8,0.027,9,0.8,12,0.322,13,0.015,16,0.02,17,0.02,18,1.843,20,1.631,21,1.41,22,1.904,23,1.904,24,1.631,25,2.786,26,2.497,32,3.952,33,3.425,34,3.151,35,2.497,36,1.904,37,1.759,39,2.713,44,2.262,45,1.515,48,1.759,82,1.759,132,1.515,140,3.172,179,1.214,320,1.631,385,2.262,391,1.41,392,2.307,438,2.262,443,1.759,529,3.649,573,3.425,574,3.172,603,3.172,604,3.762,605,3.172,606,3.762,607,3.762,608,3.172,609,3.762,610,3.762,611,3.762,612,3.172,613,3.762,614,3.762,615,2.784,616,3.762,617,3.762,618,3.762,619,3.762]],["title/injectables/PostsService.html",[107,1.094,573,1.847]],["body/injectables/PostsService.html",[3,0.14,4,0.123,5,0.107,7,0.446,8,0.028,9,0.347,12,0.14,13,0.006,15,1.562,16,0.011,17,0.011,21,0.996,45,0.657,47,1.851,48,0.763,60,2.655,66,1.207,71,1.562,78,1.598,80,0.78,82,1.813,83,1.262,90,0.657,102,1.598,107,0.865,108,0.825,110,0.233,111,1.07,113,0.843,115,2.096,116,1.095,117,2.096,130,1.962,132,1.844,133,1.962,145,2.464,148,1.375,149,2.257,151,1.851,152,1.491,153,1.209,159,1.375,162,1.081,170,2.862,174,1.296,175,1.562,177,1.719,179,1.559,184,2.869,189,1.598,190,1.962,192,1.098,197,1.913,198,1.598,214,1.849,220,2.567,239,2.331,250,0.897,252,2.022,264,1.07,308,1.761,316,1.598,320,0.707,332,2.443,333,2.862,392,1.813,414,0.707,420,1.081,427,0.981,438,0.981,442,3.417,443,1.813,445,3.293,451,2.331,452,1.081,453,3.269,454,1.375,456,3.919,458,2.902,461,1.966,464,2.241,468,1.761,472,1.966,531,2.57,533,3.034,540,1.598,547,2.229,548,2.229,552,2.022,556,1.375,559,1.966,561,2.241,563,1.598,566,1.966,569,2.768,572,1.081,573,1.461,580,1.375,581,1.375,591,1.966,594,1.375,598,1.207,608,1.375,615,1.966,620,1.375,621,2.57,622,3.034,623,2.241,624,3.877,625,3.877,626,2.546,627,1.631,628,3.269,629,1.631,630,1.631,631,2.657,632,1.598,633,2.657,634,1.631,635,1.761,636,2.488,637,2.657,638,1.631,639,2.835,640,2.657,641,1.631,642,1.631,643,1.631,644,1.631,645,1.631,646,1.631,647,1.631,648,1.631,649,2.657,650,3.363,651,1.375,652,1.631,653,1.631,654,1.631,655,1.375,656,1.631,657,1.631,658,1.631,659,1.631,660,1.631,661,1.631,662,1.631,663,2.657,664,3.363,665,1.375,666,1.631,667,1.631,668,1.631,669,1.631,670,1.375,671,1.631,672,1.631,673,1.631,674,2.657,675,2.657,676,1.631,677,1.631,678,1.631,679,1.631,680,1.631,681,1.631,682,1.207,683,1.631,684,2.241,685,1.631,686,3.363,687,1.631,688,1.631,689,1.631,690,1.631,691,1.631,692,1.631,693,1.631,694,1.375,695,1.631,696,1.631,697,1.631,698,1.631,699,1.375,700,1.631,701,1.631,702,1.631,703,1.631,704,1.631,705,2.657,706,1.631,707,2.657,708,1.631,709,2.657,710,1.631,711,2.657,712,1.631,713,2.657,714,1.631,715,2.657,716,1.631,717,2.657,718,1.631,719,1.375,720,1.631]],["title/entities/Tag.html",[264,1.353,391,1.259]],["body/entities/Tag.html",[3,0.199,4,0.176,5,0.153,7,0.301,8,0.028,12,0.199,13,0.009,16,0.014,17,0.014,71,2.39,80,1.151,82,1.088,90,1.899,110,0.332,113,1.171,116,1.932,152,1.768,153,0.995,174,1.507,179,1.309,180,1.227,187,3.355,188,3.355,192,0.995,193,1.802,197,1.478,199,2.775,206,3.126,207,2.329,208,2.329,219,2.963,230,3.528,238,1.932,240,2.112,264,2.637,330,3.569,332,2.693,333,1.28,334,3.569,337,1.962,342,1.962,345,3.2,352,1.962,353,1.962,354,1.962,391,1.768,394,3.569,395,3.569,396,3.569,398,2.806,400,3.355,401,3.933,405,2.963,408,3.569,410,1.722,411,3.528,414,1.009,420,2.329,468,2.329,488,3.126,489,2.963,490,3.976,493,3.938,494,3.938,495,2.963,498,2.329,504,4.488,509,2.963,511,2.963,514,1.962,518,2.963,521,2.963,540,2.112,552,2.112,632,2.112,635,3.528,719,2.963,721,1.962,722,3.514,723,4.233,724,2.327,725,4.233,726,2.327,727,2.6,728,2.327,729,2.327,730,2.327,731,2.327,732,2.327,733,2.327,734,2.327,735,2.327,736,3.514,737,2.327,738,2.327]],["title/controllers/TagsController.html",[0,1.02,739,2.226]],["body/controllers/TagsController.html",[0,1.423,2,0.902,3,0.237,4,0.209,5,0.182,7,0.402,8,0.027,9,0.589,12,0.237,13,0.011,14,1.836,15,1.116,16,0.016,17,0.016,80,0.857,102,2.402,110,0.395,111,1.609,113,0.925,115,2.283,117,1.888,122,1.665,132,1.116,145,2.641,151,2.032,152,1.637,153,1.327,174,1.453,175,1.609,177,1.609,179,1.153,190,1.402,192,1.605,193,1.423,197,2.248,214,2.822,239,2.402,264,2.64,316,2.402,325,3.513,328,2.402,333,2.198,415,2.649,427,1.665,428,1.523,442,3.408,443,1.868,451,2.402,533,4.196,540,2.402,547,1.836,548,3.401,552,2.402,569,2.822,570,3.468,572,1.836,601,2.336,615,2.05,621,2.649,622,1.836,626,2.753,635,3.401,636,3.797,651,2.336,682,3.797,727,4.194,739,2.649,740,2.336,741,3.369,742,3.996,743,3.996,744,2.336,745,2.77,746,2.77,747,4.327,748,2.77,749,3.996,750,2.77,751,3.369,752,3.369,753,2.336,754,2.336,755,2.77,756,2.336,757,2.77,758,2.77,759,2.77,760,2.77,761,2.77,762,2.77]],["title/modules/TagsModule.html",[18,1.02,33,1.847]],["body/modules/TagsModule.html",[2,1.739,3,0.365,4,0.321,5,0.279,7,0.54,8,0.027,9,0.906,12,0.365,13,0.017,16,0.021,17,0.021,18,1.773,20,1.845,21,1.595,22,2.154,23,2.154,24,1.845,25,2.954,26,2.954,33,3.591,35,2.703,36,2.154,37,1.99,39,2.341,44,2.559,45,1.714,264,1.714,626,3.431,739,3.869,753,3.589,763,3.589,764,3.589,765,3.589,766,4.256,767,4.256,768,3.589,769,4.256]],["title/injectables/TagsService.html",[107,1.094,626,1.7]],["body/injectables/TagsService.html",[3,0.189,4,0.166,5,0.144,7,0.423,8,0.028,9,0.468,12,0.189,13,0.009,15,0.887,16,0.018,17,0.013,45,0.887,60,2.25,71,1.357,80,0.903,90,0.887,102,2.025,104,1.629,107,1.097,108,1.114,110,0.314,111,1.357,113,0.975,115,2.252,117,1.989,126,1.323,127,1.323,128,1.459,130,1.704,132,1.648,133,1.114,145,2.615,151,2.141,152,1.725,153,1.399,161,1.629,165,1.323,166,1.856,174,1.475,175,1.357,177,1.357,190,2.743,192,1.623,197,2.194,214,2.865,239,2.025,250,1.211,263,3.655,264,2.685,265,4.165,316,2.025,325,3.132,328,2.025,329,2.84,333,1.852,391,1.718,414,1.773,415,2.232,428,1.211,442,3.627,443,1.575,445,3.361,451,2.755,452,1.459,456,3.274,533,3.453,540,2.025,547,2.232,548,3.038,552,2.969,563,2.025,569,2.716,591,3.027,621,2.232,622,2.232,626,1.704,632,2.025,635,3.038,636,3.655,682,3.391,727,3.854,744,2.84,747,3.864,751,2.84,752,2.84,754,1.856,756,2.84,768,1.856,770,1.856,771,3.368,772,3.368,773,2.201,774,2.201,775,3.368,776,4.091,777,2.201,778,2.201,779,3.368,780,2.201,781,4.091,782,2.84,783,2.492,784,3.368,785,2.201,786,1.856,787,2.201,788,2.201,789,2.201,790,2.201,791,2.201,792,1.856,793,2.201,794,2.201,795,2.201,796,2.201,797,2.201,798,2.201]],["title/entities/User.html",[83,1.094,391,1.259]],["body/entities/User.html",[3,0.285,4,0.251,5,0.218,7,0.389,8,0.027,12,0.285,13,0.013,16,0.018,17,0.018,71,2.239,80,1.174,82,1.553,83,1.684,90,2.42,98,3.427,110,0.474,113,1.186,116,2.039,158,3.427,165,1.997,175,1.337,179,1.478,180,1.585,192,1.285,193,1.824,197,1.806,332,2.813,345,2.729,358,3.826,359,4.36,391,1.701,398,3.427,400,3.684,401,4.15,410,2.457,411,3.982,414,1.967,488,2.201,493,4.633,494,4.633,799,2.8,800,6.261,801,3.321,802,3.321,803,3.321,804,3.321,805,3.321,806,3.321,807,4.539,808,3.321,809,4.539,810,3.321,811,3.321,812,3.321,813,2.8,814,3.321,815,3.321,816,2.8,817,3.321]],["title/controllers/UsersController.html",[0,1.02,818,2.226]],["body/controllers/UsersController.html",[0,0.799,2,0.857,3,0.226,4,0.199,5,0.173,7,0.477,8,0.027,9,0.56,12,0.226,13,0.01,15,1.06,16,0.015,17,0.015,80,1.051,83,0.857,90,2.018,110,0.376,111,1.551,113,0.899,115,1.834,117,2.147,122,1.583,130,1.332,131,1.745,132,1.06,133,1.332,145,2.608,149,2.129,151,2.172,152,1.862,153,1.419,162,1.745,174,1.577,177,1.551,179,1.12,189,1.583,192,1.808,193,1.383,196,3.707,199,2.343,224,3.546,252,1.583,293,1.332,308,2.552,355,3.243,383,3.012,385,3.348,415,1.745,427,2.315,428,1.448,473,3.909,478,2.849,551,3.247,563,2.315,569,2.118,570,3.369,571,3.839,572,3.32,575,3.247,576,3.247,577,2.22,579,3.839,585,2.22,588,3.247,655,2.22,684,2.22,741,3.839,782,2.22,783,2.849,818,2.552,819,2.22,820,4.553,821,4.553,822,3.85,823,2.632,824,2.632,825,2.632,826,4.696,827,2.632,828,3.85,829,3.85,830,2.632,831,3.85,832,2.632,833,3.85,834,3.85,835,3.85,836,2.632,837,3.85,838,3.247,839,2.632,840,3.247,841,2.632,842,2.632,843,2.632,844,2.632,845,2.22,846,2.632,847,2.632,848,2.632,849,2.632,850,2.632,851,3.85,852,2.22,853,2.22,854,2.632,855,2.22,856,2.632,857,2.632,858,2.632,859,2.632,860,2.22,861,2.632,862,2.632,863,2.632,864,2.632,865,2.632,866,2.632,867,2.632,868,2.632,869,2.632,870,2.632,871,2.632]],["title/modules/UsersModule.html",[18,1.02,34,1.7]],["body/modules/UsersModule.html",[2,1.831,3,0.337,4,0.297,5,0.258,7,0.557,8,0.027,9,0.836,12,0.435,13,0.016,16,0.02,17,0.02,18,1.708,20,1.703,21,1.473,22,1.988,23,1.988,24,1.703,25,3.007,26,2.845,30,3.092,34,3.245,35,2.569,36,1.988,37,1.837,39,2.792,44,2.363,45,1.583,50,3.313,52,2.605,83,1.28,138,3.365,141,3.313,142,2.605,143,2.908,149,3.136,818,3.727,855,3.313,872,3.313,873,3.313,874,3.313,875,3.93,876,3.93,877,3.93,878,3.313,879,3.313,880,3.313,881,3.93,882,3.93,883,3.93]],["title/injectables/UsersService.html",[107,1.094,149,1.571]],["body/injectables/UsersService.html",[3,0.179,4,0.158,5,0.137,7,0.484,8,0.028,9,0.445,12,0.179,13,0.008,15,1.596,16,0.013,17,0.013,21,1.913,45,0.842,51,3.761,52,1.386,60,1.15,78,1.946,80,0.815,83,1.989,92,2.73,102,1.946,107,1.054,108,1.058,110,0.298,111,1.304,113,0.88,115,1.943,116,1.054,117,1.943,124,2.971,130,1.638,131,2.146,132,2.055,133,2.257,138,1.386,142,2.146,145,2.447,149,2.086,151,1.933,152,1.558,153,1.263,158,3.198,164,1.763,165,1.257,174,1.263,175,1.304,177,1.304,192,1.776,197,1.782,214,1.78,224,3.068,239,3.068,263,2.931,333,2.806,345,2.901,355,2.653,358,2.931,383,2.901,385,3.394,414,0.906,428,1.15,442,3.068,443,0.978,445,2.682,451,1.946,452,1.386,456,2.626,478,1.547,498,2.146,531,2.146,559,3.3,563,1.946,569,2.653,621,2.146,622,3.382,623,3.341,628,3.341,632,2.682,826,3.761,840,3.341,852,1.763,853,1.763,878,1.763,879,2.73,880,1.763,884,1.763,885,3.761,886,3.238,887,3.238,888,3.238,889,4.46,890,3.238,891,3.238,892,3.238,893,3.238,894,3.238,895,2.091,896,4.46,897,3.962,898,4.46,899,2.091,900,3.238,901,3.238,902,3.238,903,2.091,904,2.091,905,2.091,906,3.238,907,3.238,908,3.238,909,3.238,910,3.238,911,3.238,912,3.238,913,2.091,914,3.238,915,3.238,916,2.091,917,2.091,918,2.091,919,1.763,920,1.763,921,2.091,922,2.091,923,2.091,924,2.091,925,2.091,926,2.091,927,2.091,928,2.091,929,2.091,930,2.091,931,2.091,932,3.962,933,2.091,934,2.091]],["title/coverage.html",[935,3.384]],["body/coverage.html",[0,1.834,1,2.239,5,0.221,6,2.848,8,0.027,10,1.857,13,0.024,16,0.018,17,0.018,24,1.464,38,2.499,47,1.464,48,2.147,61,2.499,80,0.617,83,1.1,107,1.966,109,2.848,120,2.239,121,2.848,124,1.709,144,2.848,149,1.579,170,1.857,172,2.848,173,3.397,177,1.36,179,1.129,211,1.857,264,1.36,289,2.499,320,2.426,321,2.848,325,2.031,326,2.848,327,2.848,355,1.857,356,2.848,357,3.397,383,2.031,384,2.848,385,2.031,386,2.848,391,2.098,392,1.579,393,2.848,421,2.239,422,2.848,429,1.857,440,2.848,441,2.848,458,2.031,459,2.848,473,2.239,474,2.848,482,2.848,498,2.239,529,2.239,530,2.848,573,1.857,620,2.848,626,1.709,721,2.848,739,2.239,740,2.848,770,2.848,799,2.848,818,2.239,819,2.848,884,2.848,885,2.848,935,2.499,936,2.848,937,3.377,938,6.636,939,6.177,940,3.377,941,5.216,942,4.591,943,2.848,944,3.377,945,6.445,946,4.591,947,3.377,948,3.377,949,4.591,950,3.377,951,5.216,952,3.377,953,3.377,954,3.377,955,3.377,956,3.377]],["title/dependencies.html",[21,1.513,957,2.079]],["body/dependencies.html",[8,0.027,9,0.988,13,0.022,16,0.022,17,0.022,21,1.74,45,1.87,52,3.077,240,2.791,285,2.349,293,2.349,294,3.435,414,2.012,476,3.915,477,3.915,958,4.642,959,4.642,960,6.068,961,4.642,962,4.642,963,4.642,964,4.642,965,4.642,966,4.642,967,4.642,968,4.642,969,4.642,970,4.642,971,4.642,972,4.642,973,4.642,974,4.642,975,4.642,976,4.642]],["title/miscellaneous/enumerations.html",[977,1.545,978,3.404]],["body/miscellaneous/enumerations.html",[8,0.027,16,0.022,17,0.022,110,0.664,179,1.388,185,4.177,224,3.394,225,4.177,229,4.177,231,4.177,257,4.177,258,4.177,259,4.76,260,4.76,324,4.969,977,2.561,978,3.926,979,5.645,980,5.645,981,5.645,982,5.645]],["title/miscellaneous/functions.html",[977,1.545,983,3.404]],["body/miscellaneous/functions.html",[8,0.024,16,0.024,17,0.024,24,2.771,110,0.75,943,4.434,977,2.892,983,4.434,984,5.258]],["title/index.html",[110,0.401,528,2.369,985,2.81]],["body/index.html",[0,0.983,4,0.158,5,0.335,8,0.026,16,0.013,17,0.013,18,0.983,37,2.386,55,1.763,63,4.637,66,1.547,67,1.763,76,1.763,94,3.761,104,1.547,123,1.547,126,3.068,127,3.2,128,1.386,132,1.304,152,1.131,161,1.547,162,1.386,165,3.068,174,0.592,177,0.842,190,1.058,192,0.592,198,1.257,199,2.64,222,1.763,252,3.068,332,1.058,374,1.547,387,2.931,445,1.257,481,2.73,488,2.146,506,3.341,531,1.386,566,1.547,598,2.396,612,1.763,632,1.257,639,1.763,665,1.763,670,1.763,694,1.763,699,1.763,783,1.547,786,1.763,792,3.761,813,1.763,816,1.763,838,3.761,845,1.763,860,4.303,919,2.73,920,4.303,935,2.396,936,4.951,957,2.396,986,2.091,987,2.091,988,3.962,989,3.238,990,2.091,991,2.091,992,2.091,993,2.091,994,3.238,995,2.091,996,5.322,997,2.091,998,5.645,999,2.091,1000,2.091,1001,3.962,1002,3.238,1003,2.091,1004,3.238,1005,2.091,1006,3.962,1007,2.091,1008,2.091,1009,2.091,1010,2.091,1011,2.091,1012,2.091,1013,4.46,1014,5.499,1015,3.238,1016,2.091,1017,2.091,1018,2.091,1019,2.091,1020,3.238,1021,4.46,1022,2.091,1023,3.238,1024,2.091,1025,3.238,1026,5.103,1027,4.46,1028,2.091,1029,3.238,1030,2.091,1031,2.091,1032,2.091,1033,4.46,1034,2.091,1035,2.091,1036,2.091,1037,2.091,1038,3.238,1039,2.091,1040,2.091,1041,2.091,1042,2.091,1043,3.238,1044,2.091,1045,2.091,1046,2.091,1047,3.238,1048,2.091,1049,2.091,1050,3.761,1051,3.238,1052,2.091,1053,2.091,1054,2.091,1055,2.091,1056,2.091,1057,2.091,1058,2.091,1059,2.091,1060,3.238,1061,2.091,1062,2.091,1063,2.091,1064,2.091,1065,2.091,1066,3.962,1067,2.091,1068,2.091,1069,2.091,1070,3.238,1071,2.091,1072,2.091,1073,2.091,1074,2.091,1075,3.238,1076,2.091,1077,2.091,1078,2.091,1079,3.238,1080,3.238,1081,2.091,1082,2.091,1083,2.091,1084,2.091,1085,2.091,1086,2.091,1087,2.091,1088,2.091,1089,2.091,1090,4.46,1091,2.091,1092,2.091,1093,2.091,1094,2.091,1095,2.091,1096,2.091,1097,1.763,1098,2.091,1099,3.962,1100,2.091,1101,5.645,1102,2.091,1103,2.091,1104,2.091,1105,3.238,1106,4.46,1107,3.238,1108,2.091,1109,2.091,1110,2.091,1111,2.091,1112,2.091,1113,2.091,1114,2.091,1115,2.091,1116,3.238,1117,2.091,1118,5.322,1119,2.091,1120,2.091,1121,2.091,1122,2.091,1123,2.091,1124,2.091,1125,2.091,1126,2.091,1127,3.238,1128,3.238,1129,4.46,1130,3.962,1131,3.962,1132,2.091,1133,2.091,1134,2.091,1135,3.238,1136,2.091,1137,2.091,1138,2.091,1139,4.46,1140,2.091,1141,3.238,1142,2.091,1143,3.238,1144,2.091,1145,2.091,1146,2.091,1147,2.091,1148,2.091,1149,2.091,1150,3.238,1151,3.238,1152,3.238,1153,2.091,1154,2.091,1155,2.091,1156,2.091,1157,3.962,1158,2.091,1159,2.091,1160,2.091,1161,2.091,1162,2.091,1163,2.091,1164,2.091,1165,2.091,1166,2.091,1167,2.091,1168,2.091,1169,2.091,1170,2.091]],["title/modules.html",[20,1.983]],["body/modules.html",[8,0.023,16,0.023,17,0.023,19,3.238,20,2.118,30,2.687,31,2.937,32,2.937,33,2.687,34,2.472,1050,5.607,1171,6.65,1172,6.65,1173,6.65]],["title/overview.html",[1174,3.857]],["body/overview.html",[2,1.213,8,0.027,10,3.014,16,0.019,17,0.019,18,1.132,19,4.457,20,1.615,21,1.397,22,1.886,23,1.886,24,1.615,25,1.886,26,1.886,27,3.142,28,3.142,29,3.142,30,3.416,31,3.638,32,3.908,33,3.482,34,3.204,35,2.481,36,1.886,37,1.743,82,1.743,108,1.886,124,3.204,134,3.142,135,3.142,136,3.142,149,2.961,171,1.743,429,3.014,434,3.142,435,3.142,573,3.014,603,3.142,605,3.142,626,3.204,763,3.142,764,3.142,765,3.142,872,3.142,873,3.142,874,3.142,1174,3.142,1175,5.481,1176,3.727,1177,3.727]],["title/properties.html",[180,1.41,957,2.079]],["body/properties.html",[8,0.027,16,0.024,17,0.024,174,1.474,180,1.818,198,3.13,1097,4.39,1178,5.206,1179,5.206,1180,5.206]],["title/miscellaneous/variables.html",[977,1.545,1181,3.404]],["body/miscellaneous/variables.html",[8,0.025,16,0.024,17,0.024,38,3.852,57,3.852,61,4.463,62,4.39,110,0.743,324,3.852,977,2.863,1181,4.39,1182,5.206]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":938,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":1179,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":969,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":973,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":976,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":968,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":939,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":941,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":947,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":942,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":953,"title":{},"body":{"coverage.html":{}}}],["03",{"_index":233,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1",{"_index":308,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["1.1.23",{"_index":959,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":949,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":861,"title":{},"body":{"controllers/UsersController.html":{}}}],["10.0.0",{"_index":960,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":967,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":945,"title":{},"body":{"coverage.html":{}}}],["1024",{"_index":495,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["10})@apiquery({name",{"_index":836,"title":{},"body":{"controllers/UsersController.html":{}}}],["12/12",{"_index":948,"title":{},"body":{"coverage.html":{}}}],["1234",{"_index":390,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["1234'})@isoptional()@isint()@type(undefined",{"_index":388,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["16t07:46:32+0000",{"_index":307,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["16t07:46:32+0000'})@isiso8601()@isoptional",{"_index":234,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1})@isint()@isnotempty",{"_index":469,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["1})@isnotempty()@isint",{"_index":200,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["2",{"_index":309,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["2.0.5",{"_index":963,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":946,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":551,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["201",{"_index":539,"title":{},"body":{"controllers/PostsController.html":{}}}],["2024",{"_index":232,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["256",{"_index":509,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["3.2.2",{"_index":961,"title":{},"body":{"dependencies.html":{}}}],["3001",{"_index":1148,"title":{},"body":{"index.html":{}}}],["4",{"_index":1176,"title":{},"body":{"overview.html":{}}}],["4/4",{"_index":952,"title":{},"body":{"coverage.html":{}}}],["4/5",{"_index":955,"title":{},"body":{"coverage.html":{}}}],["400",{"_index":542,"title":{},"body":{"controllers/PostsController.html":{}}}],["404",{"_index":553,"title":{},"body":{"controllers/PostsController.html":{}}}],["5/5",{"_index":950,"title":{},"body":{"coverage.html":{}}}],["512",{"_index":518,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["6",{"_index":1175,"title":{},"body":{"overview.html":{}}}],["6/6",{"_index":951,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":1177,"title":{},"body":{"overview.html":{}}}],["7.3.0",{"_index":966,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":975,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":371,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["8.11.5",{"_index":971,"title":{},"body":{"dependencies.html":{}}}],["80",{"_index":954,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":249,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["96",{"_index":800,"title":{},"body":{"entities/User.html":{}}}],["actual",{"_index":600,"title":{},"body":{"controllers/PostsController.html":{}}}],["add",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["additional",{"_index":219,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Tag.html":{}}}],["against",{"_index":319,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["alice",{"_index":925,"title":{},"body":{"injectables/UsersService.html":{}}}],["alice@doe.com",{"_index":926,"title":{},"body":{"injectables/UsersService.html":{}}}],["allowing",{"_index":1039,"title":{},"body":{"index.html":{}}}],["along",{"_index":639,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{}}}],["always",{"_index":1165,"title":{},"body":{"index.html":{}}}],["amazing",{"_index":1085,"title":{},"body":{"index.html":{}}}],["api",{"_index":741,"title":{},"body":{"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["apioperation",{"_index":575,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":537,"title":{},"body":{"controllers/PostsController.html":{}}}],["apiparam",{"_index":578,"title":{},"body":{"controllers/PostsController.html":{}}}],["apiproperty",{"_index":291,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({description",{"_index":246,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({enum",{"_index":221,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiproperty({example",{"_index":269,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiproperty({type",{"_index":194,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apipropertyoptional",{"_index":292,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({description",{"_index":202,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({type",{"_index":213,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiquery",{"_index":579,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiresponse",{"_index":576,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":577,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags('posts",{"_index":583,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('users",{"_index":858,"title":{},"body":{"controllers/UsersController.html":{}}}],["app.controller",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appconfig",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":860,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["application'})@apiresponse({status",{"_index":830,"title":{},"body":{"controllers/UsersController.html":{}}}],["applications",{"_index":994,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":19,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":10,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["argument",{"_index":1161,"title":{},"body":{"index.html":{}}}],["array",{"_index":263,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["associated",{"_index":266,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{}}}],["async",{"_index":442,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["atomically",{"_index":666,"title":{},"body":{"injectables/PostsService.html":{}}}],["auth",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"index.html":{}}}],["auth.controller",{"_index":139,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/providers/auth",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{}}}],["authcontroller",{"_index":120,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authentication",{"_index":889,"title":{},"body":{"injectables/UsersService.html":{}}}],["authgenerate",{"_index":1170,"title":{},"body":{"index.html":{}}}],["authmodule",{"_index":30,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":198,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"index.html":{},"properties.html":{}}}],["authorid",{"_index":181,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["authservice",{"_index":124,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["autoloadentities",{"_index":84,"title":{},"body":{"modules/AppModule.html":{}}}],["automatically",{"_index":676,"title":{},"body":{"injectables/PostsService.html":{}}}],["available",{"_index":77,"title":{},"body":{"modules/AppModule.html":{}}}],["avoid",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{}}}],["avoided",{"_index":892,"title":{},"body":{"injectables/UsersService.html":{}}}],["await",{"_index":456,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["aws",{"_index":1029,"title":{},"body":{"index.html":{}}}],["backers",{"_index":1086,"title":{},"body":{"index.html":{}}}],["based",{"_index":783,"title":{},"body":{"injectables/TagsService.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["basic",{"_index":911,"title":{},"body":{"injectables/UsersService.html":{}}}],["basically",{"_index":1122,"title":{},"body":{"index.html":{}}}],["become",{"_index":647,"title":{},"body":{"injectables/PostsService.html":{}}}],["before",{"_index":793,"title":{},"body":{"injectables/TagsService.html":{}}}],["between",{"_index":599,"title":{},"body":{"controllers/PostsController.html":{}}}],["bidirectional",{"_index":501,"title":{},"body":{"entities/Post.html":{}}}],["bit",{"_index":1109,"title":{},"body":{"index.html":{}}}],["blog",{"_index":178,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{}}}],["blue",{"_index":353,"title":{},"body":{"classes/CreateTagDto.html":{},"entities/Tag.html":{}}}],["blue\"}'})@isoptional()@isjson",{"_index":343,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["board",{"_index":1078,"title":{},"body":{"index.html":{}}}],["body",{"_index":427,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["body(new",{"_index":869,"title":{},"body":{"controllers/UsersController.html":{}}}],["boolean",{"_index":155,"title":{},"body":{"injectables/AuthService.html":{}}}],["bootstrap",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["both",{"_index":665,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{}}}],["brief",{"_index":331,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["browse",{"_index":1173,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1171,"title":{},"body":{"modules.html":{}}}],["building",{"_index":989,"title":{},"body":{"index.html":{}}}],["c:\\users\\mfabouatmeh\\desktop\\codesdar\\more\\postgre\\data",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["cascade",{"_index":420,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{}}}],["cascade'})@joincolumn",{"_index":406,"title":{},"body":{"entities/MetaOption.html":{}}}],["cascades",{"_index":595,"title":{},"body":{"controllers/PostsController.html":{}}}],["catch",{"_index":685,"title":{},"body":{"injectables/PostsService.html":{}}}],["cause",{"_index":141,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["certain",{"_index":1125,"title":{},"body":{"index.html":{}}}],["changes",{"_index":1150,"title":{},"body":{"index.html":{}}}],["channel",{"_index":1053,"title":{},"body":{"index.html":{}}}],["character",{"_index":377,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["chars",{"_index":372,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["check",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["checks",{"_index":890,"title":{},"body":{"injectables/UsersService.html":{}}}],["circular",{"_index":142,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["class",{"_index":13,"title":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":171,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"overview.html":{}}}],["clean",{"_index":698,"title":{},"body":{"injectables/PostsService.html":{}}}],["clicks",{"_index":1038,"title":{},"body":{"index.html":{}}}],["cloud",{"_index":1024,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":134,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":135,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":136,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule",{"_index":434,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule_providers",{"_index":435,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":603,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":604,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":605,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule",{"_index":763,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_exports",{"_index":764,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_providers",{"_index":765,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":872,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":874,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":873,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cmd",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["code",{"_index":481,"title":{},"body":{"classes/PatchUserDto.html":{},"index.html":{}}}],["color",{"_index":342,"title":{},"body":{"classes/CreateTagDto.html":{},"entities/Tag.html":{}}}],["column",{"_index":411,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["column({type",{"_index":400,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["combo",{"_index":1159,"title":{},"body":{"index.html":{}}}],["come",{"_index":1044,"title":{},"body":{"index.html":{}}}],["comma",{"_index":1104,"title":{},"body":{"index.html":{}}}],["commit",{"_index":680,"title":{},"body":{"injectables/PostsService.html":{}}}],["compared",{"_index":1142,"title":{},"body":{"index.html":{}}}],["compo",{"_index":1118,"title":{},"body":{"index.html":{}}}],["compodoc",{"_index":1098,"title":{},"body":{"index.html":{}}}],["compodoc/compodoc",{"_index":958,"title":{},"body":{"dependencies.html":{}}}],["config",{"_index":920,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["config/app.config",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["config/database.config",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["config/profile.config",{"_index":880,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["configmodule",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["configmodule.forfeature(profileconfig",{"_index":883,"title":{},"body":{"modules/UsersModule.html":{}}}],["configmodule.forroot",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"injectables/UsersService.html":{}}}],["configservice.get('database.autoloadentities",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.host",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.name",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.pass",{"_index":99,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.port",{"_index":95,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.synchronize",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.user",{"_index":97,"title":{},"body":{"modules/AppModule.html":{}}}],["configtype",{"_index":898,"title":{},"body":{"injectables/UsersService.html":{}}}],["configurations",{"_index":1126,"title":{},"body":{"index.html":{}}}],["console.error(error",{"_index":692,"title":{},"body":{"injectables/PostsService.html":{}}}],["console.log(this.profileconfiguration",{"_index":921,"title":{},"body":{"injectables/UsersService.html":{}}}],["console.log(this.profileconfiguration.apikey",{"_index":922,"title":{},"body":{"injectables/UsersService.html":{}}}],["const",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":895,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(metaoptionrepository",{"_index":444,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["constructor(private",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{}}}],["constructor(tagsrepository",{"_index":773,"title":{},"body":{"injectables/TagsService.html":{}}}],["constructor(usersservice",{"_index":148,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["constructs",{"_index":900,"title":{},"body":{"injectables/UsersService.html":{}}}],["containing",{"_index":239,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["content",{"_index":182,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["context",{"_index":241,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"index.html":{}}}],["controller('auth",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('meta",{"_index":432,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["controller('posts",{"_index":582,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('tags",{"_index":755,"title":{},"body":{"controllers/TagsController.html":{}}}],["controller('users",{"_index":857,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["copy",{"_index":657,"title":{},"body":{"injectables/PostsService.html":{}}}],["corresponding",{"_index":617,"title":{},"body":{"modules/PostsModule.html":{}}}],["courses",{"_index":1059,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":935,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":443,"title":{},"body":{"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["create(@body",{"_index":651,"title":{},"body":{"injectables/PostsService.html":{},"controllers/TagsController.html":{}}}],["create(createmetaoptiondto",{"_index":448,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["create(createpostdto",{"_index":629,"title":{},"body":{"injectables/PostsService.html":{}}}],["create(createtagdto",{"_index":744,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["created",{"_index":540,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["createdate",{"_index":394,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["createdatecolumn",{"_index":396,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["createmetaoption",{"_index":423,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["createmetaoption(createpostmetaoptiondto",{"_index":424,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["createmetaoptiondto",{"_index":450,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["createpost",{"_index":532,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(@body",{"_index":589,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(createpostdto",{"_index":536,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpostdto",{"_index":170,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["createpostmetaoptiondto",{"_index":426,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["createpostmetaoptionsdto",{"_index":211,"title":{"classes/CreatePostMetaOptionsDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["creates",{"_index":316,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["createtagdto",{"_index":325,"title":{"classes/CreateTagDto.html":{}},"body":{"classes/CreateTagDto.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"coverage.html":{}}}],["createuser",{"_index":893,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuser(createuserdto",{"_index":902,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto",{"_index":355,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":930,"title":{},"body":{"injectables/UsersService.html":{}}}],["createusers",{"_index":820,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusers(createuserdto",{"_index":823,"title":{},"body":{"controllers/UsersController.html":{}}}],["creating",{"_index":176,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{}}}],["creation",{"_index":631,"title":{},"body":{"injectables/PostsService.html":{}}}],["crowded",{"_index":648,"title":{},"body":{"injectables/PostsService.html":{}}}],["crud",{"_index":887,"title":{},"body":{"injectables/UsersService.html":{}}}],["d",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["data",{"_index":328,"title":{},"body":{"classes/CreateTagDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["data'})@post",{"_index":545,"title":{},"body":{"controllers/PostsController.html":{}}}],["database",{"_index":102,"title":{},"body":{"modules/AppModule.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["databaseconfig",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["date",{"_index":230,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["db",{"_index":619,"title":{},"body":{"modules/PostsModule.html":{}}}],["declarations",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorator",{"_index":313,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["decorators",{"_index":193,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["deeper",{"_index":1055,"title":{},"body":{"index.html":{}}}],["default",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"entities/Post.html":{},"miscellaneous/variables.html":{}}}],["defaultvaluepipe",{"_index":850,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(1",{"_index":865,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(10",{"_index":863,"title":{},"body":{"controllers/UsersController.html":{}}}],["define",{"_index":1166,"title":{},"body":{"index.html":{}}}],["defined",{"_index":113,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":533,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["delete'})@apiresponse({status",{"_index":550,"title":{},"body":{"controllers/PostsController.html":{}}}],["delete('soft",{"_index":749,"title":{},"body":{"controllers/TagsController.html":{}}}],["delete(@query('id",{"_index":601,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{}}}],["delete(id",{"_index":547,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["deleted",{"_index":552,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["deletedat",{"_index":723,"title":{},"body":{"entities/Tag.html":{}}}],["deletedatecolumn",{"_index":725,"title":{},"body":{"entities/Tag.html":{}}}],["deletes",{"_index":548,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["deleting",{"_index":794,"title":{},"body":{"injectables/TagsService.html":{}}}],["deletion",{"_index":636,"title":{},"body":{"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["dependencies",{"_index":21,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{},"overview.html":{}}}],["dependency",{"_index":143,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{}}}],["deploy",{"_index":1013,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":1028,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":1020,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":1037,"title":{},"body":{"index.html":{}}}],["description",{"_index":174,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"properties.html":{}}}],["details",{"_index":632,"title":{},"body":{"injectables/PostsService.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["development",{"_index":1000,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":1065,"title":{},"body":{"index.html":{}}}],["differ",{"_index":811,"title":{},"body":{"entities/User.html":{}}}],["directory",{"_index":1157,"title":{},"body":{"index.html":{}}}],["disable",{"_index":844,"title":{},"body":{"controllers/UsersController.html":{}}}],["discord",{"_index":1052,"title":{},"body":{"index.html":{}}}],["dive",{"_index":1054,"title":{},"body":{"index.html":{}}}],["doc",{"_index":1101,"title":{},"body":{"index.html":{}}}],["doclet",{"_index":1100,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":936,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["doesnt",{"_index":646,"title":{},"body":{"injectables/PostsService.html":{}}}],["draft",{"_index":258,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["dto",{"_index":175,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["dto/create",{"_index":580,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["dto/patch",{"_index":581,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["dtos/create",{"_index":428,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/get",{"_index":852,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/patch",{"_index":854,"title":{},"body":{"controllers/UsersController.html":{}}}],["e.g",{"_index":228,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["e2e",{"_index":1008,"title":{},"body":{"index.html":{}}}],["each",{"_index":310,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["eager",{"_index":486,"title":{},"body":{"entities/Post.html":{}}}],["efficient",{"_index":990,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":1019,"title":{},"body":{"index.html":{}}}],["email",{"_index":158,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["enable",{"_index":1149,"title":{},"body":{"index.html":{}}}],["ensure",{"_index":1017,"title":{},"body":{"index.html":{}}}],["ensuring",{"_index":891,"title":{},"body":{"injectables/UsersService.html":{}}}],["enterprise",{"_index":1069,"title":{},"body":{"index.html":{}}}],["entire",{"_index":610,"title":{},"body":{"modules/PostsModule.html":{}}}],["entities",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"overview.html":{}}}],["entity",{"_index":391,"title":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"coverage.html":{}}}],["entries",{"_index":833,"title":{},"body":{"controllers/UsersController.html":{}}}],["enum",{"_index":297,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["enumerations",{"_index":978,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/post",{"_index":286,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["env",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["env.${env",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["error",{"_index":686,"title":{},"body":{"injectables/PostsService.html":{}}}],["error('post",{"_index":675,"title":{},"body":{"injectables/PostsService.html":{}}}],["error.message",{"_index":693,"title":{},"body":{"injectables/PostsService.html":{}}}],["eslint",{"_index":843,"title":{},"body":{"controllers/UsersController.html":{}}}],["eslint/no",{"_index":846,"title":{},"body":{"controllers/UsersController.html":{}}}],["etc",{"_index":513,"title":{},"body":{"entities/Post.html":{}}}],["everything",{"_index":681,"title":{},"body":{"injectables/PostsService.html":{}}}],["example",{"_index":199,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"entities/Tag.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["except",{"_index":465,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["exception",{"_index":931,"title":{},"body":{"injectables/UsersService.html":{}}}],["existing",{"_index":461,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["existinguser",{"_index":928,"title":{},"body":{"injectables/UsersService.html":{}}}],["exists",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TagsService.html":{}}}],["experience",{"_index":1057,"title":{},"body":{"index.html":{}}}],["explain",{"_index":1113,"title":{},"body":{"index.html":{}}}],["export",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":965,"title":{},"body":{"dependencies.html":{}}}],["extend",{"_index":479,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["extends",{"_index":462,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["failure",{"_index":691,"title":{},"body":{"injectables/PostsService.html":{}}}],["false",{"_index":90,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["fast",{"_index":1031,"title":{},"body":{"index.html":{}}}],["feature",{"_index":614,"title":{},"body":{"modules/PostsModule.html":{}}}],["featured",{"_index":207,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["featuredimage",{"_index":330,"title":{},"body":{"classes/CreateTagDto.html":{},"entities/Tag.html":{}}}],["featuredimageurl",{"_index":183,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["features",{"_index":1041,"title":{},"body":{"index.html":{}}}],["fetch",{"_index":527,"title":{},"body":{"entities/Post.html":{}}}],["fetched",{"_index":831,"title":{},"body":{"controllers/UsersController.html":{}}}],["fetches",{"_index":828,"title":{},"body":{"controllers/UsersController.html":{}}}],["few",{"_index":1033,"title":{},"body":{"index.html":{}}}],["fields",{"_index":464,"title":{},"body":{"classes/PatchPostDto.html":{},"injectables/PostsService.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{}}}],["filters",{"_index":906,"title":{},"body":{"injectables/UsersService.html":{}}}],["finally",{"_index":694,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{}}}],["find",{"_index":671,"title":{},"body":{"injectables/PostsService.html":{}}}],["findall",{"_index":623,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["findall(getuserparamdto",{"_index":904,"title":{},"body":{"injectables/UsersService.html":{}}}],["findall(userid",{"_index":637,"title":{},"body":{"injectables/PostsService.html":{}}}],["findmultipletags",{"_index":771,"title":{},"body":{"injectables/TagsService.html":{}}}],["findmultipletags(tags",{"_index":779,"title":{},"body":{"injectables/TagsService.html":{}}}],["findonebyid",{"_index":894,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyid(id",{"_index":912,"title":{},"body":{"injectables/UsersService.html":{}}}],["finds",{"_index":781,"title":{},"body":{"injectables/TagsService.html":{}}}],["first",{"_index":1116,"title":{},"body":{"index.html":{}}}],["firstname",{"_index":358,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["flag",{"_index":1139,"title":{},"body":{"index.html":{}}}],["flat",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TagsService.html":{},"index.html":{}}}],["focus",{"_index":1040,"title":{},"body":{"index.html":{}}}],["follow",{"_index":1072,"title":{},"body":{"index.html":{}}}],["forwardref",{"_index":138,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["found",{"_index":591,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["found'})@delete",{"_index":554,"title":{},"body":{"controllers/PostsController.html":{}}}],["found'})@patch",{"_index":567,"title":{},"body":{"controllers/PostsController.html":{}}}],["framework",{"_index":988,"title":{},"body":{"index.html":{}}}],["friendly",{"_index":511,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["full",{"_index":1068,"title":{},"body":{"index.html":{}}}],["function",{"_index":944,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":983,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":1036,"title":{},"body":{"index.html":{}}}],["generate",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/TagsService.html":{},"index.html":{}}}],["generated",{"_index":1144,"title":{},"body":{"index.html":{}}}],["generating",{"_index":1158,"title":{},"body":{"index.html":{}}}],["get('/:id",{"_index":859,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:id?')@apioperation({summary",{"_index":827,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:userid",{"_index":584,"title":{},"body":{"controllers/PostsController.html":{}}}],["get('/:userid?')@apioperation({summary",{"_index":558,"title":{},"body":{"controllers/PostsController.html":{}}}],["gethello",{"_index":112,"title":{},"body":{"injectables/AppService.html":{}}}],["getposts",{"_index":534,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(@param('userid",{"_index":586,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(userid",{"_index":557,"title":{},"body":{"controllers/PostsController.html":{}}}],["getting",{"_index":528,"title":{"index.html":{}},"body":{"entities/Post.html":{}}}],["getuserparamdto",{"_index":840,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getusers",{"_index":821,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(getuserparamdto",{"_index":825,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusersparamdto",{"_index":383,"title":{"classes/GetUsersParamDto.html":{}},"body":{"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["give",{"_index":1156,"title":{},"body":{"index.html":{}}}],["global",{"_index":867,"title":{},"body":{"controllers/UsersController.html":{}}}],["go",{"_index":1115,"title":{},"body":{"index.html":{}}}],["going",{"_index":1133,"title":{},"body":{"index.html":{}}}],["graph",{"_index":1062,"title":{},"body":{"index.html":{}}}],["grow",{"_index":1082,"title":{},"body":{"index.html":{}}}],["handle",{"_index":628,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["handling",{"_index":621,"title":{},"body":{"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["hands",{"_index":1056,"title":{},"body":{"index.html":{}}}],["handy",{"_index":1045,"title":{},"body":{"index.html":{}}}],["having",{"_index":1145,"title":{},"body":{"index.html":{}}}],["headers",{"_index":849,"title":{},"body":{"controllers/UsersController.html":{}}}],["hello",{"_index":118,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":1060,"title":{},"body":{"index.html":{}}}],["here",{"_index":1090,"title":{},"body":{"index.html":{}}}],["host",{"_index":100,"title":{},"body":{"modules/AppModule.html":{}}}],["http://localhost.com/images/image1.jpg",{"_index":305,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["http://localhost.com/images/image1.jpg'})@isoptional()@minlength(4)@maxlength(1024)@isurl",{"_index":209,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["http://localhost:3001/coverage.htmlit",{"_index":1103,"title":{},"body":{"index.html":{}}}],["https://example.com/images/tag",{"_index":337,"title":{},"body":{"classes/CreateTagDto.html":{},"entities/Tag.html":{}}}],["https://nestjs.com",{"_index":1094,"title":{},"body":{"index.html":{}}}],["https://orkhan.gitbook.io/typeorm/docs/decorator",{"_index":737,"title":{},"body":{"entities/Tag.html":{}}}],["https://schema.org",{"_index":242,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://schema.org\",\\r\\n",{"_index":303,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["hyphen",{"_index":1129,"title":{},"body":{"index.html":{}}}],["i'll",{"_index":1112,"title":{},"body":{"index.html":{}}}],["i'm",{"_index":1152,"title":{},"body":{"index.html":{}}}],["i.e",{"_index":1168,"title":{},"body":{"index.html":{}}}],["id",{"_index":197,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["id'})@apiquery({name",{"_index":549,"title":{},"body":{"controllers/PostsController.html":{}}}],["identifier",{"_index":498,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["ids",{"_index":265,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/TagsService.html":{}}}],["image",{"_index":208,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["image.jpg",{"_index":354,"title":{},"body":{"classes/CreateTagDto.html":{},"entities/Tag.html":{}}}],["image.jpg'})@isoptional()@isurl()@maxlength(1024",{"_index":338,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["import",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["important",{"_index":697,"title":{},"body":{"injectables/PostsService.html":{}}}],["imported",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["imports",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}}}],["in(tags",{"_index":791,"title":{},"body":{"injectables/TagsService.html":{}}}],["include",{"_index":373,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["incoming",{"_index":314,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["index",{"_index":110,"title":{"index.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["indicating",{"_index":635,"title":{},"body":{"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["information",{"_index":1022,"title":{},"body":{"index.html":{}}}],["infrastructure",{"_index":1042,"title":{},"body":{"index.html":{}}}],["inject",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["inject(forwardref",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["inject(profileconfig.key",{"_index":918,"title":{},"body":{"injectables/UsersService.html":{}}}],["injectable",{"_index":107,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":108,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injecting",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["injectrepository",{"_index":452,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(metaoption",{"_index":454,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{}}}],["injectrepository(post",{"_index":644,"title":{},"body":{"injectables/PostsService.html":{}}}],["injectrepository(tag",{"_index":787,"title":{},"body":{"injectables/TagsService.html":{}}}],["injectrepository(user",{"_index":917,"title":{},"body":{"injectables/UsersService.html":{}}}],["injects",{"_index":756,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["innovations",{"_index":352,"title":{},"body":{"classes/CreateTagDto.html":{},"entities/Tag.html":{}}}],["innovations'})@isoptional()@isstring",{"_index":335,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["inside",{"_index":618,"title":{},"body":{"modules/PostsModule.html":{}}}],["install",{"_index":1035,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":999,"title":{},"body":{"index.html":{}}}],["instance",{"_index":317,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{}}}],["instead",{"_index":678,"title":{},"body":{"injectables/PostsService.html":{}}}],["instructs",{"_index":1141,"title":{},"body":{"index.html":{}}}],["integer",{"_index":195,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["interact",{"_index":1063,"title":{},"body":{"index.html":{}}}],["interacting",{"_index":775,"title":{},"body":{"injectables/TagsService.html":{}}}],["interacts",{"_index":886,"title":{},"body":{"injectables/UsersService.html":{}}}],["invalid",{"_index":543,"title":{},"body":{"controllers/PostsController.html":{}}}],["isarray",{"_index":272,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isauth",{"_index":146,"title":{},"body":{"injectables/AuthService.html":{}}}],["isemail",{"_index":379,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isemail()@isnotempty()@maxlength(96",{"_index":360,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":273,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(poststatus",{"_index":301,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttype",{"_index":298,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isglobal",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["isint",{"_index":274,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{}}}],["isiso8601",{"_index":275,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isjson",{"_index":276,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{}}}],["isnotempty",{"_index":277,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchPostDto.html":{}}}],["isnotempty()@isjson",{"_index":322,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["isoptional",{"_index":278,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{}}}],["isoptional()@isjson",{"_index":244,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isstring",{"_index":279,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@maxlength(96)@minlength(8)@matches(/^(?=.*[a",{"_index":366,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":362,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isoptional()@minlength(3)@maxlength(96",{"_index":364,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isurl",{"_index":280,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["it's",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["items",{"_index":215,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["itself",{"_index":1107,"title":{},"body":{"index.html":{}}}],["job",{"_index":1075,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":1077,"title":{},"body":{"index.html":{}}}],["john",{"_index":923,"title":{},"body":{"injectables/UsersService.html":{}}}],["john@doe.com",{"_index":924,"title":{},"body":{"injectables/UsersService.html":{}}}],["join",{"_index":1088,"title":{},"body":{"index.html":{}}}],["joincolumn",{"_index":412,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["jointable",{"_index":520,"title":{},"body":{"entities/Post.html":{}}}],["json",{"_index":238,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["kamil",{"_index":1092,"title":{},"body":{"index.html":{}}}],["key",{"_index":612,"title":{},"body":{"modules/PostsModule.html":{},"index.html":{}}}],["large",{"_index":492,"title":{},"body":{"entities/Post.html":{}}}],["last",{"_index":736,"title":{},"body":{"entities/Tag.html":{}}}],["lastname",{"_index":359,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["learn",{"_index":1048,"title":{},"body":{"index.html":{}}}],["legend",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":494,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["lengthy",{"_index":1111,"title":{},"body":{"index.html":{}}}],["let's",{"_index":1147,"title":{},"body":{"index.html":{}}}],["letter",{"_index":375,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["letters",{"_index":347,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["license",{"_index":1097,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1080,"title":{},"body":{"index.html":{}}}],["limit",{"_index":826,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["linkedin",{"_index":1074,"title":{},"body":{"index.html":{}}}],["list",{"_index":563,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["little",{"_index":1108,"title":{},"body":{"index.html":{}}}],["load",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["loaded",{"_index":672,"title":{},"body":{"injectables/PostsService.html":{}}}],["localhost:3001",{"_index":1164,"title":{},"body":{"index.html":{}}}],["log",{"_index":690,"title":{},"body":{"injectables/PostsService.html":{}}}],["login",{"_index":147,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(email",{"_index":156,"title":{},"body":{"injectables/AuthService.html":{}}}],["looking",{"_index":1023,"title":{},"body":{"index.html":{}}}],["loop",{"_index":1071,"title":{},"body":{"index.html":{}}}],["lowercase",{"_index":251,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["main",{"_index":203,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["make",{"_index":856,"title":{},"body":{"controllers/UsersController.html":{}}}],["makes",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["making",{"_index":463,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["managing",{"_index":531,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["manually",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["many",{"_index":488,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"index.html":{}}}],["manytomany",{"_index":521,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["manytomany(undefined",{"_index":514,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["manytoone",{"_index":522,"title":{},"body":{"entities/Post.html":{}}}],["manytoone(undefined",{"_index":484,"title":{},"body":{"entities/Post.html":{}}}],["marking",{"_index":751,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["match",{"_index":817,"title":{},"body":{"entities/User.html":{}}}],["matches",{"_index":281,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["matches(/^(?=.*[a",{"_index":382,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(/^[a",{"_index":300,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["matching",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["mau",{"_index":1026,"title":{},"body":{"index.html":{}}}],["maximum",{"_index":908,"title":{},"body":{"injectables/UsersService.html":{}}}],["maxlength",{"_index":282,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["maxlength(1024",{"_index":306,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(256",{"_index":299,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(512",{"_index":296,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(96",{"_index":380,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["meaning",{"_index":658,"title":{},"body":{"injectables/PostsService.html":{}}}],["message",{"_index":250,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["meta",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["metadata",{"_index":240,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"entities/Tag.html":{},"dependencies.html":{}}}],["metaoption",{"_index":392,"title":{"entities/MetaOption.html":{}},"body":{"entities/MetaOption.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["metaoptionrepository",{"_index":447,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["metaoptions",{"_index":184,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{}}}],["metaoptions.post",{"_index":499,"title":{},"body":{"entities/Post.html":{}}}],["metaoptionscontroller",{"_index":421,"title":{"controllers/MetaOptionsController.html":{}},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"coverage.html":{}}}],["metaoptionsmodule",{"_index":31,"title":{"modules/MetaOptionsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules.html":{},"overview.html":{}}}],["metaoptionsrepository",{"_index":453,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{}}}],["metaoptionsservice",{"_index":429,"title":{"injectables/MetaOptionsService.html":{}},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{},"overview.html":{}}}],["metavalue",{"_index":311,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"entities/MetaOption.html":{}}}],["method",{"_index":594,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["methods",{"_index":111,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["migrations",{"_index":93,"title":{},"body":{"modules/AppModule.html":{}}}],["minimum",{"_index":370,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength",{"_index":283,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":351,"title":{},"body":{"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(4",{"_index":295,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["minlength(8",{"_index":381,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":977,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1079,"title":{},"body":{"index.html":{}}}],["mode",{"_index":1002,"title":{},"body":{"index.html":{}}}],["module",{"_index":18,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["modules",{"_index":20,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":1021,"title":{},"body":{"index.html":{}}}],["multiple",{"_index":782,"title":{},"body":{"injectables/TagsService.html":{},"controllers/UsersController.html":{}}}],["mysql",{"_index":419,"title":{},"body":{"entities/MetaOption.html":{}}}],["myśliwiec",{"_index":1093,"title":{},"body":{"index.html":{}}}],["name",{"_index":152,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateTagDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["necessary",{"_index":901,"title":{},"body":{"injectables/UsersService.html":{}}}],["need",{"_index":1066,"title":{},"body":{"index.html":{}}}],["needed",{"_index":1155,"title":{},"body":{"index.html":{}}}],["needing",{"_index":416,"title":{},"body":{"entities/MetaOption.html":{}}}],["needs",{"_index":467,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["nest",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/TagsService.html":{},"index.html":{}}}],["nestframework",{"_index":1096,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":1014,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":962,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":476,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":964,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":293,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["never",{"_index":881,"title":{},"body":{"modules/UsersModule.html":{}}}],["new",{"_index":177,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{}}}],["newly",{"_index":633,"title":{},"body":{"injectables/PostsService.html":{}}}],["newuser",{"_index":932,"title":{},"body":{"injectables/UsersService.html":{}}}],["next",{"_index":1138,"title":{},"body":{"index.html":{}}}],["node.js",{"_index":987,"title":{},"body":{"index.html":{}}}],["now",{"_index":1106,"title":{},"body":{"index.html":{}}}],["npcs",{"_index":1117,"title":{},"body":{"index.html":{}}}],["npm",{"_index":998,"title":{},"body":{"index.html":{}}}],["npx",{"_index":104,"title":{},"body":{"modules/AppModule.html":{},"injectables/TagsService.html":{},"index.html":{}}}],["null",{"_index":212,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["nullable",{"_index":401,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["number",{"_index":192,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["object",{"_index":214,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["object(unavailable",{"_index":418,"title":{},"body":{"entities/MetaOption.html":{}}}],["objects",{"_index":910,"title":{},"body":{"injectables/UsersService.html":{}}}],["occurs",{"_index":687,"title":{},"body":{"injectables/PostsService.html":{}}}],["offer",{"_index":1076,"title":{},"body":{"index.html":{}}}],["official",{"_index":1027,"title":{},"body":{"index.html":{}}}],["once",{"_index":1136,"title":{},"body":{"index.html":{}}}],["ondelete",{"_index":405,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["one",{"_index":374,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/Post.html":{},"index.html":{}}}],["onetomany",{"_index":809,"title":{},"body":{"entities/User.html":{}}}],["onetomany(undefined",{"_index":806,"title":{},"body":{"entities/User.html":{}}}],["onetoone",{"_index":413,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["onetoone(undefined",{"_index":403,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["open",{"_index":1081,"title":{},"body":{"index.html":{}}}],["operations",{"_index":622,"title":{},"body":{"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["operator",{"_index":655,"title":{},"body":{"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["option.entity",{"_index":438,"title":{},"body":{"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["option.entity.ts",{"_index":393,"title":{},"body":{"entities/MetaOption.html":{},"coverage.html":{}}}],["option.entity.ts:15",{"_index":399,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:21",{"_index":402,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:23",{"_index":397,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:25",{"_index":409,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:31",{"_index":407,"title":{},"body":{"entities/MetaOption.html":{}}}],["optional",{"_index":153,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["optional)'})@apiresponse({status",{"_index":562,"title":{},"body":{"controllers/PostsController.html":{}}}],["options",{"_index":220,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"controllers/MetaOptionsController.html":{},"entities/Post.html":{},"injectables/PostsService.html":{}}}],["options.controller",{"_index":437,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["options.controller.ts",{"_index":422,"title":{},"body":{"controllers/MetaOptionsController.html":{},"coverage.html":{}}}],["options.controller.ts:9",{"_index":425,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["options.dto",{"_index":290,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{}}}],["options.dto.ts",{"_index":321,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["options.dto.ts:14",{"_index":323,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["options.module",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["options.module.ts",{"_index":436,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["options.service",{"_index":431,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{}}}],["options.service.ts",{"_index":441,"title":{},"body":{"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["options.service.ts:17",{"_index":449,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["options.service.ts:8",{"_index":446,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["options/dtos/create",{"_index":289,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["options/meta",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["options/providers/meta",{"_index":440,"title":{},"body":{"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["order",{"_index":1119,"title":{},"body":{"index.html":{}}}],["out",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["over",{"_index":1105,"title":{},"body":{"index.html":{}}}],["overview",{"_index":1174,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":957,"title":{"dependencies.html":{},"properties.html":{}},"body":{"index.html":{}}}],["page",{"_index":224,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["pagination",{"_index":909,"title":{},"body":{"injectables/UsersService.html":{}}}],["param",{"_index":569,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param.dto",{"_index":853,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param.dto.ts",{"_index":386,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["param.dto.ts:13",{"_index":389,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["parameters",{"_index":151,"title":{},"body":{"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["parseintpipe",{"_index":570,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["part",{"_index":1067,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":471,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["partialtype(createpostdto",{"_index":466,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["partialtype(createuserdto",{"_index":475,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["particular",{"_index":1135,"title":{},"body":{"index.html":{}}}],["parts",{"_index":1114,"title":{},"body":{"index.html":{}}}],["pass",{"_index":1160,"title":{},"body":{"index.html":{}}}],["passed",{"_index":659,"title":{},"body":{"injectables/PostsService.html":{}}}],["password",{"_index":98,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["patch",{"_index":571,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["patchpostdto",{"_index":458,"title":{"classes/PatchPostDto.html":{}},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["patchpostdto.content",{"_index":708,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.featuredimageurl",{"_index":716,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.id",{"_index":704,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.posttype",{"_index":712,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.publishon",{"_index":718,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.slug",{"_index":714,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.status",{"_index":710,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.title",{"_index":706,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchuser",{"_index":822,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(@body",{"_index":871,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(patchuserdto",{"_index":841,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuserdto",{"_index":473,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["path",{"_index":1127,"title":{},"body":{"index.html":{}}}],["per",{"_index":835,"title":{},"body":{"controllers/UsersController.html":{}}}],["perform",{"_index":92,"title":{},"body":{"modules/AppModule.html":{},"injectables/UsersService.html":{}}}],["person",{"_index":243,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["person\"\\r\\n",{"_index":304,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["pg",{"_index":970,"title":{},"body":{"dependencies.html":{}}}],["pg_ctl",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["pick",{"_index":1134,"title":{},"body":{"index.html":{}}}],["platform",{"_index":1025,"title":{},"body":{"index.html":{}}}],["please",{"_index":1051,"title":{},"body":{"index.html":{}}}],["port",{"_index":94,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["position",{"_index":837,"title":{},"body":{"controllers/UsersController.html":{}}}],["possible",{"_index":222,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["post",{"_index":179,"title":{"entities/Post.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["post'})@apiresponse({status",{"_index":538,"title":{},"body":{"controllers/PostsController.html":{}}}],["post'})@isstring()@isnotempty()@maxlength(256)@minlength(4)@matches(/^[a",{"_index":247,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post'})@isstring()@minlength(4)@maxlength(512)@isnotempty",{"_index":270,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.'})@isstring()@isoptional",{"_index":204,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.author",{"_index":807,"title":{},"body":{"entities/User.html":{}}}],["post.content",{"_index":707,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.dto",{"_index":472,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["post.dto.ts",{"_index":173,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"coverage.html":{}}}],["post.dto.ts:112",{"_index":210,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:123",{"_index":235,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:135",{"_index":268,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:161",{"_index":218,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:174",{"_index":201,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:19",{"_index":470,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["post.dto.ts:37",{"_index":271,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:48",{"_index":227,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:65",{"_index":254,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:76",{"_index":262,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:87",{"_index":205,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:99",{"_index":245,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.entity",{"_index":608,"title":{},"body":{"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["post.featuredimageurl",{"_index":715,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.metaoptions",{"_index":404,"title":{},"body":{"entities/MetaOption.html":{}}}],["post.posttype",{"_index":711,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.publishon",{"_index":717,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.slug",{"_index":713,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.status",{"_index":709,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.tags",{"_index":719,"title":{},"body":{"injectables/PostsService.html":{},"entities/Tag.html":{}}}],["post.title",{"_index":705,"title":{},"body":{"injectables/PostsService.html":{}}}],["postgres",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["postgresql",{"_index":815,"title":{},"body":{"entities/User.html":{}}}],["posts",{"_index":332,"title":{},"body":{"classes/CreateTagDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"index.html":{}}}],["posts.controller",{"_index":607,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts/posts.module",{"_index":42,"title":{},"body":{"modules/AppModule.html":{}}}],["postscontroller",{"_index":529,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":32,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsrepository",{"_index":625,"title":{},"body":{"injectables/PostsService.html":{}}}],["postsservice",{"_index":573,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["poststatus",{"_index":257,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["poststatus.draft",{"_index":526,"title":{},"body":{"entities/Post.html":{}}}],["posttype",{"_index":185,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["posttype.post",{"_index":525,"title":{},"body":{"entities/Post.html":{}}}],["prefix",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["prettier",{"_index":105,"title":{},"body":{"modules/AppModule.html":{}}}],["primarygeneratedcolumn",{"_index":398,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["private",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["proceed",{"_index":796,"title":{},"body":{"injectables/TagsService.html":{}}}],["process.env.node_env",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["production",{"_index":1004,"title":{},"body":{"index.html":{}}}],["profileconfig",{"_index":879,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["profileconfiguration",{"_index":897,"title":{},"body":{"injectables/UsersService.html":{}}}],["progressive",{"_index":986,"title":{},"body":{"index.html":{}}}],["project",{"_index":996,"title":{},"body":{"index.html":{}}}],["promise",{"_index":662,"title":{},"body":{"injectables/PostsService.html":{}}}],["properties",{"_index":180,"title":{"properties.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"properties.html":{}}}],["provide",{"_index":1124,"title":{},"body":{"index.html":{}}}],["provided",{"_index":1137,"title":{},"body":{"index.html":{}}}],["providers",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers/auth.service",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["providers/meta",{"_index":430,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{}}}],["providers/posts.service",{"_index":574,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["providers/tags.service",{"_index":753,"title":{},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{}}}],["providers/users.service",{"_index":855,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["pts",{"_index":1128,"title":{},"body":{"index.html":{}}}],["public",{"_index":145,"title":{},"body":{"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["publication",{"_index":236,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["published",{"_index":231,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["published''})@isenum(poststatus)@isnotempty",{"_index":261,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["publishon",{"_index":186,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["query",{"_index":572,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["query'})@apiquery({name",{"_index":832,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('limit",{"_index":862,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('page",{"_index":864,"title":{},"body":{"controllers/UsersController.html":{}}}],["queryrunner",{"_index":667,"title":{},"body":{"injectables/PostsService.html":{}}}],["queryrunner.committransaction",{"_index":683,"title":{},"body":{"injectables/PostsService.html":{}}}],["queryrunner.manager.delete(post",{"_index":677,"title":{},"body":{"injectables/PostsService.html":{}}}],["queryrunner.release",{"_index":700,"title":{},"body":{"injectables/PostsService.html":{}}}],["queryrunner.rollbacktransaction",{"_index":689,"title":{},"body":{"injectables/PostsService.html":{}}}],["queryrunner.starttransaction",{"_index":669,"title":{},"body":{"injectables/PostsService.html":{}}}],["questions",{"_index":1049,"title":{},"body":{"index.html":{}}}],["r\\n",{"_index":302,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["rate",{"_index":1120,"title":{},"body":{"index.html":{}}}],["read",{"_index":1089,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["ready",{"_index":1012,"title":{},"body":{"index.html":{}}}],["real",{"_index":1064,"title":{},"body":{"index.html":{}}}],["reference",{"_index":738,"title":{},"body":{"entities/Tag.html":{}}}],["reflect",{"_index":972,"title":{},"body":{"dependencies.html":{}}}],["regenerate",{"_index":1154,"title":{},"body":{"index.html":{}}}],["registered",{"_index":829,"title":{},"body":{"controllers/UsersController.html":{}}}],["related",{"_index":333,"title":{},"body":{"classes/CreateTagDto.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["relations",{"_index":650,"title":{},"body":{"injectables/PostsService.html":{}}}],["relationship",{"_index":489,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["relationships",{"_index":598,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"index.html":{}}}],["release",{"_index":695,"title":{},"body":{"injectables/PostsService.html":{}}}],["relevant",{"_index":597,"title":{},"body":{"controllers/PostsController.html":{}}}],["remove",{"_index":679,"title":{},"body":{"injectables/PostsService.html":{}}}],["removes",{"_index":596,"title":{},"body":{"controllers/PostsController.html":{}}}],["removing",{"_index":752,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["repeat",{"_index":480,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["repositories",{"_index":645,"title":{},"body":{"injectables/PostsService.html":{}}}],["repository",{"_index":445,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["representing",{"_index":722,"title":{},"body":{"entities/Tag.html":{}}}],["represents",{"_index":483,"title":{},"body":{"entities/Post.html":{}}}],["req",{"_index":315,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["request",{"_index":544,"title":{},"body":{"controllers/PostsController.html":{}}}],["requesting",{"_index":640,"title":{},"body":{"injectables/PostsService.html":{}}}],["requests",{"_index":742,"title":{},"body":{"controllers/TagsController.html":{}}}],["required",{"_index":196,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["requiring",{"_index":1032,"title":{},"body":{"index.html":{}}}],["reset",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resources",{"_index":1043,"title":{},"body":{"index.html":{}}}],["response",{"_index":684,"title":{},"body":{"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["responsible",{"_index":615,"title":{},"body":{"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{}}}],["results",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["retrieval",{"_index":907,"title":{},"body":{"injectables/UsersService.html":{}}}],["retrieve",{"_index":915,"title":{},"body":{"injectables/UsersService.html":{}}}],["retrieves",{"_index":559,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["return",{"_index":117,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returned",{"_index":834,"title":{},"body":{"controllers/UsersController.html":{}}}],["returns",{"_index":115,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["review",{"_index":260,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["rollback",{"_index":688,"title":{},"body":{"injectables/PostsService.html":{}}}],["root",{"_index":1131,"title":{},"body":{"index.html":{}}}],["route",{"_index":760,"title":{},"body":{"controllers/TagsController.html":{}}}],["run",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["runner",{"_index":696,"title":{},"body":{"injectables/PostsService.html":{}}}],["runs",{"_index":1018,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":974,"title":{},"body":{"dependencies.html":{}}}],["s",{"_index":1140,"title":{},"body":{"index.html":{}}}],["sample_token",{"_index":169,"title":{},"body":{"injectables/AuthService.html":{}}}],["save",{"_index":661,"title":{},"body":{"injectables/PostsService.html":{}}}],["saying",{"_index":1162,"title":{},"body":{"index.html":{}}}],["scalable",{"_index":991,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":259,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["schema",{"_index":187,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["script",{"_index":1099,"title":{},"body":{"index.html":{}}}],["see",{"_index":1102,"title":{},"body":{"index.html":{}}}],["seen",{"_index":1163,"title":{},"body":{"index.html":{}}}],["separator",{"_index":348,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["serialize",{"_index":417,"title":{},"body":{"entities/MetaOption.html":{}}}],["serialized",{"_index":237,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["series",{"_index":229,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["series''})@isenum(posttype)@isnotempty",{"_index":226,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["serve",{"_index":1143,"title":{},"body":{"index.html":{}}}],["server",{"_index":992,"title":{},"body":{"index.html":{}}}],["service",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["set",{"_index":89,"title":{},"body":{"modules/AppModule.html":{}}}],["setting",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["setup",{"_index":997,"title":{},"body":{"index.html":{}}}],["shallow",{"_index":656,"title":{},"body":{"injectables/PostsService.html":{}}}],["side",{"_index":993,"title":{},"body":{"index.html":{}}}],["sidebarenabled",{"_index":312,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{}}}],["sides",{"_index":1167,"title":{},"body":{"index.html":{}}}],["simple",{"_index":1034,"title":{},"body":{"index.html":{}}}],["single",{"_index":914,"title":{},"body":{"injectables/UsersService.html":{}}}],["slash",{"_index":1121,"title":{},"body":{"index.html":{}}}],["slug",{"_index":188,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["soft",{"_index":727,"title":{},"body":{"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["softdelete",{"_index":743,"title":{},"body":{"controllers/TagsController.html":{}}}],["softdelete(@query('id",{"_index":759,"title":{},"body":{"controllers/TagsController.html":{}}}],["softdelete(id",{"_index":748,"title":{},"body":{"controllers/TagsController.html":{}}}],["softremove",{"_index":772,"title":{},"body":{"injectables/TagsService.html":{}}}],["softremove(id",{"_index":784,"title":{},"body":{"injectables/TagsService.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["spaces",{"_index":253,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["spec",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/TagsService.html":{},"index.html":{}}}],["specgenerate",{"_index":1169,"title":{},"body":{"index.html":{}}}],["special",{"_index":376,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["specific",{"_index":387,"title":{},"body":{"classes/GetUsersParamDto.html":{},"controllers/PostsController.html":{},"index.html":{}}}],["sponsors",{"_index":1084,"title":{},"body":{"index.html":{}}}],["spread",{"_index":654,"title":{},"body":{"injectables/PostsService.html":{}}}],["sql",{"_index":814,"title":{},"body":{"entities/User.html":{}}}],["src/.../app.module.ts",{"_index":1182,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":984,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../post",{"_index":979,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app.service.ts",{"_index":109,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":114,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.module",{"_index":877,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":137,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/providers/auth.service",{"_index":916,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/auth/providers/auth.service.ts",{"_index":144,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts:12",{"_index":157,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:21",{"_index":154,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:5",{"_index":150,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/main.ts",{"_index":943,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/meta",{"_index":320,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/dto/create",{"_index":172,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["src/posts/dto/patch",{"_index":459,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["src/posts/enums/post",{"_index":982,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/post.entity",{"_index":410,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["src/posts/post.entity.ts",{"_index":482,"title":{},"body":{"entities/Post.html":{},"coverage.html":{}}}],["src/posts/post.entity.ts:100",{"_index":500,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:106",{"_index":487,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:26",{"_index":497,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:32",{"_index":519,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:43",{"_index":503,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:49",{"_index":510,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:60",{"_index":512,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:66",{"_index":491,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:72",{"_index":507,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:78",{"_index":496,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:84",{"_index":505,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:91",{"_index":517,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/posts.controller.ts",{"_index":530,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:48",{"_index":564,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:61",{"_index":546,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:74",{"_index":568,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:94",{"_index":555,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module.ts",{"_index":606,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/providers/posts.service.ts",{"_index":620,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/providers/posts.service.ts:116",{"_index":642,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:142",{"_index":634,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:15",{"_index":627,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:40",{"_index":638,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:58",{"_index":630,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/tags/dtos/create",{"_index":326,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["src/tags/providers/tags.service",{"_index":643,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/tags/providers/tags.service.ts",{"_index":770,"title":{},"body":{"injectables/TagsService.html":{},"coverage.html":{}}}],["src/tags/providers/tags.service.ts:13",{"_index":774,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:28",{"_index":777,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:38",{"_index":780,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:53",{"_index":778,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:74",{"_index":785,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tag.entity",{"_index":524,"title":{},"body":{"entities/Post.html":{}}}],["src/tags/tag.entity.ts",{"_index":721,"title":{},"body":{"entities/Tag.html":{},"coverage.html":{}}}],["src/tags/tag.entity.ts:103",{"_index":726,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:21",{"_index":730,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:33",{"_index":731,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:45",{"_index":734,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:55",{"_index":728,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:65",{"_index":733,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:76",{"_index":729,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:84",{"_index":732,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:91",{"_index":724,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:97",{"_index":735,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tags.controller.ts",{"_index":740,"title":{},"body":{"controllers/TagsController.html":{},"coverage.html":{}}}],["src/tags/tags.controller.ts:29",{"_index":745,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.controller.ts:39",{"_index":746,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.controller.ts:49",{"_index":750,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.module",{"_index":609,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/tags/tags.module.ts",{"_index":766,"title":{},"body":{"modules/TagsModule.html":{}}}],["src/users/dtos/create",{"_index":356,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dtos/get",{"_index":384,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["src/users/dtos/patch",{"_index":474,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["src/users/providers/users.service",{"_index":159,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["src/users/providers/users.service.ts",{"_index":884,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/providers/users.service.ts:19",{"_index":899,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:55",{"_index":905,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:82",{"_index":913,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:87",{"_index":903,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/user.entity",{"_index":523,"title":{},"body":{"entities/Post.html":{}}}],["src/users/user.entity.ts",{"_index":799,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/user.entity.ts:15",{"_index":802,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:21",{"_index":804,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:28",{"_index":801,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:34",{"_index":805,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:38",{"_index":808,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:9",{"_index":803,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.controller.ts",{"_index":819,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:53",{"_index":839,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:62",{"_index":824,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:72",{"_index":842,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":140,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostsModule.html":{}}}],["src/users/users.module.ts",{"_index":875,"title":{},"body":{"modules/UsersModule.html":{}}}],["start",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"injectables/PostsService.html":{},"index.html":{}}}],["start:dev",{"_index":1003,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":1005,"title":{},"body":{"index.html":{}}}],["started",{"_index":985,"title":{"index.html":{}},"body":{}}],["starter",{"_index":995,"title":{},"body":{"index.html":{}}}],["statements",{"_index":937,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":189,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["status.enum",{"_index":288,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["status.enum.ts",{"_index":980,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["stay",{"_index":1070,"title":{},"body":{"index.html":{}}}],["steps",{"_index":1015,"title":{},"body":{"index.html":{}}}],["story",{"_index":225,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["straightforward",{"_index":1030,"title":{},"body":{"index.html":{}}}],["string",{"_index":116,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["structured",{"_index":508,"title":{},"body":{"entities/Post.html":{}}}],["success",{"_index":556,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["successful",{"_index":682,"title":{},"body":{"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["successfully",{"_index":588,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["successfully'})@apiresponse({status",{"_index":541,"title":{},"body":{"controllers/PostsController.html":{}}}],["summary",{"_index":585,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["support",{"_index":1050,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":1172,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["table",{"_index":885,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["tables",{"_index":616,"title":{},"body":{"modules/PostsModule.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":956,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":264,"title":{"entities/Tag.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"coverage.html":{}}}],["tag.dto",{"_index":754,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["tag.dto.ts",{"_index":327,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["tag.dto.ts:30",{"_index":341,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:48",{"_index":350,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:61",{"_index":336,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:74",{"_index":344,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:88",{"_index":339,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.entity",{"_index":768,"title":{},"body":{"modules/TagsModule.html":{},"injectables/TagsService.html":{}}}],["tag.posts",{"_index":515,"title":{},"body":{"entities/Post.html":{}}}],["tags",{"_index":190,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"index.html":{}}}],["tags.controller",{"_index":767,"title":{},"body":{"modules/TagsModule.html":{}}}],["tags/providers/tags",{"_index":786,"title":{},"body":{"injectables/TagsService.html":{},"index.html":{}}}],["tags/soft",{"_index":761,"title":{},"body":{"controllers/TagsController.html":{}}}],["tags/tags.module",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["tagscontroller",{"_index":739,"title":{"controllers/TagsController.html":{}},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{},"coverage.html":{}}}],["tagsmodule",{"_index":33,"title":{"modules/TagsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules.html":{},"overview.html":{}}}],["tagsrepository",{"_index":776,"title":{},"body":{"injectables/TagsService.html":{}}}],["tagsservice",{"_index":626,"title":{"injectables/TagsService.html":{}},"body":{"injectables/PostsService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"coverage.html":{},"overview.html":{}}}],["take",{"_index":1016,"title":{},"body":{"index.html":{}}}],["technology",{"_index":334,"title":{},"body":{"classes/CreateTagDto.html":{},"entities/Tag.html":{}}}],["technology'})@isstring()@isnotempty()@matches(/^[a",{"_index":346,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["technology'})@isstring()@minlength(3)@isnotempty()@maxlength(256",{"_index":340,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["test",{"_index":919,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["test:covdeployment",{"_index":1010,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1009,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1006,"title":{},"body":{"index.html":{}}}],["text",{"_index":490,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["thanks",{"_index":1083,"title":{},"body":{"index.html":{}}}],["this.metaoptionrepository.create(createmetaoptiondto",{"_index":455,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionrepository.save(metaoption",{"_index":457,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionsservice.create(createpostmetaoptiondto",{"_index":433,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["this.postsrepository.create",{"_index":660,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.delete(id",{"_index":720,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.find",{"_index":649,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.findone",{"_index":673,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.findoneby",{"_index":703,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.manager.connection.createqueryrunner",{"_index":668,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.save(post",{"_index":663,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsservice.create(createpostdto",{"_index":590,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.delete(id",{"_index":602,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.findall(userid",{"_index":587,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.update(patchpostdto",{"_index":593,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.tagsrepository.create(createtagdto",{"_index":788,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.delete(id",{"_index":797,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.find",{"_index":790,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.findone",{"_index":795,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.save(tag",{"_index":789,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.softdelete(id",{"_index":798,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsservice.create(createtagdto",{"_index":757,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.tagsservice.delete(id",{"_index":758,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.tagsservice.findmultipletags(createpostdto.tags",{"_index":653,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.tagsservice.findmultipletags(patchpostdto.tags",{"_index":702,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.tagsservice.softremove(id",{"_index":762,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.usersrepository.create(createuserdto",{"_index":933,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findone",{"_index":929,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findoneby",{"_index":927,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.save(newuser",{"_index":934,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.createuser(createuserdto",{"_index":870,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall(getuserparamdto",{"_index":866,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findonebyid(1234",{"_index":167,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findonebyid(createpostdto.authorid",{"_index":652,"title":{},"body":{"injectables/PostsService.html":{}}}],["throw",{"_index":674,"title":{},"body":{"injectables/PostsService.html":{}}}],["time",{"_index":506,"title":{},"body":{"entities/Post.html":{},"index.html":{}}}],["timestamp",{"_index":504,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["title",{"_index":191,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["token",{"_index":168,"title":{},"body":{"injectables/AuthService.html":{}}}],["touch",{"_index":1091,"title":{},"body":{"index.html":{}}}],["transaction",{"_index":664,"title":{},"body":{"injectables/PostsService.html":{}}}],["transfer",{"_index":329,"title":{},"body":{"classes/CreateTagDto.html":{},"injectables/TagsService.html":{}}}],["transformer",{"_index":294,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"dependencies.html":{}}}],["triggers",{"_index":1123,"title":{},"body":{"index.html":{}}}],["true",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"entities/User.html":{}}}],["true})@jointable",{"_index":516,"title":{},"body":{"entities/Post.html":{}}}],["true})@type(undefined",{"_index":217,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["try",{"_index":670,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{}}}],["tsconfig.json",{"_index":1132,"title":{},"body":{"index.html":{}}}],["tts",{"_index":1130,"title":{},"body":{"index.html":{}}}],["twitter",{"_index":1095,"title":{},"body":{"index.html":{}}}],["type",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["type.enum",{"_index":287,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["type.enum.ts",{"_index":981,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["typees",{"_index":810,"title":{},"body":{"entities/User.html":{}}}],["typeorm",{"_index":414,"title":{},"body":{"entities/MetaOption.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([metaoption",{"_index":439,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["typeormmodule.forfeature([post",{"_index":613,"title":{},"body":{"modules/PostsModule.html":{}}}],["typeormmodule.forfeature([tag",{"_index":769,"title":{},"body":{"modules/TagsModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":882,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":477,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":845,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["undefined",{"_index":502,"title":{},"body":{"entities/Post.html":{}}}],["undefined})@isarray()@isoptional()@isint({each",{"_index":267,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["undefined})@isoptional()@validatenested({each",{"_index":216,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["unique",{"_index":345,"title":{},"body":{"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["unit",{"_index":1007,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":451,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["unlicensed",{"_index":1180,"title":{},"body":{"properties.html":{}}}],["unused",{"_index":847,"title":{},"body":{"controllers/UsersController.html":{}}}],["up",{"_index":699,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{}}}],["update",{"_index":624,"title":{},"body":{"injectables/PostsService.html":{}}}],["update(@body",{"_index":701,"title":{},"body":{"injectables/PostsService.html":{}}}],["update(patchpostdto",{"_index":641,"title":{},"body":{"injectables/PostsService.html":{}}}],["updated",{"_index":468,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{}}}],["updatedate",{"_index":395,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["updatedatecolumn",{"_index":408,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["updatepost",{"_index":535,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(@body",{"_index":592,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(patchpostdto",{"_index":565,"title":{},"body":{"controllers/PostsController.html":{}}}],["updates",{"_index":566,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"index.html":{}}}],["updating",{"_index":460,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["url",{"_index":206,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["url\"'})@maxlength(512",{"_index":349,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["urls",{"_index":256,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["use",{"_index":252,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["used",{"_index":255,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["usefactory",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["user",{"_index":83,"title":{"entities/User.html":{}},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["user'})@apiparam({name",{"_index":560,"title":{},"body":{"controllers/PostsController.html":{}}}],["user.dto",{"_index":478,"title":{},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":357,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:15",{"_index":363,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:21",{"_index":365,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:26",{"_index":361,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:35",{"_index":378,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.entity",{"_index":878,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["user.posts",{"_index":485,"title":{},"body":{"entities/Post.html":{}}}],["userid",{"_index":561,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["username",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["users",{"_index":385,"title":{},"body":{"classes/GetUsersParamDto.html":{},"modules/PostsModule.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["users.controller",{"_index":876,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/users.module",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":818,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":34,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":896,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersservice",{"_index":149,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["uses",{"_index":888,"title":{},"body":{"injectables/UsersService.html":{}}}],["using",{"_index":813,"title":{},"body":{"entities/User.html":{},"index.html":{}}}],["validated",{"_index":318,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validatenested",{"_index":284,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validation",{"_index":868,"title":{},"body":{"controllers/UsersController.html":{}}}],["validationpipe",{"_index":851,"title":{},"body":{"controllers/UsersController.html":{}}}],["validator",{"_index":285,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"dependencies.html":{}}}],["value",{"_index":324,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":223,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["varchar",{"_index":493,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["variable",{"_index":940,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1181,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["vars",{"_index":848,"title":{},"body":{"controllers/UsersController.html":{}}}],["verbose",{"_index":1110,"title":{},"body":{"index.html":{}}}],["version",{"_index":1178,"title":{},"body":{"properties.html":{}}}],["video",{"_index":1058,"title":{},"body":{"index.html":{}}}],["view",{"_index":611,"title":{},"body":{"modules/PostsModule.html":{}}}],["visit",{"_index":1047,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":1061,"title":{},"body":{"index.html":{}}}],["want",{"_index":838,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["watch",{"_index":1001,"title":{},"body":{"index.html":{}}}],["we're",{"_index":812,"title":{},"body":{"entities/User.html":{}}}],["website",{"_index":816,"title":{},"body":{"entities/User.html":{},"index.html":{}}}],["well",{"_index":1146,"title":{},"body":{"index.html":{}}}],["whenever",{"_index":1151,"title":{},"body":{"index.html":{}}}],["whether",{"_index":747,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["within",{"_index":792,"title":{},"body":{"injectables/TagsService.html":{},"index.html":{}}}],["without",{"_index":415,"title":{},"body":{"entities/MetaOption.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{}}}],["working",{"_index":1046,"title":{},"body":{"index.html":{}}}],["world",{"_index":119,"title":{},"body":{"injectables/AppService.html":{}}}],["write",{"_index":106,"title":{},"body":{"modules/AppModule.html":{}}}],["writing",{"_index":1153,"title":{},"body":{"index.html":{}}}],["x",{"_index":1073,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":1087,"title":{},"body":{"index.html":{}}}],["you're",{"_index":1011,"title":{},"body":{"index.html":{}}}],["z0",{"_index":248,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["z\\d@$!%*?&]{8,16",{"_index":369,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*?&])[a",{"_index":368,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["za",{"_index":367,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            MetaOptionsModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            TagsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UsersModule } from './users/users.module';\nimport { PostsModule } from './posts/posts.module';\nimport { AuthModule } from './auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { TagsModule } from './tags/tags.module';\nimport { MetaOptionsModule } from './meta-options/meta-options.module';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport appConfig from './config/app.config'; // Since it's imported as a default\nimport databaseConfig from './config/database.config';\n\nconst ENV = process.env.NODE_ENV;\n\n// Run this in cmd pg_ctl start -D \"C:\\users\\mfabouatmeh\\Desktop\\CodesDar\\more\\Postgre\\data\"\n@Module({\n  imports: [\n    UsersModule,\n    PostsModule,\n    AuthModule,\n    ConfigModule.forRoot({\n      isGlobal: true,\n      envFilePath: !ENV ? '.env' : `.env.${ENV}`,\n      load: [appConfig, databaseConfig],\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule], // Makes ConfigService available\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        type: 'postgres',\n        // entities: [User],\n        autoLoadEntities: configService.get('database.autoLoadEntities'),\n        synchronize: configService.get('database.synchronize'), // If this setting is set to false, we would have to manually perform migrations\n        port: configService.get('database.port'),\n        username: configService.get('database.user'),\n        password: configService.get('database.pass'),\n        host: configService.get('database.host'),\n        database: configService.get('database.name'),\n      }),\n    }),\n    TagsModule,\n    MetaOptionsModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n//npx prettier --write .\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { AuthService } from './providers/auth.service';\n// nest generate controller auth --no-spec\n@Controller('auth')\nexport class AuthController {\n  constructor(\n    // Injecting the auth service\n    private readonly authService: AuthService,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './providers/auth.service';\nimport { UsersModule } from 'src/users/users.module';\n// nest generate module auth\n@Module({\n  controllers: [AuthController],\n  providers: [AuthService],\n  // imports: [UsersModule], will cause a circular dependency\n  imports: [forwardRef(() => UsersModule)],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                isAuth\n                            \n                            \n                                    Public\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/auth.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isAuth\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAuth()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, forwardRef, Inject } from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users.service';\n// nest generate service auth/providers/auth --flat  --no-spec\n@Injectable()\nexport class AuthService {\n  constructor(\n    // Injecting the user service\n    // Add this to avoid circular dependency\n    @Inject(forwardRef(() => UsersService))\n    private readonly usersService: UsersService,\n  ) {}\n  public login(email: string, password: string) {\n    // Check user exists\n\n    const user = this.usersService.findOneById(1234);\n    // Login\n    // Return token\n    return 'SAMPLE_TOKEN';\n  }\n\n  public isAuth() {\n    return true;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dto/create-post.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for creating a new blog post.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                authorId\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                publishOn\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        authorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'integer', required: true, description: 'The ID of the author creating the post', example: 1})@IsNotEmpty()@IsInt()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:174\n                        \n                    \n\n            \n                \n                    The ID of the author creating the post.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The main content of the post', example: 'This is the content of the blog post.'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:87\n                        \n                    \n\n            \n                \n                    The main content of the post.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The URL of the featured image for the post', example: 'http://localhost.com/images/image1.jpg'})@IsOptional()@MinLength(4)@MaxLength(1024)@IsUrl()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:112\n                        \n                    \n\n            \n                \n                    The URL of the featured image for the post.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreatePostMetaOptionsDto | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'object', required: false, items: undefined})@IsOptional()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:161\n                        \n                    \n\n            \n                \n                    Additional meta options for the post.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: PostType, description: 'Possible values: 'post', 'page', 'story', 'series''})@IsEnum(PostType)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:48\n                        \n                    \n\n            \n                \n                    The type of post (e.g., 'post', 'page', 'story', 'series').\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The date on which the post is published', example: '2024-03-16T07:46:32+0000'})@IsISO8601()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:123\n                        \n                    \n\n            \n                \n                    The publication date of the post.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Serialized JSON object containing metadata', example: '{\n \"@context\": \"https://schema.org\",\n \"@type\": \"Person\"\n }'})@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:99\n                        \n                    \n\n            \n                \n                    JSON metadata for the post.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'A slug for the post (e.g., \"my-blog-post\")', example: 'my-blog-post'})@IsString()@IsNotEmpty()@MaxLength(256)@MinLength(4)@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'A slug should be all lowercase, use only \"-\", and have no spaces. Example: \"my-url\"'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:65\n                        \n                    \n\n            \n                \n                    A slug for the post, used in URLs.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: PostStatus, description: 'Possible values: 'draft', 'scheduled', 'review', 'published''})@IsEnum(PostStatus)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:76\n                        \n                    \n\n            \n                \n                    The publication status of the post (e.g., 'draft', 'scheduled', 'review', 'published').\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Array of tag IDs associated with the post', example: undefined})@IsArray()@IsOptional()@IsInt({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:135\n                        \n                    \n\n            \n                \n                    An array of tag IDs associated with the post.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'This is a title', description: 'The title for the blog post'})@IsString()@MinLength(4)@MaxLength(512)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:37\n                        \n                    \n\n            \n                \n                    The title of the blog post.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsArray,\n  IsEnum,\n  IsInt,\n  IsISO8601,\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MaxLength,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\nimport { PostType } from '../enums/post-type.enum';\nimport { PostStatus } from '../enums/post-status.enum';\nimport { CreatePostMetaOptionsDto } from '../../meta-options/dtos/create-post-meta-options.dto';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\n\n/**\n * DTO for creating a new blog post.\n */\nexport class CreatePostDto {\n  /**\n   * The title of the blog post.\n   */\n  @ApiProperty({\n    example: 'This is a title',\n    description: 'The title for the blog post',\n  })\n  @IsString()\n  @MinLength(4)\n  @MaxLength(512)\n  @IsNotEmpty()\n  title: string;\n\n  /**\n   * The type of post (e.g., 'post', 'page', 'story', 'series').\n   */\n  @ApiProperty({\n    enum: PostType,\n    description: \"Possible values: 'post', 'page', 'story', 'series'\",\n  })\n  @IsEnum(PostType)\n  @IsNotEmpty()\n  postType: PostType;\n\n  /**\n   * A slug for the post, used in URLs.\n   */\n  @ApiProperty({\n    description: 'A slug for the post (e.g., \"my-blog-post\")',\n    example: 'my-blog-post',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(256)\n  @MinLength(4)\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'A slug should be all lowercase, use only \"-\", and have no spaces. Example: \"my-url\"',\n  })\n  slug: string;\n\n  /**\n   * The publication status of the post (e.g., 'draft', 'scheduled', 'review', 'published').\n   */\n  @ApiProperty({\n    enum: PostStatus,\n    description: \"Possible values: 'draft', 'scheduled', 'review', 'published'\",\n  })\n  @IsEnum(PostStatus)\n  @IsNotEmpty()\n  status: PostStatus;\n\n  /**\n   * The main content of the post.\n   */\n  @ApiPropertyOptional({\n    description: 'The main content of the post',\n    example: 'This is the content of the blog post.',\n  })\n  @IsString()\n  @IsOptional()\n  content?: string;\n\n  /**\n   * JSON metadata for the post.\n   */\n  @ApiPropertyOptional({\n    description: 'Serialized JSON object containing metadata',\n    example:\n      '{\\r\\n \"@context\": \"https://schema.org\",\\r\\n \"@type\": \"Person\"\\r\\n }',\n  })\n  @IsOptional()\n  @IsJSON()\n  schema?: string;\n\n  /**\n   * The URL of the featured image for the post.\n   */\n  @ApiPropertyOptional({\n    description: 'The URL of the featured image for the post',\n    example: 'http://localhost.com/images/image1.jpg',\n  })\n  @IsOptional()\n  @MinLength(4)\n  @MaxLength(1024)\n  @IsUrl()\n  featuredImageUrl?: string;\n\n  /**\n   * The publication date of the post.\n   */\n  @ApiPropertyOptional({\n    description: 'The date on which the post is published',\n    example: '2024-03-16T07:46:32+0000',\n  })\n  @IsISO8601()\n  @IsOptional()\n  publishOn?: Date;\n\n  /**\n   * An array of tag IDs associated with the post.\n   */\n  @ApiPropertyOptional({\n    description: 'Array of tag IDs associated with the post',\n    example: [1, 2],\n  })\n  @IsArray()\n  @IsOptional()\n  @IsInt({ each: true })\n  tags?: number[];\n\n  /**\n   * Additional meta options for the post.\n   */\n  @ApiPropertyOptional({\n    type: 'object',\n    required: false,\n    items: {\n      type: 'object',\n      properties: {\n        metavalue: {\n          type: 'json',\n          description: 'A JSON string containing metadata options',\n          example: '{\"sidebarEnabled\": true}',\n        },\n      },\n    },\n  })\n  @IsOptional()\n  @ValidateNested({ each: true })\n  @Type(() => CreatePostMetaOptionsDto)\n  // Type decorator\n  // Matches the incoming req to the dto\n  // Creates an instance of the dto\n  // All the properties are validated against the dto\n  metaOptions?: CreatePostMetaOptionsDto | null;\n\n  /**\n   * The ID of the author creating the post.\n   */\n  @ApiProperty({\n    type: 'integer',\n    required: true,\n    description: 'The ID of the author creating the post',\n    example: 1,\n  })\n  @IsNotEmpty()\n  @IsInt()\n  authorId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostMetaOptionsDto.html":{"url":"classes/CreatePostMetaOptionsDto.html","title":"class - CreatePostMetaOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostMetaOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/dtos/create-post-meta-options.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for creating metadata options for a post.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                metaValue\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/dtos/create-post-meta-options.dto.ts:14\n                        \n                    \n\n            \n                \n                    The meta value as a JSON string.\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsJSON, IsNotEmpty, IsString } from 'class-validator';\n\n/**\n * DTO for creating metadata options for a post.\n */\nexport class CreatePostMetaOptionsDto {\n  /**\n   * The meta value as a JSON string.\n   *\n   * @example '{\"sidebarEnabled\": true}'\n   */\n  @IsNotEmpty()\n  @IsJSON()\n  metaValue: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTagDto.html":{"url":"classes/CreateTagDto.html","title":"class - CreateTagDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTagDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/dtos/create-tag.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object (DTO) for creating a new tag.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                featuredImage\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'A brief description of the tag', example: 'Posts related to technology and innovations'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:61\n                        \n                    \n\n            \n                \n                    A brief description of the tag.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        featuredImage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'URL of the featured image for the tag', example: 'https://example.com/images/tag-image.jpg'})@IsOptional()@IsUrl()@MaxLength(1024)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:88\n                        \n                    \n\n            \n                \n                    URL of the featured image for the tag.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The name of the tag', example: 'Technology'})@IsString()@MinLength(3)@IsNotEmpty()@MaxLength(256)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:30\n                        \n                    \n\n            \n                \n                    The name of the tag.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'JSON metadata associated with the tag', example: '{\"color\": \"blue\"}'})@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:74\n                        \n                    \n\n            \n                \n                    JSON metadata associated with the tag.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'A unique slug for the tag, used in URLs', example: 'technology'})@IsString()@IsNotEmpty()@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'A slug should be all lowercase letters and use only \"-\" as a separator. For example \"my-url\"'})@MaxLength(512)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:48\n                        \n                    \n\n            \n                \n                    The slug for the tag, used in URLs.\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\n/**\n * Data Transfer Object (DTO) for creating a new tag.\n */\nexport class CreateTagDto {\n  /**\n   * The name of the tag.\n   *\n   * @example \"Technology\"\n   */\n  @ApiProperty({\n    description: 'The name of the tag',\n    example: 'Technology',\n  })\n  @IsString()\n  @MinLength(3)\n  @IsNotEmpty()\n  @MaxLength(256)\n  name: string;\n\n  /**\n   * The slug for the tag, used in URLs.\n   *\n   * @example \"technology\"\n   */\n  @ApiProperty({\n    description: 'A unique slug for the tag, used in URLs',\n    example: 'technology',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'A slug should be all lowercase letters and use only \"-\" as a separator. For example \"my-url\"',\n  })\n  @MaxLength(512)\n  slug: string;\n\n  /**\n   * A brief description of the tag.\n   *\n   * @example \"Posts related to technology and innovations\"\n   */\n  @ApiPropertyOptional({\n    description: 'A brief description of the tag',\n    example: 'Posts related to technology and innovations',\n  })\n  @IsOptional()\n  @IsString()\n  description: string;\n\n  /**\n   * JSON metadata associated with the tag.\n   *\n   * @example '{\"color\": \"blue\"}'\n   */\n  @ApiPropertyOptional({\n    description: 'JSON metadata associated with the tag',\n    example: '{\"color\": \"blue\"}',\n  })\n  @IsOptional()\n  @IsJSON()\n  schema: string;\n\n  /**\n   * URL of the featured image for the tag.\n   *\n   * @example \"https://example.com/images/tag-image.jpg\"\n   */\n  @ApiPropertyOptional({\n    description: 'URL of the featured image for the tag',\n    example: 'https://example.com/images/tag-image.jpg',\n  })\n  @IsOptional()\n  @IsUrl()\n  @MaxLength(1024)\n  featuredImage: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MaxLength(96)@MinLength(8)@Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,16}$/, {message: 'Minimum 8 chars, include at least one letter, one number, and one special character.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\nexport class CreateUserDto {\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(96)\n  firstName: string;\n\n  @IsString()\n  @IsOptional()\n  @MinLength(3)\n  @MaxLength(96)\n  lastName?: string;\n\n  @IsEmail()\n  @IsNotEmpty()\n  @MaxLength(96)\n  email: string;\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(96)\n  @MinLength(8)\n  @Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,16}$/, {\n    message:\n      'Minimum 8 chars, include at least one letter, one number, and one special character.',\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersParamDto.html":{"url":"classes/GetUsersParamDto.html","title":"class - GetUsersParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-users-param.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Get user with a specific id', example: '1234'})@IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-users-param.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport { IsInt, IsOptional } from 'class-validator';\n\nexport class GetUsersParamDto {\n  @ApiPropertyOptional({\n    description: 'Get user with a specific id',\n    example: '1234',\n  })\n  @IsOptional()\n  @IsInt()\n  @Type(() => Number)\n  id?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/MetaOption.html":{"url":"entities/MetaOption.html","title":"entity - MetaOption","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  MetaOption\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-option.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createDate\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                metaValue\n                            \n                            \n                                    \n                                    \n                                post\n                            \n                            \n                                    \n                                updateDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'json', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        post\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, post => post.metaOptions, {onDelete: 'CASCADE'})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:25\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from 'src/posts/post.entity';\nimport {\n  Column,\n  CreateDateColumn,\n  Entity,\n  JoinColumn,\n  OneToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@Entity()\nexport class MetaOption {\n  @PrimaryGeneratedColumn()\n  id: number;\n  // Without needing to serialize the JSON object(unavailable in mysql)\n  @Column({\n    type: 'json',\n    nullable: false,\n  })\n  metaValue: string;\n  @CreateDateColumn()\n  createDate: Date;\n  @UpdateDateColumn()\n  updateDate: Date;\n\n  @OneToOne(() => Post, (post) => post.metaOptions, {\n    onDelete: 'CASCADE',\n  })\n  @JoinColumn()\n  post: Post;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MetaOptionsController.html":{"url":"controllers/MetaOptionsController.html","title":"controller - MetaOptionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MetaOptionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-options.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                meta-options\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createMetaOption\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createMetaOption\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMetaOption(createPostMetaOptionDto: CreatePostMetaOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/meta-options/meta-options.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostMetaOptionDto\n                                            \n                                                            CreatePostMetaOptionsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { CreatePostMetaOptionsDto } from './dtos/create-post-meta-options.dto';\nimport { MetaOptionsService } from './providers/meta-options.service';\n\n@Controller('meta-options')\nexport class MetaOptionsController {\n  constructor(private readonly metaOptionsService: MetaOptionsService) {}\n  @Post()\n  public createMetaOption(\n    @Body() createPostMetaOptionDto: CreatePostMetaOptionsDto,\n  ) {\n    return this.metaOptionsService.create(createPostMetaOptionDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MetaOptionsModule.html":{"url":"modules/MetaOptionsModule.html","title":"module - MetaOptionsModule","body":"\n                   \n\n\n\n\n    Modules\n    MetaOptionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/meta-options/meta-options.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MetaOptionsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MetaOptionsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MetaOptionsController } from './meta-options.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { MetaOption } from './meta-option.entity';\nimport { MetaOptionsService } from './providers/meta-options.service';\n\n@Module({\n  controllers: [MetaOptionsController],\n  imports: [TypeOrmModule.forFeature([MetaOption])],\n  providers: [MetaOptionsService],\n})\nexport class MetaOptionsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MetaOptionsService.html":{"url":"injectables/MetaOptionsService.html","title":"injectable - MetaOptionsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MetaOptionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/providers/meta-options.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(metaOptionRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/meta-options/providers/meta-options.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        metaOptionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createMetaOptionDto: CreatePostMetaOptionsDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/meta-options/providers/meta-options.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createMetaOptionDto\n                                            \n                                                            CreatePostMetaOptionsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { MetaOption } from '../meta-option.entity';\nimport { Repository } from 'typeorm';\nimport { CreatePostMetaOptionsDto } from '../dtos/create-post-meta-options.dto';\n\n@Injectable()\nexport class MetaOptionsService {\n  constructor(\n    /**\n     * Inject metaOptionsRepository\n     */\n    @InjectRepository(MetaOption)\n    private metaOptionRepository: Repository,\n  ) {}\n\n  public async create(createMetaOptionDto: CreatePostMetaOptionsDto) {\n    const metaOption = this.metaOptionRepository.create(createMetaOptionDto);\n    return await this.metaOptionRepository.save(metaOption);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchPostDto.html":{"url":"classes/PatchPostDto.html","title":"class - PatchPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dto/patch-post.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for updating an existing post.\nExtends CreatePostDto, making all fields optional except id.\n\n            \n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The ID of the post that needs to be updated', example: 1})@IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/patch-post.dto.ts:19\n                        \n                    \n\n            \n                \n                    The ID of the post to be updated.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsInt, IsNotEmpty } from 'class-validator';\nimport { CreatePostDto } from './create-post.dto';\n\n/**\n * DTO for updating an existing post.\n * Extends `CreatePostDto`, making all fields optional except `id`.\n */\nexport class PatchPostDto extends PartialType(CreatePostDto) {\n  /**\n   * The ID of the post to be updated.\n   */\n  @ApiProperty({\n    description: 'The ID of the post that needs to be updated',\n    example: 1,\n  })\n  @IsInt()\n  @IsNotEmpty()\n  id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/patch-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\n// Extend the create user dto to not repeat the code\nexport class PatchUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Post.html":{"url":"entities/Post.html","title":"entity - Post","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/post.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a blog post entity.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                author\n                            \n                            \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                postType\n                            \n                            \n                                    \n                                    Optional\n                                publishOn\n                            \n                            \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.posts, {eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:106\n                        \n                    \n\n            \n                \n                    Author of the post (many-to-one relationship with User).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:66\n                        \n                    \n\n            \n                \n                    Main content of the post (large string)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:78\n                        \n                    \n\n            \n                \n                    URL of the featured image.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:26\n                        \n                    \n\n            \n                \n                    Unique identifier for the post.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MetaOption\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, metaOptions => metaOptions.post, {cascade: true, eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:100\n                        \n                    \n\n            \n                \n                    Meta options associated with the post (one-to-one relationship bidirectional).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: PostType, default: undefined, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:43\n                        \n                    \n\n            \n                \n                    Type of the post (e.g., post, page, story, series.).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:84\n                        \n                    \n\n            \n                \n                    Date and time when the post is published.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:72\n                        \n                    \n\n            \n                \n                    JSON schema for structured data.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:49\n                        \n                    \n\n            \n                \n                    URL-friendly identifier for the post.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: PostStatus, default: undefined, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:60\n                        \n                    \n\n            \n                \n                    Status of the post (draft, published, etc.).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Tag[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, tag => tag.posts, {eager: true})@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:91\n                        \n                    \n\n            \n                \n                    Tags associated with the post (many-to-many relationship).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 512, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:32\n                        \n                    \n\n            \n                \n                    Title of the post.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  Entity,\n  JoinColumn,\n  JoinTable,\n  ManyToMany,\n  ManyToOne,\n  OneToOne,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport { PostType } from './enums/post-type.enum';\nimport { PostStatus } from './enums/post-status.enum';\nimport { MetaOption } from 'src/meta-options/meta-option.entity';\nimport { User } from 'src/users/user.entity';\nimport { Tag } from 'src/tags/tag.entity';\n\n/**\n * Represents a blog post entity.\n */\n@Entity()\nexport class Post {\n  /**\n   * Unique identifier for the post.\n   */\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  /**\n   * Title of the post.\n   */\n  @Column({ type: 'varchar', length: 512, nullable: false })\n  title: string;\n\n  /**\n   * Type of the post (e.g., post, page, story, series.).\n   */\n  @Column({\n    type: 'enum',\n    enum: PostType,\n    default: PostType.POST,\n    nullable: false,\n  })\n  postType: PostType;\n\n  /**\n   * URL-friendly identifier for the post.\n   */\n  @Column({ type: 'varchar', length: 256, nullable: false, unique: true })\n  slug: string;\n\n  /**\n   * Status of the post (draft, published, etc.).\n   */\n  @Column({\n    type: 'enum',\n    enum: PostStatus,\n    default: PostStatus.DRAFT,\n    nullable: false,\n  })\n  status: PostStatus;\n\n  /**\n   * Main content of the post (large string)\n   */\n  @Column({ type: 'text', nullable: true })\n  content?: string;\n\n  /**\n   * JSON schema for structured data.\n   */\n  @Column({ type: 'text', nullable: true })\n  schema?: string;\n\n  /**\n   * URL of the featured image.\n   */\n  @Column({ type: 'varchar', length: 1024, nullable: true })\n  featuredImageUrl?: string;\n\n  /**\n   * Date and time when the post is published.\n   */\n  @Column({ type: 'timestamp', nullable: true })\n  publishOn?: Date;\n\n  /**\n   * Tags associated with the post (many-to-many relationship).\n   */\n  @ManyToMany(() => Tag, (tag) => tag.posts, { eager: true })\n  @JoinTable()\n  tags?: Tag[];\n\n  /**\n   * Meta options associated with the post (one-to-one relationship bidirectional).\n   */\n  @OneToOne(() => MetaOption, (metaOptions) => metaOptions.post, {\n    cascade: true,\n    eager: true, // Will fetch posts AND metaOptions when getting posts\n  })\n  metaOptions?: MetaOption;\n\n  /**\n   * Author of the post (many-to-one relationship with User).\n   */\n  @ManyToOne(() => User, (user) => user.posts, { eager: true })\n  author: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n            \n                Description\n            \n            \n                Controller for managing posts.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                createPost\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                delete\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getPosts\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Creates a new blog post'})@ApiResponse({status: 201, description: 'Post created successfully'})@ApiResponse({status: 400, description: 'Invalid request data'})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:61\n                        \n                    \n\n\n            \n                \n                        Creates a new blog post.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data for the new post.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The created post.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Deletes a post by ID'})@ApiQuery({name: 'id', required: true, type: Number, description: 'Post ID to delete'})@ApiResponse({status: 200, description: 'Post deleted successfully'})@ApiResponse({status: 404, description: 'Post not found'})@Delete()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:94\n                        \n                    \n\n\n            \n                \n                        Deletes a post by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the post to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A success message.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                        getPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPosts(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:userId?')@ApiOperation({summary: 'Retrieves all posts for a specific user'})@ApiParam({name: 'userId', required: false, description: 'User ID (optional)'})@ApiResponse({status: 200, description: 'Returns the list of posts'})\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:48\n                        \n                    \n\n\n            \n                \n                        Retrieves all posts for a specific user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user (optional).\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A list of posts.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(patchPostDto: PatchPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Updates an existing blog post'})@ApiResponse({status: 201, description: 'Post updated successfully'})@ApiResponse({status: 404, description: 'Post not found'})@Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:74\n                        \n                    \n\n\n            \n                \n                        Updates an existing blog post.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                patchPostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe updated post data.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The updated post.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Query,\n} from '@nestjs/common';\nimport { PostsService } from './providers/posts.service';\nimport {\n  ApiOperation,\n  ApiResponse,\n  ApiTags,\n  ApiParam,\n  ApiQuery,\n} from '@nestjs/swagger';\nimport { CreatePostDto } from './dto/create-post.dto';\nimport { PatchPostDto } from './dto/patch-post.dto';\n\n/**\n * Controller for managing posts.\n */\n@Controller('posts')\n@ApiTags('Posts')\nexport class PostsController {\n  /**\n   * Creates an instance of PostsController.\n   * @param postsService - The posts service.\n   */\n  constructor(private readonly postsService: PostsService) {}\n\n  /**\n   * Retrieves all posts for a specific user.\n   * @param userId - The ID of the user (optional).\n   * @returns A list of posts.\n   */\n  @Get('/:userId?')\n  @ApiOperation({ summary: 'Retrieves all posts for a specific user' })\n  @ApiParam({\n    name: 'userId',\n    required: false,\n    description: 'User ID (optional)',\n  })\n  @ApiResponse({ status: 200, description: 'Returns the list of posts' })\n  public getPosts(@Param('userId') userId: string) {\n    return this.postsService.findAll(userId);\n  }\n\n  /**\n   * Creates a new blog post.\n   * @param createPostDto - The data for the new post.\n   * @returns The created post.\n   */\n  @ApiOperation({ summary: 'Creates a new blog post' })\n  @ApiResponse({ status: 201, description: 'Post created successfully' })\n  @ApiResponse({ status: 400, description: 'Invalid request data' })\n  @Post()\n  public createPost(@Body() createPostDto: CreatePostDto) {\n    return this.postsService.create(createPostDto);\n  }\n\n  /**\n   * Updates an existing blog post.\n   * @param patchPostDto - The updated post data.\n   * @returns The updated post.\n   */\n  @ApiOperation({ summary: 'Updates an existing blog post' })\n  @ApiResponse({ status: 201, description: 'Post updated successfully' })\n  @ApiResponse({ status: 404, description: 'Post not found' })\n  @Patch()\n  public updatePost(@Body() patchPostDto: PatchPostDto) {\n    return this.postsService.update(patchPostDto);\n  }\n\n  /**\n   * Deletes a post by its ID.\n   * @param id - The ID of the post to delete.\n   * @returns A success message.\n   */\n  @ApiOperation({ summary: 'Deletes a post by ID' })\n  @ApiQuery({\n    name: 'id',\n    required: true,\n    type: Number,\n    description: 'Post ID to delete',\n  })\n  @ApiResponse({ status: 200, description: 'Post deleted successfully' })\n  @ApiResponse({ status: 404, description: 'Post not found' })\n  // This method cascades and removes relevant relationships between posts and tags NOT the actual tags\n  @Delete()\n  public delete(@Query('id', ParseIntPipe) id: number) {\n    return this.postsService.delete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_imports\n\n\n\ncluster_PostsModule_providers\n\n\n\n\nTagsModule\n\nTagsModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nTagsModule->PostsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            TagsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsController } from './posts.controller';\nimport { PostsService } from './providers/posts.service';\nimport { UsersModule } from 'src/users/users.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Post } from './post.entity';\nimport { MetaOption } from 'src/meta-options/meta-option.entity';\nimport { TagsModule } from 'src/tags/tags.module';\n\n// Import entire module not only a service (view users module exports key)\n@Module({\n  controllers: [PostsController],\n  providers: [PostsService],\n  imports: [\n    UsersModule,\n    TagsModule,\n    TypeOrmModule.forFeature([Post, MetaOption]),\n  ], // Import the post entity, for feature is responsible to create tables corresponding to these entities inside the db\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/providers/posts.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service responsible for handling post-related operations.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, postsRepository: Repository, metaOptionsRepository: Repository, tagsService: TagsService)\n                    \n                \n                        \n                            \n                                Defined in src/posts/providers/posts.service.ts:15\n                            \n                        \n\n                \n                    \n                            Constructor to inject dependencies.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service to handle user-related operations.\n\n                                                        \n                                                \n                                                \n                                                        postsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Repository for managing Post entities.\n\n                                                        \n                                                \n                                                \n                                                        metaOptionsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Repository for managing MetaOption entities.\n\n                                                        \n                                                \n                                                \n                                                        tagsService\n                                                  \n                                                        \n                                                                        TagsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service for handling tag-related operations.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createPostDto: CreatePostDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:58\n                        \n                    \n\n\n            \n                \n                        Creates a new post.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    DTO containing post creation details.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The newly created post.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:142\n                        \n                    \n\n\n            \n                \n                        Deletes a post from the database.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the post to delete.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                An object indicating the deletion status.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:40\n                        \n                    \n\n\n            \n                \n                        Retrieves all posts along with their meta options.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the user requesting the posts.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                A list of posts with related meta options.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(patchPostDto: PatchPostDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:116\n                        \n                    \n\n\n            \n                \n                        Updates an existing post.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                patchPostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    DTO containing fields to update.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The updated post.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Body, Injectable } from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users.service';\nimport { CreatePostDto } from '../dto/create-post.dto';\nimport { Repository } from 'typeorm';\nimport { Post } from '../post.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { MetaOption } from 'src/meta-options/meta-option.entity';\nimport { TagsService } from 'src/tags/providers/tags.service';\nimport { PatchPostDto } from '../dto/patch-post.dto';\n\n/**\n * Service responsible for handling post-related operations.\n */\n@Injectable()\nexport class PostsService {\n  /**\n   * Constructor to inject dependencies.\n   * @param usersService Service to handle user-related operations.\n   * @param postsRepository Repository for managing Post entities.\n   * @param metaOptionsRepository Repository for managing MetaOption entities.\n   * @param tagsService Service for handling tag-related operations.\n   */\n  constructor(\n    private readonly usersService: UsersService,\n\n    @InjectRepository(Post)\n    private readonly postsRepository: Repository, // Only add repositories for 1-1 relationships so that it doesnt become crowded\n\n    @InjectRepository(MetaOption)\n    private readonly metaOptionsRepository: Repository,\n\n    private readonly tagsService: TagsService,\n  ) {}\n\n  /**\n   * Retrieves all posts along with their meta options.\n   * @param userId The ID of the user requesting the posts.\n   * @returns A list of posts with related meta options.\n   */\n  public async findAll(userId: string) {\n    return await this.postsRepository.find({\n      relations: { metaOptions: true },\n    });\n\n    // Get meta options along with the posts\n    // return await this.postsRepository.find({\n    //   relations: {\n    //     metaOptions: true,\n    //   },\n    // });\n  }\n\n  /**\n   * Creates a new post.\n   * @param createPostDto DTO containing post creation details.\n   * @returns The newly created post.\n   */\n  public async create(@Body() createPostDto: CreatePostDto) {\n    const author = await this.usersService.findOneById(createPostDto.authorId);\n    const tags = await this.tagsService.findMultipleTags(createPostDto.tags);\n\n    // Use the spread operator to create a shallow copy of createPostDto, meaning a new object is passed to create()\n    const post = this.postsRepository.create({\n      ...createPostDto,\n      author,\n      tags,\n    }); // Only use await for the save method because it returns a promise\n\n    return await this.postsRepository.save(post);\n  }\n\n  /*\n   public async delete(id: number) {\n    // Start a transaction to handle both deletes atomically\n    const queryRunner =\n      this.postsRepository.manager.connection.createQueryRunner();\n    await queryRunner.startTransaction();\n\n    try {\n      // Find the post (with related metaOptions loaded)\n      const post = await this.postsRepository.findOne({\n        where: { id },\n        relations: ['metaOptions'],\n      });\n      if (!post) {\n        throw new Error('Post not found');\n      }\n\n      // Delete the post (cascade will handle the metaOption deletion automatically)\n      await queryRunner.manager.delete(Post, id); // Use delete instead of remove\n\n      // Commit the transaction if everything is successful\n      await queryRunner.commitTransaction();\n\n      // Return a success response\n      return { deleted: true, id };\n    } catch (error) {\n      // If any error occurs, rollback the transaction\n      await queryRunner.rollbackTransaction();\n\n      // Log the error and return a failure response\n      console.error(error);\n      return { deleted: false, message: error.message };\n    } finally {\n      // Release the query runner (important for clean-up)\n      await queryRunner.release();\n    }\n  }\n*/\n\n  /**\n   * Updates an existing post.\n   * @param patchPostDto DTO containing fields to update.\n   * @returns The updated post.\n   */\n  public async update(@Body() patchPostDto: PatchPostDto) {\n    const tags = await this.tagsService.findMultipleTags(patchPostDto.tags);\n    const post = await this.postsRepository.findOneBy({ id: patchPostDto.id });\n\n    if (!post) {\n      throw new Error('Post not found');\n    }\n\n    post.title = patchPostDto.title ?? post.title;\n    post.content = patchPostDto.content ?? post.content;\n    post.status = patchPostDto.status ?? post.status;\n    post.postType = patchPostDto.postType ?? post.postType;\n    post.slug = patchPostDto.slug ?? post.slug;\n    post.featuredImageUrl =\n      patchPostDto.featuredImageUrl ?? post.featuredImageUrl;\n    post.publishOn = patchPostDto.publishOn ?? post.publishOn;\n    post.tags = tags;\n\n    return await this.postsRepository.save(post);\n  }\n\n  /**\n   * Deletes a post from the database.\n   * @param id The ID of the post to delete.\n   * @returns An object indicating the deletion status.\n   */\n  public async delete(id: number) {\n    await this.postsRepository.delete(id);\n    return { deleted: true, id };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Tag.html":{"url":"entities/Tag.html","title":"entity - Tag","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Tag\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tag.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity representing a tag.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createDate\n                            \n                            \n                                    \n                                deletedAt\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                featuredImage\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                posts\n                            \n                            \n                                    \n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                updateDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:91\n                        \n                    \n\n            \n                \n                    Timestamp indicating when the tag was created.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:103\n                        \n                    \n\n            \n                \n                    Timestamp indicating when the tag was soft deleted.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:55\n                        \n                    \n\n            \n                \n                    Optional description of the tag.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        featuredImage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:76\n                        \n                    \n\n            \n                \n                    URL of the featured image for the tag.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:21\n                        \n                    \n\n            \n                \n                    Unique identifier for the tag.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:33\n                        \n                    \n\n            \n                \n                    Name of the tag.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, post => post.tags, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:84\n                        \n                    \n\n            \n                \n                    Many-to-many relationship with posts.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:65\n                        \n                    \n\n            \n                \n                    JSON metadata schema for additional tag details.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 512, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:45\n                        \n                    \n\n            \n                \n                    URL-friendly slug for the tag.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:97\n                        \n                    \n\n            \n                \n                    Timestamp indicating when the tag was last updated.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Post } from 'src/posts/post.entity';\nimport {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  ManyToMany,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n/**\n * Entity representing a tag.\n */\n@Entity()\nexport class Tag {\n  /**\n   * Unique identifier for the tag.\n   */\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  /**\n   * Name of the tag.\n   * @example \"Technology\"\n   */\n  @Column({\n    type: 'varchar',\n    length: 256,\n    nullable: false,\n    unique: true,\n  })\n  name: string;\n\n  /**\n   * URL-friendly slug for the tag.\n   * @example \"technology\"\n   */\n  @Column({\n    type: 'varchar',\n    length: 512,\n    nullable: false,\n    unique: true,\n  })\n  slug: string;\n\n  /**\n   * Optional description of the tag.\n   * @example \"Posts related to technology and innovations\"\n   */\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  description: string;\n\n  /**\n   * JSON metadata schema for additional tag details.\n   * @example '{\"color\": \"blue\"}'\n   */\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  schema: string;\n\n  /**\n   * URL of the featured image for the tag.\n   * @example \"https://example.com/images/tag-image.jpg\"\n   */\n  @Column({\n    type: 'varchar',\n    length: 1024,\n    nullable: true,\n  })\n  featuredImage: string;\n\n  /**\n   * Many-to-many relationship with posts.\n   */\n  @ManyToMany(() => Post, (post) => post.tags, {\n    onDelete: 'CASCADE',\n  })\n  posts: Post[];\n\n  // https://orkhan.gitbook.io/typeorm/docs/decorator-reference\n  /**\n   * Timestamp indicating when the tag was created.\n   */\n  @CreateDateColumn()\n  createDate: Date;\n\n  /**\n   * Timestamp indicating when the tag was last updated.\n   */\n  @UpdateDateColumn()\n  updateDate: Date;\n\n  /**\n   * Timestamp indicating when the tag was soft deleted.\n   */\n  @DeleteDateColumn()\n  deletedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TagsController.html":{"url":"controllers/TagsController.html","title":"controller - TagsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TagsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tags.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tags\n            \n\n\n            \n                Description\n            \n            \n                Controller for handling tag-related API requests.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                create\n                            \n                            \n                                    \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    \n                                    Public\n                                    Async\n                                softDelete\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createTagDto: CreateTagDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:29\n                        \n                    \n\n\n            \n                \n                        Creates a new tag.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createTagDto\n                                            \n                                                            CreateTagDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    DTO containing tag data.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The created tag.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete()\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:39\n                        \n                    \n\n\n            \n                \n                        Deletes a tag by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the tag to delete.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                An object indicating whether the deletion was successful.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Async\n                        softDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    softDelete(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('soft-delete')\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:49\n                        \n                    \n\n\n            \n                \n                        Soft deletes a tag by its ID, marking it as deleted without removing it from the database.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the tag to soft delete.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                An object indicating whether the soft deletion was successful.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  ParseIntPipe,\n  Post,\n  Query,\n} from '@nestjs/common';\nimport { TagsService } from './providers/tags.service';\nimport { CreateTagDto } from './dtos/create-tag.dto';\n\n/**\n * Controller for handling tag-related API requests.\n */\n@Controller('tags')\nexport class TagsController {\n  /**\n   * Injects the TagsService.\n   * @param tagsService The service responsible for tag operations.\n   */\n  constructor(private readonly tagsService: TagsService) {}\n\n  /**\n   * Creates a new tag.\n   * @param createTagDto DTO containing tag data.\n   * @returns The created tag.\n   */\n  @Post()\n  public create(@Body() createTagDto: CreateTagDto) {\n    return this.tagsService.create(createTagDto);\n  }\n\n  /**\n   * Deletes a tag by its ID.\n   * @param id The ID of the tag to delete.\n   * @returns An object indicating whether the deletion was successful.\n   */\n  @Delete()\n  public async delete(@Query('id', ParseIntPipe) id: number) {\n    return this.tagsService.delete(id);\n  }\n\n  /**\n   * Soft deletes a tag by its ID, marking it as deleted without removing it from the database.\n   * @param id The ID of the tag to soft delete.\n   * @returns An object indicating whether the soft deletion was successful.\n   */\n  @Delete('soft-delete')\n  public async softDelete(@Query('id', ParseIntPipe) id: number) {\n    // Route is /tags/soft-delete\n    return this.tagsService.softRemove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TagsModule.html":{"url":"modules/TagsModule.html","title":"module - TagsModule","body":"\n                   \n\n\n\n\n    Modules\n    TagsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_exports\n\n\n\ncluster_TagsModule_providers\n\n\n\n\nTagsService \n\nTagsService \n\n\n\nTagsModule\n\nTagsModule\n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tags/tags.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TagsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TagsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TagsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TagsController } from './tags.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Tag } from './tag.entity';\nimport { TagsService } from './providers/tags.service';\n\n@Module({\n  controllers: [TagsController],\n  imports: [TypeOrmModule.forFeature([Tag])],\n  providers: [TagsService],\n  exports: [TagsService],\n})\nexport class TagsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TagsService.html":{"url":"injectables/TagsService.html","title":"injectable - TagsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TagsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/providers/tags.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for handling tag-related operations.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                findMultipleTags\n                            \n                            \n                                    Public\n                                    Async\n                                softRemove\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tagsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/tags/providers/tags.service.ts:13\n                            \n                        \n\n                \n                    \n                            Injects the repository for interacting with the Tag entity.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        tagsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The TypeORM repository for the Tag entity.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createTagDto: CreateTagDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:28\n                        \n                    \n\n\n            \n                \n                        Creates a new tag.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createTagDto\n                                            \n                                                            CreateTagDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Data Transfer Object (DTO) containing tag details.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The created tag.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:53\n                        \n                    \n\n\n            \n                \n                        Deletes a tag by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the tag to delete.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                An object indicating whether the deletion was successful.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findMultipleTags\n                        \n                    \n                \n            \n            \n                \n                        \n                    findMultipleTags(tags: number[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:38\n                        \n                    \n\n\n            \n                \n                        Finds multiple tags based on an array of tag IDs.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tags\n                                            \n                                                        number[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    An array of tag IDs.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                A list of found tags.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        softRemove\n                        \n                    \n                \n            \n            \n                \n                        \n                    softRemove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:74\n                        \n                    \n\n\n            \n                \n                        Soft deletes a tag by its ID, marking it as deleted without removing it from the database.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the tag to soft delete.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                An object indicating whether the soft deletion was successful.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateTagDto } from '../dtos/create-tag.dto';\nimport { In, Repository } from 'typeorm';\nimport { Tag } from '../tag.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n//npx nest generate service tags/providers/tags --flat --no-spec\n\n/**\n * Service for handling tag-related operations.\n */\n@Injectable()\nexport class TagsService {\n  /**\n   * Injects the repository for interacting with the `Tag` entity.\n   * @param tagsRepository The TypeORM repository for the `Tag` entity.\n   */\n  constructor(\n    @InjectRepository(Tag)\n    private readonly tagsRepository: Repository,\n  ) {}\n\n  /**\n   * Creates a new tag.\n   * @param createTagDto Data Transfer Object (DTO) containing tag details.\n   * @returns The created tag.\n   */\n  public async create(createTagDto: CreateTagDto) {\n    const tag = this.tagsRepository.create(createTagDto);\n    return await this.tagsRepository.save(tag);\n  }\n\n  /**\n   * Finds multiple tags based on an array of tag IDs.\n   * @param tags An array of tag IDs.\n   * @returns A list of found tags.\n   */\n  public async findMultipleTags(tags: number[]) {\n    const results = await this.tagsRepository.find({\n      where: {\n        id: In(tags), // Finds all the tags with IDs within this array.\n      },\n    });\n\n    return results;\n  }\n\n  /**\n   * Deletes a tag by its ID.\n   * @param id The ID of the tag to delete.\n   * @returns An object indicating whether the deletion was successful.\n   */\n  public async delete(id: number) {\n    // Check if the tag exists before deleting\n    const tag = await this.tagsRepository.findOne({\n      where: { id },\n    });\n\n    if (!tag) {\n      return { deleted: false, message: 'Tag not found' };\n    }\n\n    // Proceed with deletion\n    await this.tagsRepository.delete(id);\n\n    return { deleted: true, id };\n  }\n\n  /**\n   * Soft deletes a tag by its ID, marking it as deleted without removing it from the database.\n   * @param id The ID of the tag to soft delete.\n   * @returns An object indicating whether the soft deletion was successful.\n   */\n  public async softRemove(id: number) {\n    await this.tagsRepository.softDelete(id);\n    return { deleted: true, id };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                posts\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, post => post.author)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:38\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from 'src/posts/post.entity';\nimport { Column, Entity, OneToMany, PrimaryGeneratedColumn } from 'typeorm';\n\n// Column typees differ if we're using SQL or PostgreSQL check typeorm website\n// Should match the DTO\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n  })\n  firstName: string;\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: true,\n  })\n  lastName: string;\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n    unique: true,\n  })\n  email: string;\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n  })\n  password: string;\n\n  // A user can have many posts\n  @OneToMany(() => Post, (post) => post.author)\n  posts: Post[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUsers\n                            \n                            \n                                    \n                                    Public\n                                patchUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUsers(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getUserParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id?')@ApiOperation({summary: 'Fetches a list of registered users on the application'})@ApiResponse({status: 200, description: 'Users fetched successfully based on the query'})@ApiQuery({name: 'limit', type: 'number', required: false, description: 'The number of entries returned per query', example: 10})@ApiQuery({name: 'page', type: 'number', required: false, description: 'The position of the page number that you want the API to return', example: 1})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        patchUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchUser(patchUserDto: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PatchUserDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        /* eslint-disable @typescript-eslint/no-unused-vars */\nimport {\n  Body,\n  Headers,\n  Controller,\n  Get,\n  Param,\n  Post,\n  Query,\n  ParseIntPipe,\n  DefaultValuePipe,\n  ValidationPipe,\n  Patch,\n} from '@nestjs/common';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { GetUsersParamDto } from './dtos/get-users-param.dto';\nimport { PatchUserDto } from './dtos/patch-user.dto';\nimport { UsersService } from './providers/users.service';\nimport { ApiOperation, ApiQuery, ApiResponse, ApiTags } from '@nestjs/swagger';\n\n// To make parameters optional, use the ? operator\n@Controller('users')\n@ApiTags('Users')\nexport class UsersController {\n  constructor(\n    // Injecting user service\n    private readonly usersService: UsersService,\n  ) {}\n  @Get('/:id?')\n  @ApiOperation({\n    summary: 'Fetches a list of registered users on the application',\n  })\n  // We can add multiple api response\n  @ApiResponse({\n    status: 200,\n    description: 'Users fetched successfully based on the query',\n  })\n  @ApiQuery({\n    name: 'limit',\n    type: 'number',\n    required: false,\n    description: 'The number of entries returned per query',\n    example: 10,\n  })\n  @ApiQuery({\n    name: 'page',\n    type: 'number',\n    required: false,\n    description:\n      'The position of the page number that you want the API to return',\n    example: 1,\n  })\n  public getUsers(\n    @Param() getUserParamDto: GetUsersParamDto,\n    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\n  ) {\n    return this.usersService.findAll(getUserParamDto, limit, page);\n  }\n\n  @Post()\n  public createUsers(\n    // Without the global validation\n    // @Body(new ValidationPipe()) createUserDto: CreateUserDto,\n\n    // With\n    @Body() createUserDto: CreateUserDto,\n  ) {\n    return this.usersService.createUser(createUserDto);\n  }\n  @Patch()\n  public patchUser(@Body() patchUserDto: PatchUserDto) {\n    return patchUserDto;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './providers/users.service';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './user.entity';\nimport { ConfigModule } from '@nestjs/config';\nimport profileConfig from './config/profile.config';\n\n// We can only export providers, never controllers\n@Module({\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService],\n  // imports: [AuthModule], will cause a circular dependency\n  imports: [\n    forwardRef(() => AuthModule),\n    TypeOrmModule.forFeature([User]),\n    ConfigModule.forFeature(profileConfig),\n  ],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for managing user-related operations in the Users table.\nThis service interacts with the Users table to perform CRUD operations.\nIt also uses the AuthService to handle authentication-related checks and\ndependencies while ensuring circular dependencies are avoided.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    Public\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findOneById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, usersRepository: Repository, profileConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/users.service.ts:19\n                            \n                        \n\n                \n                    \n                            Constructs the UsersService with necessary dependencies.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService for handling authentication-related operations.\n\n\n                                                        \n                                                \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        profileConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:87\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(getUserParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:55\n                        \n                    \n\n\n            \n                \n                        Retrieves a list of all users from the database.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing filters for user retrieval.\n\n\n                                            \n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe maximum number of users to return.\n\n\n                                            \n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe page number for pagination.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                Array of user objects containing basic details.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:82\n                        \n                    \n\n\n            \n                \n                        Retrieves a single user by their unique identifier.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe unique ID of the user to retrieve.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                A user object containing their details.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { GetUsersParamDto } from '../dtos/get-users-param.dto';\nimport { AuthService } from 'src/auth/providers/auth.service';\nimport { Repository } from 'typeorm';\nimport { User } from '../user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { CreateUserDto } from '../dtos/create-user.dto';\nimport { ConfigService, ConfigType } from '@nestjs/config';\nimport profileConfig from '../config/profile.config';\n\n/**\n * Service for managing user-related operations in the Users table.\n *\n * This service interacts with the Users table to perform CRUD operations.\n * It also uses the AuthService to handle authentication-related checks and\n * dependencies while ensuring circular dependencies are avoided.\n */\n@Injectable()\nexport class UsersService {\n  /**\n   * Constructs the UsersService with necessary dependencies.\n   *\n   * @param {AuthService} authService - Service for handling authentication-related operations.\n   */\n  constructor(\n    @Inject(forwardRef(() => AuthService))\n    private readonly authService: AuthService,\n\n    /**\n     * Injecting usersRepository\n     */\n    @InjectRepository(User)\n    private usersRepository: Repository,\n\n    // /**\n    //  * Injecting ConfigService\n    //  */\n    // private readonly configService: ConfigService,\n\n    /**\n     * Inject profileConfig\n     */\n    @Inject(profileConfig.KEY)\n    private readonly profileConfiguration: ConfigType,\n  ) {}\n\n  /**\n   * Retrieves a list of all users from the database.\n   *\n   * @param {GetUsersParamDto} getUserParamDto - DTO containing filters for user retrieval.\n   * @param {number} limit - The maximum number of users to return.\n   * @param {number} page - The page number for pagination.\n   * @returns {Array} Array of user objects containing basic details.\n   */\n  public findAll(\n    getUserParamDto: GetUsersParamDto,\n    limit: number,\n    page: number,\n  ) {\n    // Test the new config\n    console.log(this.profileConfiguration);\n    console.log(this.profileConfiguration.apiKey);\n\n    return [\n      {\n        firstName: 'John',\n        email: 'john@doe.com',\n      },\n      {\n        firstName: 'Alice',\n        email: 'alice@doe.com',\n      },\n    ];\n  }\n\n  /**\n   * Retrieves a single user by their unique identifier.\n   *\n   * @param {number} id - The unique ID of the user to retrieve.\n   * @returns {{ id: number; firstName: string; email: string }} A user object containing their details.\n   */\n  public async findOneById(id: number) {\n    return await this.usersRepository.findOneBy({\n      id,\n    });\n  }\n  public async createUser(createUserDto: CreateUserDto) {\n    // Check if email is unique\n    const existingUser = await this.usersRepository.findOne({\n      where: { email: createUserDto.email },\n    });\n    // Handle exception\n\n    // Create a new user\n    let newUser = this.usersRepository.create(createUserDto);\n\n    newUser = await this.usersRepository.save(newUser);\n\n    return newUser;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.module.ts\n            \n            variable\n            ENV\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/providers/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/meta-options/dtos/create-post-meta-options.dto.ts\n            \n            class\n            CreatePostMetaOptionsDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/meta-options/meta-option.entity.ts\n            \n            entity\n            MetaOption\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/meta-options/meta-options.controller.ts\n            \n            controller\n            MetaOptionsController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/meta-options/providers/meta-options.service.ts\n            \n            injectable\n            MetaOptionsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dto/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                100 %\n                (12/12)\n            \n        \n        \n            \n                \n                src/posts/dto/patch-post.dto.ts\n            \n            class\n            PatchPostDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/posts/post.entity.ts\n            \n            entity\n            Post\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/posts/providers/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/tags/dtos/create-tag.dto.ts\n            \n            class\n            CreateTagDto\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/tags/providers/tags.service.ts\n            \n            injectable\n            TagsService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/tags/tag.entity.ts\n            \n            entity\n            Tag\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/tags/tags.controller.ts\n            \n            controller\n            TagsController\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dtos/get-users-param.dto.ts\n            \n            class\n            GetUsersParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/providers/users.service.ts\n            \n            injectable\n            UsersService\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/users/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.23\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.2.2\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/mapped-types : ^2.0.5\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.3.0\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            pg : ^8.11.5\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            PostStatus   (src/.../post-status.enum.ts)\n                        \n                        \n                            PostType   (src/.../post-type.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/posts/enums/post-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PostStatus\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n            \n        \n\n    src/posts/enums/post-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PostType\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\nCompodoc Documentation\nScript\nExample :$ npm run docLet me name this as doc.\nTo see the coverage\nExample :$ http://localhost:3001/coverage.htmlIt should be a comma over here.\nNow this script itself a little bit verbose and lengthy, and I'll try to explain all the parts of the\nscript as we go.\nSo first of all, we need to use NPCs and along with Compo Doc in order to generate the Compo Doc documentation.\nSo we use at the rate compo doc, which is the name of the package.\nSo compo doc slash compo doc.\nSo this basically triggers the compo doc package for us.\nAnd then we need to provide it certain configurations.\nThe first one is the path to the pts config file.\nSo hyphen path to the pts config file TTS config file is within the root of the project itself.\nSo we use tsconfig.json.\nSo it's going to pick up this particular config file which is there in the root of our project.\nSo this particular TTS config file over here.\nNow once we have provided the TTS config file, the next flag that we want to add is the s flag.\nNow what this flag does is that it instructs compared to serve generated documentation on a port.\nNow, having said that, I want to have a specific port number as well.\nSo I use hyphen hyphen port.\nAnd let's serve the documentation on port 3001.\nWith that, I also want to enable Compo doc to watch for changes within my code.\nSo whenever I'm writing any new code, it should watch for changes and regenerate the documentation\nwhenever needed.\nFinally, I want to give it a specific directory for generating the documentation so we can use a hyphen\nd flag, which instructs combo doc to generate the documentation within a specific directory, which\nwe can pass as an argument.\nSo here I'm saying within the root of my project, just use the documentation directory to generate\nyour documentation.\nThe details can be seen at localhost:3001\nAlways define both sides of the relationships in many to many relationships i.e tags and posts\nGenerate a service\nExample :$ npx nest generate service tags/providers/tags --flat --no-specGenerate a module\nExample :$ nest generate module authGenerate a controller\nExample :$ nest generate controller auth --no-spec\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MetaOptionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TagsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_exports\n\n\n\ncluster_TagsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nPostsModule -->\n\nTagsModule->PostsModule\n\n\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nTagsService \n\nTagsService \n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        6 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    6 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    7 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ENV   (src/.../app.module.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENV\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.NODE_ENV\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
