var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.094,1,2.226]],["body/controllers/AppController.html",[0,1.891,1,3.849,2,1.589,3,0.418,4,0.368,5,0.32,6,4.116,7,0.498,8,0.027,9,1.038,10,3.409,11,4.116,12,0.418,13,0.019,14,3.612,15,1.966,16,0.023,17,0.023]],["title/modules/AppModule.html",[18,1.094,19,2.226]],["body/modules/AppModule.html",[1,3.204,2,1.354,3,0.251,4,0.221,5,0.192,7,0.548,8,0.028,9,0.623,10,3.175,11,2.468,12,0.251,13,0.012,16,0.016,17,0.016,18,1.574,19,4.356,20,1.269,21,1.097,22,1.481,23,1.481,24,1.269,25,2.446,26,1.481,27,2.468,28,2.468,29,2.468,30,3.175,31,3.471,32,3.471,33,3.175,34,2.922,35,2.104,36,1.481,37,1.369,38,2.166,39,2.658,40,2.927,41,2.927,42,2.927,43,2.927,44,1.76,45,1.179,46,2.927,47,1.269,48,1.369,49,2.927,50,3.505,51,4.686,52,1.94,53,4.157,54,2.927,55,2.468,56,2.927,57,2.166,58,4.157,59,2.927,60,1.61,61,3.577,62,2.468,63,2.468,64,2.927,65,2.927,66,2.166,67,2.468,68,2.927,69,2.927,70,2.927,71,1.269,72,2.927,73,2.927,74,2.927,75,2.927,76,2.468,77,2.927,78,1.481,79,2.927,80,0.535,81,2.927,82,1.369,83,0.953,84,2.927,85,2.927,86,2.927,87,2.927,88,2.927,89,2.927,90,1.179,91,2.927,92,2.468,93,2.927,94,2.468,95,2.927,96,2.927,97,2.927,98,1.94,99,2.927,100,2.927,101,2.927,102,2.166,103,2.927,104,2.468,105,2.927,106,2.927]],["title/injectables/AppService.html",[10,1.847,107,1.094]],["body/injectables/AppService.html",[3,0.407,4,0.358,5,0.311,7,0.407,8,0.027,9,1.01,10,3.142,12,0.407,13,0.019,16,0.023,17,0.023,107,1.86,108,2.403,109,4.005,110,0.678,111,2.301,112,6.358,113,0.937,114,4.749,115,1.913,116,1.86,117,1.913,118,4.749,119,4.749]],["title/controllers/AuthController.html",[0,1.094,120,2.226]],["body/controllers/AuthController.html",[0,1.838,2,1.516,3,0.399,4,0.351,5,0.305,7,0.484,8,0.027,9,0.99,12,0.399,13,0.018,15,1.875,16,0.022,17,0.022,120,3.741,121,3.925,122,2.798,123,5.122,124,3.074,125,3.925,126,2.798,127,2.798,128,3.444,129,4.655,130,2.177,131,3.085,132,2.018,133,2.177]],["title/modules/AuthModule.html",[18,1.094,30,1.847]],["body/modules/AuthModule.html",[2,1.679,3,0.345,4,0.304,5,0.264,7,0.514,8,0.027,9,0.857,12,0.345,13,0.016,16,0.02,17,0.02,18,1.953,20,1.746,21,1.51,22,2.038,23,2.038,24,1.746,25,2.879,26,2.879,30,3.547,34,2.879,35,2.61,36,2.038,37,1.883,39,2.836,120,3.771,123,3.396,124,3.406,125,3.396,126,2.421,127,2.421,134,3.396,135,3.396,136,3.396,137,4.027,138,3.418,139,4.027,140,3.396,141,3.396,142,2.669,143,2.98]],["title/injectables/AuthService.html",[107,1.094,124,1.7]],["body/injectables/AuthService.html",[3,0.312,4,0.275,5,0.239,7,0.414,8,0.027,9,0.775,12,0.312,13,0.014,15,1.466,16,0.019,17,0.019,60,2.002,71,1.578,78,1.842,80,0.883,83,1.764,98,3.591,107,1.572,108,1.842,110,0.52,111,1.945,113,1.07,115,1.945,116,2.05,117,2.182,124,2.444,126,2.189,127,2.189,128,2.694,130,2.258,131,2.413,132,2.093,133,1.703,138,2.413,142,2.413,143,2.694,144,3.07,145,2.675,146,5.77,147,5.418,148,3.07,149,2.944,150,3.641,151,2.093,152,1.686,153,1.572,154,3.641,155,3.641,156,4.829,157,3.641,158,2.413,159,3.07,160,3.641,161,3.07,162,2.189,163,3.641,164,3.07,165,2.189,166,3.07,167,3.641,168,3.641,169,3.641]],["title/classes/CreatePostDto.html",[13,0.013,170,1.847]],["body/classes/CreatePostDto.html",[3,0.155,4,0.136,5,0.118,7,0.411,8,0.027,12,0.155,13,0.014,16,0.011,17,0.011,47,1.25,71,2.078,80,1.141,90,1.162,110,0.258,113,1.114,116,1.838,153,1.871,170,1.586,171,0.844,172,4.845,173,1.336,174,1.437,175,3.602,176,4.043,177,3.037,178,2.665,179,3.868,180,3.037,181,2.388,182,2.981,183,2.166,184,2.276,185,4.244,186,1.165,187,1.714,188,1.806,189,2.885,190,3.044,191,3.752,192,1.806,193,1.806,194,3.792,195,1.435,196,1.806,197,1.806,198,2.432,199,2.432,200,3.868,201,1.806,202,1.806,203,2.262,204,2.885,205,1.806,206,3.327,207,2.885,208,1.806,209,1.806,210,1.806,211,2.885,212,2.038,213,3.469,214,4.114,215,1.734,216,2.134,217,1.806,218,1.806,219,2.727,220,2.665,221,2.885,222,2.885,223,1.806,224,1.806,225,2.432,226,3.044,227,2.432,228,2.432,229,2.885,230,2.885,231,1.806,232,1.806,233,1.806,234,1.806,235,1.523,236,3.044,237,1.806,238,3.469,239,3.469,240,1.586,241,2.432,242,2.432,243,2.134,244,1.912,245,2.432,246,1.806,247,3.327,248,2.134,249,2.432,250,2.432,251,1.806,252,1.806,253,2.134,254,2.432,255,1.806,256,1.806,257,1.806,258,1.806,259,1.806,260,2.885,261,1.806,262,2.665,263,2.885,264,2.134,265,2.883,266,3.336,267,2.727,268,2.432,269,2.134,270,1.336,271,1.336,272,2.885,273,0.914,274,2.432,275,1.523,276,1.523,277,1.336,278,1.336,279,3.548,280,3.724,281,0.914,282,1.336,283,3.602,284,1.523,285,2.432,286,1.336,287,1.806,288,1.523,289,1.523,290,1.806,291,1.806,292,1.806,293,1.806,294,1.806,295,1.523,296,1.806,297,2.134,298,1.806,299,2.885,300,2.134,301,1.806,302,1.806,303,1.806,304,1.806,305,2.166,306,1.197,307,1.523,308,1.806,309,1.806,310,1.806,311,1.523,312,1.806]],["title/classes/CreatePostMetaOptionsDto.html",[13,0.013,203,1.847]],["body/classes/CreatePostMetaOptionsDto.html",[3,0.395,4,0.348,5,0.302,7,0.395,8,0.027,12,0.395,13,0.022,16,0.022,17,0.022,47,2.432,80,0.842,110,0.658,113,0.91,116,1.827,171,2.155,174,1.959,187,1.4,195,1.38,203,3.085,264,4.151,265,3.373,267,3.055,273,2.332,277,4.151,300,4.475,313,2.432,314,3.886,315,4.609,316,4.609]],["title/classes/CreateTagDto.html",[13,0.013,317,2.019]],["body/classes/CreateTagDto.html",[3,0.292,4,0.257,5,0.224,7,0.396,8,0.027,12,0.292,13,0.018,16,0.018,17,0.018,80,1.074,110,0.487,113,1.159,116,2.102,152,1.831,171,1.595,174,1.614,181,3.475,182,3.893,187,1.784,191,2.779,212,1.831,236,2.524,238,4.739,239,4.739,240,2.542,241,3.898,242,3.898,243,3.42,244,3.064,245,3.898,264,3.42,265,3.152,266,3.725,267,3.725,268,3.898,269,2.524,270,2.524,271,2.524,273,1.726,279,3.879,280,4.159,281,1.726,284,2.876,288,2.876,289,2.876,295,2.876,317,2.779,318,5.107,319,2.876,320,4.421,321,3.411,322,3.411,323,3.411,324,3.411,325,3.411,326,3.411,327,3.411,328,3.411,329,3.411,330,3.411,331,3.411,332,2.876]],["title/classes/CreateUserDto.html",[13,0.013,333,1.847]],["body/classes/CreateUserDto.html",[3,0.307,4,0.271,5,0.235,7,0.307,8,0.027,12,0.307,13,0.019,16,0.019,17,0.019,80,1.048,98,3.564,110,0.512,113,1.132,116,2.075,153,1.556,158,3.564,171,1.676,174,1.669,186,1.354,187,1.742,240,2.629,265,3.448,266,3.168,267,3.801,269,2.653,270,2.653,271,2.653,273,1.814,332,4.03,333,2.629,334,5.037,335,2.653,336,3.979,337,4.534,338,3.585,339,3.585,340,3.585,341,3.585,342,3.585,343,3.585,344,3.585,345,5.735,346,4.78,347,4.78,348,4.78,349,4.78,350,4.78,351,4.78,352,4.547,353,4.78,354,4.78,355,4.78,356,3.585,357,4.78,358,5.735,359,3.585,360,3.585]],["title/classes/GetUsersParamDto.html",[13,0.013,361,2.019]],["body/classes/GetUsersParamDto.html",[3,0.366,4,0.322,5,0.28,7,0.501,8,0.027,12,0.366,13,0.023,16,0.021,17,0.021,80,1.069,83,1.743,110,0.61,113,0.843,153,1.743,171,1.998,174,1.87,186,1.656,187,1.297,191,3.219,194,3.602,212,1.492,262,3.961,266,3.548,273,2.162,280,3.961,281,2.162,282,3.161,361,3.219,362,4.514,363,3.219,364,3.602,365,2.366,366,3.961,367,4.272,368,4.272,369,4.272]],["title/entities/MetaOption.html",[370,1.353,371,1.571]],["body/entities/MetaOption.html",[3,0.302,4,0.266,5,0.231,7,0.405,8,0.027,12,0.302,13,0.014,16,0.019,17,0.019,48,2.859,80,1.117,82,1.647,90,1.902,110,0.503,113,1.172,116,1.538,174,1.65,186,1.338,187,1.803,195,1.581,219,3.774,225,2.97,226,3.943,244,2.335,300,3.943,313,2.65,365,1.998,370,1.902,371,2.209,372,2.97,373,4.494,374,4.494,375,4.494,376,3.522,377,3.532,378,3.522,379,2.335,380,3.131,381,3.522,382,2.97,383,4.723,384,3.983,385,3.522,386,3.522,387,4.494,388,3.522,389,2.606,390,3.131,391,3.983,392,3.983,393,1.527,394,3.522,395,3.522,396,3.522,397,2.335]],["title/controllers/MetaOptionsController.html",[0,1.094,398,2.226]],["body/controllers/MetaOptionsController.html",[0,1.342,2,1.342,3,0.353,4,0.311,5,0.27,7,0.493,8,0.027,9,0.877,12,0.353,13,0.016,14,3.05,15,1.66,16,0.021,17,0.021,47,2.269,48,2.447,80,0.753,110,0.588,111,2.108,113,0.814,115,1.66,117,1.66,122,2.478,145,2.493,151,1.787,152,1.439,153,1.342,187,1.252,195,1.488,203,3.327,278,3.05,313,2.269,398,3.469,399,3.476,400,3.873,401,5.751,402,4.122,403,4.122,404,5.234,405,3.147,406,2.267,407,3.163,408,3.476,409,3.476,410,4.122,411,4.122]],["title/modules/MetaOptionsModule.html",[18,1.094,31,2.019]],["body/modules/MetaOptionsModule.html",[2,1.727,3,0.361,4,0.318,5,0.276,7,0.538,8,0.027,9,0.895,12,0.361,13,0.017,16,0.021,17,0.021,18,1.891,20,1.824,21,1.577,22,2.129,23,2.129,24,1.824,25,2.938,26,2.129,31,3.857,35,2.683,36,2.129,37,1.968,39,2.314,44,2.53,45,1.695,47,2.299,48,1.968,313,1.824,371,1.968,398,3.849,407,3.528,408,3.549,409,3.549,412,3.549,413,3.549,414,4.208,415,4.208,416,2.53,417,4.208]],["title/injectables/MetaOptionsService.html",[107,1.094,407,1.847]],["body/injectables/MetaOptionsService.html",[3,0.327,4,0.288,5,0.25,7,0.523,8,0.027,9,0.813,12,0.327,13,0.015,16,0.02,17,0.02,45,1.538,47,2.16,60,2.1,78,1.933,80,0.911,107,1.623,108,1.933,110,0.545,111,2.007,113,0.984,115,1.538,117,1.538,130,2.33,133,1.786,145,2.404,151,2.16,152,1.74,153,1.623,195,0.939,203,3.233,278,2.826,313,2.404,371,2.33,393,1.655,406,2.1,407,2.74,416,2.296,418,4.677,419,3.22,420,3.335,421,2.33,422,3.819,423,3.535,424,3.819,425,4.983,426,4.983,427,3.819,428,3.819,429,2.296,430,2.531,431,3.22,432,3.22,433,3.819,434,2.531,435,3.819]],["title/classes/PatchPostDto.html",[13,0.013,436,2.019]],["body/classes/PatchPostDto.html",[3,0.371,4,0.326,5,0.284,7,0.504,8,0.027,12,0.371,13,0.021,16,0.021,17,0.021,80,0.791,110,0.617,113,0.854,170,2.378,171,2.022,173,3.2,174,1.884,186,1.528,187,1.313,195,1.327,212,1.51,235,3.647,262,3.992,265,3.243,273,2.189,279,3.992,281,2.189,365,2.375,421,2.022,436,3.243,437,4.549,438,4.549,439,5.395,440,5.395,441,4.325,442,4.325,443,3.647,444,3.2,445,3.2]],["title/classes/PatchUserDto.html",[13,0.013,446,2.226]],["body/classes/PatchUserDto.html",[3,0.408,4,0.36,5,0.312,7,0.491,8,0.027,12,0.408,13,0.019,16,0.023,17,0.023,83,1.552,171,2.228,305,2.865,333,2.621,335,3.526,421,2.677,438,4.827,443,4.018,446,3.794,447,4.018,448,5.725,449,4.018,450,4.018,451,3.526,452,4.765,453,4.765,454,4.018]],["title/entities/Post.html",[195,0.826,370,1.353]],["body/entities/Post.html",[3,0.151,4,0.133,5,0.116,7,0.407,8,0.028,12,0.151,13,0.007,16,0.011,17,0.011,47,1.228,48,0.825,57,3.004,71,2.633,80,1.15,82,0.825,83,1.688,90,2.088,110,0.252,113,1.127,116,1.86,153,1.86,174,0.989,176,3.749,177,2.991,178,3.512,179,3.836,180,2.991,181,2.947,182,2.351,183,2.673,184,2.25,185,3.749,186,0.802,187,1.734,195,1.577,198,2.388,199,2.388,200,2.096,212,0.616,215,1.703,216,2.096,219,2.691,220,3.004,226,2.096,236,3.004,247,3.29,248,2.096,274,2.388,275,1.488,276,1.488,285,4.371,286,2.096,313,0.765,352,3.512,365,1.33,370,1.635,371,1.899,377,2.351,379,3.436,380,3.988,382,1.488,390,3.545,391,1.488,392,2.388,393,0.765,397,1.877,400,2.096,416,1.061,455,1.488,456,2.832,457,2.947,458,1.765,459,2.832,460,4.746,461,1.765,462,3.512,463,4.746,464,3.424,465,1.765,466,2.832,467,2.832,468,3.512,469,3.512,470,2.388,471,1.765,472,1.765,473,2.691,474,3.004,475,2.832,476,1.765,477,4.06,478,2.832,479,2.832,480,1.765,481,2.832,482,2.388,483,1.765,484,2.388,485,1.765,486,2.832,487,2.388,488,2.388,489,1.765,490,2.832,491,1.765,492,2.832,493,2.219,494,1.488,495,2.832,496,1.765,497,1.765,498,2.388,499,1.765,500,2.832,501,2.388,502,2.832,503,1.765,504,1.765,505,1.765,506,1.765,507,1.765,508,1.558,509,1.488]],["title/controllers/PostsController.html",[0,1.094,510,2.226]],["body/controllers/PostsController.html",[0,1.208,2,0.615,3,0.162,4,0.142,5,0.124,7,0.394,8,0.027,9,0.402,12,0.162,13,0.007,14,1.397,15,0.76,16,0.012,17,0.012,71,1.296,80,0.894,83,1.668,90,1.204,110,0.269,111,1.204,113,0.833,115,2.256,116,1.208,117,1.699,122,1.135,132,0.818,145,2.52,151,1.829,152,1.708,153,1.668,170,2.817,183,3.079,184,1.513,186,1.302,187,1.281,190,3.122,195,1.629,200,3.93,212,2.232,240,1.644,281,0.955,306,3.047,307,1.592,365,2.287,366,3.122,405,1.135,436,3.079,444,2.212,445,3.618,487,3.876,508,3.244,510,2.459,511,1.592,512,1.981,513,2.989,514,3.079,515,2.989,516,2.989,517,1.888,518,3.71,519,2.474,520,2.989,521,4.219,522,3.557,523,3.71,524,2.989,525,2.989,526,2.989,527,1.888,528,1.888,529,1.252,530,3.557,531,1.888,532,1.888,533,3.557,534,2.212,535,4.219,536,1.888,537,1.888,538,2.52,539,1.888,540,1.888,541,3.122,542,1.888,543,3.876,544,1.888,545,2.796,546,1.888,547,1.888,548,3.122,549,3.557,550,1.888,551,1.888,552,3.241,553,2.212,554,2.52,555,1.252,556,2.32,557,1.592,558,3.876,559,4.479,560,1.592,561,2.989,562,2.52,563,1.592,564,1.592,565,1.888,566,1.888,567,1.888,568,3.557,569,1.888,570,1.888,571,3.128,572,1.888,573,1.888,574,2.212,575,1.888,576,1.888,577,1.592,578,1.888,579,1.888,580,1.888,581,1.397,582,1.888,583,1.888,584,1.592,585,1.888]],["title/modules/PostsModule.html",[18,1.094,32,2.019]],["body/modules/PostsModule.html",[2,1.564,3,0.31,4,0.273,5,0.237,7,0.559,8,0.027,9,0.769,12,0.31,13,0.014,16,0.019,17,0.019,18,1.95,20,1.566,21,1.354,22,1.828,23,1.828,24,1.566,25,2.731,26,2.431,32,3.923,33,3.386,34,3.116,35,2.431,36,1.828,37,1.689,39,2.642,44,2.172,45,1.455,48,1.689,82,1.689,132,1.566,140,3.046,195,1.182,313,1.566,363,2.172,370,1.455,371,2.246,416,2.172,421,1.689,510,3.577,556,3.386,557,3.046,586,3.046,587,3.613,588,3.046,589,3.613,590,3.613,591,3.046,592,3.613,593,3.613,594,3.613,595,3.046,596,3.613,597,3.613,598,3.046,599,3.613,600,3.613,601,3.613,602,3.046]],["title/injectables/PostsService.html",[107,1.094,556,1.847]],["body/injectables/PostsService.html",[3,0.128,4,0.113,5,0.098,7,0.432,8,0.028,9,0.318,12,0.128,13,0.006,15,1.481,16,0.01,17,0.01,21,0.927,45,0.602,47,1.766,48,0.699,60,2.556,66,1.106,71,1.594,78,1.251,80,0.745,82,1.72,83,1.197,90,0.602,102,1.83,107,0.805,108,0.756,110,0.213,111,0.996,113,0.804,115,2.03,116,1.03,117,2.03,130,1.72,132,1.903,133,1.72,145,2.405,148,1.26,149,2.173,151,1.766,152,1.423,153,1.327,159,1.26,162,0.898,170,2.772,178,2.721,183,1.487,184,1.861,186,1.041,195,1.538,206,2.341,212,1.533,228,2.668,240,0.822,297,1.83,305,2.211,306,1.639,313,0.648,365,1.997,371,1.72,393,0.648,397,0.99,400,3.015,405,0.898,416,0.898,420,3.335,421,1.72,423,3.204,429,2.211,430,0.99,431,3.101,432,1.26,434,3.84,436,2.794,444,1.83,445,1.83,457,1.639,493,1.156,508,2.556,512,2.437,514,2.639,519,2.062,522,2.085,529,2.097,530,2.668,534,2.341,538,1.26,541,1.83,543,2.085,545,1.639,548,1.83,549,2.085,552,3.222,555,0.99,556,1.36,563,1.26,564,1.26,574,1.83,577,1.26,581,1.106,591,1.26,598,2.085,603,1.26,604,3.101,605,4.251,606,3.702,607,2.085,608,3.677,609,3.677,610,2.46,611,1.494,612,3.101,613,1.494,614,1.494,615,3.101,616,2.473,617,1.83,618,2.473,619,1.494,620,2.473,621,2.668,622,2.473,623,1.494,624,2.668,625,2.473,626,1.494,627,1.494,628,2.473,629,1.494,630,1.494,631,1.494,632,1.494,633,1.494,634,1.494,635,2.473,636,3.164,637,1.26,638,1.494,639,1.494,640,2.341,641,1.494,642,1.26,643,1.494,644,1.494,645,1.494,646,1.494,647,1.494,648,1.494,649,1.494,650,2.473,651,3.164,652,1.26,653,1.494,654,1.494,655,1.494,656,1.494,657,1.26,658,1.494,659,1.494,660,1.494,661,2.473,662,2.473,663,1.494,664,1.494,665,1.494,666,1.26,667,1.494,668,1.494,669,1.494,670,1.494,671,2.085,672,1.494,673,1.494,674,1.494,675,1.494,676,1.494,677,1.494,678,1.494,679,1.494,680,1.26,681,1.494,682,1.494,683,1.494,684,1.494,685,1.26,686,1.494,687,1.494,688,1.494,689,1.494,690,1.494,691,2.473,692,1.494,693,2.473,694,1.494,695,2.473,696,1.494,697,2.473,698,1.494,699,2.473,700,1.494,701,2.473,702,1.494,703,2.473,704,1.494,705,1.26,706,1.494]],["title/entities/Tag.html",[370,1.353,493,1.571]],["body/entities/Tag.html",[3,0.238,4,0.21,5,0.182,7,0.343,8,0.027,12,0.238,13,0.011,16,0.016,17,0.016,71,2.683,80,1.185,82,1.298,90,2.069,110,0.396,113,1.222,116,2.015,152,1.639,162,1.67,174,1.398,181,3.111,182,3.111,186,1.134,187,1.88,195,1.395,212,1.639,219,3.76,320,3.958,365,1.759,370,1.612,373,3.958,374,3.958,375,3.958,377,3.111,379,3.609,380,4.102,384,3.375,387,3.958,389,2.055,390,3.875,393,1.204,397,2.653,464,4.332,468,4.198,469,4.198,470,3.375,473,3.405,488,3.375,493,1.872,494,2.342,498,3.375,501,3.375,508,2.581,514,1.67,705,3.375,707,2.342,708,4.694,709,2.777,710,4.694,711,2.777,712,2.777,713,2.777,714,2.777,715,2.777,716,2.777,717,2.777,718,2.777,719,2.777,720,2.777,721,2.777,722,2.777,723,2.777,724,2.342]],["title/controllers/TagsController.html",[0,1.094,725,2.226]],["body/controllers/TagsController.html",[0,1.105,2,1.105,3,0.291,4,0.256,5,0.223,7,0.448,8,0.027,9,0.722,12,0.291,13,0.013,15,1.367,16,0.018,17,0.018,78,1.718,80,0.956,110,0.484,111,1.856,113,1.032,115,2.106,117,2.106,122,2.041,130,1.587,132,1.471,133,1.587,145,2.765,151,2.267,152,1.826,153,1.703,184,1.718,186,1.713,187,1.588,195,1.286,317,3.636,365,2.102,405,2.041,406,1.867,420,3.636,421,2.154,429,2.77,493,1.587,514,3.784,529,2.25,553,3.87,555,2.25,584,2.862,610,2.646,637,2.862,725,3.054,726,2.862,727,4.607,728,2.862,729,3.394,730,3.394,731,3.394,732,4.607,733,3.394,734,2.862,735,2.862,736,3.394,737,3.394,738,3.394,739,3.394,740,3.394,741,3.394]],["title/modules/TagsModule.html",[18,1.094,33,1.847]],["body/modules/TagsModule.html",[2,1.707,3,0.354,4,0.312,5,0.271,7,0.536,8,0.027,9,0.879,12,0.354,13,0.016,16,0.021,17,0.021,18,1.875,20,1.792,21,1.55,22,2.092,23,2.092,24,1.792,25,2.914,26,2.914,33,3.568,35,2.653,36,2.092,37,1.933,39,2.273,44,2.485,45,1.665,493,1.933,610,3.418,725,3.817,734,3.486,742,3.486,743,3.486,744,3.486,745,4.134,746,4.134,747,3.486,748,4.134]],["title/injectables/TagsService.html",[107,1.094,610,1.7]],["body/injectables/TagsService.html",[3,0.23,4,0.202,5,0.176,7,0.46,8,0.028,9,0.57,12,0.23,13,0.011,15,1.08,16,0.02,17,0.015,45,1.08,60,2.531,71,1.692,78,1.357,80,0.982,90,1.08,104,2.261,107,1.271,108,1.357,110,0.383,111,1.572,113,1.06,115,2.035,117,2.163,126,1.612,127,1.612,128,1.984,130,1.825,132,1.162,133,1.254,145,2.727,151,2.328,152,1.876,153,1.749,161,2.261,165,1.612,166,2.261,184,2.557,186,1.712,240,1.475,253,1.984,254,2.261,306,1.777,317,3.229,365,2.101,393,1.162,406,1.475,420,3.782,421,1.825,423,3.038,429,3.038,430,1.777,434,3.56,482,2.261,493,2.621,514,2.767,519,1.975,529,2.587,534,3.405,574,1.984,602,2.261,610,1.975,621,2.261,666,2.261,724,2.261,728,3.291,735,2.261,747,2.261,749,2.261,750,3.903,751,3.903,752,2.681,753,2.681,754,4.602,755,2.681,756,3.903,757,2.681,758,3.903,759,2.681,760,3.903,761,2.681,762,2.681,763,2.681,764,2.681,765,2.681,766,2.681,767,2.681,768,2.681,769,2.261,770,2.681,771,2.681,772,2.681,773,2.681,774,2.681,775,2.681]],["title/entities/User.html",[83,1.094,370,1.353]],["body/entities/User.html",[3,0.271,4,0.238,5,0.207,7,0.376,8,0.027,12,0.271,13,0.013,16,0.017,17,0.017,71,2.358,80,1.162,82,1.477,83,1.64,90,2.383,98,3.338,110,0.451,113,1.168,116,2.014,158,3.338,165,1.899,174,1.531,186,1.242,187,1.796,195,1.455,305,1.899,336,3.726,337,4.247,365,1.888,370,1.766,377,3.338,379,3.606,380,4.1,389,2.337,390,3.921,393,1.9,462,2.337,468,4.577,469,4.577,473,2.906,508,2.992,776,2.663,777,6.186,778,3.158,779,3.158,780,3.158,781,3.158,782,3.158,783,3.158,784,4.384,785,3.158,786,4.384,787,3.158,788,3.158,789,3.158,790,2.663,791,3.158,792,3.158,793,2.663,794,3.158]],["title/controllers/UsersController.html",[0,1.094,795,2.226]],["body/controllers/UsersController.html",[0,0.803,2,0.803,3,0.211,4,0.186,5,0.162,7,0.466,8,0.027,9,0.524,12,0.211,13,0.01,15,0.993,16,0.015,17,0.015,80,1.03,83,0.803,90,1.955,110,0.352,111,1.477,113,0.865,115,1.765,117,2.089,122,1.482,130,1.153,131,1.634,132,1.068,133,1.153,145,2.564,149,2.049,151,2.104,152,1.812,153,1.58,162,1.482,183,1.482,186,1.787,187,1.331,190,3.591,191,2.918,195,1.078,212,1.899,215,3.48,227,2.078,244,1.634,281,1.247,297,2.714,333,3.183,361,2.918,363,3.27,405,2.205,406,1.356,446,3.836,451,2.714,519,1.856,533,3.093,545,2.431,552,2.431,553,3.242,554,3.694,555,3.217,558,3.093,559,3.093,560,2.078,562,3.694,568,2.078,571,3.093,640,1.824,642,2.078,671,2.078,795,2.431,796,2.078,797,4.381,798,4.381,799,3.668,800,2.465,801,2.465,802,2.465,803,4.586,804,2.465,805,3.668,806,3.668,807,2.465,808,3.668,809,3.093,810,2.465,811,3.668,812,3.668,813,3.668,814,2.465,815,3.668,816,3.093,817,4.381,818,2.465,819,3.093,820,2.465,821,2.465,822,2.465,823,2.465,824,2.078,825,2.465,826,2.465,827,2.465,828,2.465,829,2.465,830,3.668,831,2.078,832,2.078,833,2.465,834,2.078,835,2.465,836,2.465,837,2.465,838,2.465,839,2.078,840,2.465,841,2.465,842,2.465,843,2.465,844,2.465,845,2.465,846,2.465,847,2.465,848,2.465,849,2.465,850,2.465]],["title/modules/UsersModule.html",[18,1.094,34,1.7]],["body/modules/UsersModule.html",[2,1.799,3,0.325,4,0.286,5,0.248,7,0.553,8,0.027,9,0.806,12,0.425,13,0.015,16,0.02,17,0.02,18,1.799,20,1.642,21,1.42,22,1.917,23,1.917,24,1.642,25,2.966,26,2.796,30,3.038,34,3.217,35,2.508,36,1.917,37,1.771,39,2.726,44,2.278,45,1.526,50,3.194,52,2.511,83,1.233,138,3.285,141,3.194,142,2.511,143,2.803,149,3.12,795,3.662,834,3.194,851,3.194,852,3.194,853,3.194,854,3.788,855,3.788,856,3.788,857,3.194,858,3.194,859,3.194,860,3.788,861,3.788,862,3.788]],["title/injectables/UsersService.html",[107,1.094,149,1.571]],["body/injectables/UsersService.html",[3,0.166,4,0.146,5,0.127,7,0.472,8,0.028,9,0.412,12,0.166,13,0.008,15,1.52,16,0.012,17,0.012,21,1.853,45,0.78,51,3.609,52,1.284,60,1.066,78,1.544,80,0.782,83,1.957,92,2.572,102,2.257,107,0.993,108,0.981,110,0.276,111,1.229,113,0.845,115,1.875,116,0.993,117,1.875,124,2.912,130,1.427,131,2.022,132,2.143,133,2.001,138,1.284,142,2.022,145,2.39,149,2.001,151,1.855,152,1.495,153,1.394,158,3.085,164,1.634,165,1.165,186,1.752,206,2.257,212,1.495,215,2.972,243,2.257,253,2.792,305,1.834,333,2.56,336,2.792,361,2.799,363,3.315,365,1.853,393,0.84,406,1.066,420,2.972,421,0.906,423,2.573,429,1.834,430,1.284,434,2.501,451,1.434,473,3.085,474,2.257,512,2.022,519,1.544,541,3.167,545,2.022,552,3.085,604,2.572,605,4.169,606,4.169,607,3.182,612,3.182,615,4.169,617,3.167,803,3.609,819,3.182,831,1.634,832,1.634,857,1.634,858,2.572,859,1.634,863,1.634,864,3.609,865,3.051,866,3.051,867,4.28,868,3.051,869,3.051,870,3.051,871,3.051,872,3.051,873,1.938,874,4.28,875,3.773,876,4.28,877,1.938,878,3.051,879,3.051,880,3.051,881,1.938,882,1.938,883,1.938,884,3.051,885,3.051,886,3.051,887,3.051,888,3.051,889,3.051,890,3.051,891,1.938,892,3.051,893,3.051,894,1.938,895,1.938,896,1.938,897,1.634,898,1.634,899,1.938,900,1.938,901,1.938,902,1.938,903,1.938,904,1.938,905,1.938,906,1.938,907,1.938,908,1.938,909,3.773,910,1.938,911,1.938]],["title/coverage.html",[912,3.384]],["body/coverage.html",[0,1.937,1,2.131,5,0.211,6,2.712,8,0.027,10,1.768,13,0.024,16,0.018,17,0.018,24,1.394,38,2.379,47,1.394,48,2.076,61,2.379,80,0.588,83,1.047,107,1.937,109,2.712,120,2.131,121,2.712,124,1.627,144,2.712,149,1.504,170,1.768,172,2.712,173,3.285,195,1.092,203,1.768,277,2.379,313,2.377,314,2.712,317,1.933,318,2.712,319,2.712,333,1.768,334,2.712,335,3.285,361,1.933,362,2.712,363,1.933,364,2.712,370,2.208,371,1.504,372,2.712,398,2.131,399,2.712,407,1.768,418,2.712,419,2.712,436,1.933,437,2.712,446,2.131,447,2.712,455,2.712,474,2.379,493,1.504,510,2.131,511,2.712,519,1.627,556,1.768,603,2.712,610,1.627,707,2.712,725,2.131,726,2.712,749,2.712,776,2.712,795,2.131,796,2.712,863,2.712,864,2.712,912,2.379,913,2.712,914,3.216,915,6.753,916,6.213,917,3.216,918,5.754,919,5.085,920,2.712,921,3.216,922,3.216,923,3.216,924,5.085,925,3.216,926,3.216,927,3.216,928,3.216,929,3.216,930,3.216,931,3.216,932,3.216,933,3.216,934,3.216]],["title/dependencies.html",[21,1.513,935,2.079]],["body/dependencies.html",[8,0.027,9,0.968,13,0.022,16,0.022,17,0.022,21,1.705,45,1.832,52,3.015,273,2.302,281,2.302,282,3.366,393,1.972,449,3.836,450,3.836,936,4.549,937,4.549,938,6.014,939,4.549,940,4.549,941,4.549,942,4.549,943,4.549,944,4.549,945,4.549,946,4.549,947,4.549,948,4.549,949,4.549,950,4.549,951,4.549,952,4.549,953,4.549,954,4.549,955,4.549]],["title/miscellaneous/enumerations.html",[956,1.545,957,3.404]],["body/miscellaneous/enumerations.html",[8,0.027,16,0.022,17,0.022,110,0.651,179,4.127,195,1.372,215,3.353,216,4.127,220,4.127,247,4.127,248,4.127,249,4.703,250,4.703,286,4.127,956,2.51,957,3.848,958,5.577,959,5.577,960,5.577,961,5.577,962,5.642]],["title/miscellaneous/functions.html",[956,1.545,963,3.404]],["body/miscellaneous/functions.html",[8,0.024,16,0.024,17,0.024,24,2.765,110,0.746,920,4.407,956,2.874,963,4.407,964,5.226]],["title/index.html",[110,0.401,509,2.369,965,2.81]],["body/index.html",[4,0.153,5,0.33,8,0.025,16,0.012,17,0.012,37,2.353,55,1.704,63,4.585,66,1.496,67,1.704,76,1.704,94,3.693,126,2.331,127,2.331,152,1.101,162,1.215,165,3.026,184,1.023,186,0.572,191,2.855,212,0.706,213,1.704,311,3.693,352,1.496,366,2.869,423,1.215,454,2.659,457,1.34,462,2.333,484,3.269,508,1.112,512,1.34,519,1.023,548,1.496,581,2.333,595,1.704,617,1.496,624,1.704,640,3.724,652,1.704,657,1.704,680,1.704,685,1.704,769,3.693,790,1.704,793,1.704,809,1.704,816,3.693,824,1.704,839,4.243,897,2.659,898,4.243,912,1.496,913,4.908,935,2.333,966,2.021,967,2.021,968,3.877,969,3.153,970,2.021,971,2.021,972,2.021,973,2.021,974,3.153,975,2.021,976,5.256,977,2.021,978,5.587,979,2.021,980,2.021,981,3.877,982,3.153,983,2.021,984,3.153,985,2.021,986,3.877,987,2.021,988,2.021,989,2.021,990,2.021,991,2.021,992,2.021,993,4.38,994,5.437,995,3.153,996,2.021,997,2.021,998,2.021,999,2.021,1000,3.153,1001,4.38,1002,2.021,1003,3.153,1004,2.021,1005,3.153,1006,5.032,1007,4.38,1008,2.021,1009,3.153,1010,2.021,1011,2.021,1012,2.021,1013,4.38,1014,2.021,1015,2.021,1016,2.021,1017,2.021,1018,3.153,1019,2.021,1020,2.021,1021,2.021,1022,2.021,1023,3.153,1024,2.021,1025,2.021,1026,2.021,1027,3.153,1028,2.021,1029,2.021,1030,3.693,1031,3.153,1032,2.021,1033,2.021,1034,2.021,1035,2.021,1036,2.021,1037,2.021,1038,2.021,1039,2.021,1040,3.153,1041,2.021,1042,2.021,1043,2.021,1044,2.021,1045,2.021,1046,3.877,1047,2.021,1048,2.021,1049,2.021,1050,3.153,1051,2.021,1052,2.021,1053,2.021,1054,2.021,1055,3.153,1056,2.021,1057,2.021,1058,2.021,1059,3.153,1060,3.153,1061,2.021,1062,2.021,1063,2.021,1064,2.021,1065,2.021,1066,2.021,1067,2.021,1068,2.021,1069,2.021,1070,2.021,1071,2.021,1072,2.021,1073,2.021,1074,2.021,1075,2.021,1076,1.704,1077,2.021,1078,3.877,1079,2.021,1080,5.587,1081,2.021,1082,3.153,1083,4.38,1084,3.153,1085,2.021,1086,2.021,1087,2.021,1088,2.021,1089,2.021,1090,2.021,1091,2.021,1092,2.021,1093,3.153,1094,2.021,1095,5.256,1096,2.021,1097,2.021,1098,2.021,1099,2.021,1100,2.021,1101,2.021,1102,2.021,1103,2.021,1104,3.153,1105,3.153,1106,4.38,1107,3.877,1108,3.877,1109,2.021,1110,2.021,1111,2.021,1112,3.153,1113,2.021,1114,2.021,1115,2.021,1116,4.38,1117,2.021,1118,3.153,1119,2.021,1120,3.153,1121,2.021,1122,2.021,1123,2.021,1124,2.021,1125,2.021,1126,2.021,1127,3.153,1128,3.153,1129,3.153,1130,2.021,1131,2.021,1132,2.021,1133,2.021,1134,3.877,1135,2.021,1136,2.021,1137,2.021,1138,2.021,1139,2.021,1140,2.021,1141,2.021,1142,2.021,1143,2.021,1144,2.021,1145,2.021]],["title/modules.html",[20,1.983]],["body/modules.html",[8,0.023,16,0.023,17,0.023,19,3.191,20,2.087,30,2.648,31,2.894,32,2.894,33,2.648,34,2.436,1030,5.589,1146,6.628,1147,6.628,1148,6.628]],["title/overview.html",[1149,3.857]],["body/overview.html",[2,1.164,8,0.027,10,2.953,16,0.019,17,0.019,18,1.164,19,4.433,20,1.55,21,1.34,22,1.81,23,1.81,24,1.55,25,1.81,26,1.81,27,3.015,28,3.015,29,3.015,30,3.377,31,3.589,32,3.877,33,3.447,34,3.172,35,2.414,36,1.81,37,1.672,82,1.672,108,1.81,124,3.172,134,3.015,135,3.015,136,3.015,149,2.931,171,1.672,407,2.953,412,3.015,413,3.015,556,2.953,586,3.015,588,3.015,610,3.172,742,3.015,743,3.015,744,3.015,851,3.015,852,3.015,853,3.015,1149,3.015,1150,5.37,1151,3.576,1152,3.576]],["title/properties.html",[174,1.41,935,2.079]],["body/properties.html",[8,0.027,16,0.024,17,0.024,174,1.805,212,1.805,457,3.426,1076,4.358,1153,5.169,1154,5.169,1155,5.169]],["title/miscellaneous/variables.html",[956,1.545,1156,3.404]],["body/miscellaneous/variables.html",[8,0.025,16,0.024,17,0.024,38,3.825,57,3.825,61,4.444,62,4.358,110,0.738,956,2.842,962,4.358,1156,4.358,1157,5.169]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":915,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":1154,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":947,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":952,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":955,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":946,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":916,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":923,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":918,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":922,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":919,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":931,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":928,"title":{},"body":{"coverage.html":{}}}],["03",{"_index":222,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1",{"_index":297,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["1.1.23",{"_index":937,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":925,"title":{},"body":{"coverage.html":{}}}],["1/6",{"_index":930,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":841,"title":{},"body":{"controllers/UsersController.html":{}}}],["10.0.0",{"_index":938,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":945,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":924,"title":{},"body":{"coverage.html":{}}}],["1024",{"_index":470,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["10})@apiquery({name",{"_index":814,"title":{},"body":{"controllers/UsersController.html":{}}}],["1234",{"_index":369,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["1234'})@isoptional()@isint()@type(undefined",{"_index":367,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["16",{"_index":929,"title":{},"body":{"coverage.html":{}}}],["16t07:46:32+0000",{"_index":296,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["16t07:46:32+0000'})@isiso8601()@isoptional",{"_index":223,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1})@isnotempty()@isint",{"_index":192,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["2",{"_index":298,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["2.0.5",{"_index":941,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":533,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["201",{"_index":521,"title":{},"body":{"controllers/PostsController.html":{}}}],["2024",{"_index":221,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["256",{"_index":488,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["3.2.2",{"_index":939,"title":{},"body":{"dependencies.html":{}}}],["3001",{"_index":1125,"title":{},"body":{"index.html":{}}}],["4",{"_index":1151,"title":{},"body":{"overview.html":{}}}],["4/5",{"_index":933,"title":{},"body":{"coverage.html":{}}}],["400",{"_index":524,"title":{},"body":{"controllers/PostsController.html":{}}}],["404",{"_index":535,"title":{},"body":{"controllers/PostsController.html":{}}}],["5/5",{"_index":926,"title":{},"body":{"coverage.html":{}}}],["512",{"_index":498,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["6",{"_index":1150,"title":{},"body":{"overview.html":{}}}],["6/6",{"_index":927,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":1152,"title":{},"body":{"overview.html":{}}}],["7.3.0",{"_index":944,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":954,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":349,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["8.11.5",{"_index":949,"title":{},"body":{"dependencies.html":{}}}],["80",{"_index":932,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":239,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["96",{"_index":777,"title":{},"body":{"entities/User.html":{}}}],["actual",{"_index":583,"title":{},"body":{"controllers/PostsController.html":{}}}],["add",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["against",{"_index":309,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["alice",{"_index":902,"title":{},"body":{"injectables/UsersService.html":{}}}],["alice@doe.com",{"_index":903,"title":{},"body":{"injectables/UsersService.html":{}}}],["allowing",{"_index":1019,"title":{},"body":{"index.html":{}}}],["along",{"_index":624,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{}}}],["always",{"_index":1142,"title":{},"body":{"index.html":{}}}],["amazing",{"_index":1065,"title":{},"body":{"index.html":{}}}],["api",{"_index":817,"title":{},"body":{"controllers/UsersController.html":{}}}],["apioperation",{"_index":558,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":518,"title":{},"body":{"controllers/PostsController.html":{}}}],["apiparam",{"_index":561,"title":{},"body":{"controllers/PostsController.html":{}}}],["apiproperty",{"_index":279,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty()@isstring()@isnotempty()@matches(/^[a",{"_index":329,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apiproperty()@isstring()@minlength(3)@isnotempty()@maxlength(256",{"_index":325,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apiproperty({description",{"_index":235,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({enum",{"_index":211,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiproperty({example",{"_index":257,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiproperty({type",{"_index":188,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apipropertyoptional",{"_index":280,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional()@isoptional()@isjson",{"_index":327,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apipropertyoptional()@isoptional()@isstring",{"_index":321,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apipropertyoptional()@isoptional()@isurl()@maxlength(1024",{"_index":323,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apipropertyoptional({description",{"_index":194,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({type",{"_index":205,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiquery",{"_index":562,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiresponse",{"_index":559,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":560,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags('posts",{"_index":566,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('users",{"_index":837,"title":{},"body":{"controllers/UsersController.html":{}}}],["app.controller",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appconfig",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":839,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["application'})@apiresponse({status",{"_index":807,"title":{},"body":{"controllers/UsersController.html":{}}}],["applications",{"_index":974,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":19,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":10,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["argument",{"_index":1138,"title":{},"body":{"index.html":{}}}],["array",{"_index":253,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["associated",{"_index":477,"title":{},"body":{"entities/Post.html":{}}}],["async",{"_index":420,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["atomically",{"_index":653,"title":{},"body":{"injectables/PostsService.html":{}}}],["auth",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth.controller",{"_index":139,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/providers/auth",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{}}}],["authcontroller",{"_index":120,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authentication",{"_index":867,"title":{},"body":{"injectables/UsersService.html":{}}}],["authmodule",{"_index":30,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":457,"title":{},"body":{"entities/Post.html":{},"injectables/PostsService.html":{},"index.html":{},"properties.html":{}}}],["authorid",{"_index":175,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["authservice",{"_index":124,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["autoloadentities",{"_index":84,"title":{},"body":{"modules/AppModule.html":{}}}],["automatically",{"_index":663,"title":{},"body":{"injectables/PostsService.html":{}}}],["available",{"_index":77,"title":{},"body":{"modules/AppModule.html":{}}}],["avoid",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{}}}],["avoided",{"_index":870,"title":{},"body":{"injectables/UsersService.html":{}}}],["await",{"_index":434,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["aws",{"_index":1009,"title":{},"body":{"index.html":{}}}],["backers",{"_index":1066,"title":{},"body":{"index.html":{}}}],["based",{"_index":809,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["basic",{"_index":889,"title":{},"body":{"injectables/UsersService.html":{}}}],["basically",{"_index":1099,"title":{},"body":{"index.html":{}}}],["become",{"_index":633,"title":{},"body":{"injectables/PostsService.html":{}}}],["before",{"_index":770,"title":{},"body":{"injectables/TagsService.html":{}}}],["between",{"_index":582,"title":{},"body":{"controllers/PostsController.html":{}}}],["bidirectional",{"_index":478,"title":{},"body":{"entities/Post.html":{}}}],["bit",{"_index":1086,"title":{},"body":{"index.html":{}}}],["blog",{"_index":200,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{}}}],["board",{"_index":1058,"title":{},"body":{"index.html":{}}}],["body",{"_index":405,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["body(new",{"_index":848,"title":{},"body":{"controllers/UsersController.html":{}}}],["boolean",{"_index":155,"title":{},"body":{"injectables/AuthService.html":{}}}],["bootstrap",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["both",{"_index":652,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{}}}],["browse",{"_index":1148,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1146,"title":{},"body":{"modules.html":{}}}],["building",{"_index":969,"title":{},"body":{"index.html":{}}}],["c:\\users\\mfabouatmeh\\desktop\\codesdar\\more\\postgre\\data",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["cascade",{"_index":397,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{}}}],["cascade'})@joincolumn",{"_index":385,"title":{},"body":{"entities/MetaOption.html":{}}}],["cascades",{"_index":578,"title":{},"body":{"controllers/PostsController.html":{}}}],["catch",{"_index":672,"title":{},"body":{"injectables/PostsService.html":{}}}],["cause",{"_index":141,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["certain",{"_index":1102,"title":{},"body":{"index.html":{}}}],["changes",{"_index":1127,"title":{},"body":{"index.html":{}}}],["channel",{"_index":1033,"title":{},"body":{"index.html":{}}}],["character",{"_index":355,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["chars",{"_index":350,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["check",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["checks",{"_index":868,"title":{},"body":{"injectables/UsersService.html":{}}}],["circular",{"_index":142,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["class",{"_index":13,"title":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":171,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"overview.html":{}}}],["clean",{"_index":684,"title":{},"body":{"injectables/PostsService.html":{}}}],["clicks",{"_index":1018,"title":{},"body":{"index.html":{}}}],["cloud",{"_index":1004,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":134,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":135,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":136,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule",{"_index":412,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule_providers",{"_index":413,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":586,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":587,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":588,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule",{"_index":742,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_exports",{"_index":743,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_providers",{"_index":744,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":851,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":853,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":852,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cmd",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["code",{"_index":454,"title":{},"body":{"classes/PatchUserDto.html":{},"index.html":{}}}],["column",{"_index":390,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["column({type",{"_index":379,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["combo",{"_index":1136,"title":{},"body":{"index.html":{}}}],["come",{"_index":1024,"title":{},"body":{"index.html":{}}}],["comma",{"_index":1081,"title":{},"body":{"index.html":{}}}],["commit",{"_index":667,"title":{},"body":{"injectables/PostsService.html":{}}}],["compared",{"_index":1119,"title":{},"body":{"index.html":{}}}],["compo",{"_index":1095,"title":{},"body":{"index.html":{}}}],["compodoc",{"_index":1077,"title":{},"body":{"index.html":{}}}],["compodoc/compodoc",{"_index":936,"title":{},"body":{"dependencies.html":{}}}],["config",{"_index":898,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["config/app.config",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["config/database.config",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["config/profile.config",{"_index":859,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["configmodule",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["configmodule.forfeature(profileconfig",{"_index":862,"title":{},"body":{"modules/UsersModule.html":{}}}],["configmodule.forroot",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"injectables/UsersService.html":{}}}],["configservice.get('database.autoloadentities",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.host",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.name",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.pass",{"_index":99,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.port",{"_index":95,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.synchronize",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.user",{"_index":97,"title":{},"body":{"modules/AppModule.html":{}}}],["configtype",{"_index":876,"title":{},"body":{"injectables/UsersService.html":{}}}],["configurations",{"_index":1103,"title":{},"body":{"index.html":{}}}],["console.error(error",{"_index":678,"title":{},"body":{"injectables/PostsService.html":{}}}],["console.log(this.profileconfiguration",{"_index":899,"title":{},"body":{"injectables/UsersService.html":{}}}],["const",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":873,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(metaoptionrepository",{"_index":422,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["constructor(private",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{}}}],["constructor(tagsrepository",{"_index":752,"title":{},"body":{"injectables/TagsService.html":{}}}],["constructor(usersservice",{"_index":148,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["constructs",{"_index":878,"title":{},"body":{"injectables/UsersService.html":{}}}],["containing",{"_index":615,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["content",{"_index":176,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["content'})@isstring()@isoptional",{"_index":196,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["context",{"_index":230,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('meta",{"_index":410,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["controller('posts",{"_index":565,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('tags",{"_index":736,"title":{},"body":{"controllers/TagsController.html":{}}}],["controller('users",{"_index":836,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["copy",{"_index":644,"title":{},"body":{"injectables/PostsService.html":{}}}],["corrected",{"_index":310,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["corresponding",{"_index":600,"title":{},"body":{"modules/PostsModule.html":{}}}],["courses",{"_index":1039,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":912,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":421,"title":{},"body":{"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["create(@body",{"_index":637,"title":{},"body":{"injectables/PostsService.html":{},"controllers/TagsController.html":{}}}],["create(createmetaoptiondto",{"_index":426,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["create(createpostdto",{"_index":613,"title":{},"body":{"injectables/PostsService.html":{}}}],["create(createtagdto",{"_index":728,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["created",{"_index":522,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["createdate",{"_index":373,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["createdatecolumn",{"_index":375,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["createmetaoption",{"_index":401,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["createmetaoption(createpostmetaoptiondto",{"_index":402,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["createmetaoptiondto",{"_index":428,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["createpost",{"_index":513,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(@body",{"_index":572,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(createpostdto",{"_index":517,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpostdto",{"_index":170,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["createpostmetaoptiondto",{"_index":404,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["createpostmetaoptionsdto",{"_index":203,"title":{"classes/CreatePostMetaOptionsDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["creates",{"_index":306,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["createtagdto",{"_index":317,"title":{"classes/CreateTagDto.html":{}},"body":{"classes/CreateTagDto.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"coverage.html":{}}}],["createuser",{"_index":871,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuser(createuserdto",{"_index":880,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto",{"_index":333,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":907,"title":{},"body":{"injectables/UsersService.html":{}}}],["createusers",{"_index":797,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusers(createuserdto",{"_index":800,"title":{},"body":{"controllers/UsersController.html":{}}}],["creating",{"_index":756,"title":{},"body":{"injectables/TagsService.html":{}}}],["creation",{"_index":616,"title":{},"body":{"injectables/PostsService.html":{}}}],["crowded",{"_index":634,"title":{},"body":{"injectables/PostsService.html":{}}}],["crud",{"_index":866,"title":{},"body":{"injectables/UsersService.html":{}}}],["d",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["data",{"_index":487,"title":{},"body":{"entities/Post.html":{},"controllers/PostsController.html":{}}}],["data'})@post",{"_index":527,"title":{},"body":{"controllers/PostsController.html":{}}}],["database",{"_index":102,"title":{},"body":{"modules/AppModule.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["databaseconfig",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["date",{"_index":219,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["db",{"_index":602,"title":{},"body":{"modules/PostsModule.html":{},"injectables/TagsService.html":{}}}],["declarations",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorartor",{"_index":722,"title":{},"body":{"entities/Tag.html":{}}}],["decorator",{"_index":302,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["decorators",{"_index":187,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["deeper",{"_index":1035,"title":{},"body":{"index.html":{}}}],["default",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"entities/Post.html":{},"miscellaneous/variables.html":{}}}],["defaultvaluepipe",{"_index":829,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(1",{"_index":845,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(10",{"_index":843,"title":{},"body":{"controllers/UsersController.html":{}}}],["define",{"_index":1143,"title":{},"body":{"index.html":{}}}],["defined",{"_index":113,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":514,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["delete'})@apiresponse({status",{"_index":532,"title":{},"body":{"controllers/PostsController.html":{}}}],["delete('soft",{"_index":732,"title":{},"body":{"controllers/TagsController.html":{}}}],["delete(@query('id",{"_index":584,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{}}}],["delete(id",{"_index":529,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["deleted",{"_index":534,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["deletedat",{"_index":708,"title":{},"body":{"entities/Tag.html":{}}}],["deletedatecolumn",{"_index":710,"title":{},"body":{"entities/Tag.html":{}}}],["deletes",{"_index":530,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["deleting",{"_index":771,"title":{},"body":{"injectables/TagsService.html":{}}}],["deletion",{"_index":621,"title":{},"body":{"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["dependencies",{"_index":21,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{},"overview.html":{}}}],["dependency",{"_index":143,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{}}}],["deploy",{"_index":993,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":1008,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":1000,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":1017,"title":{},"body":{"index.html":{}}}],["description",{"_index":212,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"properties.html":{}}}],["details",{"_index":617,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["development",{"_index":980,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":1045,"title":{},"body":{"index.html":{}}}],["differ",{"_index":788,"title":{},"body":{"entities/User.html":{}}}],["directory",{"_index":1134,"title":{},"body":{"index.html":{}}}],["disable",{"_index":823,"title":{},"body":{"controllers/UsersController.html":{}}}],["discord",{"_index":1032,"title":{},"body":{"index.html":{}}}],["dive",{"_index":1034,"title":{},"body":{"index.html":{}}}],["doc",{"_index":1080,"title":{},"body":{"index.html":{}}}],["doclet",{"_index":1079,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":913,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["doesnt",{"_index":632,"title":{},"body":{"injectables/PostsService.html":{}}}],["draft",{"_index":248,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["dto",{"_index":305,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchUserDto.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["dto/create",{"_index":563,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["dto/patch",{"_index":564,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["dtos/create",{"_index":406,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/get",{"_index":831,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/patch",{"_index":833,"title":{},"body":{"controllers/UsersController.html":{}}}],["e.g",{"_index":481,"title":{},"body":{"entities/Post.html":{}}}],["e2e",{"_index":988,"title":{},"body":{"index.html":{}}}],["each",{"_index":299,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["eager",{"_index":460,"title":{},"body":{"entities/Post.html":{}}}],["efficient",{"_index":970,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":999,"title":{},"body":{"index.html":{}}}],["email",{"_index":158,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["enable",{"_index":1126,"title":{},"body":{"index.html":{}}}],["enables",{"_index":723,"title":{},"body":{"entities/Tag.html":{}}}],["ensure",{"_index":997,"title":{},"body":{"index.html":{}}}],["ensuring",{"_index":869,"title":{},"body":{"injectables/UsersService.html":{}}}],["enterprise",{"_index":1049,"title":{},"body":{"index.html":{}}}],["entire",{"_index":593,"title":{},"body":{"modules/PostsModule.html":{}}}],["entities",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"overview.html":{}}}],["entity",{"_index":370,"title":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"entities/Tag.html":{},"entities/User.html":{},"coverage.html":{}}}],["entries",{"_index":811,"title":{},"body":{"controllers/UsersController.html":{}}}],["enum",{"_index":285,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["enumerations",{"_index":957,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/post",{"_index":274,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["env",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["env.${env",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["error",{"_index":228,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["error('post",{"_index":662,"title":{},"body":{"injectables/PostsService.html":{}}}],["error.message",{"_index":679,"title":{},"body":{"injectables/PostsService.html":{}}}],["eslint",{"_index":822,"title":{},"body":{"controllers/UsersController.html":{}}}],["eslint/no",{"_index":825,"title":{},"body":{"controllers/UsersController.html":{}}}],["etc",{"_index":492,"title":{},"body":{"entities/Post.html":{}}}],["everything",{"_index":668,"title":{},"body":{"injectables/PostsService.html":{}}}],["example",{"_index":191,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["exception",{"_index":908,"title":{},"body":{"injectables/UsersService.html":{}}}],["existing",{"_index":549,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["existinguser",{"_index":905,"title":{},"body":{"injectables/UsersService.html":{}}}],["exists",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TagsService.html":{}}}],["experience",{"_index":1037,"title":{},"body":{"index.html":{}}}],["explain",{"_index":1090,"title":{},"body":{"index.html":{}}}],["export",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":943,"title":{},"body":{"dependencies.html":{}}}],["extend",{"_index":452,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["extends",{"_index":438,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["failure",{"_index":677,"title":{},"body":{"injectables/PostsService.html":{}}}],["false",{"_index":90,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["fast",{"_index":1011,"title":{},"body":{"index.html":{}}}],["feature",{"_index":597,"title":{},"body":{"modules/PostsModule.html":{}}}],["featured",{"_index":198,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["featuredimage",{"_index":320,"title":{},"body":{"classes/CreateTagDto.html":{},"entities/Tag.html":{}}}],["featuredimageurl",{"_index":177,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["features",{"_index":1021,"title":{},"body":{"index.html":{}}}],["fetch",{"_index":507,"title":{},"body":{"entities/Post.html":{}}}],["fetched",{"_index":808,"title":{},"body":{"controllers/UsersController.html":{}}}],["fetches",{"_index":805,"title":{},"body":{"controllers/UsersController.html":{}}}],["few",{"_index":1013,"title":{},"body":{"index.html":{}}}],["fields",{"_index":628,"title":{},"body":{"injectables/PostsService.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{}}}],["filters",{"_index":884,"title":{},"body":{"injectables/UsersService.html":{}}}],["finally",{"_index":680,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{}}}],["find",{"_index":658,"title":{},"body":{"injectables/PostsService.html":{}}}],["findall",{"_index":607,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["findall(getuserparamdto",{"_index":882,"title":{},"body":{"injectables/UsersService.html":{}}}],["findall(userid",{"_index":622,"title":{},"body":{"injectables/PostsService.html":{}}}],["findmultipletags",{"_index":750,"title":{},"body":{"injectables/TagsService.html":{}}}],["findmultipletags(tags",{"_index":758,"title":{},"body":{"injectables/TagsService.html":{}}}],["findonebyid",{"_index":872,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyid(id",{"_index":890,"title":{},"body":{"injectables/UsersService.html":{}}}],["finds",{"_index":768,"title":{},"body":{"injectables/TagsService.html":{}}}],["first",{"_index":1093,"title":{},"body":{"index.html":{}}}],["firstname",{"_index":336,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["flag",{"_index":1116,"title":{},"body":{"index.html":{}}}],["flat",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TagsService.html":{}}}],["focus",{"_index":1020,"title":{},"body":{"index.html":{}}}],["follow",{"_index":1052,"title":{},"body":{"index.html":{}}}],["forwardref",{"_index":138,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["found",{"_index":574,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["found'})@delete",{"_index":536,"title":{},"body":{"controllers/PostsController.html":{}}}],["found'})@patch",{"_index":550,"title":{},"body":{"controllers/PostsController.html":{}}}],["framework",{"_index":968,"title":{},"body":{"index.html":{}}}],["friendly",{"_index":490,"title":{},"body":{"entities/Post.html":{}}}],["full",{"_index":1048,"title":{},"body":{"index.html":{}}}],["function",{"_index":921,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":963,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":1016,"title":{},"body":{"index.html":{}}}],["generate",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/TagsService.html":{},"index.html":{}}}],["generated",{"_index":1121,"title":{},"body":{"index.html":{}}}],["generating",{"_index":1135,"title":{},"body":{"index.html":{}}}],["get('/:id",{"_index":838,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:id?')@apioperation({summary",{"_index":804,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:userid",{"_index":567,"title":{},"body":{"controllers/PostsController.html":{}}}],["get('/:userid?')@apioperation({summary",{"_index":540,"title":{},"body":{"controllers/PostsController.html":{}}}],["gethello",{"_index":112,"title":{},"body":{"injectables/AppService.html":{}}}],["getposts",{"_index":515,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(@param('userid",{"_index":569,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(userid",{"_index":539,"title":{},"body":{"controllers/PostsController.html":{}}}],["getting",{"_index":509,"title":{"index.html":{}},"body":{"entities/Post.html":{}}}],["getuserparamdto",{"_index":819,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getusers",{"_index":798,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(getuserparamdto",{"_index":802,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusersparamdto",{"_index":361,"title":{"classes/GetUsersParamDto.html":{}},"body":{"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["give",{"_index":1133,"title":{},"body":{"index.html":{}}}],["global",{"_index":847,"title":{},"body":{"controllers/UsersController.html":{}}}],["go",{"_index":1092,"title":{},"body":{"index.html":{}}}],["going",{"_index":1110,"title":{},"body":{"index.html":{}}}],["graph",{"_index":1042,"title":{},"body":{"index.html":{}}}],["grow",{"_index":1062,"title":{},"body":{"index.html":{}}}],["handle",{"_index":612,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["handling",{"_index":604,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["hands",{"_index":1036,"title":{},"body":{"index.html":{}}}],["handy",{"_index":1025,"title":{},"body":{"index.html":{}}}],["having",{"_index":1122,"title":{},"body":{"index.html":{}}}],["headers",{"_index":828,"title":{},"body":{"controllers/UsersController.html":{}}}],["hello",{"_index":118,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":1040,"title":{},"body":{"index.html":{}}}],["here",{"_index":311,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["host",{"_index":100,"title":{},"body":{"modules/AppModule.html":{}}}],["http://localhost.com/images/image1.jpg",{"_index":294,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["http://localhost.com/images/image1.jpg'})@isoptional()@minlength(4)@maxlength(1024)@isurl",{"_index":201,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://nestjs.com",{"_index":1073,"title":{},"body":{"index.html":{}}}],["https://orkhan.gitbook.io/typeorm/docs/decorator",{"_index":720,"title":{},"body":{"entities/Tag.html":{}}}],["https://schema.org",{"_index":231,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://schema.org\",\\r\\n",{"_index":292,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["hyphen",{"_index":1106,"title":{},"body":{"index.html":{}}}],["i'll",{"_index":1089,"title":{},"body":{"index.html":{}}}],["i'm",{"_index":1129,"title":{},"body":{"index.html":{}}}],["i.e",{"_index":1145,"title":{},"body":{"index.html":{}}}],["id",{"_index":365,"title":{},"body":{"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["id'})@apiquery({name",{"_index":531,"title":{},"body":{"controllers/PostsController.html":{}}}],["identifier",{"_index":474,"title":{},"body":{"entities/Post.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["ids",{"_index":254,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/TagsService.html":{}}}],["image",{"_index":199,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["import",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["important",{"_index":683,"title":{},"body":{"injectables/PostsService.html":{}}}],["imported",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["imports",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}}}],["in(tags",{"_index":767,"title":{},"body":{"injectables/TagsService.html":{}}}],["include",{"_index":351,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["incoming",{"_index":303,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["index",{"_index":110,"title":{"index.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["indicating",{"_index":620,"title":{},"body":{"injectables/PostsService.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["information",{"_index":1002,"title":{},"body":{"index.html":{}}}],["infrastructure",{"_index":1022,"title":{},"body":{"index.html":{}}}],["inject",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["inject(forwardref",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["inject(profileconfig.key",{"_index":896,"title":{},"body":{"injectables/UsersService.html":{}}}],["injectable",{"_index":107,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":108,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injecting",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["injectrepository",{"_index":430,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(metaoption",{"_index":432,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{}}}],["injectrepository(post",{"_index":630,"title":{},"body":{"injectables/PostsService.html":{}}}],["injectrepository(tag",{"_index":763,"title":{},"body":{"injectables/TagsService.html":{}}}],["injectrepository(user",{"_index":895,"title":{},"body":{"injectables/UsersService.html":{}}}],["inside",{"_index":601,"title":{},"body":{"modules/PostsModule.html":{}}}],["install",{"_index":1015,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":979,"title":{},"body":{"index.html":{}}}],["instance",{"_index":307,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{}}}],["instead",{"_index":665,"title":{},"body":{"injectables/PostsService.html":{}}}],["instructs",{"_index":1118,"title":{},"body":{"index.html":{}}}],["integer",{"_index":189,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["interact",{"_index":1043,"title":{},"body":{"index.html":{}}}],["interacts",{"_index":865,"title":{},"body":{"injectables/UsersService.html":{}}}],["invalid",{"_index":525,"title":{},"body":{"controllers/PostsController.html":{}}}],["isarray",{"_index":260,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isauth",{"_index":146,"title":{},"body":{"injectables/AuthService.html":{}}}],["isemail",{"_index":357,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isemail()@isnotempty()@maxlength(96",{"_index":338,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":261,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(poststatus",{"_index":290,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttype",{"_index":287,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isglobal",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["isint",{"_index":262,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{}}}],["isiso8601",{"_index":263,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isjson",{"_index":264,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{}}}],["isnotempty",{"_index":265,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchPostDto.html":{}}}],["isnotempty()@isjson",{"_index":315,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["isoptional",{"_index":266,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{}}}],["isoptional()@isjson",{"_index":233,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isstring",{"_index":267,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@maxlength(96)@minlength(8)@matches(/^(?=.*[a",{"_index":344,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":340,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isoptional()@minlength(3)@maxlength(96",{"_index":342,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isurl",{"_index":268,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["it's",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["items",{"_index":207,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["itself",{"_index":1084,"title":{},"body":{"index.html":{}}}],["job",{"_index":1055,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":1057,"title":{},"body":{"index.html":{}}}],["john",{"_index":900,"title":{},"body":{"injectables/UsersService.html":{}}}],["john@doe.com",{"_index":901,"title":{},"body":{"injectables/UsersService.html":{}}}],["join",{"_index":1068,"title":{},"body":{"index.html":{}}}],["joincolumn",{"_index":391,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["jointable",{"_index":500,"title":{},"body":{"entities/Post.html":{}}}],["json",{"_index":226,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{}}}],["kamil",{"_index":1071,"title":{},"body":{"index.html":{}}}],["key",{"_index":595,"title":{},"body":{"modules/PostsModule.html":{},"index.html":{}}}],["large",{"_index":467,"title":{},"body":{"entities/Post.html":{}}}],["lastname",{"_index":337,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["learn",{"_index":1028,"title":{},"body":{"index.html":{}}}],["legend",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":469,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["lengthy",{"_index":1088,"title":{},"body":{"index.html":{}}}],["let's",{"_index":1124,"title":{},"body":{"index.html":{}}}],["letter",{"_index":353,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["letters",{"_index":242,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["license",{"_index":1076,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1060,"title":{},"body":{"index.html":{}}}],["limit",{"_index":803,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["linkedin",{"_index":1054,"title":{},"body":{"index.html":{}}}],["list",{"_index":545,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["little",{"_index":1085,"title":{},"body":{"index.html":{}}}],["load",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["loaded",{"_index":659,"title":{},"body":{"injectables/PostsService.html":{}}}],["localhost:3001",{"_index":1141,"title":{},"body":{"index.html":{}}}],["log",{"_index":676,"title":{},"body":{"injectables/PostsService.html":{}}}],["login",{"_index":147,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(email",{"_index":156,"title":{},"body":{"injectables/AuthService.html":{}}}],["looking",{"_index":1003,"title":{},"body":{"index.html":{}}}],["loop",{"_index":1051,"title":{},"body":{"index.html":{}}}],["main",{"_index":466,"title":{},"body":{"entities/Post.html":{}}}],["make",{"_index":835,"title":{},"body":{"controllers/UsersController.html":{}}}],["makes",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["managing",{"_index":512,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["manually",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["many",{"_index":462,"title":{},"body":{"entities/Post.html":{},"entities/User.html":{},"index.html":{}}}],["manytomany",{"_index":501,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["manytomany(undefined",{"_index":494,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["manytoone",{"_index":502,"title":{},"body":{"entities/Post.html":{}}}],["manytoone(undefined",{"_index":458,"title":{},"body":{"entities/Post.html":{}}}],["match",{"_index":794,"title":{},"body":{"entities/User.html":{}}}],["matches",{"_index":269,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["matches(/^(?=.*[a",{"_index":360,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(/^[a",{"_index":289,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["matching",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["mau",{"_index":1006,"title":{},"body":{"index.html":{}}}],["maximum",{"_index":886,"title":{},"body":{"injectables/UsersService.html":{}}}],["maxlength",{"_index":270,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["maxlength(1024",{"_index":295,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(256",{"_index":288,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(512",{"_index":284,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(96",{"_index":358,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["meaning",{"_index":645,"title":{},"body":{"injectables/PostsService.html":{}}}],["message",{"_index":240,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["meta",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["metadata",{"_index":951,"title":{},"body":{"dependencies.html":{}}}],["metaoption",{"_index":371,"title":{"entities/MetaOption.html":{}},"body":{"entities/MetaOption.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["metaoptionrepository",{"_index":425,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["metaoptions",{"_index":178,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{}}}],["metaoptions.post",{"_index":475,"title":{},"body":{"entities/Post.html":{}}}],["metaoptionscontroller",{"_index":398,"title":{"controllers/MetaOptionsController.html":{}},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"coverage.html":{}}}],["metaoptionsmodule",{"_index":31,"title":{"modules/MetaOptionsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules.html":{},"overview.html":{}}}],["metaoptionsrepository",{"_index":431,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{}}}],["metaoptionsservice",{"_index":407,"title":{"injectables/MetaOptionsService.html":{}},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{},"overview.html":{}}}],["metavalue",{"_index":300,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"entities/MetaOption.html":{}}}],["method",{"_index":577,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["methods",{"_index":111,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["migrations",{"_index":93,"title":{},"body":{"modules/AppModule.html":{}}}],["minimum",{"_index":348,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength",{"_index":271,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":332,"title":{},"body":{"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(4",{"_index":283,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["minlength(8",{"_index":359,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":956,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1059,"title":{},"body":{"index.html":{}}}],["mode",{"_index":982,"title":{},"body":{"index.html":{}}}],["module",{"_index":18,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":20,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":1001,"title":{},"body":{"index.html":{}}}],["multiple",{"_index":840,"title":{},"body":{"controllers/UsersController.html":{}}}],["mysql",{"_index":396,"title":{},"body":{"entities/MetaOption.html":{}}}],["myśliwiec",{"_index":1072,"title":{},"body":{"index.html":{}}}],["name",{"_index":152,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateTagDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["necessary",{"_index":879,"title":{},"body":{"injectables/UsersService.html":{}}}],["need",{"_index":1046,"title":{},"body":{"index.html":{}}}],["needed",{"_index":1132,"title":{},"body":{"index.html":{}}}],["needing",{"_index":394,"title":{},"body":{"entities/MetaOption.html":{}}}],["needs",{"_index":440,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["nest",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/TagsService.html":{},"index.html":{}}}],["nestframework",{"_index":1075,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":994,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":940,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":449,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":942,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":281,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["never",{"_index":860,"title":{},"body":{"modules/UsersModule.html":{}}}],["new",{"_index":519,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{}}}],["newly",{"_index":618,"title":{},"body":{"injectables/PostsService.html":{}}}],["newuser",{"_index":909,"title":{},"body":{"injectables/UsersService.html":{}}}],["next",{"_index":1115,"title":{},"body":{"index.html":{}}}],["node.js",{"_index":967,"title":{},"body":{"index.html":{}}}],["now",{"_index":1083,"title":{},"body":{"index.html":{}}}],["npcs",{"_index":1094,"title":{},"body":{"index.html":{}}}],["npm",{"_index":978,"title":{},"body":{"index.html":{}}}],["npx",{"_index":104,"title":{},"body":{"modules/AppModule.html":{},"injectables/TagsService.html":{}}}],["null",{"_index":204,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["nullable",{"_index":380,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["number",{"_index":186,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["object",{"_index":206,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["object(unavailable",{"_index":395,"title":{},"body":{"entities/MetaOption.html":{}}}],["objects",{"_index":888,"title":{},"body":{"injectables/UsersService.html":{}}}],["occurs",{"_index":673,"title":{},"body":{"injectables/PostsService.html":{}}}],["offer",{"_index":1056,"title":{},"body":{"index.html":{}}}],["official",{"_index":1007,"title":{},"body":{"index.html":{}}}],["once",{"_index":1113,"title":{},"body":{"index.html":{}}}],["ondelete",{"_index":384,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["one",{"_index":352,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/Post.html":{},"index.html":{}}}],["onetomany",{"_index":786,"title":{},"body":{"entities/User.html":{}}}],["onetomany(undefined",{"_index":783,"title":{},"body":{"entities/User.html":{}}}],["onetoone",{"_index":392,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["onetoone(undefined",{"_index":382,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["open",{"_index":1061,"title":{},"body":{"index.html":{}}}],["operations",{"_index":606,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["operator",{"_index":642,"title":{},"body":{"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["option.entity",{"_index":416,"title":{},"body":{"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["option.entity.ts",{"_index":372,"title":{},"body":{"entities/MetaOption.html":{},"coverage.html":{}}}],["option.entity.ts:15",{"_index":378,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:21",{"_index":381,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:23",{"_index":376,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:25",{"_index":388,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:31",{"_index":386,"title":{},"body":{"entities/MetaOption.html":{}}}],["optional",{"_index":153,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["optional)'})@apiresponse({status",{"_index":544,"title":{},"body":{"controllers/PostsController.html":{}}}],["options",{"_index":400,"title":{},"body":{"controllers/MetaOptionsController.html":{},"entities/Post.html":{},"injectables/PostsService.html":{}}}],["options.controller",{"_index":415,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["options.controller.ts",{"_index":399,"title":{},"body":{"controllers/MetaOptionsController.html":{},"coverage.html":{}}}],["options.controller.ts:9",{"_index":403,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["options.dto",{"_index":278,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{}}}],["options.dto.ts",{"_index":314,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["options.dto.ts:6",{"_index":316,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["options.module",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["options.module.ts",{"_index":414,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["options.service",{"_index":409,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{}}}],["options.service.ts",{"_index":419,"title":{},"body":{"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["options.service.ts:17",{"_index":427,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["options.service.ts:8",{"_index":424,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["options/dtos/create",{"_index":277,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["options/meta",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["options/providers/meta",{"_index":418,"title":{},"body":{"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["order",{"_index":1096,"title":{},"body":{"index.html":{}}}],["out",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["over",{"_index":1082,"title":{},"body":{"index.html":{}}}],["overview",{"_index":1149,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":935,"title":{"dependencies.html":{},"properties.html":{}},"body":{"index.html":{}}}],["page",{"_index":215,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["pagination",{"_index":887,"title":{},"body":{"injectables/UsersService.html":{}}}],["param",{"_index":552,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param.dto",{"_index":832,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param.dto.ts",{"_index":364,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["param.dto.ts:13",{"_index":368,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["parameters",{"_index":151,"title":{},"body":{"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["parseintpipe",{"_index":553,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["part",{"_index":1047,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":443,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["partialtype(createpostdto",{"_index":439,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["partialtype(createuserdto",{"_index":448,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["particular",{"_index":1112,"title":{},"body":{"index.html":{}}}],["parts",{"_index":1091,"title":{},"body":{"index.html":{}}}],["pass",{"_index":1137,"title":{},"body":{"index.html":{}}}],["passed",{"_index":646,"title":{},"body":{"injectables/PostsService.html":{}}}],["password",{"_index":98,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["patch",{"_index":554,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["patchpostdto",{"_index":436,"title":{"classes/PatchPostDto.html":{}},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["patchpostdto.content",{"_index":694,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.featuredimageurl",{"_index":702,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.id",{"_index":690,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.posttype",{"_index":698,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.publishon",{"_index":704,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.slug",{"_index":700,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.status",{"_index":696,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.title",{"_index":692,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchuser",{"_index":799,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(@body",{"_index":850,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(patchuserdto",{"_index":820,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuserdto",{"_index":446,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["path",{"_index":1104,"title":{},"body":{"index.html":{}}}],["per",{"_index":813,"title":{},"body":{"controllers/UsersController.html":{}}}],["perform",{"_index":92,"title":{},"body":{"modules/AppModule.html":{},"injectables/UsersService.html":{}}}],["person",{"_index":232,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["person\"\\r\\n",{"_index":293,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["pg",{"_index":948,"title":{},"body":{"dependencies.html":{}}}],["pg_ctl",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["pick",{"_index":1111,"title":{},"body":{"index.html":{}}}],["platform",{"_index":1005,"title":{},"body":{"index.html":{}}}],["please",{"_index":1031,"title":{},"body":{"index.html":{}}}],["port",{"_index":94,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["position",{"_index":815,"title":{},"body":{"controllers/UsersController.html":{}}}],["possible",{"_index":213,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["post",{"_index":195,"title":{"entities/Post.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["post'})@apiresponse({status",{"_index":520,"title":{},"body":{"controllers/PostsController.html":{}}}],["post'})@isstring()@isnotempty()@maxlength(256)@minlength(4)@matches(/^[a",{"_index":237,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post'})@isstring()@minlength(4)@maxlength(512)@isnotempty",{"_index":258,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.author",{"_index":784,"title":{},"body":{"entities/User.html":{}}}],["post.content",{"_index":693,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.dto",{"_index":444,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["post.dto.ts",{"_index":173,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"coverage.html":{}}}],["post.dto.ts:106",{"_index":256,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:11",{"_index":442,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["post.dto.ts:129",{"_index":210,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:138",{"_index":193,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:31",{"_index":259,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:39",{"_index":218,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:53",{"_index":246,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:61",{"_index":252,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:69",{"_index":197,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:79",{"_index":234,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:89",{"_index":202,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:97",{"_index":224,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.entity",{"_index":591,"title":{},"body":{"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["post.featuredimageurl",{"_index":701,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.metaoptions",{"_index":383,"title":{},"body":{"entities/MetaOption.html":{}}}],["post.posttype",{"_index":697,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.publishon",{"_index":703,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.slug",{"_index":699,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.status",{"_index":695,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.tags",{"_index":705,"title":{},"body":{"injectables/PostsService.html":{},"entities/Tag.html":{}}}],["post.title",{"_index":691,"title":{},"body":{"injectables/PostsService.html":{}}}],["postgres",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["postgresql",{"_index":792,"title":{},"body":{"entities/User.html":{}}}],["posts",{"_index":508,"title":{},"body":{"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"index.html":{}}}],["posts.controller",{"_index":590,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts/posts.module",{"_index":42,"title":{},"body":{"modules/AppModule.html":{}}}],["postscontroller",{"_index":510,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":32,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsrepository",{"_index":609,"title":{},"body":{"injectables/PostsService.html":{}}}],["postsservice",{"_index":556,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["poststatus",{"_index":247,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["poststatus.draft",{"_index":506,"title":{},"body":{"entities/Post.html":{}}}],["posttype",{"_index":179,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["posttype.post",{"_index":505,"title":{},"body":{"entities/Post.html":{}}}],["prefix",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["prettier",{"_index":105,"title":{},"body":{"modules/AppModule.html":{}}}],["primarygeneratedcolumn",{"_index":377,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["private",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["proceed",{"_index":773,"title":{},"body":{"injectables/TagsService.html":{}}}],["process.env.node_env",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["production",{"_index":984,"title":{},"body":{"index.html":{}}}],["profileconfig",{"_index":858,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["profileconfiguration",{"_index":875,"title":{},"body":{"injectables/UsersService.html":{}}}],["progressive",{"_index":966,"title":{},"body":{"index.html":{}}}],["project",{"_index":976,"title":{},"body":{"index.html":{}}}],["promise",{"_index":649,"title":{},"body":{"injectables/PostsService.html":{}}}],["properties",{"_index":174,"title":{"properties.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"properties.html":{}}}],["provide",{"_index":1101,"title":{},"body":{"index.html":{}}}],["provided",{"_index":1114,"title":{},"body":{"index.html":{}}}],["providers",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers/auth.service",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["providers/meta",{"_index":408,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{}}}],["providers/posts.service",{"_index":557,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["providers/tags.service",{"_index":734,"title":{},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{}}}],["providers/users.service",{"_index":834,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["pts",{"_index":1105,"title":{},"body":{"index.html":{}}}],["public",{"_index":145,"title":{},"body":{"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["published",{"_index":220,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["published''})@isenum(poststatus)@isnotempty",{"_index":251,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["publishon",{"_index":180,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["query",{"_index":555,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["query'})@apiquery({name",{"_index":810,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('limit",{"_index":842,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('page",{"_index":844,"title":{},"body":{"controllers/UsersController.html":{}}}],["queryrunner",{"_index":654,"title":{},"body":{"injectables/PostsService.html":{}}}],["queryrunner.committransaction",{"_index":670,"title":{},"body":{"injectables/PostsService.html":{}}}],["queryrunner.manager.delete(post",{"_index":664,"title":{},"body":{"injectables/PostsService.html":{}}}],["queryrunner.release",{"_index":686,"title":{},"body":{"injectables/PostsService.html":{}}}],["queryrunner.rollbacktransaction",{"_index":675,"title":{},"body":{"injectables/PostsService.html":{}}}],["queryrunner.starttransaction",{"_index":656,"title":{},"body":{"injectables/PostsService.html":{}}}],["questions",{"_index":1029,"title":{},"body":{"index.html":{}}}],["r\\n",{"_index":291,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["rate",{"_index":1097,"title":{},"body":{"index.html":{}}}],["read",{"_index":1069,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["ready",{"_index":992,"title":{},"body":{"index.html":{}}}],["real",{"_index":1044,"title":{},"body":{"index.html":{}}}],["reference",{"_index":721,"title":{},"body":{"entities/Tag.html":{}}}],["reflect",{"_index":950,"title":{},"body":{"dependencies.html":{}}}],["regenerate",{"_index":1131,"title":{},"body":{"index.html":{}}}],["registered",{"_index":806,"title":{},"body":{"controllers/UsersController.html":{}}}],["related",{"_index":605,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["relations",{"_index":636,"title":{},"body":{"injectables/PostsService.html":{}}}],["relationship",{"_index":463,"title":{},"body":{"entities/Post.html":{}}}],["relationships",{"_index":581,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"index.html":{}}}],["release",{"_index":681,"title":{},"body":{"injectables/PostsService.html":{}}}],["relevant",{"_index":580,"title":{},"body":{"controllers/PostsController.html":{}}}],["remove",{"_index":666,"title":{},"body":{"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["removes",{"_index":579,"title":{},"body":{"controllers/PostsController.html":{}}}],["repeat",{"_index":453,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["repositories",{"_index":631,"title":{},"body":{"injectables/PostsService.html":{}}}],["repository",{"_index":423,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["represents",{"_index":456,"title":{},"body":{"entities/Post.html":{}}}],["req",{"_index":304,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["request",{"_index":526,"title":{},"body":{"controllers/PostsController.html":{}}}],["requesting",{"_index":625,"title":{},"body":{"injectables/PostsService.html":{}}}],["required",{"_index":190,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["requiring",{"_index":1012,"title":{},"body":{"index.html":{}}}],["reset",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resources",{"_index":1023,"title":{},"body":{"index.html":{}}}],["response",{"_index":671,"title":{},"body":{"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["responsible",{"_index":598,"title":{},"body":{"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["results",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["retrieval",{"_index":885,"title":{},"body":{"injectables/UsersService.html":{}}}],["retrieve",{"_index":893,"title":{},"body":{"injectables/UsersService.html":{}}}],["retrieves",{"_index":541,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["return",{"_index":117,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returned",{"_index":812,"title":{},"body":{"controllers/UsersController.html":{}}}],["returns",{"_index":115,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["review",{"_index":250,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["rollback",{"_index":674,"title":{},"body":{"injectables/PostsService.html":{}}}],["root",{"_index":1108,"title":{},"body":{"index.html":{}}}],["run",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["runner",{"_index":682,"title":{},"body":{"injectables/PostsService.html":{}}}],["runs",{"_index":998,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":953,"title":{},"body":{"dependencies.html":{}}}],["s",{"_index":1117,"title":{},"body":{"index.html":{}}}],["sample_token",{"_index":169,"title":{},"body":{"injectables/AuthService.html":{}}}],["save",{"_index":648,"title":{},"body":{"injectables/PostsService.html":{}}}],["saying",{"_index":1139,"title":{},"body":{"index.html":{}}}],["scalable",{"_index":971,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":249,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["schema",{"_index":181,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["script",{"_index":1078,"title":{},"body":{"index.html":{}}}],["seen",{"_index":1140,"title":{},"body":{"index.html":{}}}],["serialize",{"_index":225,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/MetaOption.html":{}}}],["series",{"_index":286,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["series''})@isenum(posttype)@isnotempty",{"_index":217,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["serve",{"_index":1120,"title":{},"body":{"index.html":{}}}],["server",{"_index":972,"title":{},"body":{"index.html":{}}}],["service",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["set",{"_index":89,"title":{},"body":{"modules/AppModule.html":{}}}],["setting",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["setup",{"_index":977,"title":{},"body":{"index.html":{}}}],["shallow",{"_index":643,"title":{},"body":{"injectables/PostsService.html":{}}}],["side",{"_index":973,"title":{},"body":{"index.html":{}}}],["sidebarenabled",{"_index":301,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["sides",{"_index":1144,"title":{},"body":{"index.html":{}}}],["simple",{"_index":1014,"title":{},"body":{"index.html":{}}}],["single",{"_index":892,"title":{},"body":{"injectables/UsersService.html":{}}}],["slash",{"_index":1098,"title":{},"body":{"index.html":{}}}],["slug",{"_index":182,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["small",{"_index":241,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["soft",{"_index":724,"title":{},"body":{"entities/Tag.html":{},"injectables/TagsService.html":{}}}],["softdelete",{"_index":727,"title":{},"body":{"controllers/TagsController.html":{}}}],["softdelete(@query('id",{"_index":740,"title":{},"body":{"controllers/TagsController.html":{}}}],["softdelete(id",{"_index":731,"title":{},"body":{"controllers/TagsController.html":{}}}],["softremove",{"_index":751,"title":{},"body":{"injectables/TagsService.html":{}}}],["softremove(id",{"_index":760,"title":{},"body":{"injectables/TagsService.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["spaces",{"_index":245,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["spec",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/TagsService.html":{}}}],["special",{"_index":354,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["specific",{"_index":366,"title":{},"body":{"classes/GetUsersParamDto.html":{},"controllers/PostsController.html":{},"index.html":{}}}],["sponsors",{"_index":1064,"title":{},"body":{"index.html":{}}}],["spread",{"_index":641,"title":{},"body":{"injectables/PostsService.html":{}}}],["sql",{"_index":791,"title":{},"body":{"entities/User.html":{}}}],["src/.../app.module.ts",{"_index":1157,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":964,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../post",{"_index":958,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app.service.ts",{"_index":109,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":114,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.module",{"_index":856,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":137,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/providers/auth.service",{"_index":894,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/auth/providers/auth.service.ts",{"_index":144,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts:12",{"_index":157,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:21",{"_index":154,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:5",{"_index":150,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/main.ts",{"_index":920,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/meta",{"_index":313,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/dto/create",{"_index":172,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["src/posts/dto/patch",{"_index":437,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["src/posts/enums/post",{"_index":961,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/post.entity",{"_index":389,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["src/posts/post.entity.ts",{"_index":455,"title":{},"body":{"entities/Post.html":{},"coverage.html":{}}}],["src/posts/post.entity.ts:100",{"_index":476,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:106",{"_index":461,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:26",{"_index":472,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:32",{"_index":499,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:43",{"_index":480,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:49",{"_index":489,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:60",{"_index":491,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:66",{"_index":465,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:72",{"_index":485,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:78",{"_index":471,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:84",{"_index":483,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:91",{"_index":497,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/posts.controller.ts",{"_index":511,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:48",{"_index":546,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:61",{"_index":528,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:74",{"_index":551,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:94",{"_index":537,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module.ts",{"_index":589,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/providers/posts.service.ts",{"_index":603,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/providers/posts.service.ts:116",{"_index":627,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:142",{"_index":619,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:15",{"_index":611,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:40",{"_index":623,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:58",{"_index":614,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/tags/dtos/create",{"_index":318,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["src/tags/providers/tags.service",{"_index":629,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/tags/providers/tags.service.ts",{"_index":749,"title":{},"body":{"injectables/TagsService.html":{},"coverage.html":{}}}],["src/tags/providers/tags.service.ts:20",{"_index":755,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:26",{"_index":759,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:36",{"_index":757,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:52",{"_index":761,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:9",{"_index":753,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tag.entity",{"_index":504,"title":{},"body":{"entities/Post.html":{}}}],["src/tags/tag.entity.ts",{"_index":707,"title":{},"body":{"entities/Tag.html":{},"coverage.html":{}}}],["src/tags/tag.entity.ts:15",{"_index":714,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:23",{"_index":715,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:31",{"_index":718,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:37",{"_index":712,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:43",{"_index":717,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:50",{"_index":713,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:55",{"_index":716,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:59",{"_index":709,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:62",{"_index":719,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:66",{"_index":711,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tags.controller.ts",{"_index":726,"title":{},"body":{"controllers/TagsController.html":{},"coverage.html":{}}}],["src/tags/tags.controller.ts:22",{"_index":729,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.controller.ts:27",{"_index":730,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.controller.ts:33",{"_index":733,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.module",{"_index":592,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/tags/tags.module.ts",{"_index":745,"title":{},"body":{"modules/TagsModule.html":{}}}],["src/users/dtos/create",{"_index":334,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dtos/get",{"_index":362,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["src/users/dtos/patch",{"_index":447,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["src/users/providers/users.service",{"_index":159,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["src/users/providers/users.service.ts",{"_index":863,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/providers/users.service.ts:19",{"_index":877,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:55",{"_index":883,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:80",{"_index":891,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:85",{"_index":881,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/user.entity",{"_index":503,"title":{},"body":{"entities/Post.html":{}}}],["src/users/user.entity.ts",{"_index":776,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/user.entity.ts:15",{"_index":779,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:21",{"_index":781,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:28",{"_index":778,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:34",{"_index":782,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:38",{"_index":785,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:9",{"_index":780,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.controller.ts",{"_index":796,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:53",{"_index":818,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:62",{"_index":801,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:72",{"_index":821,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":140,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostsModule.html":{}}}],["src/users/users.module.ts",{"_index":854,"title":{},"body":{"modules/UsersModule.html":{}}}],["start",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"injectables/PostsService.html":{},"index.html":{}}}],["start:dev",{"_index":983,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":985,"title":{},"body":{"index.html":{}}}],["started",{"_index":965,"title":{"index.html":{}},"body":{}}],["starter",{"_index":975,"title":{},"body":{"index.html":{}}}],["statements",{"_index":914,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":183,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["status.enum",{"_index":276,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["status.enum.ts",{"_index":959,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["stay",{"_index":1050,"title":{},"body":{"index.html":{}}}],["steps",{"_index":995,"title":{},"body":{"index.html":{}}}],["story",{"_index":216,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["straightforward",{"_index":1010,"title":{},"body":{"index.html":{}}}],["string",{"_index":116,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["structured",{"_index":486,"title":{},"body":{"entities/Post.html":{}}}],["success",{"_index":538,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["successful",{"_index":669,"title":{},"body":{"injectables/PostsService.html":{}}}],["successfully",{"_index":571,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["successfully'})@apiresponse({status",{"_index":523,"title":{},"body":{"controllers/PostsController.html":{}}}],["summary",{"_index":568,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["support",{"_index":1030,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":1147,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["table",{"_index":864,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["tables",{"_index":599,"title":{},"body":{"modules/PostsModule.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":934,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":493,"title":{"entities/Tag.html":{}},"body":{"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"coverage.html":{}}}],["tag.dto",{"_index":735,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["tag.dto.ts",{"_index":319,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["tag.dto.ts:19",{"_index":326,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:29",{"_index":331,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:34",{"_index":322,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:39",{"_index":328,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:45",{"_index":324,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.entity",{"_index":747,"title":{},"body":{"modules/TagsModule.html":{},"injectables/TagsService.html":{}}}],["tag.posts",{"_index":495,"title":{},"body":{"entities/Post.html":{}}}],["tags",{"_index":184,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"index.html":{}}}],["tags.controller",{"_index":746,"title":{},"body":{"modules/TagsModule.html":{}}}],["tags/providers/tags",{"_index":762,"title":{},"body":{"injectables/TagsService.html":{}}}],["tags/soft",{"_index":739,"title":{},"body":{"controllers/TagsController.html":{}}}],["tags/tags.module",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["tagscontroller",{"_index":725,"title":{"controllers/TagsController.html":{}},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{},"coverage.html":{}}}],["tagsmodule",{"_index":33,"title":{"modules/TagsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules.html":{},"overview.html":{}}}],["tagsrepository",{"_index":754,"title":{},"body":{"injectables/TagsService.html":{}}}],["tagsservice",{"_index":610,"title":{"injectables/TagsService.html":{}},"body":{"injectables/PostsService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"coverage.html":{},"overview.html":{}}}],["take",{"_index":996,"title":{},"body":{"index.html":{}}}],["test",{"_index":897,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["test:covdeployment",{"_index":990,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":989,"title":{},"body":{"index.html":{}}}],["tests",{"_index":986,"title":{},"body":{"index.html":{}}}],["text",{"_index":464,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["thanks",{"_index":1063,"title":{},"body":{"index.html":{}}}],["this.metaoptionrepository.create(createmetaoptiondto",{"_index":433,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionrepository.save(metaoption",{"_index":435,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionsservice.create(createpostmetaoptiondto",{"_index":411,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["this.postsrepository.create",{"_index":647,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.delete(id",{"_index":706,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.find",{"_index":635,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.findone",{"_index":660,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.findoneby",{"_index":689,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.manager.connection.createqueryrunner",{"_index":655,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.save(post",{"_index":650,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsservice.create(createpostdto",{"_index":573,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.delete(id",{"_index":585,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.findall(userid",{"_index":570,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.update(patchpostdto",{"_index":576,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.tagsrepository.create(createtagdto",{"_index":764,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.delete(id",{"_index":774,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.find",{"_index":766,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.findone",{"_index":772,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.save(tag",{"_index":765,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.softdelete(id",{"_index":775,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsservice.create(createtagdto",{"_index":737,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.tagsservice.delete(id",{"_index":738,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.tagsservice.findmultipletags(createpostdto.tags",{"_index":639,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.tagsservice.findmultipletags(patchpostdto.tags",{"_index":688,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.tagsservice.softremove(id",{"_index":741,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.usersrepository.create(createuserdto",{"_index":910,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findone",{"_index":906,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findoneby",{"_index":904,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.save(newuser",{"_index":911,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.createuser(createuserdto",{"_index":849,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall(getuserparamdto",{"_index":846,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findonebyid(1234",{"_index":167,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findonebyid(createpostdto.authorid",{"_index":638,"title":{},"body":{"injectables/PostsService.html":{}}}],["throw",{"_index":661,"title":{},"body":{"injectables/PostsService.html":{}}}],["thrown",{"_index":229,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["time",{"_index":484,"title":{},"body":{"entities/Post.html":{},"index.html":{}}}],["timestamp",{"_index":482,"title":{},"body":{"entities/Post.html":{},"injectables/TagsService.html":{}}}],["title",{"_index":185,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["token",{"_index":168,"title":{},"body":{"injectables/AuthService.html":{}}}],["touch",{"_index":1070,"title":{},"body":{"index.html":{}}}],["transaction",{"_index":651,"title":{},"body":{"injectables/PostsService.html":{}}}],["transformer",{"_index":282,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"dependencies.html":{}}}],["triggers",{"_index":1100,"title":{},"body":{"index.html":{}}}],["true",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"entities/User.html":{}}}],["true})@jointable",{"_index":496,"title":{},"body":{"entities/Post.html":{}}}],["true})@type(undefined",{"_index":209,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["try",{"_index":657,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{}}}],["tsconfig.json",{"_index":1109,"title":{},"body":{"index.html":{}}}],["tts",{"_index":1107,"title":{},"body":{"index.html":{}}}],["twitter",{"_index":1074,"title":{},"body":{"index.html":{}}}],["type",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["type.enum",{"_index":275,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["type.enum.ts",{"_index":960,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["typees",{"_index":787,"title":{},"body":{"entities/User.html":{}}}],["typeorm",{"_index":393,"title":{},"body":{"entities/MetaOption.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([metaoption",{"_index":417,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["typeormmodule.forfeature([post",{"_index":596,"title":{},"body":{"modules/PostsModule.html":{}}}],["typeormmodule.forfeature([tag",{"_index":748,"title":{},"body":{"modules/TagsModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":861,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":450,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":824,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["undefined",{"_index":479,"title":{},"body":{"entities/Post.html":{}}}],["undefined})@isarray()@isoptional()@isint({each",{"_index":255,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["undefined})@isoptional()@validatenested({each",{"_index":208,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["unique",{"_index":473,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["unit",{"_index":987,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":429,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["unlicensed",{"_index":1155,"title":{},"body":{"properties.html":{}}}],["unused",{"_index":826,"title":{},"body":{"controllers/UsersController.html":{}}}],["up",{"_index":685,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{}}}],["update",{"_index":608,"title":{},"body":{"injectables/PostsService.html":{}}}],["update(@body",{"_index":687,"title":{},"body":{"injectables/PostsService.html":{}}}],["update(patchpostdto",{"_index":626,"title":{},"body":{"injectables/PostsService.html":{}}}],["updated",{"_index":445,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updated'})@isint()@isnotempty",{"_index":441,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["updatedate",{"_index":374,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["updatedatecolumn",{"_index":387,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["updatepost",{"_index":516,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(@body",{"_index":575,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(patchpostdto",{"_index":547,"title":{},"body":{"controllers/PostsController.html":{}}}],["updates",{"_index":548,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"index.html":{}}}],["uppercase",{"_index":312,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["url",{"_index":236,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{}}}],["url\"'})@maxlength(512",{"_index":330,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["use",{"_index":640,"title":{},"body":{"injectables/PostsService.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["usefactory",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["user",{"_index":83,"title":{"entities/User.html":{}},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["user'})@apiparam({name",{"_index":542,"title":{},"body":{"controllers/PostsController.html":{}}}],["user.dto",{"_index":451,"title":{},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":335,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:15",{"_index":341,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:21",{"_index":343,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:26",{"_index":339,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:35",{"_index":356,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.entity",{"_index":857,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["user.posts",{"_index":459,"title":{},"body":{"entities/Post.html":{}}}],["userid",{"_index":543,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["username",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["users",{"_index":363,"title":{},"body":{"classes/GetUsersParamDto.html":{},"modules/PostsModule.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["users.controller",{"_index":855,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/users.module",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":795,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":34,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":874,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersservice",{"_index":149,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["uses",{"_index":243,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"injectables/UsersService.html":{}}}],["using",{"_index":790,"title":{},"body":{"entities/User.html":{},"index.html":{}}}],["validated",{"_index":308,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validatenested",{"_index":272,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validation",{"_index":227,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["validationpipe",{"_index":830,"title":{},"body":{"controllers/UsersController.html":{}}}],["validator",{"_index":273,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"dependencies.html":{}}}],["value",{"_index":962,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":214,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["varchar",{"_index":468,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["variable",{"_index":917,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1156,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["vars",{"_index":827,"title":{},"body":{"controllers/UsersController.html":{}}}],["verbose",{"_index":1087,"title":{},"body":{"index.html":{}}}],["version",{"_index":1153,"title":{},"body":{"properties.html":{}}}],["video",{"_index":1038,"title":{},"body":{"index.html":{}}}],["view",{"_index":594,"title":{},"body":{"modules/PostsModule.html":{}}}],["visit",{"_index":1027,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":1041,"title":{},"body":{"index.html":{}}}],["want",{"_index":816,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["watch",{"_index":981,"title":{},"body":{"index.html":{}}}],["we're",{"_index":789,"title":{},"body":{"entities/User.html":{}}}],["website",{"_index":793,"title":{},"body":{"entities/User.html":{},"index.html":{}}}],["well",{"_index":1123,"title":{},"body":{"index.html":{}}}],["whenever",{"_index":1128,"title":{},"body":{"index.html":{}}}],["within",{"_index":769,"title":{},"body":{"injectables/TagsService.html":{},"index.html":{}}}],["without",{"_index":244,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/MetaOption.html":{},"controllers/UsersController.html":{}}}],["working",{"_index":1026,"title":{},"body":{"index.html":{}}}],["world",{"_index":119,"title":{},"body":{"injectables/AppService.html":{}}}],["write",{"_index":106,"title":{},"body":{"modules/AppModule.html":{}}}],["writing",{"_index":1130,"title":{},"body":{"index.html":{}}}],["x",{"_index":1053,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":1067,"title":{},"body":{"index.html":{}}}],["you're",{"_index":991,"title":{},"body":{"index.html":{}}}],["z0",{"_index":238,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["z\\d@$!%*?&]{8,16",{"_index":347,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*?&])[a",{"_index":346,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["za",{"_index":345,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            MetaOptionsModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            TagsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UsersModule } from './users/users.module';\nimport { PostsModule } from './posts/posts.module';\nimport { AuthModule } from './auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { TagsModule } from './tags/tags.module';\nimport { MetaOptionsModule } from './meta-options/meta-options.module';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport appConfig from './config/app.config'; // Since it's imported as a default\nimport databaseConfig from './config/database.config';\n\nconst ENV = process.env.NODE_ENV;\n\n// Run this in cmd pg_ctl start -D \"C:\\users\\mfabouatmeh\\Desktop\\CodesDar\\more\\Postgre\\data\"\n@Module({\n  imports: [\n    UsersModule,\n    PostsModule,\n    AuthModule,\n    ConfigModule.forRoot({\n      isGlobal: true,\n      envFilePath: !ENV ? '.env' : `.env.${ENV}`,\n      load: [appConfig, databaseConfig],\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule], // Makes ConfigService available\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        type: 'postgres',\n        // entities: [User],\n        autoLoadEntities: configService.get('database.autoLoadEntities'),\n        synchronize: configService.get('database.synchronize'), // If this setting is set to false, we would have to manually perform migrations\n        port: configService.get('database.port'),\n        username: configService.get('database.user'),\n        password: configService.get('database.pass'),\n        host: configService.get('database.host'),\n        database: configService.get('database.name'),\n      }),\n    }),\n    TagsModule,\n    MetaOptionsModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n//npx prettier --write .\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { AuthService } from './providers/auth.service';\n// nest generate controller auth --no-spec\n@Controller('auth')\nexport class AuthController {\n  constructor(\n    // Injecting the auth service\n    private readonly authService: AuthService,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './providers/auth.service';\nimport { UsersModule } from 'src/users/users.module';\n// nest generate module auth\n@Module({\n  controllers: [AuthController],\n  providers: [AuthService],\n  // imports: [UsersModule], will cause a circular dependency\n  imports: [forwardRef(() => UsersModule)],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                isAuth\n                            \n                            \n                                    Public\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/auth.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isAuth\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAuth()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, forwardRef, Inject } from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users.service';\n// nest generate service auth/providers/auth --flat  --no-spec\n@Injectable()\nexport class AuthService {\n  constructor(\n    // Injecting the user service\n    // Add this to avoid circular dependency\n    @Inject(forwardRef(() => UsersService))\n    private readonly usersService: UsersService,\n  ) {}\n  public login(email: string, password: string) {\n    // Check user exists\n\n    const user = this.usersService.findOneById(1234);\n    // Login\n    // Return token\n    return 'SAMPLE_TOKEN';\n  }\n\n  public isAuth() {\n    return true;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dto/create-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                authorId\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                publishOn\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        authorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'integer', required: true, example: 1})@IsNotEmpty()@IsInt()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:138\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the content of the post', example: 'The post content'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Featured image for your blog post', example: 'http://localhost.com/images/image1.jpg'})@IsOptional()@MinLength(4)@MaxLength(1024)@IsUrl()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:89\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreatePostMetaOptionsDto | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'object', required: false, items: undefined})@IsOptional()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:129\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: PostType, description: 'Possible values, 'post', 'page', 'story', 'series''})@IsEnum(PostType)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The date on which the blog post is published', example: '2024-03-16T07:46:32+0000'})@IsISO8601()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:97\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Serialize your JSON object else a validation error will be thrown', example: '{\n \"@context\": \"https://schema.org\",\n \"@type\": \"Person\"\n }'})@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:79\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'For Example - 'my-url'', example: 'my-blog-post'})@IsString()@IsNotEmpty()@MaxLength(256)@MinLength(4)@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url\"'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: PostStatus, description: 'Possible values 'draft', 'scheduled', 'review', 'published''})@IsEnum(PostStatus)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Array of IDs of tags', example: undefined})@IsArray()@IsOptional()@IsInt({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:106\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'This is a title', description: 'This is the title for the blog post'})@IsString()@MinLength(4)@MaxLength(512)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:31\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsArray,\n  IsEnum,\n  IsInt,\n  IsISO8601,\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MaxLength,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\nimport { PostType } from '../enums/post-type.enum';\nimport { PostStatus } from '../enums/post-status.enum';\nimport { CreatePostMetaOptionsDto } from '../../meta-options/dtos/create-post-meta-options.dto';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\n\nexport class CreatePostDto {\n  @ApiProperty({\n    example: 'This is a title',\n    description: 'This is the title for the blog post',\n  })\n  @IsString()\n  @MinLength(4)\n  @MaxLength(512)\n  @IsNotEmpty()\n  title: string;\n\n  @ApiProperty({\n    enum: PostType,\n    description: \"Possible values, 'post', 'page', 'story', 'series'\",\n  })\n  @IsEnum(PostType)\n  @IsNotEmpty()\n  postType: PostType;\n\n  @ApiProperty({\n    description: \"For Example - 'my-url'\",\n    example: 'my-blog-post',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(256)\n  @MinLength(4)\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url\"',\n  })\n  slug: string;\n\n  @ApiProperty({\n    enum: PostStatus,\n    description: \"Possible values 'draft', 'scheduled', 'review', 'published'\",\n  })\n  @IsEnum(PostStatus)\n  @IsNotEmpty()\n  status: PostStatus;\n\n  @ApiPropertyOptional({\n    description: 'This is the content of the post',\n    example: 'The post content',\n  })\n  @IsString()\n  @IsOptional()\n  content?: string;\n\n  @ApiPropertyOptional({\n    description:\n      'Serialize your JSON object else a validation error will be thrown',\n    example:\n      '{\\r\\n \"@context\": \"https://schema.org\",\\r\\n \"@type\": \"Person\"\\r\\n }',\n  })\n  @IsOptional()\n  @IsJSON()\n  schema?: string;\n\n  @ApiPropertyOptional({\n    description: 'Featured image for your blog post',\n    example: 'http://localhost.com/images/image1.jpg',\n  })\n  @IsOptional()\n  @MinLength(4)\n  @MaxLength(1024)\n  @IsUrl()\n  featuredImageUrl?: string;\n\n  @ApiPropertyOptional({\n    description: 'The date on which the blog post is published',\n    example: '2024-03-16T07:46:32+0000',\n  })\n  @IsISO8601()\n  @IsOptional()\n  publishOn?: Date;\n\n  @ApiPropertyOptional({\n    description: 'Array of IDs of tags',\n    example: [1, 2],\n  })\n  @IsArray()\n  @IsOptional()\n  @IsInt({ each: true })\n  tags?: number[];\n\n  @ApiPropertyOptional({\n    type: 'object',\n    required: false,\n    items: {\n      type: 'object',\n      properties: {\n        metavalue: {\n          type: 'json',\n          description: 'The metaValue is a JSON string',\n          example: '{\"sidebarEnabled\": true,}',\n        },\n      },\n    },\n  })\n  @IsOptional()\n  @ValidateNested({ each: true })\n  @Type(() => CreatePostMetaOptionsDto)\n  // Type decorator\n  // Matches the incoming req to the dto\n  // Creates an instance of the dto\n  // All the properties are validated against the dto\n  metaOptions?: CreatePostMetaOptionsDto | null;\n\n  @ApiProperty({\n    type: 'integer',\n    required: true,\n    example: 1,\n  })\n  @IsNotEmpty()\n  @IsInt() // Corrected here (uppercase \"I\")\n  authorId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostMetaOptionsDto.html":{"url":"classes/CreatePostMetaOptionsDto.html","title":"class - CreatePostMetaOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostMetaOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/dtos/create-post-meta-options.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                metaValue\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/dtos/create-post-meta-options.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsJSON, IsNotEmpty, IsString } from 'class-validator';\n\nexport class CreatePostMetaOptionsDto {\n  @IsNotEmpty()\n  @IsJSON()\n  metaValue: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTagDto.html":{"url":"classes/CreateTagDto.html","title":"class - CreateTagDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTagDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/dtos/create-tag.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                featuredImage\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        featuredImage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsUrl()@MaxLength(1024)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@MinLength(3)@IsNotEmpty()@MaxLength(256)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsNotEmpty()@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url\"'})@MaxLength(512)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:29\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateTagDto {\n  @ApiProperty()\n  @IsString()\n  @MinLength(3)\n  @IsNotEmpty()\n  @MaxLength(256)\n  name: string;\n\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url\"',\n  })\n  @MaxLength(512)\n  slug: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsString()\n  description: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsJSON()\n  schema: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsUrl()\n  @MaxLength(1024)\n  featuredImage: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MaxLength(96)@MinLength(8)@Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,16}$/, {message: 'Minimum 8 chars, include at least one letter, one number, and one special character.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\nexport class CreateUserDto {\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(96)\n  firstName: string;\n\n  @IsString()\n  @IsOptional()\n  @MinLength(3)\n  @MaxLength(96)\n  lastName?: string;\n\n  @IsEmail()\n  @IsNotEmpty()\n  @MaxLength(96)\n  email: string;\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(96)\n  @MinLength(8)\n  @Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,16}$/, {\n    message:\n      'Minimum 8 chars, include at least one letter, one number, and one special character.',\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersParamDto.html":{"url":"classes/GetUsersParamDto.html","title":"class - GetUsersParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-users-param.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Get user with a specific id', example: '1234'})@IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-users-param.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport { IsInt, IsOptional } from 'class-validator';\n\nexport class GetUsersParamDto {\n  @ApiPropertyOptional({\n    description: 'Get user with a specific id',\n    example: '1234',\n  })\n  @IsOptional()\n  @IsInt()\n  @Type(() => Number)\n  id?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/MetaOption.html":{"url":"entities/MetaOption.html","title":"entity - MetaOption","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  MetaOption\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-option.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createDate\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                metaValue\n                            \n                            \n                                    \n                                    \n                                post\n                            \n                            \n                                    \n                                updateDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'json', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        post\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, post => post.metaOptions, {onDelete: 'CASCADE'})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:25\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from 'src/posts/post.entity';\nimport {\n  Column,\n  CreateDateColumn,\n  Entity,\n  JoinColumn,\n  OneToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@Entity()\nexport class MetaOption {\n  @PrimaryGeneratedColumn()\n  id: number;\n  // Without needing to serialize the JSON object(unavailable in mysql)\n  @Column({\n    type: 'json',\n    nullable: false,\n  })\n  metaValue: string;\n  @CreateDateColumn()\n  createDate: Date;\n  @UpdateDateColumn()\n  updateDate: Date;\n\n  @OneToOne(() => Post, (post) => post.metaOptions, {\n    onDelete: 'CASCADE',\n  })\n  @JoinColumn()\n  post: Post;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MetaOptionsController.html":{"url":"controllers/MetaOptionsController.html","title":"controller - MetaOptionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MetaOptionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-options.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                meta-options\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createMetaOption\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createMetaOption\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMetaOption(createPostMetaOptionDto: CreatePostMetaOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/meta-options/meta-options.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostMetaOptionDto\n                                            \n                                                            CreatePostMetaOptionsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { CreatePostMetaOptionsDto } from './dtos/create-post-meta-options.dto';\nimport { MetaOptionsService } from './providers/meta-options.service';\n\n@Controller('meta-options')\nexport class MetaOptionsController {\n  constructor(private readonly metaOptionsService: MetaOptionsService) {}\n  @Post()\n  public createMetaOption(\n    @Body() createPostMetaOptionDto: CreatePostMetaOptionsDto,\n  ) {\n    return this.metaOptionsService.create(createPostMetaOptionDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MetaOptionsModule.html":{"url":"modules/MetaOptionsModule.html","title":"module - MetaOptionsModule","body":"\n                   \n\n\n\n\n    Modules\n    MetaOptionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/meta-options/meta-options.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MetaOptionsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MetaOptionsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MetaOptionsController } from './meta-options.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { MetaOption } from './meta-option.entity';\nimport { MetaOptionsService } from './providers/meta-options.service';\n\n@Module({\n  controllers: [MetaOptionsController],\n  imports: [TypeOrmModule.forFeature([MetaOption])],\n  providers: [MetaOptionsService],\n})\nexport class MetaOptionsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MetaOptionsService.html":{"url":"injectables/MetaOptionsService.html","title":"injectable - MetaOptionsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MetaOptionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/providers/meta-options.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(metaOptionRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/meta-options/providers/meta-options.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        metaOptionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createMetaOptionDto: CreatePostMetaOptionsDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/meta-options/providers/meta-options.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createMetaOptionDto\n                                            \n                                                            CreatePostMetaOptionsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { MetaOption } from '../meta-option.entity';\nimport { Repository } from 'typeorm';\nimport { CreatePostMetaOptionsDto } from '../dtos/create-post-meta-options.dto';\n\n@Injectable()\nexport class MetaOptionsService {\n  constructor(\n    /**\n     * Inject metaOptionsRepository\n     */\n    @InjectRepository(MetaOption)\n    private metaOptionRepository: Repository,\n  ) {}\n\n  public async create(createMetaOptionDto: CreatePostMetaOptionsDto) {\n    const metaOption = this.metaOptionRepository.create(createMetaOptionDto);\n    return await this.metaOptionRepository.save(metaOption);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchPostDto.html":{"url":"classes/PatchPostDto.html","title":"class - PatchPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dto/patch-post.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The ID of the post that needs to be updated'})@IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/patch-post.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsInt, IsNotEmpty } from 'class-validator';\nimport { CreatePostDto } from './create-post.dto';\n\nexport class PatchPostDto extends PartialType(CreatePostDto) {\n  @ApiProperty({\n    description: 'The ID of the post that needs to be updated',\n  })\n  @IsInt()\n  @IsNotEmpty()\n  id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/patch-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\n// Extend the create user dto to not repeat the code\nexport class PatchUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Post.html":{"url":"entities/Post.html","title":"entity - Post","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/post.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a blog post entity.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                author\n                            \n                            \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                postType\n                            \n                            \n                                    \n                                    Optional\n                                publishOn\n                            \n                            \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.posts, {eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:106\n                        \n                    \n\n            \n                \n                    Author of the post (many-to-one relationship with User).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:66\n                        \n                    \n\n            \n                \n                    Main content of the post (large string)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:78\n                        \n                    \n\n            \n                \n                    URL of the featured image.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:26\n                        \n                    \n\n            \n                \n                    Unique identifier for the post.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MetaOption\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, metaOptions => metaOptions.post, {cascade: true, eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:100\n                        \n                    \n\n            \n                \n                    Meta options associated with the post (one-to-one relationship bidirectional).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: PostType, default: undefined, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:43\n                        \n                    \n\n            \n                \n                    Type of the post (e.g., post, page, story, series.).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:84\n                        \n                    \n\n            \n                \n                    Date and time when the post is published.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:72\n                        \n                    \n\n            \n                \n                    JSON schema for structured data.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:49\n                        \n                    \n\n            \n                \n                    URL-friendly identifier for the post.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: PostStatus, default: undefined, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:60\n                        \n                    \n\n            \n                \n                    Status of the post (draft, published, etc.).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Tag[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, tag => tag.posts, {eager: true})@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:91\n                        \n                    \n\n            \n                \n                    Tags associated with the post (many-to-many relationship).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 512, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:32\n                        \n                    \n\n            \n                \n                    Title of the post.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  Entity,\n  JoinColumn,\n  JoinTable,\n  ManyToMany,\n  ManyToOne,\n  OneToOne,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport { PostType } from './enums/post-type.enum';\nimport { PostStatus } from './enums/post-status.enum';\nimport { MetaOption } from 'src/meta-options/meta-option.entity';\nimport { User } from 'src/users/user.entity';\nimport { Tag } from 'src/tags/tag.entity';\n\n/**\n * Represents a blog post entity.\n */\n@Entity()\nexport class Post {\n  /**\n   * Unique identifier for the post.\n   */\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  /**\n   * Title of the post.\n   */\n  @Column({ type: 'varchar', length: 512, nullable: false })\n  title: string;\n\n  /**\n   * Type of the post (e.g., post, page, story, series.).\n   */\n  @Column({\n    type: 'enum',\n    enum: PostType,\n    default: PostType.POST,\n    nullable: false,\n  })\n  postType: PostType;\n\n  /**\n   * URL-friendly identifier for the post.\n   */\n  @Column({ type: 'varchar', length: 256, nullable: false, unique: true })\n  slug: string;\n\n  /**\n   * Status of the post (draft, published, etc.).\n   */\n  @Column({\n    type: 'enum',\n    enum: PostStatus,\n    default: PostStatus.DRAFT,\n    nullable: false,\n  })\n  status: PostStatus;\n\n  /**\n   * Main content of the post (large string)\n   */\n  @Column({ type: 'text', nullable: true })\n  content?: string;\n\n  /**\n   * JSON schema for structured data.\n   */\n  @Column({ type: 'text', nullable: true })\n  schema?: string;\n\n  /**\n   * URL of the featured image.\n   */\n  @Column({ type: 'varchar', length: 1024, nullable: true })\n  featuredImageUrl?: string;\n\n  /**\n   * Date and time when the post is published.\n   */\n  @Column({ type: 'timestamp', nullable: true })\n  publishOn?: Date;\n\n  /**\n   * Tags associated with the post (many-to-many relationship).\n   */\n  @ManyToMany(() => Tag, (tag) => tag.posts, { eager: true })\n  @JoinTable()\n  tags?: Tag[];\n\n  /**\n   * Meta options associated with the post (one-to-one relationship bidirectional).\n   */\n  @OneToOne(() => MetaOption, (metaOptions) => metaOptions.post, {\n    cascade: true,\n    eager: true, // Will fetch posts AND metaOptions when getting posts\n  })\n  metaOptions?: MetaOption;\n\n  /**\n   * Author of the post (many-to-one relationship with User).\n   */\n  @ManyToOne(() => User, (user) => user.posts, { eager: true })\n  author: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n            \n                Description\n            \n            \n                Controller for managing posts.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                createPost\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                delete\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getPosts\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Creates a new blog post'})@ApiResponse({status: 201, description: 'Post created successfully'})@ApiResponse({status: 400, description: 'Invalid request data'})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:61\n                        \n                    \n\n\n            \n                \n                        Creates a new blog post.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data for the new post.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The created post.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Deletes a post by ID'})@ApiQuery({name: 'id', required: true, type: Number, description: 'Post ID to delete'})@ApiResponse({status: 200, description: 'Post deleted successfully'})@ApiResponse({status: 404, description: 'Post not found'})@Delete()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:94\n                        \n                    \n\n\n            \n                \n                        Deletes a post by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the post to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A success message.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                        getPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPosts(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:userId?')@ApiOperation({summary: 'Retrieves all posts for a specific user'})@ApiParam({name: 'userId', required: false, description: 'User ID (optional)'})@ApiResponse({status: 200, description: 'Returns the list of posts'})\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:48\n                        \n                    \n\n\n            \n                \n                        Retrieves all posts for a specific user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user (optional).\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A list of posts.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(patchPostDto: PatchPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Updates an existing blog post'})@ApiResponse({status: 201, description: 'Post updated successfully'})@ApiResponse({status: 404, description: 'Post not found'})@Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:74\n                        \n                    \n\n\n            \n                \n                        Updates an existing blog post.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                patchPostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe updated post data.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The updated post.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Query,\n} from '@nestjs/common';\nimport { PostsService } from './providers/posts.service';\nimport {\n  ApiOperation,\n  ApiResponse,\n  ApiTags,\n  ApiParam,\n  ApiQuery,\n} from '@nestjs/swagger';\nimport { CreatePostDto } from './dto/create-post.dto';\nimport { PatchPostDto } from './dto/patch-post.dto';\n\n/**\n * Controller for managing posts.\n */\n@Controller('posts')\n@ApiTags('Posts')\nexport class PostsController {\n  /**\n   * Creates an instance of PostsController.\n   * @param postsService - The posts service.\n   */\n  constructor(private readonly postsService: PostsService) {}\n\n  /**\n   * Retrieves all posts for a specific user.\n   * @param userId - The ID of the user (optional).\n   * @returns A list of posts.\n   */\n  @Get('/:userId?')\n  @ApiOperation({ summary: 'Retrieves all posts for a specific user' })\n  @ApiParam({\n    name: 'userId',\n    required: false,\n    description: 'User ID (optional)',\n  })\n  @ApiResponse({ status: 200, description: 'Returns the list of posts' })\n  public getPosts(@Param('userId') userId: string) {\n    return this.postsService.findAll(userId);\n  }\n\n  /**\n   * Creates a new blog post.\n   * @param createPostDto - The data for the new post.\n   * @returns The created post.\n   */\n  @ApiOperation({ summary: 'Creates a new blog post' })\n  @ApiResponse({ status: 201, description: 'Post created successfully' })\n  @ApiResponse({ status: 400, description: 'Invalid request data' })\n  @Post()\n  public createPost(@Body() createPostDto: CreatePostDto) {\n    return this.postsService.create(createPostDto);\n  }\n\n  /**\n   * Updates an existing blog post.\n   * @param patchPostDto - The updated post data.\n   * @returns The updated post.\n   */\n  @ApiOperation({ summary: 'Updates an existing blog post' })\n  @ApiResponse({ status: 201, description: 'Post updated successfully' })\n  @ApiResponse({ status: 404, description: 'Post not found' })\n  @Patch()\n  public updatePost(@Body() patchPostDto: PatchPostDto) {\n    return this.postsService.update(patchPostDto);\n  }\n\n  /**\n   * Deletes a post by its ID.\n   * @param id - The ID of the post to delete.\n   * @returns A success message.\n   */\n  @ApiOperation({ summary: 'Deletes a post by ID' })\n  @ApiQuery({\n    name: 'id',\n    required: true,\n    type: Number,\n    description: 'Post ID to delete',\n  })\n  @ApiResponse({ status: 200, description: 'Post deleted successfully' })\n  @ApiResponse({ status: 404, description: 'Post not found' })\n  // This method cascades and removes relevant relationships between posts and tags NOT the actual tags\n  @Delete()\n  public delete(@Query('id', ParseIntPipe) id: number) {\n    return this.postsService.delete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_imports\n\n\n\ncluster_PostsModule_providers\n\n\n\n\nTagsModule\n\nTagsModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nTagsModule->PostsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            TagsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsController } from './posts.controller';\nimport { PostsService } from './providers/posts.service';\nimport { UsersModule } from 'src/users/users.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Post } from './post.entity';\nimport { MetaOption } from 'src/meta-options/meta-option.entity';\nimport { TagsModule } from 'src/tags/tags.module';\n\n// Import entire module not only a service (view users module exports key)\n@Module({\n  controllers: [PostsController],\n  providers: [PostsService],\n  imports: [\n    UsersModule,\n    TagsModule,\n    TypeOrmModule.forFeature([Post, MetaOption]),\n  ], // Import the post entity, for feature is responsible to create tables corresponding to these entities inside the db\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/providers/posts.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service responsible for handling post-related operations.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, postsRepository: Repository, metaOptionsRepository: Repository, tagsService: TagsService)\n                    \n                \n                        \n                            \n                                Defined in src/posts/providers/posts.service.ts:15\n                            \n                        \n\n                \n                    \n                            Constructor to inject dependencies.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service to handle user-related operations.\n\n                                                        \n                                                \n                                                \n                                                        postsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Repository for managing Post entities.\n\n                                                        \n                                                \n                                                \n                                                        metaOptionsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Repository for managing MetaOption entities.\n\n                                                        \n                                                \n                                                \n                                                        tagsService\n                                                  \n                                                        \n                                                                        TagsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service for handling tag-related operations.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createPostDto: CreatePostDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:58\n                        \n                    \n\n\n            \n                \n                        Creates a new post.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    DTO containing post creation details.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The newly created post.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:142\n                        \n                    \n\n\n            \n                \n                        Deletes a post from the database.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the post to delete.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                An object indicating the deletion status.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:40\n                        \n                    \n\n\n            \n                \n                        Retrieves all posts along with their meta options.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the user requesting the posts.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                A list of posts with related meta options.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(patchPostDto: PatchPostDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:116\n                        \n                    \n\n\n            \n                \n                        Updates an existing post.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                patchPostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    DTO containing fields to update.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The updated post.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Body, Injectable } from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users.service';\nimport { CreatePostDto } from '../dto/create-post.dto';\nimport { Repository } from 'typeorm';\nimport { Post } from '../post.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { MetaOption } from 'src/meta-options/meta-option.entity';\nimport { TagsService } from 'src/tags/providers/tags.service';\nimport { PatchPostDto } from '../dto/patch-post.dto';\n\n/**\n * Service responsible for handling post-related operations.\n */\n@Injectable()\nexport class PostsService {\n  /**\n   * Constructor to inject dependencies.\n   * @param usersService Service to handle user-related operations.\n   * @param postsRepository Repository for managing Post entities.\n   * @param metaOptionsRepository Repository for managing MetaOption entities.\n   * @param tagsService Service for handling tag-related operations.\n   */\n  constructor(\n    private readonly usersService: UsersService,\n\n    @InjectRepository(Post)\n    private readonly postsRepository: Repository, // Only add repositories for 1-1 relationships so that it doesnt become crowded\n\n    @InjectRepository(MetaOption)\n    private readonly metaOptionsRepository: Repository,\n\n    private readonly tagsService: TagsService,\n  ) {}\n\n  /**\n   * Retrieves all posts along with their meta options.\n   * @param userId The ID of the user requesting the posts.\n   * @returns A list of posts with related meta options.\n   */\n  public async findAll(userId: string) {\n    return await this.postsRepository.find({\n      relations: { metaOptions: true },\n    });\n\n    // Get meta options along with the posts\n    // return await this.postsRepository.find({\n    //   relations: {\n    //     metaOptions: true,\n    //   },\n    // });\n  }\n\n  /**\n   * Creates a new post.\n   * @param createPostDto DTO containing post creation details.\n   * @returns The newly created post.\n   */\n  public async create(@Body() createPostDto: CreatePostDto) {\n    const author = await this.usersService.findOneById(createPostDto.authorId);\n    const tags = await this.tagsService.findMultipleTags(createPostDto.tags);\n\n    // Use the spread operator to create a shallow copy of createPostDto, meaning a new object is passed to create()\n    const post = this.postsRepository.create({\n      ...createPostDto,\n      author,\n      tags,\n    }); // Only use await for the save method because it returns a promise\n\n    return await this.postsRepository.save(post);\n  }\n\n  /*\n   public async delete(id: number) {\n    // Start a transaction to handle both deletes atomically\n    const queryRunner =\n      this.postsRepository.manager.connection.createQueryRunner();\n    await queryRunner.startTransaction();\n\n    try {\n      // Find the post (with related metaOptions loaded)\n      const post = await this.postsRepository.findOne({\n        where: { id },\n        relations: ['metaOptions'],\n      });\n      if (!post) {\n        throw new Error('Post not found');\n      }\n\n      // Delete the post (cascade will handle the metaOption deletion automatically)\n      await queryRunner.manager.delete(Post, id); // Use delete instead of remove\n\n      // Commit the transaction if everything is successful\n      await queryRunner.commitTransaction();\n\n      // Return a success response\n      return { deleted: true, id };\n    } catch (error) {\n      // If any error occurs, rollback the transaction\n      await queryRunner.rollbackTransaction();\n\n      // Log the error and return a failure response\n      console.error(error);\n      return { deleted: false, message: error.message };\n    } finally {\n      // Release the query runner (important for clean-up)\n      await queryRunner.release();\n    }\n  }\n*/\n\n  /**\n   * Updates an existing post.\n   * @param patchPostDto DTO containing fields to update.\n   * @returns The updated post.\n   */\n  public async update(@Body() patchPostDto: PatchPostDto) {\n    const tags = await this.tagsService.findMultipleTags(patchPostDto.tags);\n    const post = await this.postsRepository.findOneBy({ id: patchPostDto.id });\n\n    if (!post) {\n      throw new Error('Post not found');\n    }\n\n    post.title = patchPostDto.title ?? post.title;\n    post.content = patchPostDto.content ?? post.content;\n    post.status = patchPostDto.status ?? post.status;\n    post.postType = patchPostDto.postType ?? post.postType;\n    post.slug = patchPostDto.slug ?? post.slug;\n    post.featuredImageUrl =\n      patchPostDto.featuredImageUrl ?? post.featuredImageUrl;\n    post.publishOn = patchPostDto.publishOn ?? post.publishOn;\n    post.tags = tags;\n\n    return await this.postsRepository.save(post);\n  }\n\n  /**\n   * Deletes a post from the database.\n   * @param id The ID of the post to delete.\n   * @returns An object indicating the deletion status.\n   */\n  public async delete(id: number) {\n    await this.postsRepository.delete(id);\n    return { deleted: true, id };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Tag.html":{"url":"entities/Tag.html","title":"entity - Tag","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Tag\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tag.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createDate\n                            \n                            \n                                    \n                                deletedAt\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                featuredImage\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                posts\n                            \n                            \n                                    \n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                updateDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        featuredImage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, post => post.tags, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 512, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:62\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from 'src/posts/post.entity';\nimport {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  ManyToMany,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@Entity()\nexport class Tag {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 256,\n    nullable: false,\n    unique: true,\n  })\n  name: string;\n\n  @Column({\n    type: 'varchar',\n    length: 512,\n    nullable: false,\n    unique: true,\n  })\n  slug: string;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  description: string;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  schema: string;\n\n  @Column({\n    type: 'varchar',\n    length: 1024,\n    nullable: true,\n  })\n  featuredImage: string;\n\n  @ManyToMany(() => Post, (post) => post.tags, {\n    onDelete: 'CASCADE',\n  })\n  posts: Post[];\n\n  // https://orkhan.gitbook.io/typeorm/docs/decorator-reference\n  @CreateDateColumn()\n  createDate: Date;\n\n  @UpdateDateColumn()\n  updateDate: Date;\n\n  // Add this decorartor and column enables soft delete\n  @DeleteDateColumn()\n  deletedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TagsController.html":{"url":"controllers/TagsController.html","title":"controller - TagsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TagsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tags.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tags\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                create\n                            \n                            \n                                    \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    \n                                    Public\n                                    Async\n                                softDelete\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createTagDto: CreateTagDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createTagDto\n                                            \n                                                            CreateTagDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete()\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Async\n                        softDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    softDelete(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('soft-delete')\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  ParseIntPipe,\n  Post,\n  Query,\n} from '@nestjs/common';\nimport { TagsService } from './providers/tags.service';\nimport { CreateTagDto } from './dtos/create-tag.dto';\n\n@Controller('tags')\nexport class TagsController {\n  constructor(\n    /**\n     * Inject tag service\n     */\n    private readonly tagsService: TagsService,\n  ) {}\n\n  @Post()\n  public create(@Body() createTagDto: CreateTagDto) {\n    return this.tagsService.create(createTagDto);\n  }\n\n  @Delete()\n  public async delete(@Query('id', ParseIntPipe) id: number) {\n    return this.tagsService.delete(id);\n  }\n\n  // /tags/soft-delete\n  @Delete('soft-delete')\n  public async softDelete(@Query('id', ParseIntPipe) id: number) {\n    return this.tagsService.softRemove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TagsModule.html":{"url":"modules/TagsModule.html","title":"module - TagsModule","body":"\n                   \n\n\n\n\n    Modules\n    TagsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_exports\n\n\n\ncluster_TagsModule_providers\n\n\n\n\nTagsService \n\nTagsService \n\n\n\nTagsModule\n\nTagsModule\n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tags/tags.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TagsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TagsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TagsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TagsController } from './tags.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Tag } from './tag.entity';\nimport { TagsService } from './providers/tags.service';\n\n@Module({\n  controllers: [TagsController],\n  imports: [TypeOrmModule.forFeature([Tag])],\n  providers: [TagsService],\n  exports: [TagsService],\n})\nexport class TagsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TagsService.html":{"url":"injectables/TagsService.html","title":"injectable - TagsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TagsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/providers/tags.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                findMultipleTags\n                            \n                            \n                                    Public\n                                    Async\n                                softRemove\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tagsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/tags/providers/tags.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tagsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createTagDto: CreateTagDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:20\n                        \n                    \n\n\n            \n                \n                        Creating new tags\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createTagDto\n                                            \n                                                            CreateTagDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findMultipleTags\n                        \n                    \n                \n            \n            \n                \n                        \n                    findMultipleTags(tags: number[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tags\n                                            \n                                                        number[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        softRemove\n                        \n                    \n                \n            \n            \n                \n                        \n                    softRemove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateTagDto } from '../dtos/create-tag.dto';\nimport { In, Repository } from 'typeorm';\nimport { Tag } from '../tag.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n//npx nest generate service tags/providers/tags --flat --no-spec\n@Injectable()\nexport class TagsService {\n  constructor(\n    /**\n     * Inject tagsRepository\n     */\n    @InjectRepository(Tag)\n    private readonly tagsRepository: Repository,\n  ) {}\n  /**\n   * Creating new tags\n   */\n  public async create(createTagDto: CreateTagDto) {\n    const tag = this.tagsRepository.create(createTagDto);\n\n    return await this.tagsRepository.save(tag);\n  }\n\n  public async findMultipleTags(tags: number[]) {\n    const results = await this.tagsRepository.find({\n      where: {\n        id: In(tags), // Finds all the tags with ids within this array\n      },\n    });\n\n    return results;\n  }\n\n  public async delete(id: number) {\n    // Check if the tag exists before deleting\n    const tag = await this.tagsRepository.findOne({\n      where: { id },\n    });\n\n    if (!tag) {\n      return { deleted: false, message: 'Tag not found' };\n    }\n\n    // Proceed with deletion\n    await this.tagsRepository.delete(id);\n\n    return { deleted: true, id };\n  }\n\n  public async softRemove(id: number) {\n    // Soft delete creates a timestamp and not remove it from DB\n    await this.tagsRepository.softDelete(id);\n\n    return { deleted: true, id };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                posts\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, post => post.author)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:38\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from 'src/posts/post.entity';\nimport { Column, Entity, OneToMany, PrimaryGeneratedColumn } from 'typeorm';\n\n// Column typees differ if we're using SQL or PostgreSQL check typeorm website\n// Should match the DTO\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n  })\n  firstName: string;\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: true,\n  })\n  lastName: string;\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n    unique: true,\n  })\n  email: string;\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n  })\n  password: string;\n\n  // A user can have many posts\n  @OneToMany(() => Post, (post) => post.author)\n  posts: Post[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUsers\n                            \n                            \n                                    \n                                    Public\n                                patchUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUsers(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getUserParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id?')@ApiOperation({summary: 'Fetches a list of registered users on the application'})@ApiResponse({status: 200, description: 'Users fetched successfully based on the query'})@ApiQuery({name: 'limit', type: 'number', required: false, description: 'The number of entries returned per query', example: 10})@ApiQuery({name: 'page', type: 'number', required: false, description: 'The position of the page number that you want the API to return', example: 1})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        patchUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchUser(patchUserDto: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PatchUserDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        /* eslint-disable @typescript-eslint/no-unused-vars */\nimport {\n  Body,\n  Headers,\n  Controller,\n  Get,\n  Param,\n  Post,\n  Query,\n  ParseIntPipe,\n  DefaultValuePipe,\n  ValidationPipe,\n  Patch,\n} from '@nestjs/common';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { GetUsersParamDto } from './dtos/get-users-param.dto';\nimport { PatchUserDto } from './dtos/patch-user.dto';\nimport { UsersService } from './providers/users.service';\nimport { ApiOperation, ApiQuery, ApiResponse, ApiTags } from '@nestjs/swagger';\n\n// To make parameters optional, use the ? operator\n@Controller('users')\n@ApiTags('Users')\nexport class UsersController {\n  constructor(\n    // Injecting user service\n    private readonly usersService: UsersService,\n  ) {}\n  @Get('/:id?')\n  @ApiOperation({\n    summary: 'Fetches a list of registered users on the application',\n  })\n  // We can add multiple api response\n  @ApiResponse({\n    status: 200,\n    description: 'Users fetched successfully based on the query',\n  })\n  @ApiQuery({\n    name: 'limit',\n    type: 'number',\n    required: false,\n    description: 'The number of entries returned per query',\n    example: 10,\n  })\n  @ApiQuery({\n    name: 'page',\n    type: 'number',\n    required: false,\n    description:\n      'The position of the page number that you want the API to return',\n    example: 1,\n  })\n  public getUsers(\n    @Param() getUserParamDto: GetUsersParamDto,\n    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\n  ) {\n    return this.usersService.findAll(getUserParamDto, limit, page);\n  }\n\n  @Post()\n  public createUsers(\n    // Without the global validation\n    // @Body(new ValidationPipe()) createUserDto: CreateUserDto,\n\n    // With\n    @Body() createUserDto: CreateUserDto,\n  ) {\n    return this.usersService.createUser(createUserDto);\n  }\n  @Patch()\n  public patchUser(@Body() patchUserDto: PatchUserDto) {\n    return patchUserDto;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './providers/users.service';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './user.entity';\nimport { ConfigModule } from '@nestjs/config';\nimport profileConfig from './config/profile.config';\n\n// We can only export providers, never controllers\n@Module({\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService],\n  // imports: [AuthModule], will cause a circular dependency\n  imports: [\n    forwardRef(() => AuthModule),\n    TypeOrmModule.forFeature([User]),\n    ConfigModule.forFeature(profileConfig),\n  ],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for managing user-related operations in the Users table.\nThis service interacts with the Users table to perform CRUD operations.\nIt also uses the AuthService to handle authentication-related checks and\ndependencies while ensuring circular dependencies are avoided.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    Public\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findOneById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, usersRepository: Repository, profileConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/users.service.ts:19\n                            \n                        \n\n                \n                    \n                            Constructs the UsersService with necessary dependencies.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService for handling authentication-related operations.\n\n\n                                                        \n                                                \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        profileConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:85\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(getUserParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:55\n                        \n                    \n\n\n            \n                \n                        Retrieves a list of all users from the database.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing filters for user retrieval.\n\n\n                                            \n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe maximum number of users to return.\n\n\n                                            \n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe page number for pagination.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                Array of user objects containing basic details.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:80\n                        \n                    \n\n\n            \n                \n                        Retrieves a single user by their unique identifier.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe unique ID of the user to retrieve.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                A user object containing their details.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { GetUsersParamDto } from '../dtos/get-users-param.dto';\nimport { AuthService } from 'src/auth/providers/auth.service';\nimport { Repository } from 'typeorm';\nimport { User } from '../user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { CreateUserDto } from '../dtos/create-user.dto';\nimport { ConfigService, ConfigType } from '@nestjs/config';\nimport profileConfig from '../config/profile.config';\n\n/**\n * Service for managing user-related operations in the Users table.\n *\n * This service interacts with the Users table to perform CRUD operations.\n * It also uses the AuthService to handle authentication-related checks and\n * dependencies while ensuring circular dependencies are avoided.\n */\n@Injectable()\nexport class UsersService {\n  /**\n   * Constructs the UsersService with necessary dependencies.\n   *\n   * @param {AuthService} authService - Service for handling authentication-related operations.\n   */\n  constructor(\n    @Inject(forwardRef(() => AuthService))\n    private readonly authService: AuthService,\n\n    /**\n     * Injecting usersRepository\n     */\n    @InjectRepository(User)\n    private usersRepository: Repository,\n\n    // /**\n    //  * Injecting ConfigService\n    //  */\n    // private readonly configService: ConfigService,\n\n    /**\n     * Inject profileConfig\n     */\n    @Inject(profileConfig.KEY)\n    private readonly profileConfiguration: ConfigType,\n  ) {}\n\n  /**\n   * Retrieves a list of all users from the database.\n   *\n   * @param {GetUsersParamDto} getUserParamDto - DTO containing filters for user retrieval.\n   * @param {number} limit - The maximum number of users to return.\n   * @param {number} page - The page number for pagination.\n   * @returns {Array} Array of user objects containing basic details.\n   */\n  public findAll(\n    getUserParamDto: GetUsersParamDto,\n    limit: number,\n    page: number,\n  ) {\n    // Test the new config\n    console.log(this.profileConfiguration);\n    return [\n      {\n        firstName: 'John',\n        email: 'john@doe.com',\n      },\n      {\n        firstName: 'Alice',\n        email: 'alice@doe.com',\n      },\n    ];\n  }\n\n  /**\n   * Retrieves a single user by their unique identifier.\n   *\n   * @param {number} id - The unique ID of the user to retrieve.\n   * @returns {{ id: number; firstName: string; email: string }} A user object containing their details.\n   */\n  public async findOneById(id: number) {\n    return await this.usersRepository.findOneBy({\n      id,\n    });\n  }\n  public async createUser(createUserDto: CreateUserDto) {\n    // Check if email is unique\n    const existingUser = await this.usersRepository.findOne({\n      where: { email: createUserDto.email },\n    });\n    // Handle exception\n\n    // Create a new user\n    let newUser = this.usersRepository.create(createUserDto);\n\n    newUser = await this.usersRepository.save(newUser);\n\n    return newUser;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.module.ts\n            \n            variable\n            ENV\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/providers/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/meta-options/dtos/create-post-meta-options.dto.ts\n            \n            class\n            CreatePostMetaOptionsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/meta-options/meta-option.entity.ts\n            \n            entity\n            MetaOption\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/meta-options/meta-options.controller.ts\n            \n            controller\n            MetaOptionsController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/meta-options/providers/meta-options.service.ts\n            \n            injectable\n            MetaOptionsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dto/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/posts/dto/patch-post.dto.ts\n            \n            class\n            PatchPostDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/post.entity.ts\n            \n            entity\n            Post\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/posts/providers/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/tags/dtos/create-tag.dto.ts\n            \n            class\n            CreateTagDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tags/providers/tags.service.ts\n            \n            injectable\n            TagsService\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                src/tags/tag.entity.ts\n            \n            entity\n            Tag\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tags/tags.controller.ts\n            \n            controller\n            TagsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dtos/get-users-param.dto.ts\n            \n            class\n            GetUsersParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/providers/users.service.ts\n            \n            injectable\n            UsersService\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/users/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.23\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.2.2\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/mapped-types : ^2.0.5\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.3.0\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            pg : ^8.11.5\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            PostStatus   (src/.../post-status.enum.ts)\n                        \n                        \n                            PostType   (src/.../post-type.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/posts/enums/post-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PostStatus\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n            \n        \n\n    src/posts/enums/post-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PostType\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\nCompodoc Documentation\nScript\nExample :$ npm run docLet me name this as doc.\nIt should be a comma over here.\nNow this script itself a little bit verbose and lengthy, and I'll try to explain all the parts of the\nscript as we go.\nSo first of all, we need to use NPCs and along with Compo Doc in order to generate the Compo Doc documentation.\nSo we use at the rate compo doc, which is the name of the package.\nSo compo doc slash compo doc.\nSo this basically triggers the compo doc package for us.\nAnd then we need to provide it certain configurations.\nThe first one is the path to the pts config file.\nSo hyphen path to the pts config file TTS config file is within the root of the project itself.\nSo we use tsconfig.json.\nSo it's going to pick up this particular config file which is there in the root of our project.\nSo this particular TTS config file over here.\nNow once we have provided the TTS config file, the next flag that we want to add is the s flag.\nNow what this flag does is that it instructs compared to serve generated documentation on a port.\nNow, having said that, I want to have a specific port number as well.\nSo I use hyphen hyphen port.\nAnd let's serve the documentation on port 3001.\nWith that, I also want to enable Compo doc to watch for changes within my code.\nSo whenever I'm writing any new code, it should watch for changes and regenerate the documentation\nwhenever needed.\nFinally, I want to give it a specific directory for generating the documentation so we can use a hyphen\nd flag, which instructs combo doc to generate the documentation within a specific directory, which\nwe can pass as an argument.\nSo here I'm saying within the root of my project, just use the documentation directory to generate\nyour documentation.\nThe details can be seen at localhost:3001\nAlways define both sides of the relationships in many to many relationships i.e tags and posts\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MetaOptionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TagsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_exports\n\n\n\ncluster_TagsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nPostsModule -->\n\nTagsModule->PostsModule\n\n\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nTagsService \n\nTagsService \n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        6 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    6 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    7 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ENV   (src/.../app.module.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENV\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.NODE_ENV\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
