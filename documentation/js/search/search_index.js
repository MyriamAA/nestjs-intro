var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.094,1,2.226]],["body/controllers/AppController.html",[0,1.884,1,3.835,2,1.579,3,0.416,4,0.366,5,0.318,6,4.09,7,0.496,8,0.027,9,1.032,10,3.4,11,4.09,12,0.416,13,0.019,14,4.09,15,1.953,16,0.023,17,0.023]],["title/modules/AppModule.html",[18,1.094,19,2.226]],["body/modules/AppModule.html",[1,3.159,2,1.329,3,0.244,4,0.215,5,0.187,7,0.545,8,0.027,9,0.607,10,3.148,11,2.406,12,0.244,13,0.011,16,0.016,17,0.016,18,1.552,19,4.341,20,1.237,21,1.069,22,1.444,23,1.444,24,1.237,25,2.411,26,1.444,27,2.406,28,2.406,29,2.406,30,3.148,31,3.442,32,3.442,33,3.148,34,2.897,35,2.065,36,1.444,37,1.334,38,2.111,39,2.621,40,2.853,41,2.853,42,2.853,43,2.853,44,1.715,45,1.149,46,2.853,47,1.237,48,1.334,49,2.853,50,3.442,51,4.64,52,1.891,53,4.081,54,2.853,55,2.406,56,2.853,57,2.111,58,4.081,59,2.853,60,1.569,61,3.526,62,2.406,63,2.406,64,2.853,65,2.853,66,2.111,67,2.406,68,2.853,69,2.853,70,2.853,71,1.334,72,2.853,73,2.853,74,2.853,75,2.853,76,2.406,77,2.853,78,1.444,79,2.853,80,0.521,81,2.853,82,1.334,83,0.996,84,2.853,85,2.853,86,2.853,87,2.853,88,2.853,89,2.853,90,1.237,91,2.853,92,2.406,93,2.853,94,2.406,95,2.853,96,2.853,97,2.853,98,1.891,99,2.853,100,2.853,101,2.853,102,2.111,103,2.853,104,2.406,105,2.853,106,2.853]],["title/injectables/AppService.html",[10,1.847,107,1.094]],["body/injectables/AppService.html",[3,0.404,4,0.356,5,0.309,7,0.404,8,0.027,9,1.003,10,3.127,12,0.404,13,0.019,16,0.023,17,0.023,107,1.852,108,2.385,109,3.974,110,0.672,111,2.29,112,6.342,113,0.93,114,4.713,115,1.898,116,1.852,117,1.898,118,4.713,119,4.713]],["title/controllers/AuthController.html",[0,1.094,120,2.226]],["body/controllers/AuthController.html",[0,1.828,2,1.503,3,0.395,4,0.348,5,0.303,7,0.481,8,0.027,9,0.982,12,0.395,13,0.018,15,1.859,16,0.022,17,0.022,120,3.721,121,3.891,122,2.774,123,5.103,124,3.062,125,3.891,126,2.774,127,2.774,128,3.415,129,4.615,130,2,131,2.774,132,2,133,2]],["title/modules/AuthModule.html",[18,1.094,30,1.847]],["body/modules/AuthModule.html",[2,1.663,3,0.34,4,0.299,5,0.26,7,0.511,8,0.027,9,0.844,12,0.34,13,0.016,16,0.02,17,0.02,18,1.942,20,1.72,21,1.487,22,2.008,23,2.008,24,1.72,25,2.859,26,2.859,30,3.535,34,2.859,35,2.585,36,2.008,37,1.855,39,2.809,120,3.744,123,3.346,124,3.399,125,3.346,126,2.385,127,2.385,134,3.346,135,3.346,136,3.346,137,3.968,138,3.386,139,3.968,140,3.346,141,3.346,142,2.63,143,2.936]],["title/injectables/AuthService.html",[107,1.094,124,1.7]],["body/injectables/AuthService.html",[3,0.306,4,0.27,5,0.234,7,0.409,8,0.027,9,0.76,12,0.306,13,0.014,15,1.439,16,0.019,17,0.019,60,1.965,71,1.671,78,1.808,80,0.872,83,1.875,98,3.558,107,1.553,108,1.808,110,0.51,111,1.921,113,1.06,115,1.921,116,2.041,117,2.162,124,2.413,126,2.148,127,2.148,128,2.644,130,2.067,131,2.148,132,2.067,133,1.549,138,2.368,142,2.368,143,2.644,144,3.013,145,2.661,146,5.728,147,5.368,148,3.013,149,2.931,150,3.573,151,2.067,152,1.666,153,1.553,154,3.573,155,3.573,156,4.769,157,3.573,158,2.368,159,3.013,160,3.573,161,3.013,162,1.965,163,3.573,164,3.013,165,1.965,166,3.013,167,3.573,168,3.573,169,3.573]],["title/classes/CreatePostDto.html",[13,0.013,170,1.847]],["body/classes/CreatePostDto.html",[3,0.149,4,0.131,5,0.114,7,0.404,8,0.027,12,0.149,13,0.014,16,0.011,17,0.011,47,1.214,71,2.206,80,1.133,90,1.214,110,0.248,113,1.102,116,1.818,153,1.853,170,1.54,171,0.814,172,4.797,173,1.288,174,1.407,175,3.515,176,3.977,177,2.964,178,2.601,179,3.816,180,2.964,181,2.33,182,2.926,183,2.113,184,2.234,185,4.181,186,1.141,187,1.696,188,1.741,189,2.801,190,3.396,191,3.728,192,1.741,193,1.741,194,3.723,195,1.422,196,1.741,197,1.741,198,2.801,199,2.801,200,4.349,201,1.741,202,1.741,203,2.038,204,2.801,205,1.741,206,3.267,207,2.801,208,1.741,209,1.741,210,1.741,211,2.801,212,2.167,213,3.396,214,4.028,215,1.856,216,2.362,217,1.741,218,1.741,219,2.67,220,2.964,221,2.801,222,2.801,223,1.741,224,1.741,225,2.362,226,3.396,227,2.362,228,2.362,229,2.801,230,2.801,231,1.741,232,1.741,233,1.741,234,1.741,235,1.468,236,3.396,237,1.741,238,3.396,239,3.396,240,1.684,241,2.362,242,2.362,243,2.073,244,1.856,245,2.362,246,1.741,247,3.267,248,2.362,249,2.362,250,2.362,251,1.741,252,1.741,253,2.073,254,2.362,255,1.741,256,1.741,257,1.741,258,1.741,259,1.741,260,2.801,261,1.741,262,2.601,263,2.801,264,2.073,265,2.836,266,3.287,267,2.67,268,2.362,269,2.073,270,1.288,271,1.288,272,2.801,273,0.881,274,2.362,275,1.468,276,1.468,277,1.154,278,1.154,279,3.49,280,3.669,281,0.881,282,1.288,283,3.515,284,1.468,285,2.362,286,1.468,287,1.741,288,1.468,289,1.468,290,1.741,291,1.741,292,1.741,293,1.741,294,1.741,295,1.468,296,1.741,297,1.856,298,1.741,299,2.801,300,2.073,301,1.741,302,1.741,303,1.741,304,1.741,305,2.113,306,1.154,307,1.741,308,1.741,309,1.741,310,1.741,311,1.468,312,1.741]],["title/classes/CreatePostMetaOptionsDto.html",[13,0.013,203,1.7]],["body/classes/CreatePostMetaOptionsDto.html",[3,0.391,4,0.345,5,0.299,7,0.391,8,0.027,12,0.391,13,0.022,16,0.022,17,0.022,47,2.418,80,0.835,110,0.652,113,0.902,116,1.817,171,2.136,174,1.948,187,1.387,195,1.372,203,2.823,264,4.128,265,3.354,267,3.027,273,2.311,277,3.698,300,4.458,313,2.418,314,3.851,315,4.567,316,4.567]],["title/classes/CreateTagDto.html",[13,0.013,317,2.019]],["body/classes/CreateTagDto.html",[3,0.286,4,0.252,5,0.219,7,0.39,8,0.027,12,0.286,13,0.018,16,0.018,17,0.018,80,1.066,110,0.477,113,1.151,116,2.094,152,1.811,171,1.562,174,1.591,181,3.438,182,3.865,187,1.771,191,2.74,212,1.944,236,2.816,238,4.698,239,4.698,240,2.74,241,3.842,242,3.842,243,3.372,244,3.02,245,3.842,264,3.372,265,3.118,266,3.693,267,3.693,268,3.842,269,2.471,270,2.471,271,2.471,273,1.69,279,3.838,280,4.123,281,1.69,284,2.816,288,2.816,289,2.816,295,2.816,317,2.74,318,5.075,319,2.816,320,4.373,321,3.34,322,3.34,323,3.34,324,3.34,325,3.34,326,3.34,327,3.34,328,3.34,329,3.34,330,3.34,331,3.34,332,2.816]],["title/classes/CreateUserDto.html",[13,0.013,333,1.847]],["body/classes/CreateUserDto.html",[3,0.301,4,0.265,5,0.231,7,0.301,8,0.027,12,0.301,13,0.019,16,0.019,17,0.019,80,1.04,98,3.529,110,0.502,113,1.123,116,2.066,153,1.536,158,3.529,171,1.644,174,1.648,186,1.336,187,1.728,240,2.837,265,3.421,266,3.127,267,3.772,269,2.602,270,2.602,271,2.602,273,1.78,332,3.979,333,2.595,334,5.005,335,2.602,336,3.94,337,4.49,338,3.517,339,3.517,340,3.517,341,3.517,342,3.517,343,3.517,344,3.517,345,5.691,346,4.718,347,4.718,348,4.718,349,4.718,350,4.718,351,4.718,352,4.521,353,4.718,354,4.718,355,4.718,356,3.517,357,4.718,358,5.691,359,3.517,360,3.517]],["title/classes/GetUsersParamDto.html",[13,0.013,361,2.019]],["body/classes/GetUsersParamDto.html",[3,0.362,4,0.318,5,0.277,7,0.498,8,0.027,12,0.362,13,0.023,16,0.021,17,0.021,80,1.063,83,1.855,110,0.602,113,0.833,153,1.73,171,1.973,174,1.855,186,1.646,187,1.281,191,3.194,194,3.558,212,1.582,262,3.931,266,3.521,273,2.135,280,3.931,281,2.135,282,3.122,361,3.194,362,4.479,363,3.194,364,3.558,365,2.357,366,3.931,367,4.219,368,4.219,369,4.219]],["title/entities/MetaOption.html",[370,1.353,371,1.571]],["body/entities/MetaOption.html",[3,0.296,4,0.261,5,0.226,7,0.399,8,0.027,12,0.296,13,0.014,16,0.018,17,0.018,48,2.842,80,1.111,82,1.615,90,2.02,110,0.493,113,1.164,116,1.518,174,1.628,186,1.32,187,1.791,195,1.575,219,3.744,225,2.911,226,4.449,244,2.289,300,3.904,313,2.635,365,1.977,370,1.877,371,2.179,372,2.911,373,4.449,374,4.449,375,4.449,376,3.453,377,3.497,378,3.453,379,2.289,380,3.089,381,3.453,382,2.911,383,4.661,384,3.93,385,3.453,386,3.453,387,4.449,388,3.453,389,2.555,390,3.089,391,3.93,392,3.93,393,1.497,394,3.453,395,3.453,396,3.453,397,2.289]],["title/controllers/MetaOptionsController.html",[0,1.094,398,2.226]],["body/controllers/MetaOptionsController.html",[0,1.324,2,1.324,3,0.348,4,0.307,5,0.266,7,0.49,8,0.027,9,0.865,12,0.348,13,0.016,14,3.427,15,1.637,16,0.021,17,0.021,47,2.249,48,2.426,80,0.743,110,0.58,111,2.089,113,0.802,115,1.637,117,1.637,122,2.444,145,2.477,151,1.762,152,1.42,153,1.324,187,1.234,195,1.48,203,3.046,278,2.694,313,2.249,398,3.438,399,3.427,400,3.839,401,5.714,402,4.065,403,4.065,404,5.188,405,3.119,406,2.235,407,3.142,408,3.427,409,3.427,410,4.065,411,4.065]],["title/modules/MetaOptionsModule.html",[18,1.094,31,2.019]],["body/modules/MetaOptionsModule.html",[2,1.713,3,0.356,4,0.313,5,0.272,7,0.536,8,0.027,9,0.884,12,0.356,13,0.016,16,0.021,17,0.021,18,1.879,20,1.8,21,1.557,22,2.102,23,2.102,24,1.8,25,2.921,26,2.102,31,3.844,35,2.661,36,2.102,37,1.942,39,2.284,44,2.497,45,1.673,47,2.28,48,1.942,313,1.8,371,1.942,398,3.826,407,3.517,408,3.502,409,3.502,412,3.502,413,3.502,414,4.154,415,4.154,416,2.497,417,4.154]],["title/injectables/MetaOptionsService.html",[107,1.094,407,1.847]],["body/injectables/MetaOptionsService.html",[3,0.322,4,0.283,5,0.246,7,0.52,8,0.027,9,0.799,12,0.322,13,0.015,16,0.02,17,0.02,45,1.512,47,2.136,60,2.065,78,1.9,80,0.901,107,1.605,108,1.9,110,0.536,111,1.985,113,0.973,115,1.512,117,1.512,130,2.136,133,1.628,145,2.385,151,2.136,152,1.721,153,1.605,195,0.924,203,2.955,278,2.489,313,2.385,371,2.304,393,1.628,406,2.065,407,2.71,416,2.258,418,4.639,419,3.166,420,3.307,421,2.304,422,3.755,423,3.512,424,3.755,425,4.928,426,4.928,427,3.755,428,3.755,429,2.258,430,2.489,431,3.166,432,3.166,433,3.755,434,2.489,435,3.755]],["title/classes/PatchPostDto.html",[13,0.013,436,2.019]],["body/classes/PatchPostDto.html",[3,0.366,4,0.322,5,0.28,7,0.501,8,0.027,12,0.366,13,0.021,16,0.021,17,0.021,80,0.781,110,0.61,113,0.844,170,2.35,171,1.998,173,3.162,174,1.87,186,1.517,187,1.298,195,1.317,212,1.602,235,3.604,262,3.962,265,3.219,273,2.163,279,3.962,281,2.163,365,2.366,421,1.998,436,3.219,437,4.515,438,4.515,439,5.355,440,5.355,441,4.274,442,4.274,443,3.604,444,3.162,445,3.162]],["title/classes/PatchUserDto.html",[13,0.013,446,2.226]],["body/classes/PatchUserDto.html",[3,0.405,4,0.357,5,0.31,7,0.488,8,0.027,12,0.405,13,0.019,16,0.023,17,0.023,83,1.652,171,2.212,305,2.843,333,2.601,335,3.5,421,2.665,438,4.805,443,3.988,446,3.777,447,3.988,448,5.699,449,3.988,450,3.988,451,3.5,452,4.73,453,4.73,454,3.988]],["title/entities/Post.html",[195,0.826,370,1.353]],["body/entities/Post.html",[3,0.172,4,0.152,5,0.132,7,0.449,8,0.027,12,0.172,13,0.008,16,0.012,17,0.012,47,1.892,48,0.939,57,3.23,71,2.912,80,1.161,82,0.939,83,1.831,90,2.352,110,0.287,113,1.165,116,1.949,153,1.922,162,1.105,165,1.105,174,1.096,176,3.256,177,3.256,178,3.714,179,4.015,180,3.256,181,2.56,182,2.56,183,2.322,184,1.954,185,3.256,186,0.889,187,1.793,195,0.95,203,1.016,219,2.08,247,3.504,274,2.646,275,1.694,276,1.694,277,1.331,278,1.331,285,4.575,297,2.08,313,0.871,352,1.486,365,1.447,366,1.486,370,1.264,371,2.041,377,2.56,379,3.596,380,4.094,382,1.694,390,3.696,391,1.694,392,2.646,393,0.871,397,2.56,400,1.486,416,1.208,455,1.694,456,2.56,457,2.009,458,3.138,459,5.019,460,2.009,461,3.681,462,2.009,463,3.714,464,3.714,465,2.646,466,2.009,467,2.009,468,3.138,469,2.009,470,3.138,471,2.009,472,2.646,473,2.009,474,2.009,475,2.646,476,2.08,477,2.009,478,2.009,479,2.347,480,1.694,481,3.138,482,2.009,483,2.009,484,2.646,485,2.009,486,3.138,487,2.646,488,3.138,489,2.009,490,2.009,491,2.009,492,2.009,493,3.862,494,2.009,495,2.009,496,1.331,497,2.009,498,2.009,499,1.694,500,2.009,501,2.009,502,2.124,503,1.694,504,2.009,505,1.486,506,1.486,507,2.009]],["title/controllers/PostsController.html",[0,1.094,508,2.226]],["body/controllers/PostsController.html",[0,0.871,2,0.871,3,0.229,4,0.202,5,0.175,7,0.46,8,0.027,9,0.569,12,0.229,13,0.011,15,1.077,16,0.015,17,0.015,80,0.923,110,0.382,111,1.569,113,0.997,115,2.033,116,1.496,117,2.033,122,1.608,130,1.16,131,1.608,132,1.16,133,1.16,145,2.726,151,2.188,152,1.763,153,1.644,170,3.08,183,2.342,184,1.972,186,1.301,187,1.533,195,1.486,200,4.257,212,1.892,281,1.354,306,2.582,365,1.46,405,1.608,436,3.367,444,2.883,445,2.883,496,1.773,502,2.143,508,2.582,509,2.256,510,3.896,511,3.226,512,3.896,513,3.896,514,2.675,515,3.896,516,1.972,517,3.896,518,5.924,519,3.735,520,3.285,521,2.675,522,2.675,523,1.773,524,2.675,525,2.675,526,3.896,527,2.675,528,3.285,529,2.675,530,2.883,531,3.285,532,2.675,533,2.675,534,1.773,535,2.883,536,3.285,537,1.773,538,2.527,539,2.256,540,3.875,541,3.875,542,2.256,543,2.256,544,2.256,545,2.675,546,2.675,547,2.675,548,2.675,549,3.285,550,3.896,551,2.675,552,2.675,553,2.675,554,2.675,555,2.256,556,2.675,557,2.675,558,2.675,559,2.675,560,2.675,561,2.256,562,2.675]],["title/modules/PostsModule.html",[18,1.094,32,2.019]],["body/modules/PostsModule.html",[2,1.545,3,0.304,4,0.267,5,0.232,7,0.557,8,0.027,9,0.754,12,0.304,13,0.014,16,0.019,17,0.019,18,1.938,20,1.537,21,1.329,22,1.794,23,1.794,24,1.537,25,2.705,26,2.4,32,3.91,33,3.368,34,3.099,35,2.4,36,1.794,37,1.658,39,2.609,44,2.131,45,1.428,48,1.658,82,1.658,132,1.537,140,2.989,195,1.167,313,1.537,363,2.131,370,1.428,371,2.218,416,2.131,421,1.658,508,3.544,538,3.368,539,2.989,563,2.989,564,3.545,565,2.989,566,3.545,567,3.545,568,2.989,569,3.545,570,3.545,571,3.545,572,2.989,573,3.545,574,3.545,575,2.989,576,3.545,577,3.545,578,3.545,579,2.989]],["title/injectables/PostsService.html",[107,1.094,538,1.847]],["body/injectables/PostsService.html",[3,0.123,4,0.108,5,0.094,7,0.425,8,0.028,9,0.306,12,0.123,13,0.006,15,1.445,16,0.009,17,0.009,21,0.897,45,0.578,47,1.728,48,0.672,60,2.511,66,1.063,71,1.678,78,1.211,80,0.729,82,1.678,83,1.253,90,0.623,102,1.771,107,0.779,108,0.727,110,0.205,111,0.964,113,0.787,115,2,116,1.002,117,2,130,1.555,132,1.866,133,1.555,145,2.377,148,1.211,149,2.135,151,1.728,152,1.392,153,1.298,159,1.211,162,0.79,170,2.731,178,2.655,183,1.439,184,1.816,186,1.016,195,1.528,206,2.276,212,1.613,228,2.594,240,0.863,297,1.586,305,2.157,306,1.586,313,0.623,365,1.971,371,1.678,393,0.623,397,0.952,400,2.949,405,0.863,416,0.863,420,3.297,421,1.678,423,3.162,429,2.157,430,0.952,431,3.025,432,1.211,434,3.802,436,2.745,444,1.771,445,1.771,456,1.586,479,1.119,496,0.952,502,2.511,511,2.588,516,2.017,519,1.771,520,2.018,523,2.039,528,2.018,530,1.771,531,2.018,534,3.17,537,0.952,538,1.316,543,1.211,544,1.211,555,1.211,568,1.211,575,2.018,580,1.211,581,3.025,582,4.187,583,3.63,584,2.018,585,3.588,586,3.588,587,2.42,588,1.436,589,3.025,590,2.655,591,1.436,592,1.436,593,3.025,594,2.393,595,1.771,596,2.393,597,1.436,598,3.076,599,2.393,600,2.594,601,2.393,602,1.436,603,2.018,604,2.594,605,2.393,606,1.771,607,1.436,608,1.436,609,2.393,610,1.436,611,1.436,612,1.436,613,1.436,614,1.436,615,1.436,616,2.393,617,3.076,618,1.211,619,1.436,620,1.436,621,2.276,622,1.436,623,1.211,624,1.436,625,1.436,626,1.436,627,1.436,628,1.436,629,1.436,630,1.436,631,2.393,632,3.076,633,1.211,634,1.436,635,1.436,636,1.436,637,1.436,638,1.211,639,1.436,640,1.436,641,1.436,642,2.393,643,2.393,644,2.018,645,1.436,646,1.436,647,1.436,648,1.211,649,1.436,650,1.436,651,1.436,652,1.436,653,1.436,654,2.594,655,1.436,656,1.436,657,1.436,658,1.436,659,1.436,660,1.436,661,1.436,662,1.436,663,1.211,664,1.436,665,1.436,666,1.436,667,1.436,668,1.211,669,1.436,670,1.436,671,1.436,672,1.436,673,1.436,674,2.393,675,1.436,676,2.393,677,1.436,678,2.393,679,1.436,680,2.393,681,1.436,682,2.393,683,1.436,684,2.393,685,1.436,686,2.393,687,1.436,688,1.211,689,1.436]],["title/entities/Tag.html",[370,1.353,479,1.571]],["body/entities/Tag.html",[3,0.232,4,0.204,5,0.177,7,0.336,8,0.027,12,0.232,13,0.011,16,0.016,17,0.016,71,2.876,80,1.18,82,1.264,90,2.199,110,0.386,113,1.214,116,2.003,152,1.614,162,1.486,174,1.371,181,3.063,182,3.063,186,1.112,187,1.868,195,1.382,212,1.732,219,3.725,320,3.897,365,1.732,370,1.581,373,3.897,374,3.897,375,3.897,377,3.063,379,3.571,380,4.077,384,3.31,387,3.897,389,2,390,3.844,393,1.171,397,2.601,461,4.277,463,4.158,464,4.158,465,3.31,475,3.31,476,3.362,479,1.835,480,2.279,484,3.31,487,3.31,502,2.542,511,1.625,688,3.31,690,2.279,691,4.622,692,2.702,693,4.622,694,2.702,695,2.702,696,2.702,697,2.702,698,2.702,699,2.702,700,2.702,701,2.702,702,2.702,703,2.702,704,2.702,705,2.702,706,2.702,707,2.279]],["title/controllers/TagsController.html",[0,1.094,708,2.226]],["body/controllers/TagsController.html",[0,1.082,2,1.082,3,0.285,4,0.251,5,0.218,7,0.443,8,0.027,9,0.707,12,0.285,13,0.013,15,1.338,16,0.018,17,0.018,78,1.682,80,0.946,110,0.474,111,1.829,113,1.021,115,2.083,117,2.083,122,1.998,130,1.441,132,1.441,133,1.441,145,2.753,151,2.242,152,1.807,153,1.684,184,1.682,186,1.702,187,1.571,195,1.272,317,3.613,365,2.084,405,1.998,406,1.828,420,3.613,421,2.124,429,2.73,479,1.554,511,3.765,523,2.203,535,3.828,537,2.203,561,2.802,587,2.618,618,2.802,708,3.01,709,2.802,710,4.541,711,2.802,712,3.323,713,3.323,714,3.323,715,4.541,716,3.323,717,2.802,718,2.802,719,3.323,720,3.323,721,3.323,722,3.323,723,3.323,724,3.323]],["title/modules/TagsModule.html",[18,1.094,33,1.847]],["body/modules/TagsModule.html",[2,1.692,3,0.349,4,0.308,5,0.267,7,0.533,8,0.027,9,0.867,12,0.349,13,0.016,16,0.021,17,0.021,18,1.863,20,1.767,21,1.528,22,2.063,23,2.063,24,1.767,25,2.895,26,2.895,33,3.557,35,2.63,36,2.063,37,1.907,39,2.242,44,2.451,45,1.642,479,1.907,587,3.412,708,3.793,717,3.438,725,3.438,726,3.438,727,3.438,728,4.077,729,4.077,730,3.438,731,4.077]],["title/injectables/TagsService.html",[107,1.094,587,1.7]],["body/injectables/TagsService.html",[3,0.223,4,0.197,5,0.171,7,0.455,8,0.028,9,0.555,12,0.223,13,0.01,15,1.05,16,0.02,17,0.015,45,1.05,60,2.49,71,1.788,78,1.319,80,0.971,90,1.13,104,2.198,107,1.245,108,1.319,110,0.372,111,1.54,113,1.048,115,2.008,117,2.139,126,1.567,127,1.567,128,1.929,130,1.657,132,1.13,133,1.13,145,2.712,151,2.302,152,1.854,153,1.729,161,2.198,165,1.434,166,2.198,184,2.523,186,1.7,240,1.567,253,1.929,254,2.198,306,1.728,317,3.192,365,2.08,393,1.13,406,1.434,420,3.761,421,1.788,423,2.998,429,2.998,430,1.728,434,3.519,472,2.198,479,2.595,511,2.722,516,1.935,523,2.534,579,2.198,587,1.935,600,2.198,644,2.198,648,2.198,654,3.818,707,2.198,711,3.224,718,2.198,730,2.198,732,2.198,733,3.823,734,3.823,735,2.607,736,2.607,737,4.528,738,2.607,739,3.823,740,2.607,741,3.823,742,2.607,743,3.823,744,2.607,745,2.607,746,2.607,747,2.607,748,2.607,749,2.607,750,2.607,751,2.607,752,2.198,753,2.607,754,2.607,755,2.607,756,2.607,757,2.607,758,2.607]],["title/entities/User.html",[83,1.173,370,1.353]],["body/entities/User.html",[3,0.264,4,0.233,5,0.202,7,0.37,8,0.027,12,0.264,13,0.012,16,0.017,17,0.017,71,2.518,80,1.157,82,1.442,83,1.737,90,2.545,98,3.296,110,0.44,113,1.159,116,2.003,158,3.296,165,1.696,174,1.506,186,1.221,187,1.783,195,1.444,305,1.854,336,3.68,337,4.194,365,1.864,370,1.737,377,3.296,379,3.57,380,4.076,389,2.282,390,3.892,393,1.87,463,4.551,464,4.551,476,2.859,502,2.962,506,2.282,759,2.601,760,6.15,761,3.085,762,3.085,763,3.085,764,3.085,765,3.085,766,3.085,767,4.313,768,3.085,769,4.313,770,3.085,771,3.085,772,3.085,773,2.601,774,3.085,775,3.085,776,2.601,777,3.085]],["title/controllers/UsersController.html",[0,1.094,778,2.226]],["body/controllers/UsersController.html",[0,0.779,2,0.779,3,0.205,4,0.18,5,0.157,7,0.461,8,0.027,9,0.509,12,0.205,13,0.009,15,0.963,16,0.014,17,0.014,80,1.019,83,0.835,90,2.072,110,0.341,111,1.444,113,0.849,115,1.733,117,2.063,122,1.438,130,1.037,131,1.438,132,1.037,133,1.037,145,2.543,149,2.012,151,2.072,152,1.789,153,1.557,162,1.315,183,1.438,186,1.777,187,1.307,190,4.031,191,2.874,195,1.058,212,2.016,215,3.802,227,2.016,244,1.585,281,1.21,297,2.377,333,3.154,361,2.874,363,3.233,405,2.156,406,1.315,446,3.802,451,2.654,516,1.815,519,1.769,534,2.377,535,3.184,536,3.628,537,3.169,540,3.024,541,3.024,542,2.016,549,2.016,606,2.654,621,1.769,623,2.016,778,2.377,779,2.016,780,4.303,781,4.303,782,3.586,783,2.391,784,2.391,785,2.391,786,4.535,787,2.391,788,3.586,789,3.586,790,2.391,791,3.586,792,3.586,793,3.586,794,3.024,795,2.391,796,3.586,797,3.586,798,3.586,799,2.391,800,3.586,801,3.024,802,4.303,803,2.391,804,3.024,805,2.391,806,2.391,807,2.391,808,2.391,809,2.016,810,2.391,811,2.391,812,2.391,813,2.391,814,2.391,815,3.586,816,2.016,817,2.016,818,2.391,819,2.016,820,4.303,821,2.391,822,2.391,823,2.391,824,2.391,825,2.016,826,2.391,827,2.391,828,2.391,829,2.391,830,2.391,831,2.391,832,2.391,833,2.391,834,2.391,835,2.391,836,2.391]],["title/modules/UsersModule.html",[18,1.094,34,1.7]],["body/modules/UsersModule.html",[2,1.784,3,0.319,4,0.281,5,0.244,7,0.551,8,0.027,9,0.792,12,0.42,13,0.015,16,0.019,17,0.019,18,1.784,20,1.614,21,1.396,22,1.884,23,1.884,24,1.614,25,2.946,26,2.772,30,3.013,34,3.204,35,2.48,36,1.884,37,1.741,39,2.695,44,2.239,45,1.5,50,3.14,52,2.468,83,1.3,138,3.248,141,3.14,142,2.468,143,2.755,149,3.112,778,3.631,819,3.14,837,3.14,838,3.14,839,3.14,840,3.723,841,3.723,842,3.723,843,3.14,844,3.14,845,3.14,846,3.723,847,3.723,848,3.723]],["title/injectables/UsersService.html",[107,1.094,149,1.571]],["body/injectables/UsersService.html",[3,0.16,4,0.141,5,0.123,7,0.467,8,0.028,9,0.398,12,0.16,13,0.007,15,1.485,16,0.012,17,0.012,21,1.825,45,0.753,51,3.538,52,1.24,60,1.029,78,1.501,80,0.767,83,2.082,92,2.501,102,2.195,107,0.966,108,0.946,110,0.267,111,1.195,113,0.828,115,1.843,116,0.966,117,1.843,124,2.884,130,1.286,131,1.783,132,2.111,133,1.819,138,1.24,142,1.966,145,2.363,149,1.962,151,1.819,152,1.465,153,1.366,158,3.033,164,1.577,165,1.029,186,1.74,206,2.195,212,1.573,215,3.227,243,2.195,253,2.728,305,1.783,333,2.516,336,2.728,361,2.751,363,3.278,365,1.825,393,0.811,406,1.029,420,2.927,421,0.875,423,2.523,429,1.783,430,1.24,434,2.444,451,1.384,476,3.033,516,1.501,534,3.033,581,2.501,582,4.106,583,4.106,584,3.109,589,3.109,590,2.195,593,4.106,595,3.105,603,3.538,606,2.195,786,3.538,804,3.109,816,1.577,817,1.577,843,1.577,844,2.501,845,1.577,849,1.577,850,3.538,851,2.966,852,2.966,853,4.196,854,2.966,855,2.966,856,2.966,857,2.966,858,2.966,859,1.87,860,4.196,861,3.687,862,4.196,863,1.87,864,2.966,865,2.966,866,2.966,867,1.87,868,1.87,869,1.87,870,2.966,871,2.966,872,2.966,873,2.966,874,2.966,875,2.966,876,2.966,877,1.87,878,2.966,879,2.501,880,2.966,881,1.87,882,1.87,883,1.87,884,1.577,885,1.577,886,1.87,887,1.87,888,1.87,889,1.87,890,1.87,891,1.87,892,1.87,893,1.87,894,1.87,895,1.87,896,3.687,897,1.87,898,1.87]],["title/coverage.html",[899,3.384]],["body/coverage.html",[0,1.923,1,2.083,5,0.206,6,2.65,8,0.027,10,1.728,13,0.024,16,0.017,17,0.017,24,1.362,38,2.326,47,1.362,48,2.043,61,2.326,80,0.574,83,1.098,107,1.923,109,2.65,120,2.083,121,2.65,124,1.59,144,2.65,149,1.47,170,1.728,172,2.65,173,3.233,195,1.075,203,1.59,277,2.083,313,2.353,314,2.65,317,1.89,318,2.65,319,2.65,333,1.728,334,2.65,335,3.233,361,1.89,362,2.65,363,1.89,364,2.65,370,2.187,371,1.47,372,2.65,398,2.083,399,2.65,407,1.728,418,2.65,419,2.65,436,1.89,437,2.65,446,2.083,447,2.65,455,2.65,479,1.47,505,2.326,508,2.083,509,2.65,516,1.59,538,1.728,580,2.65,587,1.59,690,2.65,708,2.083,709,2.65,732,2.65,759,2.65,778,2.083,779,2.65,849,2.65,850,2.65,879,2.65,899,2.326,900,3.143,901,6.774,902,6.275,903,3.143,904,5.706,905,5.023,906,2.65,907,3.143,908,3.143,909,3.143,910,4.37,911,3.143,912,3.143,913,3.143,914,3.143,915,3.143,916,3.143,917,3.143,918,3.143]],["title/dependencies.html",[21,1.513,919,2.079]],["body/dependencies.html",[8,0.027,9,0.958,13,0.022,16,0.022,17,0.022,21,1.689,45,1.814,52,2.986,273,2.28,281,2.28,282,3.334,393,1.953,449,3.799,450,3.799,920,4.505,921,4.505,922,5.988,923,4.505,924,4.505,925,4.505,926,4.505,927,4.505,928,4.505,929,4.505,930,4.505,931,4.505,932,4.505,933,4.505,934,4.505,935,4.505,936,4.505,937,4.505,938,4.505,939,4.505]],["title/miscellaneous/enumerations.html",[940,1.545,941,3.404]],["body/miscellaneous/enumerations.html",[8,0.027,16,0.022,17,0.022,110,0.645,179,4.103,195,1.364,215,3.675,216,4.675,220,4.675,247,4.103,248,4.675,249,4.675,250,4.675,286,4.675,940,2.486,941,3.812,942,5.544,943,5.544,944,5.544,945,5.544,946,5.632]],["title/miscellaneous/functions.html",[940,1.545,947,3.404]],["body/miscellaneous/functions.html",[8,0.024,16,0.024,17,0.024,24,2.761,110,0.744,906,4.394,940,2.866,947,4.394,948,5.211]],["title/index.html",[110,0.401,503,2.369,949,2.81]],["body/index.html",[4,0.147,5,0.325,8,0.025,16,0.012,17,0.012,37,2.319,55,1.646,63,4.531,66,1.445,67,1.646,76,1.646,94,3.624,126,2.28,127,2.28,152,1.072,162,1.074,165,2.728,184,0.988,186,0.553,191,2.809,212,0.732,213,1.646,311,3.624,352,1.445,366,2.806,423,1.174,454,2.588,456,1.294,496,2.034,499,3.624,502,1.074,505,4.268,506,2.271,516,0.988,530,1.445,572,1.646,590,1.445,595,1.445,604,1.646,621,3.67,633,1.646,638,1.646,663,1.646,668,1.646,752,3.624,773,1.646,776,1.646,794,1.646,801,3.624,809,1.646,825,4.182,884,2.588,885,4.182,899,1.445,919,2.271,950,1.953,951,1.953,952,3.792,953,3.069,954,1.953,955,1.953,956,1.953,957,1.953,958,3.069,959,1.953,960,5.188,961,1.953,962,5.527,963,1.953,964,1.953,965,3.792,966,3.069,967,1.953,968,3.069,969,1.953,970,3.792,971,1.953,972,1.953,973,1.953,974,1.953,975,1.953,976,1.953,977,4.298,978,5.374,979,3.069,980,1.953,981,1.953,982,1.953,983,1.953,984,3.069,985,4.298,986,1.953,987,3.069,988,1.953,989,3.069,990,4.96,991,4.298,992,1.953,993,3.069,994,1.953,995,1.953,996,1.953,997,4.298,998,1.953,999,1.953,1000,1.953,1001,1.953,1002,3.069,1003,1.953,1004,1.953,1005,1.953,1006,1.953,1007,3.069,1008,1.953,1009,1.953,1010,1.953,1011,3.069,1012,1.953,1013,1.953,1014,3.624,1015,3.069,1016,1.953,1017,1.953,1018,1.953,1019,1.953,1020,1.953,1021,1.953,1022,1.953,1023,1.953,1024,3.069,1025,1.953,1026,1.953,1027,1.953,1028,1.953,1029,3.792,1030,1.953,1031,3.792,1032,1.953,1033,1.953,1034,1.953,1035,3.069,1036,1.953,1037,1.953,1038,1.953,1039,1.953,1040,3.069,1041,1.953,1042,1.953,1043,1.953,1044,3.069,1045,3.069,1046,1.953,1047,1.953,1048,1.953,1049,1.953,1050,1.953,1051,1.953,1052,1.953,1053,1.953,1054,1.953,1055,1.953,1056,1.953,1057,1.953,1058,1.953,1059,1.953,1060,1.953,1061,1.646,1062,1.953,1063,3.792,1064,1.953,1065,5.527,1066,1.953,1067,3.069,1068,3.069,1069,1.953,1070,1.953,1071,1.953,1072,1.953,1073,1.953,1074,1.953,1075,1.953,1076,1.953,1077,3.069,1078,1.953,1079,5.188,1080,1.953,1081,1.953,1082,1.953,1083,1.953,1084,1.953,1085,1.953,1086,1.953,1087,1.953,1088,3.069,1089,3.069,1090,4.298,1091,3.792,1092,3.792,1093,1.953,1094,1.953,1095,1.953,1096,3.069,1097,1.953,1098,1.953,1099,1.953,1100,4.298,1101,1.953,1102,3.069,1103,1.953,1104,3.069,1105,1.953,1106,1.953,1107,1.953,1108,1.953,1109,1.953,1110,1.953,1111,3.069,1112,3.069,1113,3.069,1114,1.953,1115,1.953,1116,1.953,1117,1.953,1118,3.792,1119,1.953,1120,1.953,1121,1.953,1122,1.953,1123,1.953,1124,1.953,1125,1.953,1126,1.953,1127,1.953,1128,1.953,1129,1.953]],["title/modules.html",[20,1.983]],["body/modules.html",[8,0.023,16,0.023,17,0.023,19,3.169,20,2.072,30,2.629,31,2.874,32,2.874,33,2.629,34,2.419,1014,5.58,1130,6.617,1131,6.617,1132,6.617]],["title/overview.html",[1133,3.857]],["body/overview.html",[2,1.142,8,0.027,10,2.925,16,0.019,17,0.019,18,1.142,19,4.421,20,1.52,21,1.315,22,1.775,23,1.775,24,1.52,25,1.775,26,1.775,27,2.958,28,2.958,29,2.958,30,3.358,31,3.565,32,3.862,33,3.43,34,3.156,35,2.383,36,1.775,37,1.64,82,1.64,108,1.775,124,3.156,134,2.958,135,2.958,136,2.958,149,2.917,171,1.64,407,2.925,412,2.958,413,2.958,538,2.925,563,2.958,565,2.958,587,3.156,725,2.958,726,2.958,727,2.958,837,2.958,838,2.958,839,2.958,1133,2.958,1134,5.318,1135,3.507,1136,3.507]],["title/properties.html",[174,1.41,919,2.079]],["body/properties.html",[8,0.027,16,0.024,17,0.024,174,1.799,212,1.931,456,3.414,1061,4.343,1137,5.151,1138,5.151,1139,5.151]],["title/miscellaneous/variables.html",[940,1.545,1140,3.404]],["body/miscellaneous/variables.html",[8,0.025,16,0.024,17,0.024,38,3.811,57,3.811,61,4.435,62,4.343,110,0.735,940,2.833,946,4.343,1140,4.343,1141,5.151]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":901,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":1138,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":931,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":936,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":939,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":930,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":902,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":909,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":904,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":908,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":905,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":910,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":913,"title":{},"body":{"coverage.html":{}}}],["03",{"_index":222,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1",{"_index":297,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["1.1.23",{"_index":921,"title":{},"body":{"dependencies.html":{}}}],["1/6",{"_index":915,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":827,"title":{},"body":{"controllers/UsersController.html":{}}}],["10.0.0",{"_index":922,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":929,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":911,"title":{},"body":{"coverage.html":{}}}],["1024",{"_index":465,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["10})@apiquery({name",{"_index":799,"title":{},"body":{"controllers/UsersController.html":{}}}],["1234",{"_index":369,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["1234'})@isoptional()@isint()@type(undefined",{"_index":367,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["16",{"_index":914,"title":{},"body":{"coverage.html":{}}}],["16t07:46:32+0000",{"_index":296,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["16t07:46:32+0000'})@isiso8601()@isoptional",{"_index":223,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1})@isnotempty()@isint",{"_index":192,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["2",{"_index":298,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["2.0.5",{"_index":925,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":791,"title":{},"body":{"controllers/UsersController.html":{}}}],["201",{"_index":518,"title":{},"body":{"controllers/PostsController.html":{}}}],["2024",{"_index":221,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["256",{"_index":475,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["3.2.2",{"_index":923,"title":{},"body":{"dependencies.html":{}}}],["3001",{"_index":1109,"title":{},"body":{"index.html":{}}}],["4",{"_index":1135,"title":{},"body":{"overview.html":{}}}],["4/5",{"_index":917,"title":{},"body":{"coverage.html":{}}}],["512",{"_index":484,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["6",{"_index":1134,"title":{},"body":{"overview.html":{}}}],["6/6",{"_index":912,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":1136,"title":{},"body":{"overview.html":{}}}],["7.3.0",{"_index":928,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":938,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":349,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["8.11.5",{"_index":933,"title":{},"body":{"dependencies.html":{}}}],["80",{"_index":916,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":239,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["96",{"_index":760,"title":{},"body":{"entities/User.html":{}}}],["actions",{"_index":504,"title":{},"body":{"entities/Post.html":{}}}],["actual",{"_index":560,"title":{},"body":{"controllers/PostsController.html":{}}}],["add",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["against",{"_index":309,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["alice",{"_index":889,"title":{},"body":{"injectables/UsersService.html":{}}}],["alice@doe.com",{"_index":890,"title":{},"body":{"injectables/UsersService.html":{}}}],["allowing",{"_index":1003,"title":{},"body":{"index.html":{}}}],["along",{"_index":604,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{}}}],["always",{"_index":1126,"title":{},"body":{"index.html":{}}}],["amazing",{"_index":1050,"title":{},"body":{"index.html":{}}}],["api",{"_index":802,"title":{},"body":{"controllers/UsersController.html":{}}}],["apioperation",{"_index":540,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":515,"title":{},"body":{"controllers/PostsController.html":{}}}],["apiproperty",{"_index":279,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty()@isstring()@isnotempty()@matches(/^[a",{"_index":329,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apiproperty()@isstring()@minlength(3)@isnotempty()@maxlength(256",{"_index":325,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apiproperty({description",{"_index":235,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({enum",{"_index":211,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiproperty({example",{"_index":257,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiproperty({type",{"_index":188,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apipropertyoptional",{"_index":280,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional()@isoptional()@isjson",{"_index":327,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apipropertyoptional()@isoptional()@isstring",{"_index":321,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apipropertyoptional()@isoptional()@isurl()@maxlength(1024",{"_index":323,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apipropertyoptional({description",{"_index":194,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({type",{"_index":205,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiquery",{"_index":820,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponse",{"_index":541,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":542,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags('posts",{"_index":546,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('users",{"_index":823,"title":{},"body":{"controllers/UsersController.html":{}}}],["app.controller",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appconfig",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":825,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["application'})@apiresponse({status",{"_index":790,"title":{},"body":{"controllers/UsersController.html":{}}}],["applications",{"_index":958,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":19,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":10,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["argument",{"_index":1122,"title":{},"body":{"index.html":{}}}],["array",{"_index":253,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["async",{"_index":420,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["atomically",{"_index":634,"title":{},"body":{"injectables/PostsService.html":{}}}],["auth",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth.controller",{"_index":139,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/providers/auth",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{}}}],["authcontroller",{"_index":120,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authentication",{"_index":853,"title":{},"body":{"injectables/UsersService.html":{}}}],["authmodule",{"_index":30,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":456,"title":{},"body":{"entities/Post.html":{},"injectables/PostsService.html":{},"index.html":{},"properties.html":{}}}],["authorid",{"_index":175,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["authservice",{"_index":124,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["autoloadentities",{"_index":84,"title":{},"body":{"modules/AppModule.html":{}}}],["automatically",{"_index":645,"title":{},"body":{"injectables/PostsService.html":{}}}],["available",{"_index":77,"title":{},"body":{"modules/AppModule.html":{}}}],["avoid",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{}}}],["avoided",{"_index":856,"title":{},"body":{"injectables/UsersService.html":{}}}],["await",{"_index":434,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["aws",{"_index":993,"title":{},"body":{"index.html":{}}}],["backers",{"_index":1051,"title":{},"body":{"index.html":{}}}],["based",{"_index":794,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["basic",{"_index":875,"title":{},"body":{"injectables/UsersService.html":{}}}],["basically",{"_index":1083,"title":{},"body":{"index.html":{}}}],["become",{"_index":614,"title":{},"body":{"injectables/PostsService.html":{}}}],["before",{"_index":753,"title":{},"body":{"injectables/TagsService.html":{}}}],["belong",{"_index":507,"title":{},"body":{"entities/Post.html":{}}}],["between",{"_index":559,"title":{},"body":{"controllers/PostsController.html":{}}}],["bidirectional",{"_index":500,"title":{},"body":{"entities/Post.html":{}}}],["bit",{"_index":1070,"title":{},"body":{"index.html":{}}}],["blog",{"_index":200,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{}}}],["board",{"_index":1043,"title":{},"body":{"index.html":{}}}],["body",{"_index":405,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["body(new",{"_index":834,"title":{},"body":{"controllers/UsersController.html":{}}}],["boolean",{"_index":155,"title":{},"body":{"injectables/AuthService.html":{}}}],["bootstrap",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["both",{"_index":633,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{}}}],["browse",{"_index":1132,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1130,"title":{},"body":{"modules.html":{}}}],["building",{"_index":953,"title":{},"body":{"index.html":{}}}],["c:\\users\\mfabouatmeh\\desktop\\codesdar\\more\\postgre\\data",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["cascade",{"_index":397,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{}}}],["cascade'})@joincolumn",{"_index":385,"title":{},"body":{"entities/MetaOption.html":{}}}],["cascades",{"_index":556,"title":{},"body":{"controllers/PostsController.html":{}}}],["catch",{"_index":655,"title":{},"body":{"injectables/PostsService.html":{}}}],["cause",{"_index":141,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["certain",{"_index":1086,"title":{},"body":{"index.html":{}}}],["changes",{"_index":1111,"title":{},"body":{"index.html":{}}}],["channel",{"_index":1017,"title":{},"body":{"index.html":{}}}],["character",{"_index":355,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["chars",{"_index":350,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["check",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{},"entities/Post.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["checks",{"_index":854,"title":{},"body":{"injectables/UsersService.html":{}}}],["circular",{"_index":142,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["class",{"_index":13,"title":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":171,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"overview.html":{}}}],["clean",{"_index":667,"title":{},"body":{"injectables/PostsService.html":{}}}],["clicks",{"_index":1002,"title":{},"body":{"index.html":{}}}],["cloud",{"_index":988,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":134,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":135,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":136,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule",{"_index":412,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule_providers",{"_index":413,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":563,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":564,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":565,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule",{"_index":725,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_exports",{"_index":726,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_providers",{"_index":727,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":837,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":839,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":838,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cmd",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["code",{"_index":454,"title":{},"body":{"classes/PatchUserDto.html":{},"index.html":{}}}],["column",{"_index":390,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["column({type",{"_index":379,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["combo",{"_index":1120,"title":{},"body":{"index.html":{}}}],["come",{"_index":1008,"title":{},"body":{"index.html":{}}}],["comma",{"_index":1066,"title":{},"body":{"index.html":{}}}],["commit",{"_index":649,"title":{},"body":{"injectables/PostsService.html":{}}}],["compared",{"_index":1103,"title":{},"body":{"index.html":{}}}],["compo",{"_index":1079,"title":{},"body":{"index.html":{}}}],["compodoc",{"_index":1062,"title":{},"body":{"index.html":{}}}],["compodoc/compodoc",{"_index":920,"title":{},"body":{"dependencies.html":{}}}],["config",{"_index":885,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["config/app.config",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["config/database.config",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["config/profile.config",{"_index":845,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["configmodule",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["configmodule.forfeature(profileconfig",{"_index":848,"title":{},"body":{"modules/UsersModule.html":{}}}],["configmodule.forroot",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"injectables/UsersService.html":{}}}],["configservice.get('database.autoloadentities",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.host",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.name",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.pass",{"_index":99,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.port",{"_index":95,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.synchronize",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.user",{"_index":97,"title":{},"body":{"modules/AppModule.html":{}}}],["configtype",{"_index":862,"title":{},"body":{"injectables/UsersService.html":{}}}],["configurations",{"_index":1087,"title":{},"body":{"index.html":{}}}],["console.error(error",{"_index":661,"title":{},"body":{"injectables/PostsService.html":{}}}],["console.log(this.profileconfiguration",{"_index":886,"title":{},"body":{"injectables/UsersService.html":{}}}],["const",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":859,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(metaoptionrepository",{"_index":422,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["constructor(private",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"controllers/MetaOptionsController.html":{}}}],["constructor(tagsrepository",{"_index":735,"title":{},"body":{"injectables/TagsService.html":{}}}],["constructor(usersservice",{"_index":148,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["constructs",{"_index":864,"title":{},"body":{"injectables/UsersService.html":{}}}],["containing",{"_index":593,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["content",{"_index":176,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["content'})@isstring()@isoptional",{"_index":196,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["context",{"_index":230,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('meta",{"_index":410,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["controller('posts",{"_index":545,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('tags",{"_index":719,"title":{},"body":{"controllers/TagsController.html":{}}}],["controller('users",{"_index":822,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["copy",{"_index":625,"title":{},"body":{"injectables/PostsService.html":{}}}],["corrected",{"_index":310,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["corresponding",{"_index":577,"title":{},"body":{"modules/PostsModule.html":{}}}],["courses",{"_index":1023,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":899,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":421,"title":{},"body":{"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["create(@body",{"_index":618,"title":{},"body":{"injectables/PostsService.html":{},"controllers/TagsController.html":{}}}],["create(createmetaoptiondto",{"_index":426,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["create(createpostdto",{"_index":591,"title":{},"body":{"injectables/PostsService.html":{}}}],["create(createtagdto",{"_index":711,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["created",{"_index":520,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["createdate",{"_index":373,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["createdatecolumn",{"_index":375,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["createmetaoption",{"_index":401,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["createmetaoption(createpostmetaoptiondto",{"_index":402,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["createmetaoptiondto",{"_index":428,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["createpost",{"_index":510,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(@body",{"_index":551,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(createpostdto",{"_index":514,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpostdto",{"_index":170,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["createpostmetaoptiondto",{"_index":404,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["createpostmetaoptionsdto",{"_index":203,"title":{"classes/CreatePostMetaOptionsDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"coverage.html":{}}}],["creates",{"_index":306,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["createtagdto",{"_index":317,"title":{"classes/CreateTagDto.html":{}},"body":{"classes/CreateTagDto.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"coverage.html":{}}}],["createuser",{"_index":857,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuser(createuserdto",{"_index":866,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto",{"_index":333,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":894,"title":{},"body":{"injectables/UsersService.html":{}}}],["createusers",{"_index":780,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusers(createuserdto",{"_index":783,"title":{},"body":{"controllers/UsersController.html":{}}}],["creating",{"_index":739,"title":{},"body":{"injectables/TagsService.html":{}}}],["creation",{"_index":594,"title":{},"body":{"injectables/PostsService.html":{}}}],["crowded",{"_index":615,"title":{},"body":{"injectables/PostsService.html":{}}}],["crud",{"_index":852,"title":{},"body":{"injectables/UsersService.html":{}}}],["d",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["database",{"_index":102,"title":{},"body":{"modules/AppModule.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["databaseconfig",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["date",{"_index":219,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["db",{"_index":579,"title":{},"body":{"modules/PostsModule.html":{},"injectables/TagsService.html":{}}}],["declarations",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorartor",{"_index":705,"title":{},"body":{"entities/Tag.html":{}}}],["decorator",{"_index":302,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["decorators",{"_index":187,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["deeper",{"_index":1019,"title":{},"body":{"index.html":{}}}],["default",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"entities/Post.html":{},"miscellaneous/variables.html":{}}}],["defaultvaluepipe",{"_index":814,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(1",{"_index":831,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(10",{"_index":829,"title":{},"body":{"controllers/UsersController.html":{}}}],["define",{"_index":1127,"title":{},"body":{"index.html":{}}}],["defined",{"_index":113,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":511,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["delete('soft",{"_index":715,"title":{},"body":{"controllers/TagsController.html":{}}}],["delete(@query('id",{"_index":561,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{}}}],["delete(id",{"_index":523,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["deleted",{"_index":654,"title":{},"body":{"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["deletedat",{"_index":691,"title":{},"body":{"entities/Tag.html":{}}}],["deletedatecolumn",{"_index":693,"title":{},"body":{"entities/Tag.html":{}}}],["deletes",{"_index":598,"title":{},"body":{"injectables/PostsService.html":{}}}],["deleting",{"_index":754,"title":{},"body":{"injectables/TagsService.html":{}}}],["deletion",{"_index":600,"title":{},"body":{"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["dependencies",{"_index":21,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{},"overview.html":{}}}],["dependency",{"_index":143,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{}}}],["deploy",{"_index":977,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":992,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":984,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":1001,"title":{},"body":{"index.html":{}}}],["description",{"_index":212,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"properties.html":{}}}],["details",{"_index":595,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["development",{"_index":964,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":1030,"title":{},"body":{"index.html":{}}}],["differ",{"_index":771,"title":{},"body":{"entities/User.html":{}}}],["directory",{"_index":1118,"title":{},"body":{"index.html":{}}}],["disable",{"_index":808,"title":{},"body":{"controllers/UsersController.html":{}}}],["discord",{"_index":1016,"title":{},"body":{"index.html":{}}}],["dive",{"_index":1018,"title":{},"body":{"index.html":{}}}],["doc",{"_index":1065,"title":{},"body":{"index.html":{}}}],["doclet",{"_index":1064,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":505,"title":{},"body":{"entities/Post.html":{},"coverage.html":{},"index.html":{}}}],["doesnt",{"_index":613,"title":{},"body":{"injectables/PostsService.html":{}}}],["draft",{"_index":248,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["dto",{"_index":305,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchUserDto.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["dto/create",{"_index":543,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["dto/patch",{"_index":544,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["dtos/create",{"_index":406,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/get",{"_index":816,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/patch",{"_index":818,"title":{},"body":{"controllers/UsersController.html":{}}}],["e2e",{"_index":972,"title":{},"body":{"index.html":{}}}],["each",{"_index":299,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["eager",{"_index":459,"title":{},"body":{"entities/Post.html":{}}}],["efficient",{"_index":954,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":983,"title":{},"body":{"index.html":{}}}],["email",{"_index":158,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["enable",{"_index":1110,"title":{},"body":{"index.html":{}}}],["enables",{"_index":706,"title":{},"body":{"entities/Tag.html":{}}}],["ensure",{"_index":981,"title":{},"body":{"index.html":{}}}],["ensuring",{"_index":855,"title":{},"body":{"injectables/UsersService.html":{}}}],["enterprise",{"_index":1034,"title":{},"body":{"index.html":{}}}],["entire",{"_index":570,"title":{},"body":{"modules/PostsModule.html":{}}}],["entities",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"overview.html":{}}}],["entity",{"_index":370,"title":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"entities/Tag.html":{},"entities/User.html":{},"coverage.html":{}}}],["entries",{"_index":796,"title":{},"body":{"controllers/UsersController.html":{}}}],["enum",{"_index":285,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["enumerations",{"_index":941,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/post",{"_index":274,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["env",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["env.${env",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["error",{"_index":228,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["error('post",{"_index":643,"title":{},"body":{"injectables/PostsService.html":{}}}],["error.message",{"_index":662,"title":{},"body":{"injectables/PostsService.html":{}}}],["eslint",{"_index":807,"title":{},"body":{"controllers/UsersController.html":{}}}],["eslint/no",{"_index":810,"title":{},"body":{"controllers/UsersController.html":{}}}],["everything",{"_index":650,"title":{},"body":{"injectables/PostsService.html":{}}}],["example",{"_index":191,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["exception",{"_index":895,"title":{},"body":{"injectables/UsersService.html":{}}}],["existing",{"_index":531,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["existinguser",{"_index":892,"title":{},"body":{"injectables/UsersService.html":{}}}],["exists",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TagsService.html":{}}}],["experience",{"_index":1021,"title":{},"body":{"index.html":{}}}],["explain",{"_index":1074,"title":{},"body":{"index.html":{}}}],["export",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":927,"title":{},"body":{"dependencies.html":{}}}],["extend",{"_index":452,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["extends",{"_index":438,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["failure",{"_index":660,"title":{},"body":{"injectables/PostsService.html":{}}}],["false",{"_index":90,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["fast",{"_index":995,"title":{},"body":{"index.html":{}}}],["feature",{"_index":574,"title":{},"body":{"modules/PostsModule.html":{}}}],["featured",{"_index":198,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["featuredimage",{"_index":320,"title":{},"body":{"classes/CreateTagDto.html":{},"entities/Tag.html":{}}}],["featuredimageurl",{"_index":177,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["features",{"_index":1005,"title":{},"body":{"index.html":{}}}],["fetch",{"_index":501,"title":{},"body":{"entities/Post.html":{}}}],["fetched",{"_index":792,"title":{},"body":{"controllers/UsersController.html":{}}}],["fetches",{"_index":788,"title":{},"body":{"controllers/UsersController.html":{}}}],["few",{"_index":997,"title":{},"body":{"index.html":{}}}],["fields",{"_index":609,"title":{},"body":{"injectables/PostsService.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{}}}],["filters",{"_index":870,"title":{},"body":{"injectables/UsersService.html":{}}}],["finally",{"_index":663,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{}}}],["find",{"_index":639,"title":{},"body":{"injectables/PostsService.html":{}}}],["findall",{"_index":584,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["findall(getuserparamdto",{"_index":868,"title":{},"body":{"injectables/UsersService.html":{}}}],["findall(userid",{"_index":601,"title":{},"body":{"injectables/PostsService.html":{}}}],["findmultipletags",{"_index":733,"title":{},"body":{"injectables/TagsService.html":{}}}],["findmultipletags(tags",{"_index":741,"title":{},"body":{"injectables/TagsService.html":{}}}],["findonebyid",{"_index":858,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyid(id",{"_index":876,"title":{},"body":{"injectables/UsersService.html":{}}}],["finds",{"_index":751,"title":{},"body":{"injectables/TagsService.html":{}}}],["first",{"_index":1077,"title":{},"body":{"index.html":{}}}],["firstname",{"_index":336,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["flag",{"_index":1100,"title":{},"body":{"index.html":{}}}],["flat",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TagsService.html":{}}}],["focus",{"_index":1004,"title":{},"body":{"index.html":{}}}],["follow",{"_index":1037,"title":{},"body":{"index.html":{}}}],["forwardref",{"_index":138,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["found",{"_index":644,"title":{},"body":{"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["framework",{"_index":952,"title":{},"body":{"index.html":{}}}],["full",{"_index":1033,"title":{},"body":{"index.html":{}}}],["function",{"_index":907,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":947,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":1000,"title":{},"body":{"index.html":{}}}],["generate",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/TagsService.html":{},"index.html":{}}}],["generated",{"_index":1105,"title":{},"body":{"index.html":{}}}],["generating",{"_index":1119,"title":{},"body":{"index.html":{}}}],["get('/:id",{"_index":824,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:id?')@apioperation({summary",{"_index":787,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:userid",{"_index":526,"title":{},"body":{"controllers/PostsController.html":{}}}],["gethello",{"_index":112,"title":{},"body":{"injectables/AppService.html":{}}}],["getposts",{"_index":512,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(@param('userid",{"_index":547,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(userid",{"_index":525,"title":{},"body":{"controllers/PostsController.html":{}}}],["getting",{"_index":503,"title":{"index.html":{}},"body":{"entities/Post.html":{}}}],["getuserparamdto",{"_index":804,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getusers",{"_index":781,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(getuserparamdto",{"_index":785,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusersparamdto",{"_index":361,"title":{"classes/GetUsersParamDto.html":{}},"body":{"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["give",{"_index":1117,"title":{},"body":{"index.html":{}}}],["global",{"_index":833,"title":{},"body":{"controllers/UsersController.html":{}}}],["go",{"_index":1076,"title":{},"body":{"index.html":{}}}],["going",{"_index":1094,"title":{},"body":{"index.html":{}}}],["graph",{"_index":1026,"title":{},"body":{"index.html":{}}}],["grow",{"_index":1047,"title":{},"body":{"index.html":{}}}],["handle",{"_index":589,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["handling",{"_index":581,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["hands",{"_index":1020,"title":{},"body":{"index.html":{}}}],["handy",{"_index":1009,"title":{},"body":{"index.html":{}}}],["having",{"_index":1106,"title":{},"body":{"index.html":{}}}],["headers",{"_index":813,"title":{},"body":{"controllers/UsersController.html":{}}}],["hello",{"_index":118,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":1024,"title":{},"body":{"index.html":{}}}],["here",{"_index":311,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["host",{"_index":100,"title":{},"body":{"modules/AppModule.html":{}}}],["http://localhost.com/images/image1.jpg",{"_index":294,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["http://localhost.com/images/image1.jpg'})@isoptional()@minlength(4)@maxlength(1024)@isurl",{"_index":201,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://nestjs.com",{"_index":1058,"title":{},"body":{"index.html":{}}}],["https://orkhan.gitbook.io/typeorm/docs/decorator",{"_index":703,"title":{},"body":{"entities/Tag.html":{}}}],["https://schema.org",{"_index":231,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://schema.org\",\\r\\n",{"_index":292,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["hyphen",{"_index":1090,"title":{},"body":{"index.html":{}}}],["i'll",{"_index":1073,"title":{},"body":{"index.html":{}}}],["i'm",{"_index":1113,"title":{},"body":{"index.html":{}}}],["i.e",{"_index":1129,"title":{},"body":{"index.html":{}}}],["id",{"_index":365,"title":{},"body":{"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":879,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["ids",{"_index":254,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/TagsService.html":{}}}],["image",{"_index":199,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["import",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["important",{"_index":666,"title":{},"body":{"injectables/PostsService.html":{}}}],["imported",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["imports",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}}}],["in(tags",{"_index":750,"title":{},"body":{"injectables/TagsService.html":{}}}],["include",{"_index":351,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["incoming",{"_index":303,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["index",{"_index":110,"title":{"index.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["indicating",{"_index":599,"title":{},"body":{"injectables/PostsService.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["information",{"_index":986,"title":{},"body":{"index.html":{}}}],["infrastructure",{"_index":1006,"title":{},"body":{"index.html":{}}}],["inject",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["inject(forwardref",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["inject(profileconfig.key",{"_index":883,"title":{},"body":{"injectables/UsersService.html":{}}}],["injectable",{"_index":107,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":108,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injecting",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["injectrepository",{"_index":430,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(metaoption",{"_index":432,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{}}}],["injectrepository(post",{"_index":611,"title":{},"body":{"injectables/PostsService.html":{}}}],["injectrepository(tag",{"_index":746,"title":{},"body":{"injectables/TagsService.html":{}}}],["injectrepository(user",{"_index":882,"title":{},"body":{"injectables/UsersService.html":{}}}],["inside",{"_index":578,"title":{},"body":{"modules/PostsModule.html":{}}}],["install",{"_index":999,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":963,"title":{},"body":{"index.html":{}}}],["instance",{"_index":307,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["instead",{"_index":647,"title":{},"body":{"injectables/PostsService.html":{}}}],["instructs",{"_index":1102,"title":{},"body":{"index.html":{}}}],["integer",{"_index":189,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["interact",{"_index":1027,"title":{},"body":{"index.html":{}}}],["interacts",{"_index":851,"title":{},"body":{"injectables/UsersService.html":{}}}],["isarray",{"_index":260,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isauth",{"_index":146,"title":{},"body":{"injectables/AuthService.html":{}}}],["isemail",{"_index":357,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isemail()@isnotempty()@maxlength(96",{"_index":338,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":261,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(poststatus",{"_index":290,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttype",{"_index":287,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isglobal",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["isint",{"_index":262,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{}}}],["isiso8601",{"_index":263,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isjson",{"_index":264,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{}}}],["isnotempty",{"_index":265,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchPostDto.html":{}}}],["isnotempty()@isjson",{"_index":315,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["isoptional",{"_index":266,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{}}}],["isoptional()@isjson",{"_index":233,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isstring",{"_index":267,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@maxlength(96)@minlength(8)@matches(/^(?=.*[a",{"_index":344,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":340,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isoptional()@minlength(3)@maxlength(96",{"_index":342,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isurl",{"_index":268,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["it's",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["items",{"_index":207,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["itself",{"_index":1068,"title":{},"body":{"index.html":{}}}],["job",{"_index":1040,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":1042,"title":{},"body":{"index.html":{}}}],["john",{"_index":887,"title":{},"body":{"injectables/UsersService.html":{}}}],["john@doe.com",{"_index":888,"title":{},"body":{"injectables/UsersService.html":{}}}],["join",{"_index":1053,"title":{},"body":{"index.html":{}}}],["joincolumn",{"_index":391,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["jointable",{"_index":486,"title":{},"body":{"entities/Post.html":{}}}],["json",{"_index":226,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/MetaOption.html":{}}}],["kamil",{"_index":1056,"title":{},"body":{"index.html":{}}}],["key",{"_index":572,"title":{},"body":{"modules/PostsModule.html":{},"index.html":{}}}],["large",{"_index":493,"title":{},"body":{"entities/Post.html":{}}}],["lastname",{"_index":337,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["learn",{"_index":1012,"title":{},"body":{"index.html":{}}}],["lecture",{"_index":495,"title":{},"body":{"entities/Post.html":{}}}],["legend",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":464,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["lengthy",{"_index":1072,"title":{},"body":{"index.html":{}}}],["let's",{"_index":1108,"title":{},"body":{"index.html":{}}}],["letter",{"_index":353,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["letters",{"_index":242,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["license",{"_index":1061,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1045,"title":{},"body":{"index.html":{}}}],["limit",{"_index":786,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["linkedin",{"_index":1039,"title":{},"body":{"index.html":{}}}],["list",{"_index":606,"title":{},"body":{"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["little",{"_index":1069,"title":{},"body":{"index.html":{}}}],["load",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["loaded",{"_index":640,"title":{},"body":{"injectables/PostsService.html":{}}}],["localhost:3001",{"_index":1125,"title":{},"body":{"index.html":{}}}],["log",{"_index":659,"title":{},"body":{"injectables/PostsService.html":{}}}],["login",{"_index":147,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(email",{"_index":156,"title":{},"body":{"injectables/AuthService.html":{}}}],["looking",{"_index":987,"title":{},"body":{"index.html":{}}}],["loop",{"_index":1036,"title":{},"body":{"index.html":{}}}],["make",{"_index":821,"title":{},"body":{"controllers/UsersController.html":{}}}],["makes",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["managing",{"_index":590,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["manually",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["many",{"_index":506,"title":{},"body":{"entities/Post.html":{},"entities/User.html":{},"index.html":{}}}],["manytomany",{"_index":487,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["manytomany(undefined",{"_index":480,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["manytoone",{"_index":488,"title":{},"body":{"entities/Post.html":{}}}],["manytoone(undefined",{"_index":457,"title":{},"body":{"entities/Post.html":{}}}],["match",{"_index":777,"title":{},"body":{"entities/User.html":{}}}],["matches",{"_index":269,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["matches(/^(?=.*[a",{"_index":360,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(/^[a",{"_index":289,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["matching",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["mau",{"_index":990,"title":{},"body":{"index.html":{}}}],["maximum",{"_index":872,"title":{},"body":{"injectables/UsersService.html":{}}}],["maxlength",{"_index":270,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["maxlength(1024",{"_index":295,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(256",{"_index":288,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(512",{"_index":284,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(96",{"_index":358,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["meaning",{"_index":626,"title":{},"body":{"injectables/PostsService.html":{}}}],["message",{"_index":240,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["meta",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["metadata",{"_index":935,"title":{},"body":{"dependencies.html":{}}}],["metaoption",{"_index":371,"title":{"entities/MetaOption.html":{}},"body":{"entities/MetaOption.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["metaoptionrepository",{"_index":425,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["metaoptions",{"_index":178,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{}}}],["metaoptions.post",{"_index":468,"title":{},"body":{"entities/Post.html":{}}}],["metaoptionscontroller",{"_index":398,"title":{"controllers/MetaOptionsController.html":{}},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"coverage.html":{}}}],["metaoptionsmodule",{"_index":31,"title":{"modules/MetaOptionsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules.html":{},"overview.html":{}}}],["metaoptionsrepository",{"_index":431,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{}}}],["metaoptionsservice",{"_index":407,"title":{"injectables/MetaOptionsService.html":{}},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{},"overview.html":{}}}],["metavalue",{"_index":300,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"entities/MetaOption.html":{}}}],["method",{"_index":555,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["methods",{"_index":111,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["migrations",{"_index":93,"title":{},"body":{"modules/AppModule.html":{}}}],["minimum",{"_index":348,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength",{"_index":271,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":332,"title":{},"body":{"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(4",{"_index":283,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["minlength(8",{"_index":359,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":940,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1044,"title":{},"body":{"index.html":{}}}],["mode",{"_index":966,"title":{},"body":{"index.html":{}}}],["module",{"_index":18,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":20,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":985,"title":{},"body":{"index.html":{}}}],["multiple",{"_index":826,"title":{},"body":{"controllers/UsersController.html":{}}}],["mysql",{"_index":396,"title":{},"body":{"entities/MetaOption.html":{}}}],["myśliwiec",{"_index":1057,"title":{},"body":{"index.html":{}}}],["name",{"_index":152,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateTagDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["necessary",{"_index":865,"title":{},"body":{"injectables/UsersService.html":{}}}],["need",{"_index":1031,"title":{},"body":{"index.html":{}}}],["needed",{"_index":1116,"title":{},"body":{"index.html":{}}}],["needing",{"_index":394,"title":{},"body":{"entities/MetaOption.html":{}}}],["needs",{"_index":440,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["nest",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/TagsService.html":{},"index.html":{}}}],["nestframework",{"_index":1060,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":978,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":924,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":449,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":926,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":281,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["never",{"_index":846,"title":{},"body":{"modules/UsersModule.html":{}}}],["new",{"_index":516,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{}}}],["newly",{"_index":596,"title":{},"body":{"injectables/PostsService.html":{}}}],["newuser",{"_index":896,"title":{},"body":{"injectables/UsersService.html":{}}}],["next",{"_index":1099,"title":{},"body":{"index.html":{}}}],["node.js",{"_index":951,"title":{},"body":{"index.html":{}}}],["now",{"_index":499,"title":{},"body":{"entities/Post.html":{},"index.html":{}}}],["npcs",{"_index":1078,"title":{},"body":{"index.html":{}}}],["npm",{"_index":962,"title":{},"body":{"index.html":{}}}],["npx",{"_index":104,"title":{},"body":{"modules/AppModule.html":{},"injectables/TagsService.html":{}}}],["null",{"_index":204,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["nullable",{"_index":380,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["number",{"_index":186,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["object",{"_index":206,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["object(unavailable",{"_index":395,"title":{},"body":{"entities/MetaOption.html":{}}}],["objects",{"_index":874,"title":{},"body":{"injectables/UsersService.html":{}}}],["occurs",{"_index":656,"title":{},"body":{"injectables/PostsService.html":{}}}],["offer",{"_index":1041,"title":{},"body":{"index.html":{}}}],["official",{"_index":991,"title":{},"body":{"index.html":{}}}],["once",{"_index":1097,"title":{},"body":{"index.html":{}}}],["ondelete",{"_index":384,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["one",{"_index":352,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/Post.html":{},"index.html":{}}}],["onetomany",{"_index":769,"title":{},"body":{"entities/User.html":{}}}],["onetomany(undefined",{"_index":766,"title":{},"body":{"entities/User.html":{}}}],["onetoone",{"_index":392,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["onetoone(undefined",{"_index":382,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["open",{"_index":1046,"title":{},"body":{"index.html":{}}}],["operations",{"_index":583,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["operator",{"_index":623,"title":{},"body":{"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["option",{"_index":498,"title":{},"body":{"entities/Post.html":{}}}],["option.entity",{"_index":416,"title":{},"body":{"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["option.entity.ts",{"_index":372,"title":{},"body":{"entities/MetaOption.html":{},"coverage.html":{}}}],["option.entity.ts:15",{"_index":378,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:21",{"_index":381,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:23",{"_index":376,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:25",{"_index":388,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:31",{"_index":386,"title":{},"body":{"entities/MetaOption.html":{}}}],["optional",{"_index":153,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["options",{"_index":400,"title":{},"body":{"controllers/MetaOptionsController.html":{},"entities/Post.html":{},"injectables/PostsService.html":{}}}],["options.controller",{"_index":415,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["options.controller.ts",{"_index":399,"title":{},"body":{"controllers/MetaOptionsController.html":{},"coverage.html":{}}}],["options.controller.ts:9",{"_index":403,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["options.dto",{"_index":278,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{}}}],["options.dto.ts",{"_index":314,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["options.dto.ts:6",{"_index":316,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["options.module",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["options.module.ts",{"_index":414,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["options.service",{"_index":409,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{}}}],["options.service.ts",{"_index":419,"title":{},"body":{"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["options.service.ts:17",{"_index":427,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["options.service.ts:8",{"_index":424,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["options/dtos/create",{"_index":277,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"entities/Post.html":{},"coverage.html":{}}}],["options/meta",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["options/providers/meta",{"_index":418,"title":{},"body":{"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["order",{"_index":1080,"title":{},"body":{"index.html":{}}}],["out",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["over",{"_index":1067,"title":{},"body":{"index.html":{}}}],["overview",{"_index":1133,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":919,"title":{"dependencies.html":{},"properties.html":{}},"body":{"index.html":{}}}],["page",{"_index":215,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["pagination",{"_index":873,"title":{},"body":{"injectables/UsersService.html":{}}}],["param",{"_index":534,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param.dto",{"_index":817,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param.dto.ts",{"_index":364,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["param.dto.ts:13",{"_index":368,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["parameters",{"_index":151,"title":{},"body":{"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["parseintpipe",{"_index":535,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["part",{"_index":1032,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":443,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["partialtype(createpostdto",{"_index":439,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["partialtype(createuserdto",{"_index":448,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["particular",{"_index":1096,"title":{},"body":{"index.html":{}}}],["parts",{"_index":1075,"title":{},"body":{"index.html":{}}}],["pass",{"_index":1121,"title":{},"body":{"index.html":{}}}],["passed",{"_index":627,"title":{},"body":{"injectables/PostsService.html":{}}}],["password",{"_index":98,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["patch",{"_index":536,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["patchpostdto",{"_index":436,"title":{"classes/PatchPostDto.html":{}},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["patchpostdto.content",{"_index":677,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.featuredimageurl",{"_index":685,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.id",{"_index":673,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.posttype",{"_index":681,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.publishon",{"_index":687,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.slug",{"_index":683,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.status",{"_index":679,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.title",{"_index":675,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchuser",{"_index":782,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(@body",{"_index":836,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(patchuserdto",{"_index":805,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuserdto",{"_index":446,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["path",{"_index":1088,"title":{},"body":{"index.html":{}}}],["per",{"_index":798,"title":{},"body":{"controllers/UsersController.html":{}}}],["perform",{"_index":92,"title":{},"body":{"modules/AppModule.html":{},"injectables/UsersService.html":{}}}],["person",{"_index":232,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["person\"\\r\\n",{"_index":293,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["pg",{"_index":932,"title":{},"body":{"dependencies.html":{}}}],["pg_ctl",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["pick",{"_index":1095,"title":{},"body":{"index.html":{}}}],["platform",{"_index":989,"title":{},"body":{"index.html":{}}}],["please",{"_index":1015,"title":{},"body":{"index.html":{}}}],["port",{"_index":94,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["position",{"_index":800,"title":{},"body":{"controllers/UsersController.html":{}}}],["possible",{"_index":213,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["post",{"_index":195,"title":{"entities/Post.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["post'})@apiresponse({status",{"_index":517,"title":{},"body":{"controllers/PostsController.html":{}}}],["post'})@isstring()@isnotempty()@maxlength(256)@minlength(4)@matches(/^[a",{"_index":237,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post'})@isstring()@minlength(4)@maxlength(512)@isnotempty",{"_index":258,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.author",{"_index":767,"title":{},"body":{"entities/User.html":{}}}],["post.content",{"_index":676,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.dto",{"_index":444,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["post.dto.ts",{"_index":173,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"coverage.html":{}}}],["post.dto.ts:106",{"_index":256,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:11",{"_index":442,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["post.dto.ts:129",{"_index":210,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:138",{"_index":193,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:31",{"_index":259,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:39",{"_index":218,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:53",{"_index":246,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:61",{"_index":252,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:69",{"_index":197,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:79",{"_index":234,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:89",{"_index":202,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:97",{"_index":224,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.entity",{"_index":568,"title":{},"body":{"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["post.featuredimageurl",{"_index":684,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.metaoptions",{"_index":383,"title":{},"body":{"entities/MetaOption.html":{}}}],["post.posttype",{"_index":680,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.publishon",{"_index":686,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.slug",{"_index":682,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.status",{"_index":678,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.tags",{"_index":688,"title":{},"body":{"injectables/PostsService.html":{},"entities/Tag.html":{}}}],["post.title",{"_index":674,"title":{},"body":{"injectables/PostsService.html":{}}}],["postgres",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["postgresql",{"_index":775,"title":{},"body":{"entities/User.html":{}}}],["posts",{"_index":502,"title":{},"body":{"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"index.html":{}}}],["posts.controller",{"_index":567,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts/posts.module",{"_index":42,"title":{},"body":{"modules/AppModule.html":{}}}],["postscontroller",{"_index":508,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":32,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsrepository",{"_index":586,"title":{},"body":{"injectables/PostsService.html":{}}}],["postsservice",{"_index":538,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["poststatus",{"_index":247,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["poststatus.draft",{"_index":492,"title":{},"body":{"entities/Post.html":{}}}],["posttype",{"_index":179,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["posttype.post",{"_index":491,"title":{},"body":{"entities/Post.html":{}}}],["prefix",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["prettier",{"_index":105,"title":{},"body":{"modules/AppModule.html":{}}}],["primarygeneratedcolumn",{"_index":377,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["private",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["proceed",{"_index":756,"title":{},"body":{"injectables/TagsService.html":{}}}],["process.env.node_env",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["production",{"_index":968,"title":{},"body":{"index.html":{}}}],["profileconfig",{"_index":844,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["profileconfiguration",{"_index":861,"title":{},"body":{"injectables/UsersService.html":{}}}],["progressive",{"_index":950,"title":{},"body":{"index.html":{}}}],["project",{"_index":960,"title":{},"body":{"index.html":{}}}],["promise",{"_index":630,"title":{},"body":{"injectables/PostsService.html":{}}}],["properties",{"_index":174,"title":{"properties.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"properties.html":{}}}],["provide",{"_index":1085,"title":{},"body":{"index.html":{}}}],["provided",{"_index":1098,"title":{},"body":{"index.html":{}}}],["providers",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers/auth.service",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["providers/meta",{"_index":408,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{}}}],["providers/posts.service",{"_index":539,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["providers/tags.service",{"_index":717,"title":{},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{}}}],["providers/users.service",{"_index":819,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["pts",{"_index":1089,"title":{},"body":{"index.html":{}}}],["public",{"_index":145,"title":{},"body":{"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["published",{"_index":220,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["published''})@isenum(poststatus)@isnotempty",{"_index":251,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["publishon",{"_index":180,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["query",{"_index":537,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["query'})@apiquery({name",{"_index":795,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('limit",{"_index":828,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('page",{"_index":830,"title":{},"body":{"controllers/UsersController.html":{}}}],["queryrunner",{"_index":635,"title":{},"body":{"injectables/PostsService.html":{}}}],["queryrunner.committransaction",{"_index":652,"title":{},"body":{"injectables/PostsService.html":{}}}],["queryrunner.manager.delete(post",{"_index":646,"title":{},"body":{"injectables/PostsService.html":{}}}],["queryrunner.release",{"_index":669,"title":{},"body":{"injectables/PostsService.html":{}}}],["queryrunner.rollbacktransaction",{"_index":658,"title":{},"body":{"injectables/PostsService.html":{}}}],["queryrunner.starttransaction",{"_index":637,"title":{},"body":{"injectables/PostsService.html":{}}}],["questions",{"_index":1013,"title":{},"body":{"index.html":{}}}],["r\\n",{"_index":291,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["rate",{"_index":1081,"title":{},"body":{"index.html":{}}}],["read",{"_index":1054,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["ready",{"_index":976,"title":{},"body":{"index.html":{}}}],["real",{"_index":1028,"title":{},"body":{"index.html":{}}}],["reference",{"_index":704,"title":{},"body":{"entities/Tag.html":{}}}],["reflect",{"_index":934,"title":{},"body":{"dependencies.html":{}}}],["regenerate",{"_index":1115,"title":{},"body":{"index.html":{}}}],["registered",{"_index":789,"title":{},"body":{"controllers/UsersController.html":{}}}],["related",{"_index":582,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["relations",{"_index":617,"title":{},"body":{"injectables/PostsService.html":{}}}],["relationship",{"_index":497,"title":{},"body":{"entities/Post.html":{}}}],["relationships",{"_index":496,"title":{},"body":{"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"index.html":{}}}],["release",{"_index":664,"title":{},"body":{"injectables/PostsService.html":{}}}],["relevant",{"_index":558,"title":{},"body":{"controllers/PostsController.html":{}}}],["remove",{"_index":648,"title":{},"body":{"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["removes",{"_index":557,"title":{},"body":{"controllers/PostsController.html":{}}}],["repeat",{"_index":453,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["repositories",{"_index":612,"title":{},"body":{"injectables/PostsService.html":{}}}],["repository",{"_index":423,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["req",{"_index":304,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["requesting",{"_index":605,"title":{},"body":{"injectables/PostsService.html":{}}}],["required",{"_index":190,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["requiring",{"_index":996,"title":{},"body":{"index.html":{}}}],["reset",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resources",{"_index":1007,"title":{},"body":{"index.html":{}}}],["response",{"_index":519,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["responsible",{"_index":575,"title":{},"body":{"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["results",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["retrieval",{"_index":871,"title":{},"body":{"injectables/UsersService.html":{}}}],["retrieve",{"_index":880,"title":{},"body":{"injectables/UsersService.html":{}}}],["retrieves",{"_index":603,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["return",{"_index":117,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returned",{"_index":797,"title":{},"body":{"controllers/UsersController.html":{}}}],["returns",{"_index":115,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["review",{"_index":250,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["rollback",{"_index":657,"title":{},"body":{"injectables/PostsService.html":{}}}],["root",{"_index":1092,"title":{},"body":{"index.html":{}}}],["run",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["runner",{"_index":665,"title":{},"body":{"injectables/PostsService.html":{}}}],["runs",{"_index":982,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":937,"title":{},"body":{"dependencies.html":{}}}],["s",{"_index":1101,"title":{},"body":{"index.html":{}}}],["sample_token",{"_index":169,"title":{},"body":{"injectables/AuthService.html":{}}}],["save",{"_index":629,"title":{},"body":{"injectables/PostsService.html":{}}}],["saying",{"_index":1123,"title":{},"body":{"index.html":{}}}],["scalable",{"_index":955,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":249,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["schema",{"_index":181,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["script",{"_index":1063,"title":{},"body":{"index.html":{}}}],["seen",{"_index":1124,"title":{},"body":{"index.html":{}}}],["serialize",{"_index":225,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/MetaOption.html":{}}}],["series",{"_index":286,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["series''})@isenum(posttype)@isnotempty",{"_index":217,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["serve",{"_index":1104,"title":{},"body":{"index.html":{}}}],["server",{"_index":956,"title":{},"body":{"index.html":{}}}],["service",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["set",{"_index":89,"title":{},"body":{"modules/AppModule.html":{}}}],["setting",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["setup",{"_index":961,"title":{},"body":{"index.html":{}}}],["shallow",{"_index":624,"title":{},"body":{"injectables/PostsService.html":{}}}],["side",{"_index":957,"title":{},"body":{"index.html":{}}}],["sidebarenabled",{"_index":301,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["sides",{"_index":1128,"title":{},"body":{"index.html":{}}}],["simple",{"_index":998,"title":{},"body":{"index.html":{}}}],["single",{"_index":878,"title":{},"body":{"injectables/UsersService.html":{}}}],["slash",{"_index":1082,"title":{},"body":{"index.html":{}}}],["slug",{"_index":182,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["small",{"_index":241,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["soft",{"_index":707,"title":{},"body":{"entities/Tag.html":{},"injectables/TagsService.html":{}}}],["softdelete",{"_index":710,"title":{},"body":{"controllers/TagsController.html":{}}}],["softdelete(@query('id",{"_index":723,"title":{},"body":{"controllers/TagsController.html":{}}}],["softdelete(id",{"_index":714,"title":{},"body":{"controllers/TagsController.html":{}}}],["softremove",{"_index":734,"title":{},"body":{"injectables/TagsService.html":{}}}],["softremove(id",{"_index":743,"title":{},"body":{"injectables/TagsService.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["spaces",{"_index":245,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["spec",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/TagsService.html":{}}}],["special",{"_index":354,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["specific",{"_index":366,"title":{},"body":{"classes/GetUsersParamDto.html":{},"entities/Post.html":{},"index.html":{}}}],["sponsors",{"_index":1049,"title":{},"body":{"index.html":{}}}],["spread",{"_index":622,"title":{},"body":{"injectables/PostsService.html":{}}}],["sql",{"_index":774,"title":{},"body":{"entities/User.html":{}}}],["src/.../app.module.ts",{"_index":1141,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":948,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../post",{"_index":942,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app.service.ts",{"_index":109,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":114,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.module",{"_index":842,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":137,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/providers/auth.service",{"_index":881,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/auth/providers/auth.service.ts",{"_index":144,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts:12",{"_index":157,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:21",{"_index":154,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:5",{"_index":150,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/main.ts",{"_index":906,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/meta",{"_index":313,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/dto/create",{"_index":172,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["src/posts/dto/patch",{"_index":437,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["src/posts/enums/post",{"_index":945,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/post.entity",{"_index":389,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["src/posts/post.entity.ts",{"_index":455,"title":{},"body":{"entities/Post.html":{},"coverage.html":{}}}],["src/posts/post.entity.ts:21",{"_index":467,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:28",{"_index":485,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:36",{"_index":471,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:44",{"_index":477,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:52",{"_index":478,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:57",{"_index":462,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:62",{"_index":474,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:68",{"_index":466,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:74",{"_index":473,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:81",{"_index":483,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:90",{"_index":469,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:96",{"_index":460,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/posts.controller.ts",{"_index":509,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:26",{"_index":527,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:37",{"_index":522,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:49",{"_index":533,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:55",{"_index":524,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module.ts",{"_index":566,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/providers/posts.service.ts",{"_index":580,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/providers/posts.service.ts:116",{"_index":608,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:142",{"_index":597,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:15",{"_index":588,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:40",{"_index":602,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:58",{"_index":592,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/tags/dtos/create",{"_index":318,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["src/tags/providers/tags.service",{"_index":610,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/tags/providers/tags.service.ts",{"_index":732,"title":{},"body":{"injectables/TagsService.html":{},"coverage.html":{}}}],["src/tags/providers/tags.service.ts:20",{"_index":738,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:26",{"_index":742,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:36",{"_index":740,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:52",{"_index":744,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:9",{"_index":736,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tag.entity",{"_index":490,"title":{},"body":{"entities/Post.html":{}}}],["src/tags/tag.entity.ts",{"_index":690,"title":{},"body":{"entities/Tag.html":{},"coverage.html":{}}}],["src/tags/tag.entity.ts:15",{"_index":697,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:23",{"_index":698,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:31",{"_index":701,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:37",{"_index":695,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:43",{"_index":700,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:50",{"_index":696,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:55",{"_index":699,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:59",{"_index":692,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:62",{"_index":702,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:66",{"_index":694,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tags.controller.ts",{"_index":709,"title":{},"body":{"controllers/TagsController.html":{},"coverage.html":{}}}],["src/tags/tags.controller.ts:22",{"_index":712,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.controller.ts:27",{"_index":713,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.controller.ts:33",{"_index":716,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.module",{"_index":569,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/tags/tags.module.ts",{"_index":728,"title":{},"body":{"modules/TagsModule.html":{}}}],["src/users/dtos/create",{"_index":334,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dtos/get",{"_index":362,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["src/users/dtos/patch",{"_index":447,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["src/users/providers/users.service",{"_index":159,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["src/users/providers/users.service.ts",{"_index":849,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/providers/users.service.ts:19",{"_index":863,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:55",{"_index":869,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:80",{"_index":877,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:85",{"_index":867,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/user.entity",{"_index":489,"title":{},"body":{"entities/Post.html":{}}}],["src/users/user.entity.ts",{"_index":759,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/user.entity.ts:15",{"_index":762,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:21",{"_index":764,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:28",{"_index":761,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:34",{"_index":765,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:38",{"_index":768,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:9",{"_index":763,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.controller.ts",{"_index":779,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:53",{"_index":803,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:62",{"_index":784,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:72",{"_index":806,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":140,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostsModule.html":{}}}],["src/users/users.module.ts",{"_index":840,"title":{},"body":{"modules/UsersModule.html":{}}}],["start",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"injectables/PostsService.html":{},"index.html":{}}}],["start:dev",{"_index":967,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":969,"title":{},"body":{"index.html":{}}}],["started",{"_index":949,"title":{"index.html":{}},"body":{}}],["starter",{"_index":959,"title":{},"body":{"index.html":{}}}],["statements",{"_index":900,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":183,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["status.enum",{"_index":276,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["status.enum.ts",{"_index":943,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["stay",{"_index":1035,"title":{},"body":{"index.html":{}}}],["steps",{"_index":979,"title":{},"body":{"index.html":{}}}],["story",{"_index":216,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["straightforward",{"_index":994,"title":{},"body":{"index.html":{}}}],["string",{"_index":116,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["success",{"_index":653,"title":{},"body":{"injectables/PostsService.html":{}}}],["successful",{"_index":651,"title":{},"body":{"injectables/PostsService.html":{}}}],["successfully",{"_index":793,"title":{},"body":{"controllers/UsersController.html":{}}}],["sucessfully",{"_index":550,"title":{},"body":{"controllers/PostsController.html":{}}}],["sucessfully'})@patch",{"_index":532,"title":{},"body":{"controllers/PostsController.html":{}}}],["sucessfully'})@post",{"_index":521,"title":{},"body":{"controllers/PostsController.html":{}}}],["summary",{"_index":549,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["support",{"_index":1014,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":1131,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["table",{"_index":850,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["tables",{"_index":576,"title":{},"body":{"modules/PostsModule.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":918,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":479,"title":{"entities/Tag.html":{}},"body":{"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"coverage.html":{}}}],["tag.dto",{"_index":718,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["tag.dto.ts",{"_index":319,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["tag.dto.ts:19",{"_index":326,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:29",{"_index":331,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:34",{"_index":322,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:39",{"_index":328,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:45",{"_index":324,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.entity",{"_index":730,"title":{},"body":{"modules/TagsModule.html":{},"injectables/TagsService.html":{}}}],["tag.posts",{"_index":481,"title":{},"body":{"entities/Post.html":{}}}],["tags",{"_index":184,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"index.html":{}}}],["tags.controller",{"_index":729,"title":{},"body":{"modules/TagsModule.html":{}}}],["tags/providers/tags",{"_index":745,"title":{},"body":{"injectables/TagsService.html":{}}}],["tags/soft",{"_index":722,"title":{},"body":{"controllers/TagsController.html":{}}}],["tags/tags.module",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["tagscontroller",{"_index":708,"title":{"controllers/TagsController.html":{}},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{},"coverage.html":{}}}],["tagsmodule",{"_index":33,"title":{"modules/TagsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules.html":{},"overview.html":{}}}],["tagsrepository",{"_index":737,"title":{},"body":{"injectables/TagsService.html":{}}}],["tagsservice",{"_index":587,"title":{"injectables/TagsService.html":{}},"body":{"injectables/PostsService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"coverage.html":{},"overview.html":{}}}],["take",{"_index":980,"title":{},"body":{"index.html":{}}}],["test",{"_index":884,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["test:covdeployment",{"_index":974,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":973,"title":{},"body":{"index.html":{}}}],["tests",{"_index":970,"title":{},"body":{"index.html":{}}}],["text",{"_index":461,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["thanks",{"_index":1048,"title":{},"body":{"index.html":{}}}],["this.metaoptionrepository.create(createmetaoptiondto",{"_index":433,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionrepository.save(metaoption",{"_index":435,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionsservice.create(createpostmetaoptiondto",{"_index":411,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["this.postsrepository.create",{"_index":628,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.delete(id",{"_index":689,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.find",{"_index":616,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.findone",{"_index":641,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.findoneby",{"_index":672,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.manager.connection.createqueryrunner",{"_index":636,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.save(post",{"_index":631,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsservice.create(createpostdto",{"_index":552,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.delete(id",{"_index":562,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.findall(userid",{"_index":548,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.update(patchpostdto",{"_index":554,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.tagsrepository.create(createtagdto",{"_index":747,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.delete(id",{"_index":757,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.find",{"_index":749,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.findone",{"_index":755,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.save(tag",{"_index":748,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.softdelete(id",{"_index":758,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsservice.create(createtagdto",{"_index":720,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.tagsservice.delete(id",{"_index":721,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.tagsservice.findmultipletags(createpostdto.tags",{"_index":620,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.tagsservice.findmultipletags(patchpostdto.tags",{"_index":671,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.tagsservice.softremove(id",{"_index":724,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.usersrepository.create(createuserdto",{"_index":897,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findone",{"_index":893,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findoneby",{"_index":891,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.save(newuser",{"_index":898,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.createuser(createuserdto",{"_index":835,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall(getuserparamdto",{"_index":832,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findonebyid(1234",{"_index":167,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findonebyid(createpostdto.authorid",{"_index":619,"title":{},"body":{"injectables/PostsService.html":{}}}],["throw",{"_index":642,"title":{},"body":{"injectables/PostsService.html":{}}}],["thrown",{"_index":229,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["time",{"_index":1029,"title":{},"body":{"index.html":{}}}],["timestamp",{"_index":472,"title":{},"body":{"entities/Post.html":{},"injectables/TagsService.html":{}}}],["title",{"_index":185,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["token",{"_index":168,"title":{},"body":{"injectables/AuthService.html":{}}}],["touch",{"_index":1055,"title":{},"body":{"index.html":{}}}],["transaction",{"_index":632,"title":{},"body":{"injectables/PostsService.html":{}}}],["transformer",{"_index":282,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"dependencies.html":{}}}],["triggers",{"_index":1084,"title":{},"body":{"index.html":{}}}],["true",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"entities/User.html":{}}}],["true})@jointable",{"_index":482,"title":{},"body":{"entities/Post.html":{}}}],["true})@type(undefined",{"_index":209,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["try",{"_index":638,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{}}}],["tsconfig.json",{"_index":1093,"title":{},"body":{"index.html":{}}}],["tts",{"_index":1091,"title":{},"body":{"index.html":{}}}],["twitter",{"_index":1059,"title":{},"body":{"index.html":{}}}],["type",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["type.enum",{"_index":275,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["type.enum.ts",{"_index":944,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["typees",{"_index":770,"title":{},"body":{"entities/User.html":{}}}],["typeorm",{"_index":393,"title":{},"body":{"entities/MetaOption.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([metaoption",{"_index":417,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["typeormmodule.forfeature([post",{"_index":573,"title":{},"body":{"modules/PostsModule.html":{}}}],["typeormmodule.forfeature([tag",{"_index":731,"title":{},"body":{"modules/TagsModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":847,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":450,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":809,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["undefined",{"_index":470,"title":{},"body":{"entities/Post.html":{}}}],["undefined})@isarray()@isoptional()@isint({each",{"_index":255,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["undefined})@isoptional()@validatenested({each",{"_index":208,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["unique",{"_index":476,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["unit",{"_index":971,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":429,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["unlicensed",{"_index":1139,"title":{},"body":{"properties.html":{}}}],["unused",{"_index":811,"title":{},"body":{"controllers/UsersController.html":{}}}],["up",{"_index":668,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{}}}],["update",{"_index":585,"title":{},"body":{"injectables/PostsService.html":{}}}],["update(@body",{"_index":670,"title":{},"body":{"injectables/PostsService.html":{}}}],["update(patchpostdto",{"_index":607,"title":{},"body":{"injectables/PostsService.html":{}}}],["updated",{"_index":445,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updated'})@isint()@isnotempty",{"_index":441,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["updatedate",{"_index":374,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["updatedatecolumn",{"_index":387,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["updatepost",{"_index":513,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(@body",{"_index":553,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(patchpostdto",{"_index":529,"title":{},"body":{"controllers/PostsController.html":{}}}],["updates",{"_index":530,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"index.html":{}}}],["uppercase",{"_index":312,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["url",{"_index":236,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["url\"'})@maxlength(512",{"_index":330,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["use",{"_index":621,"title":{},"body":{"injectables/PostsService.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["usefactory",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["user",{"_index":83,"title":{"entities/User.html":{}},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["user.dto",{"_index":451,"title":{},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":335,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:15",{"_index":341,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:21",{"_index":343,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:26",{"_index":339,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:35",{"_index":356,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.entity",{"_index":843,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["user.posts",{"_index":458,"title":{},"body":{"entities/Post.html":{}}}],["userid",{"_index":528,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["username",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["users",{"_index":363,"title":{},"body":{"classes/GetUsersParamDto.html":{},"modules/PostsModule.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["users.controller",{"_index":841,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/users.module",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":778,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":34,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":860,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersservice",{"_index":149,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["uses",{"_index":243,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"injectables/UsersService.html":{}}}],["using",{"_index":773,"title":{},"body":{"entities/User.html":{},"index.html":{}}}],["validated",{"_index":308,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validatenested",{"_index":272,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validation",{"_index":227,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["validationpipe",{"_index":815,"title":{},"body":{"controllers/UsersController.html":{}}}],["validator",{"_index":273,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"dependencies.html":{}}}],["value",{"_index":946,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":214,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["varchar",{"_index":463,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["variable",{"_index":903,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1140,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["vars",{"_index":812,"title":{},"body":{"controllers/UsersController.html":{}}}],["verbose",{"_index":1071,"title":{},"body":{"index.html":{}}}],["version",{"_index":1137,"title":{},"body":{"properties.html":{}}}],["video",{"_index":1022,"title":{},"body":{"index.html":{}}}],["view",{"_index":571,"title":{},"body":{"modules/PostsModule.html":{}}}],["visit",{"_index":1011,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":1025,"title":{},"body":{"index.html":{}}}],["want",{"_index":801,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["watch",{"_index":965,"title":{},"body":{"index.html":{}}}],["we're",{"_index":772,"title":{},"body":{"entities/User.html":{}}}],["website",{"_index":776,"title":{},"body":{"entities/User.html":{},"index.html":{}}}],["well",{"_index":1107,"title":{},"body":{"index.html":{}}}],["whenever",{"_index":1112,"title":{},"body":{"index.html":{}}}],["within",{"_index":752,"title":{},"body":{"injectables/TagsService.html":{},"index.html":{}}}],["without",{"_index":244,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/MetaOption.html":{},"controllers/UsersController.html":{}}}],["work",{"_index":494,"title":{},"body":{"entities/Post.html":{}}}],["working",{"_index":1010,"title":{},"body":{"index.html":{}}}],["world",{"_index":119,"title":{},"body":{"injectables/AppService.html":{}}}],["write",{"_index":106,"title":{},"body":{"modules/AppModule.html":{}}}],["writing",{"_index":1114,"title":{},"body":{"index.html":{}}}],["x",{"_index":1038,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":1052,"title":{},"body":{"index.html":{}}}],["you're",{"_index":975,"title":{},"body":{"index.html":{}}}],["z0",{"_index":238,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["z\\d@$!%*?&]{8,16",{"_index":347,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*?&])[a",{"_index":346,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["za",{"_index":345,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            MetaOptionsModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            TagsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UsersModule } from './users/users.module';\nimport { PostsModule } from './posts/posts.module';\nimport { AuthModule } from './auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { TagsModule } from './tags/tags.module';\nimport { MetaOptionsModule } from './meta-options/meta-options.module';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport appConfig from './config/app.config'; // Since it's imported as a default\nimport databaseConfig from './config/database.config';\n\nconst ENV = process.env.NODE_ENV;\n\n// Run this in cmd pg_ctl start -D \"C:\\users\\mfabouatmeh\\Desktop\\CodesDar\\more\\Postgre\\data\"\n@Module({\n  imports: [\n    UsersModule,\n    PostsModule,\n    AuthModule,\n    ConfigModule.forRoot({\n      isGlobal: true,\n      envFilePath: !ENV ? '.env' : `.env.${ENV}`,\n      load: [appConfig, databaseConfig],\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule], // Makes ConfigService available\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        type: 'postgres',\n        // entities: [User],\n        autoLoadEntities: configService.get('database.autoLoadEntities'),\n        synchronize: configService.get('database.synchronize'), // If this setting is set to false, we would have to manually perform migrations\n        port: configService.get('database.port'),\n        username: configService.get('database.user'),\n        password: configService.get('database.pass'),\n        host: configService.get('database.host'),\n        database: configService.get('database.name'),\n      }),\n    }),\n    TagsModule,\n    MetaOptionsModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n//npx prettier --write .\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { AuthService } from './providers/auth.service';\n// nest generate controller auth --no-spec\n@Controller('auth')\nexport class AuthController {\n  constructor(\n    // Injecting the auth service\n    private readonly authService: AuthService,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './providers/auth.service';\nimport { UsersModule } from 'src/users/users.module';\n// nest generate module auth\n@Module({\n  controllers: [AuthController],\n  providers: [AuthService],\n  // imports: [UsersModule], will cause a circular dependency\n  imports: [forwardRef(() => UsersModule)],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                isAuth\n                            \n                            \n                                    Public\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/auth.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isAuth\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAuth()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, forwardRef, Inject } from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users.service';\n// nest generate service auth/providers/auth --flat  --no-spec\n@Injectable()\nexport class AuthService {\n  constructor(\n    // Injecting the user service\n    // Add this to avoid circular dependency\n    @Inject(forwardRef(() => UsersService))\n    private readonly usersService: UsersService,\n  ) {}\n  public login(email: string, password: string) {\n    // Check user exists\n\n    const user = this.usersService.findOneById(1234);\n    // Login\n    // Return token\n    return 'SAMPLE_TOKEN';\n  }\n\n  public isAuth() {\n    return true;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dto/create-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                authorId\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                publishOn\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        authorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'integer', required: true, example: 1})@IsNotEmpty()@IsInt()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:138\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the content of the post', example: 'The post content'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Featured image for your blog post', example: 'http://localhost.com/images/image1.jpg'})@IsOptional()@MinLength(4)@MaxLength(1024)@IsUrl()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:89\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreatePostMetaOptionsDto | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'object', required: false, items: undefined})@IsOptional()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:129\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: PostType, description: 'Possible values, 'post', 'page', 'story', 'series''})@IsEnum(PostType)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The date on which the blog post is published', example: '2024-03-16T07:46:32+0000'})@IsISO8601()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:97\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Serialize your JSON object else a validation error will be thrown', example: '{\n \"@context\": \"https://schema.org\",\n \"@type\": \"Person\"\n }'})@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:79\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'For Example - 'my-url'', example: 'my-blog-post'})@IsString()@IsNotEmpty()@MaxLength(256)@MinLength(4)@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url\"'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: PostStatus, description: 'Possible values 'draft', 'scheduled', 'review', 'published''})@IsEnum(PostStatus)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Array of IDs of tags', example: undefined})@IsArray()@IsOptional()@IsInt({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:106\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'This is a title', description: 'This is the title for the blog post'})@IsString()@MinLength(4)@MaxLength(512)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:31\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsArray,\n  IsEnum,\n  IsInt,\n  IsISO8601,\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MaxLength,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\nimport { PostType } from '../enums/post-type.enum';\nimport { PostStatus } from '../enums/post-status.enum';\nimport { CreatePostMetaOptionsDto } from '../../meta-options/dtos/create-post-meta-options.dto';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\n\nexport class CreatePostDto {\n  @ApiProperty({\n    example: 'This is a title',\n    description: 'This is the title for the blog post',\n  })\n  @IsString()\n  @MinLength(4)\n  @MaxLength(512)\n  @IsNotEmpty()\n  title: string;\n\n  @ApiProperty({\n    enum: PostType,\n    description: \"Possible values, 'post', 'page', 'story', 'series'\",\n  })\n  @IsEnum(PostType)\n  @IsNotEmpty()\n  postType: PostType;\n\n  @ApiProperty({\n    description: \"For Example - 'my-url'\",\n    example: 'my-blog-post',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(256)\n  @MinLength(4)\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url\"',\n  })\n  slug: string;\n\n  @ApiProperty({\n    enum: PostStatus,\n    description: \"Possible values 'draft', 'scheduled', 'review', 'published'\",\n  })\n  @IsEnum(PostStatus)\n  @IsNotEmpty()\n  status: PostStatus;\n\n  @ApiPropertyOptional({\n    description: 'This is the content of the post',\n    example: 'The post content',\n  })\n  @IsString()\n  @IsOptional()\n  content?: string;\n\n  @ApiPropertyOptional({\n    description:\n      'Serialize your JSON object else a validation error will be thrown',\n    example:\n      '{\\r\\n \"@context\": \"https://schema.org\",\\r\\n \"@type\": \"Person\"\\r\\n }',\n  })\n  @IsOptional()\n  @IsJSON()\n  schema?: string;\n\n  @ApiPropertyOptional({\n    description: 'Featured image for your blog post',\n    example: 'http://localhost.com/images/image1.jpg',\n  })\n  @IsOptional()\n  @MinLength(4)\n  @MaxLength(1024)\n  @IsUrl()\n  featuredImageUrl?: string;\n\n  @ApiPropertyOptional({\n    description: 'The date on which the blog post is published',\n    example: '2024-03-16T07:46:32+0000',\n  })\n  @IsISO8601()\n  @IsOptional()\n  publishOn?: Date;\n\n  @ApiPropertyOptional({\n    description: 'Array of IDs of tags',\n    example: [1, 2],\n  })\n  @IsArray()\n  @IsOptional()\n  @IsInt({ each: true })\n  tags?: number[];\n\n  @ApiPropertyOptional({\n    type: 'object',\n    required: false,\n    items: {\n      type: 'object',\n      properties: {\n        metavalue: {\n          type: 'json',\n          description: 'The metaValue is a JSON string',\n          example: '{\"sidebarEnabled\": true,}',\n        },\n      },\n    },\n  })\n  @IsOptional()\n  @ValidateNested({ each: true })\n  @Type(() => CreatePostMetaOptionsDto)\n  // Type decorator\n  // Matches the incoming req to the dto\n  // Creates an instance of the dto\n  // All the properties are validated against the dto\n  metaOptions?: CreatePostMetaOptionsDto | null;\n\n  @ApiProperty({\n    type: 'integer',\n    required: true,\n    example: 1,\n  })\n  @IsNotEmpty()\n  @IsInt() // Corrected here (uppercase \"I\")\n  authorId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostMetaOptionsDto.html":{"url":"classes/CreatePostMetaOptionsDto.html","title":"class - CreatePostMetaOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostMetaOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/dtos/create-post-meta-options.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                metaValue\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/dtos/create-post-meta-options.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsJSON, IsNotEmpty, IsString } from 'class-validator';\n\nexport class CreatePostMetaOptionsDto {\n  @IsNotEmpty()\n  @IsJSON()\n  metaValue: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTagDto.html":{"url":"classes/CreateTagDto.html","title":"class - CreateTagDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTagDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/dtos/create-tag.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                featuredImage\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        featuredImage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsUrl()@MaxLength(1024)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@MinLength(3)@IsNotEmpty()@MaxLength(256)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsNotEmpty()@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url\"'})@MaxLength(512)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:29\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateTagDto {\n  @ApiProperty()\n  @IsString()\n  @MinLength(3)\n  @IsNotEmpty()\n  @MaxLength(256)\n  name: string;\n\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url\"',\n  })\n  @MaxLength(512)\n  slug: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsString()\n  description: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsJSON()\n  schema: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsUrl()\n  @MaxLength(1024)\n  featuredImage: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MaxLength(96)@MinLength(8)@Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,16}$/, {message: 'Minimum 8 chars, include at least one letter, one number, and one special character.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\nexport class CreateUserDto {\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(96)\n  firstName: string;\n\n  @IsString()\n  @IsOptional()\n  @MinLength(3)\n  @MaxLength(96)\n  lastName?: string;\n\n  @IsEmail()\n  @IsNotEmpty()\n  @MaxLength(96)\n  email: string;\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(96)\n  @MinLength(8)\n  @Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,16}$/, {\n    message:\n      'Minimum 8 chars, include at least one letter, one number, and one special character.',\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersParamDto.html":{"url":"classes/GetUsersParamDto.html","title":"class - GetUsersParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-users-param.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Get user with a specific id', example: '1234'})@IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-users-param.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport { IsInt, IsOptional } from 'class-validator';\n\nexport class GetUsersParamDto {\n  @ApiPropertyOptional({\n    description: 'Get user with a specific id',\n    example: '1234',\n  })\n  @IsOptional()\n  @IsInt()\n  @Type(() => Number)\n  id?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/MetaOption.html":{"url":"entities/MetaOption.html","title":"entity - MetaOption","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  MetaOption\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-option.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createDate\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                metaValue\n                            \n                            \n                                    \n                                    \n                                post\n                            \n                            \n                                    \n                                updateDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'json', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        post\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, post => post.metaOptions, {onDelete: 'CASCADE'})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:25\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from 'src/posts/post.entity';\nimport {\n  Column,\n  CreateDateColumn,\n  Entity,\n  JoinColumn,\n  OneToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@Entity()\nexport class MetaOption {\n  @PrimaryGeneratedColumn()\n  id: number;\n  // Without needing to serialize the JSON object(unavailable in mysql)\n  @Column({\n    type: 'json',\n    nullable: false,\n  })\n  metaValue: string;\n  @CreateDateColumn()\n  createDate: Date;\n  @UpdateDateColumn()\n  updateDate: Date;\n\n  @OneToOne(() => Post, (post) => post.metaOptions, {\n    onDelete: 'CASCADE',\n  })\n  @JoinColumn()\n  post: Post;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MetaOptionsController.html":{"url":"controllers/MetaOptionsController.html","title":"controller - MetaOptionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MetaOptionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-options.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                meta-options\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createMetaOption\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createMetaOption\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMetaOption(createPostMetaOptionDto: CreatePostMetaOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/meta-options/meta-options.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostMetaOptionDto\n                                            \n                                                            CreatePostMetaOptionsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { CreatePostMetaOptionsDto } from './dtos/create-post-meta-options.dto';\nimport { MetaOptionsService } from './providers/meta-options.service';\n\n@Controller('meta-options')\nexport class MetaOptionsController {\n  constructor(private readonly metaOptionsService: MetaOptionsService) {}\n  @Post()\n  public createMetaOption(\n    @Body() createPostMetaOptionDto: CreatePostMetaOptionsDto,\n  ) {\n    return this.metaOptionsService.create(createPostMetaOptionDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MetaOptionsModule.html":{"url":"modules/MetaOptionsModule.html","title":"module - MetaOptionsModule","body":"\n                   \n\n\n\n\n    Modules\n    MetaOptionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/meta-options/meta-options.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MetaOptionsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MetaOptionsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MetaOptionsController } from './meta-options.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { MetaOption } from './meta-option.entity';\nimport { MetaOptionsService } from './providers/meta-options.service';\n\n@Module({\n  controllers: [MetaOptionsController],\n  imports: [TypeOrmModule.forFeature([MetaOption])],\n  providers: [MetaOptionsService],\n})\nexport class MetaOptionsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MetaOptionsService.html":{"url":"injectables/MetaOptionsService.html","title":"injectable - MetaOptionsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MetaOptionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/providers/meta-options.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(metaOptionRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/meta-options/providers/meta-options.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        metaOptionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createMetaOptionDto: CreatePostMetaOptionsDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/meta-options/providers/meta-options.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createMetaOptionDto\n                                            \n                                                            CreatePostMetaOptionsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { MetaOption } from '../meta-option.entity';\nimport { Repository } from 'typeorm';\nimport { CreatePostMetaOptionsDto } from '../dtos/create-post-meta-options.dto';\n\n@Injectable()\nexport class MetaOptionsService {\n  constructor(\n    /**\n     * Inject metaOptionsRepository\n     */\n    @InjectRepository(MetaOption)\n    private metaOptionRepository: Repository,\n  ) {}\n\n  public async create(createMetaOptionDto: CreatePostMetaOptionsDto) {\n    const metaOption = this.metaOptionRepository.create(createMetaOptionDto);\n    return await this.metaOptionRepository.save(metaOption);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchPostDto.html":{"url":"classes/PatchPostDto.html","title":"class - PatchPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dto/patch-post.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The ID of the post that needs to be updated'})@IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/patch-post.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsInt, IsNotEmpty } from 'class-validator';\nimport { CreatePostDto } from './create-post.dto';\n\nexport class PatchPostDto extends PartialType(CreatePostDto) {\n  @ApiProperty({\n    description: 'The ID of the post that needs to be updated',\n  })\n  @IsInt()\n  @IsNotEmpty()\n  id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/patch-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\n// Extend the create user dto to not repeat the code\nexport class PatchUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Post.html":{"url":"entities/Post.html","title":"entity - Post","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/post.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                author\n                            \n                            \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                postType\n                            \n                            \n                                    \n                                    Optional\n                                publishOn\n                            \n                            \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.posts, {eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:96\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MetaOption\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, metaOptions => metaOptions.post, {cascade: true, eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:90\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: PostType, default: undefined, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: PostStatus, default: undefined, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Tag[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, tag => tag.posts, {eager: true})@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 512, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:28\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  Entity,\n  JoinColumn,\n  JoinTable,\n  ManyToMany,\n  ManyToOne,\n  OneToOne,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport { PostType } from './enums/post-type.enum';\nimport { PostStatus } from './enums/post-status.enum';\nimport { CreatePostMetaOptionsDto } from '../meta-options/dtos/create-post-meta-options.dto';\nimport { MetaOption } from 'src/meta-options/meta-option.entity';\nimport { User } from 'src/users/user.entity';\nimport { Tag } from 'src/tags/tag.entity';\n\n@Entity()\nexport class Post {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 512,\n    nullable: false,\n  })\n  title: string;\n\n  @Column({\n    type: 'enum',\n    enum: PostType,\n    default: PostType.POST,\n    nullable: false,\n  })\n  postType: PostType;\n\n  @Column({\n    type: 'varchar',\n    length: 256,\n    nullable: false,\n    unique: true,\n  })\n  slug: string;\n\n  @Column({\n    type: 'enum',\n    enum: PostStatus,\n    default: PostStatus.DRAFT,\n    nullable: false,\n  })\n  status: PostStatus;\n  @Column({\n    type: 'text', //Large string\n    nullable: true,\n  })\n  content?: string;\n  @Column({\n    type: 'text', //Large string\n    nullable: true,\n  })\n  schema?: string;\n  @Column({\n    type: 'varchar', //Large string\n    length: 1024,\n    nullable: true,\n  })\n  featuredImageUrl?: string;\n\n  @Column({\n    type: 'timestamp',\n    nullable: true,\n  })\n  publishOn?: Date;\n\n  // Work on these in lecture on relationships\n  @ManyToMany(() => Tag, (tag) => tag.posts, {\n    eager: true,\n  })\n  @JoinTable()\n  tags?: Tag[];\n\n  // Meta options is 1-1 relationship with meta option now BIDIRECTIONAL\n  @OneToOne(() => MetaOption, (metaOptions) => metaOptions.post, {\n    cascade: true,\n    eager: true, // Will fetch posts AND metaOptions when getting posts\n  })\n\n  // We can add specific actions to the cascade (check documentation)\n  metaOptions?: MetaOption;\n\n  // Many posts can belong to one user\n  @ManyToOne(() => User, (user) => user.posts, {\n    eager: true,\n  })\n  author: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createPost\n                            \n                            \n                                    \n                                    Public\n                                delete\n                            \n                            \n                                    \n                                    Public\n                                getPosts\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Creates a new blog post'})@ApiResponse({status: 201, description: 'You get a 201 response if your post is created sucessfully'})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        getPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPosts(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:userId?')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(patchPostDto: PatchPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Updates an existing blog post'})@ApiResponse({status: 201, description: 'You get a 201 response if your post is updated sucessfully'})@Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchPostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Query,\n} from '@nestjs/common';\nimport { PostsService } from './providers/posts.service';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { CreatePostDto } from './dto/create-post.dto';\nimport { PatchPostDto } from './dto/patch-post.dto';\n\n@Controller('posts')\n@ApiTags('Posts')\nexport class PostsController {\n  constructor(\n    /** Injecting post service */\n    private readonly postsService: PostsService,\n  ) {}\n\n  @Get('/:userId?')\n  public getPosts(@Param('userId') userId: string) {\n    return this.postsService.findAll(userId);\n  }\n  @ApiOperation({\n    summary: 'Creates a new blog post',\n  })\n  @ApiResponse({\n    status: 201,\n    description: 'You get a 201 response if your post is created sucessfully',\n  })\n  @Post()\n  public createPost(@Body() createPostDto: CreatePostDto) {\n    return this.postsService.create(createPostDto);\n  }\n\n  @ApiOperation({\n    summary: 'Updates an existing blog post',\n  })\n  @ApiResponse({\n    status: 201,\n    description: 'You get a 201 response if your post is updated sucessfully',\n  })\n  @Patch()\n  public updatePost(@Body() patchPostDto: PatchPostDto) {\n    return this.postsService.update(patchPostDto);\n  }\n\n  // This method cascades and removes relevant relationships between posts and tags NOT the actual tags\n  @Delete()\n  public delete(@Query('id', ParseIntPipe) id: number) {\n    return this.postsService.delete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_imports\n\n\n\ncluster_PostsModule_providers\n\n\n\n\nTagsModule\n\nTagsModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nTagsModule->PostsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            TagsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsController } from './posts.controller';\nimport { PostsService } from './providers/posts.service';\nimport { UsersModule } from 'src/users/users.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Post } from './post.entity';\nimport { MetaOption } from 'src/meta-options/meta-option.entity';\nimport { TagsModule } from 'src/tags/tags.module';\n\n// Import entire module not only a service (view users module exports key)\n@Module({\n  controllers: [PostsController],\n  providers: [PostsService],\n  imports: [\n    UsersModule,\n    TagsModule,\n    TypeOrmModule.forFeature([Post, MetaOption]),\n  ], // Import the post entity, for feature is responsible to create tables corresponding to these entities inside the db\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/providers/posts.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service responsible for handling post-related operations.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, postsRepository: Repository, metaOptionsRepository: Repository, tagsService: TagsService)\n                    \n                \n                        \n                            \n                                Defined in src/posts/providers/posts.service.ts:15\n                            \n                        \n\n                \n                    \n                            Constructor to inject dependencies.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service to handle user-related operations.\n\n                                                        \n                                                \n                                                \n                                                        postsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Repository for managing Post entities.\n\n                                                        \n                                                \n                                                \n                                                        metaOptionsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Repository for managing MetaOption entities.\n\n                                                        \n                                                \n                                                \n                                                        tagsService\n                                                  \n                                                        \n                                                                        TagsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service for handling tag-related operations.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createPostDto: CreatePostDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:58\n                        \n                    \n\n\n            \n                \n                        Creates a new post.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    DTO containing post creation details.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The newly created post.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:142\n                        \n                    \n\n\n            \n                \n                        Deletes a post from the database.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the post to delete.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                An object indicating the deletion status.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:40\n                        \n                    \n\n\n            \n                \n                        Retrieves all posts along with their meta options.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the user requesting the posts.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                A list of posts with related meta options.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(patchPostDto: PatchPostDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:116\n                        \n                    \n\n\n            \n                \n                        Updates an existing post.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                patchPostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    DTO containing fields to update.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The updated post.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Body, Injectable } from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users.service';\nimport { CreatePostDto } from '../dto/create-post.dto';\nimport { Repository } from 'typeorm';\nimport { Post } from '../post.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { MetaOption } from 'src/meta-options/meta-option.entity';\nimport { TagsService } from 'src/tags/providers/tags.service';\nimport { PatchPostDto } from '../dto/patch-post.dto';\n\n/**\n * Service responsible for handling post-related operations.\n */\n@Injectable()\nexport class PostsService {\n  /**\n   * Constructor to inject dependencies.\n   * @param usersService Service to handle user-related operations.\n   * @param postsRepository Repository for managing Post entities.\n   * @param metaOptionsRepository Repository for managing MetaOption entities.\n   * @param tagsService Service for handling tag-related operations.\n   */\n  constructor(\n    private readonly usersService: UsersService,\n\n    @InjectRepository(Post)\n    private readonly postsRepository: Repository, // Only add repositories for 1-1 relationships so that it doesnt become crowded\n\n    @InjectRepository(MetaOption)\n    private readonly metaOptionsRepository: Repository,\n\n    private readonly tagsService: TagsService,\n  ) {}\n\n  /**\n   * Retrieves all posts along with their meta options.\n   * @param userId The ID of the user requesting the posts.\n   * @returns A list of posts with related meta options.\n   */\n  public async findAll(userId: string) {\n    return await this.postsRepository.find({\n      relations: { metaOptions: true },\n    });\n\n    // Get meta options along with the posts\n    // return await this.postsRepository.find({\n    //   relations: {\n    //     metaOptions: true,\n    //   },\n    // });\n  }\n\n  /**\n   * Creates a new post.\n   * @param createPostDto DTO containing post creation details.\n   * @returns The newly created post.\n   */\n  public async create(@Body() createPostDto: CreatePostDto) {\n    const author = await this.usersService.findOneById(createPostDto.authorId);\n    const tags = await this.tagsService.findMultipleTags(createPostDto.tags);\n\n    // Use the spread operator to create a shallow copy of createPostDto, meaning a new object is passed to create()\n    const post = this.postsRepository.create({\n      ...createPostDto,\n      author,\n      tags,\n    }); // Only use await for the save method because it returns a promise\n\n    return await this.postsRepository.save(post);\n  }\n\n  /*\n   public async delete(id: number) {\n    // Start a transaction to handle both deletes atomically\n    const queryRunner =\n      this.postsRepository.manager.connection.createQueryRunner();\n    await queryRunner.startTransaction();\n\n    try {\n      // Find the post (with related metaOptions loaded)\n      const post = await this.postsRepository.findOne({\n        where: { id },\n        relations: ['metaOptions'],\n      });\n      if (!post) {\n        throw new Error('Post not found');\n      }\n\n      // Delete the post (cascade will handle the metaOption deletion automatically)\n      await queryRunner.manager.delete(Post, id); // Use delete instead of remove\n\n      // Commit the transaction if everything is successful\n      await queryRunner.commitTransaction();\n\n      // Return a success response\n      return { deleted: true, id };\n    } catch (error) {\n      // If any error occurs, rollback the transaction\n      await queryRunner.rollbackTransaction();\n\n      // Log the error and return a failure response\n      console.error(error);\n      return { deleted: false, message: error.message };\n    } finally {\n      // Release the query runner (important for clean-up)\n      await queryRunner.release();\n    }\n  }\n*/\n\n  /**\n   * Updates an existing post.\n   * @param patchPostDto DTO containing fields to update.\n   * @returns The updated post.\n   */\n  public async update(@Body() patchPostDto: PatchPostDto) {\n    const tags = await this.tagsService.findMultipleTags(patchPostDto.tags);\n    const post = await this.postsRepository.findOneBy({ id: patchPostDto.id });\n\n    if (!post) {\n      throw new Error('Post not found');\n    }\n\n    post.title = patchPostDto.title ?? post.title;\n    post.content = patchPostDto.content ?? post.content;\n    post.status = patchPostDto.status ?? post.status;\n    post.postType = patchPostDto.postType ?? post.postType;\n    post.slug = patchPostDto.slug ?? post.slug;\n    post.featuredImageUrl =\n      patchPostDto.featuredImageUrl ?? post.featuredImageUrl;\n    post.publishOn = patchPostDto.publishOn ?? post.publishOn;\n    post.tags = tags;\n\n    return await this.postsRepository.save(post);\n  }\n\n  /**\n   * Deletes a post from the database.\n   * @param id The ID of the post to delete.\n   * @returns An object indicating the deletion status.\n   */\n  public async delete(id: number) {\n    await this.postsRepository.delete(id);\n    return { deleted: true, id };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Tag.html":{"url":"entities/Tag.html","title":"entity - Tag","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Tag\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tag.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createDate\n                            \n                            \n                                    \n                                deletedAt\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                featuredImage\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                posts\n                            \n                            \n                                    \n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                updateDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        featuredImage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, post => post.tags, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 512, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:62\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from 'src/posts/post.entity';\nimport {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  ManyToMany,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@Entity()\nexport class Tag {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 256,\n    nullable: false,\n    unique: true,\n  })\n  name: string;\n\n  @Column({\n    type: 'varchar',\n    length: 512,\n    nullable: false,\n    unique: true,\n  })\n  slug: string;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  description: string;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  schema: string;\n\n  @Column({\n    type: 'varchar',\n    length: 1024,\n    nullable: true,\n  })\n  featuredImage: string;\n\n  @ManyToMany(() => Post, (post) => post.tags, {\n    onDelete: 'CASCADE',\n  })\n  posts: Post[];\n\n  // https://orkhan.gitbook.io/typeorm/docs/decorator-reference\n  @CreateDateColumn()\n  createDate: Date;\n\n  @UpdateDateColumn()\n  updateDate: Date;\n\n  // Add this decorartor and column enables soft delete\n  @DeleteDateColumn()\n  deletedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TagsController.html":{"url":"controllers/TagsController.html","title":"controller - TagsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TagsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tags.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tags\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                create\n                            \n                            \n                                    \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    \n                                    Public\n                                    Async\n                                softDelete\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createTagDto: CreateTagDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createTagDto\n                                            \n                                                            CreateTagDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete()\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Async\n                        softDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    softDelete(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('soft-delete')\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  ParseIntPipe,\n  Post,\n  Query,\n} from '@nestjs/common';\nimport { TagsService } from './providers/tags.service';\nimport { CreateTagDto } from './dtos/create-tag.dto';\n\n@Controller('tags')\nexport class TagsController {\n  constructor(\n    /**\n     * Inject tag service\n     */\n    private readonly tagsService: TagsService,\n  ) {}\n\n  @Post()\n  public create(@Body() createTagDto: CreateTagDto) {\n    return this.tagsService.create(createTagDto);\n  }\n\n  @Delete()\n  public async delete(@Query('id', ParseIntPipe) id: number) {\n    return this.tagsService.delete(id);\n  }\n\n  // /tags/soft-delete\n  @Delete('soft-delete')\n  public async softDelete(@Query('id', ParseIntPipe) id: number) {\n    return this.tagsService.softRemove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TagsModule.html":{"url":"modules/TagsModule.html","title":"module - TagsModule","body":"\n                   \n\n\n\n\n    Modules\n    TagsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_exports\n\n\n\ncluster_TagsModule_providers\n\n\n\n\nTagsService \n\nTagsService \n\n\n\nTagsModule\n\nTagsModule\n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tags/tags.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TagsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TagsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TagsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TagsController } from './tags.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Tag } from './tag.entity';\nimport { TagsService } from './providers/tags.service';\n\n@Module({\n  controllers: [TagsController],\n  imports: [TypeOrmModule.forFeature([Tag])],\n  providers: [TagsService],\n  exports: [TagsService],\n})\nexport class TagsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TagsService.html":{"url":"injectables/TagsService.html","title":"injectable - TagsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TagsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/providers/tags.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                findMultipleTags\n                            \n                            \n                                    Public\n                                    Async\n                                softRemove\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tagsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/tags/providers/tags.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tagsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createTagDto: CreateTagDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:20\n                        \n                    \n\n\n            \n                \n                        Creating new tags\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createTagDto\n                                            \n                                                            CreateTagDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findMultipleTags\n                        \n                    \n                \n            \n            \n                \n                        \n                    findMultipleTags(tags: number[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tags\n                                            \n                                                        number[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        softRemove\n                        \n                    \n                \n            \n            \n                \n                        \n                    softRemove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateTagDto } from '../dtos/create-tag.dto';\nimport { In, Repository } from 'typeorm';\nimport { Tag } from '../tag.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n//npx nest generate service tags/providers/tags --flat --no-spec\n@Injectable()\nexport class TagsService {\n  constructor(\n    /**\n     * Inject tagsRepository\n     */\n    @InjectRepository(Tag)\n    private readonly tagsRepository: Repository,\n  ) {}\n  /**\n   * Creating new tags\n   */\n  public async create(createTagDto: CreateTagDto) {\n    const tag = this.tagsRepository.create(createTagDto);\n\n    return await this.tagsRepository.save(tag);\n  }\n\n  public async findMultipleTags(tags: number[]) {\n    const results = await this.tagsRepository.find({\n      where: {\n        id: In(tags), // Finds all the tags with ids within this array\n      },\n    });\n\n    return results;\n  }\n\n  public async delete(id: number) {\n    // Check if the tag exists before deleting\n    const tag = await this.tagsRepository.findOne({\n      where: { id },\n    });\n\n    if (!tag) {\n      return { deleted: false, message: 'Tag not found' };\n    }\n\n    // Proceed with deletion\n    await this.tagsRepository.delete(id);\n\n    return { deleted: true, id };\n  }\n\n  public async softRemove(id: number) {\n    // Soft delete creates a timestamp and not remove it from DB\n    await this.tagsRepository.softDelete(id);\n\n    return { deleted: true, id };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                posts\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, post => post.author)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:38\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from 'src/posts/post.entity';\nimport { Column, Entity, OneToMany, PrimaryGeneratedColumn } from 'typeorm';\n\n// Column typees differ if we're using SQL or PostgreSQL check typeorm website\n// Should match the DTO\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n  })\n  firstName: string;\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: true,\n  })\n  lastName: string;\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n    unique: true,\n  })\n  email: string;\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n  })\n  password: string;\n\n  // A user can have many posts\n  @OneToMany(() => Post, (post) => post.author)\n  posts: Post[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUsers\n                            \n                            \n                                    \n                                    Public\n                                patchUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUsers(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getUserParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id?')@ApiOperation({summary: 'Fetches a list of registered users on the application'})@ApiResponse({status: 200, description: 'Users fetched successfully based on the query'})@ApiQuery({name: 'limit', type: 'number', required: false, description: 'The number of entries returned per query', example: 10})@ApiQuery({name: 'page', type: 'number', required: false, description: 'The position of the page number that you want the API to return', example: 1})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        patchUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchUser(patchUserDto: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PatchUserDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        /* eslint-disable @typescript-eslint/no-unused-vars */\nimport {\n  Body,\n  Headers,\n  Controller,\n  Get,\n  Param,\n  Post,\n  Query,\n  ParseIntPipe,\n  DefaultValuePipe,\n  ValidationPipe,\n  Patch,\n} from '@nestjs/common';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { GetUsersParamDto } from './dtos/get-users-param.dto';\nimport { PatchUserDto } from './dtos/patch-user.dto';\nimport { UsersService } from './providers/users.service';\nimport { ApiOperation, ApiQuery, ApiResponse, ApiTags } from '@nestjs/swagger';\n\n// To make parameters optional, use the ? operator\n@Controller('users')\n@ApiTags('Users')\nexport class UsersController {\n  constructor(\n    // Injecting user service\n    private readonly usersService: UsersService,\n  ) {}\n  @Get('/:id?')\n  @ApiOperation({\n    summary: 'Fetches a list of registered users on the application',\n  })\n  // We can add multiple api response\n  @ApiResponse({\n    status: 200,\n    description: 'Users fetched successfully based on the query',\n  })\n  @ApiQuery({\n    name: 'limit',\n    type: 'number',\n    required: false,\n    description: 'The number of entries returned per query',\n    example: 10,\n  })\n  @ApiQuery({\n    name: 'page',\n    type: 'number',\n    required: false,\n    description:\n      'The position of the page number that you want the API to return',\n    example: 1,\n  })\n  public getUsers(\n    @Param() getUserParamDto: GetUsersParamDto,\n    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\n  ) {\n    return this.usersService.findAll(getUserParamDto, limit, page);\n  }\n\n  @Post()\n  public createUsers(\n    // Without the global validation\n    // @Body(new ValidationPipe()) createUserDto: CreateUserDto,\n\n    // With\n    @Body() createUserDto: CreateUserDto,\n  ) {\n    return this.usersService.createUser(createUserDto);\n  }\n  @Patch()\n  public patchUser(@Body() patchUserDto: PatchUserDto) {\n    return patchUserDto;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './providers/users.service';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './user.entity';\nimport { ConfigModule } from '@nestjs/config';\nimport profileConfig from './config/profile.config';\n\n// We can only export providers, never controllers\n@Module({\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService],\n  // imports: [AuthModule], will cause a circular dependency\n  imports: [\n    forwardRef(() => AuthModule),\n    TypeOrmModule.forFeature([User]),\n    ConfigModule.forFeature(profileConfig),\n  ],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for managing user-related operations in the Users table.\nThis service interacts with the Users table to perform CRUD operations.\nIt also uses the AuthService to handle authentication-related checks and\ndependencies while ensuring circular dependencies are avoided.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    Public\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findOneById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, usersRepository: Repository, profileConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/users.service.ts:19\n                            \n                        \n\n                \n                    \n                            Constructs the UsersService with necessary dependencies.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService for handling authentication-related operations.\n\n\n                                                        \n                                                \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        profileConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:85\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(getUserParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:55\n                        \n                    \n\n\n            \n                \n                        Retrieves a list of all users from the database.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing filters for user retrieval.\n\n\n                                            \n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe maximum number of users to return.\n\n\n                                            \n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe page number for pagination.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                Array of user objects containing basic details.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:80\n                        \n                    \n\n\n            \n                \n                        Retrieves a single user by their unique identifier.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe unique ID of the user to retrieve.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                A user object containing their details.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { GetUsersParamDto } from '../dtos/get-users-param.dto';\nimport { AuthService } from 'src/auth/providers/auth.service';\nimport { Repository } from 'typeorm';\nimport { User } from '../user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { CreateUserDto } from '../dtos/create-user.dto';\nimport { ConfigService, ConfigType } from '@nestjs/config';\nimport profileConfig from '../config/profile.config';\n\n/**\n * Service for managing user-related operations in the Users table.\n *\n * This service interacts with the Users table to perform CRUD operations.\n * It also uses the AuthService to handle authentication-related checks and\n * dependencies while ensuring circular dependencies are avoided.\n */\n@Injectable()\nexport class UsersService {\n  /**\n   * Constructs the UsersService with necessary dependencies.\n   *\n   * @param {AuthService} authService - Service for handling authentication-related operations.\n   */\n  constructor(\n    @Inject(forwardRef(() => AuthService))\n    private readonly authService: AuthService,\n\n    /**\n     * Injecting usersRepository\n     */\n    @InjectRepository(User)\n    private usersRepository: Repository,\n\n    // /**\n    //  * Injecting ConfigService\n    //  */\n    // private readonly configService: ConfigService,\n\n    /**\n     * Inject profileConfig\n     */\n    @Inject(profileConfig.KEY)\n    private readonly profileConfiguration: ConfigType,\n  ) {}\n\n  /**\n   * Retrieves a list of all users from the database.\n   *\n   * @param {GetUsersParamDto} getUserParamDto - DTO containing filters for user retrieval.\n   * @param {number} limit - The maximum number of users to return.\n   * @param {number} page - The page number for pagination.\n   * @returns {Array} Array of user objects containing basic details.\n   */\n  public findAll(\n    getUserParamDto: GetUsersParamDto,\n    limit: number,\n    page: number,\n  ) {\n    // Test the new config\n    console.log(this.profileConfiguration);\n    return [\n      {\n        firstName: 'John',\n        email: 'john@doe.com',\n      },\n      {\n        firstName: 'Alice',\n        email: 'alice@doe.com',\n      },\n    ];\n  }\n\n  /**\n   * Retrieves a single user by their unique identifier.\n   *\n   * @param {number} id - The unique ID of the user to retrieve.\n   * @returns {{ id: number; firstName: string; email: string }} A user object containing their details.\n   */\n  public async findOneById(id: number) {\n    return await this.usersRepository.findOneBy({\n      id,\n    });\n  }\n  public async createUser(createUserDto: CreateUserDto) {\n    // Check if email is unique\n    const existingUser = await this.usersRepository.findOne({\n      where: { email: createUserDto.email },\n    });\n    // Handle exception\n\n    // Create a new user\n    let newUser = this.usersRepository.create(createUserDto);\n\n    newUser = await this.usersRepository.save(newUser);\n\n    return newUser;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.module.ts\n            \n            variable\n            ENV\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/providers/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/meta-options/dtos/create-post-meta-options.dto.ts\n            \n            class\n            CreatePostMetaOptionsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/meta-options/meta-option.entity.ts\n            \n            entity\n            MetaOption\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/meta-options/meta-options.controller.ts\n            \n            controller\n            MetaOptionsController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/meta-options/providers/meta-options.service.ts\n            \n            injectable\n            MetaOptionsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dto/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/posts/dto/patch-post.dto.ts\n            \n            class\n            PatchPostDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/post.entity.ts\n            \n            entity\n            Post\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/posts/providers/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/tags/dtos/create-tag.dto.ts\n            \n            class\n            CreateTagDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tags/providers/tags.service.ts\n            \n            injectable\n            TagsService\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                src/tags/tag.entity.ts\n            \n            entity\n            Tag\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tags/tags.controller.ts\n            \n            controller\n            TagsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dtos/get-users-param.dto.ts\n            \n            class\n            GetUsersParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/providers/users.service.ts\n            \n            injectable\n            UsersService\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/users/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.23\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.2.2\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/mapped-types : ^2.0.5\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.3.0\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            pg : ^8.11.5\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            PostStatus   (src/.../post-status.enum.ts)\n                        \n                        \n                            PostType   (src/.../post-type.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/posts/enums/post-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PostStatus\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n            \n        \n\n    src/posts/enums/post-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PostType\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\nCompodoc Documentation\nScript\nExample :$ npm run docLet me name this as doc.\nIt should be a comma over here.\nNow this script itself a little bit verbose and lengthy, and I'll try to explain all the parts of the\nscript as we go.\nSo first of all, we need to use NPCs and along with Compo Doc in order to generate the Compo Doc documentation.\nSo we use at the rate compo doc, which is the name of the package.\nSo compo doc slash compo doc.\nSo this basically triggers the compo doc package for us.\nAnd then we need to provide it certain configurations.\nThe first one is the path to the pts config file.\nSo hyphen path to the pts config file TTS config file is within the root of the project itself.\nSo we use tsconfig.json.\nSo it's going to pick up this particular config file which is there in the root of our project.\nSo this particular TTS config file over here.\nNow once we have provided the TTS config file, the next flag that we want to add is the s flag.\nNow what this flag does is that it instructs compared to serve generated documentation on a port.\nNow, having said that, I want to have a specific port number as well.\nSo I use hyphen hyphen port.\nAnd let's serve the documentation on port 3001.\nWith that, I also want to enable Compo doc to watch for changes within my code.\nSo whenever I'm writing any new code, it should watch for changes and regenerate the documentation\nwhenever needed.\nFinally, I want to give it a specific directory for generating the documentation so we can use a hyphen\nd flag, which instructs combo doc to generate the documentation within a specific directory, which\nwe can pass as an argument.\nSo here I'm saying within the root of my project, just use the documentation directory to generate\nyour documentation.\nThe details can be seen at localhost:3001\nAlways define both sides of the relationships in many to many relationships i.e tags and posts\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MetaOptionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TagsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_exports\n\n\n\ncluster_TagsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nPostsModule -->\n\nTagsModule->PostsModule\n\n\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nTagsService \n\nTagsService \n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        6 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    6 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    7 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ENV   (src/.../app.module.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENV\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.NODE_ENV\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
