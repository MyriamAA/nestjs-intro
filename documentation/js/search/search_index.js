var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.083,1,1.858]],["body/controllers/AppController.html",[0,1.8,1,3.088,2,1.479,3,0.535,4,0.461,5,0.39,6,3.37,7,0.652,8,0.039,9,0.982,10,2.645,11,3.37,12,0.535,13,0.026,14,4.094,15,1.814,16,0.032,17,0.032]],["title/modules/AppModule.html",[18,1.083,19,1.858]],["body/modules/AppModule.html",[1,2.864,2,1.469,3,0.391,4,0.336,5,0.285,7,0.7,8,0.039,9,0.716,10,2.637,11,2.459,12,0.391,13,0.019,16,0.026,17,0.026,18,1.67,19,3.603,20,1.324,21,1.324,22,1.644,23,1.644,24,1.324,25,2.543,26,1.644,27,2.459,28,2.459,29,2.459,30,2.637,31,2.946,32,2.372,33,2.237,34,1.644,35,1.472,36,2.987,37,2.52,38,2.987,39,2.987,40,2.987,41,2.987,42,2.987,43,2.987,44,2.987]],["title/injectables/AppService.html",[10,1.477,45,1.083]],["body/injectables/AppService.html",[3,0.515,4,0.443,5,0.375,7,0.515,8,0.038,9,0.944,10,2.396,12,0.515,13,0.025,16,0.031,17,0.031,45,1.758,46,2.168,47,3.242,48,0.847,49,2.396,50,5.512,51,1.163,52,3.938,53,1.94,54,1.758,55,1.94,56,3.938,57,3.938]],["title/controllers/AuthController.html",[0,1.083,58,1.858]],["body/controllers/AuthController.html",[0,1.727,2,1.384,3,0.501,4,0.431,5,0.365,7,0.625,8,0.039,9,0.918,12,0.501,13,0.025,15,1.697,16,0.031,17,0.031,58,2.963,59,3.152,60,2.707,61,3.684,62,2.309,63,3.152,64,2.374,65,2.374,66,3.152,67,3.829,68,1.886,69,1.886,70,1.697,71,1.886]],["title/modules/AuthModule.html",[18,1.083,30,1.477]],["body/modules/AuthModule.html",[2,1.521,3,0.411,4,0.354,5,0.3,7,0.663,8,0.039,9,0.754,12,0.411,13,0.02,16,0.027,17,0.027,18,1.831,20,1.394,21,1.394,22,1.732,23,1.732,24,1.394,25,2.611,26,2.611,30,2.734,32,2.102,33,2.317,34,1.732,35,1.55,37,2.609,58,2.941,61,2.224,62,2.597,63,2.59,64,1.95,65,1.95,72,2.59,73,2.59,74,2.59,75,3.146,76,2.609,77,3.146,78,2.59,79,2.59,80,1.95,81,1.95]],["title/injectables/AuthService.html",[45,1.083,62,1.329]],["body/injectables/AuthService.html",[3,0.361,4,0.311,5,0.263,7,0.503,8,0.039,9,0.661,12,0.361,13,0.018,15,1.222,16,0.025,17,0.025,45,1.39,46,1.518,48,0.593,49,1.896,51,1.308,53,1.896,54,1.937,55,2.183,62,1.705,64,1.71,65,1.71,66,2.271,68,1.896,69,1.359,70,1.705,71,1.359,76,1.71,80,1.71,81,1.71,82,2.271,83,2.875,84,3.947,85,4.431,86,2.271,87,2.143,88,2.758,89,2.118,90,1.896,91,1.136,92,1.539,93,2.758,94,2.758,95,3.848,96,3.648,97,2.758,98,1.95,99,2.271,100,2.271,101,2.758,102,2.758,103,2.439,104,1.95,105,2.271,106,2.271,107,2.271,108,2.758,109,1.71,110,2.758,111,2.758,112,2.758,113,2.271]],["title/classes/CreatePostDto.html",[13,0.019,114,1.65]],["body/classes/CreatePostDto.html",[3,0.186,4,0.16,5,0.136,7,0.527,8,0.039,12,0.186,13,0.019,16,0.015,17,0.015,48,0.307,51,1.395,54,1.842,91,1.56,92,1.973,113,2.806,114,1.282,115,0.632,116,3.419,117,1.007,118,1.511,119,2.43,120,2.952,121,2.952,122,3.654,123,2.952,124,2.952,125,3.757,126,2.087,127,2.952,128,2.43,129,2.093,130,1.425,131,1.425,132,1.425,133,1.425,134,2.113,135,1.425,136,2.328,137,1.917,138,1.917,139,2.328,140,1.425,141,1.425,142,1.425,143,2.328,144,1.701,145,2.806,146,3.409,147,1.308,148,1.443,149,1.917,150,1.425,151,1.425,152,2.328,153,1.917,154,2.328,155,2.328,156,2.328,157,2.5,158,2.328,159,2.328,160,1.425,161,1.425,162,1.173,163,2.328,164,2.328,165,2.952,166,1.917,167,2.328,168,1.425,169,1.425,170,1.425,171,3.409,172,3.409,173,1.917,174,2.328,175,2.328,176,2.328,177,1.917,178,2.328,179,2.952,180,1.425,181,3.093,182,1.917,183,1.917,184,1.917,185,1.425,186,1.425,187,1.425,188,1.425,189,3.409,190,1.425,191,1.425,192,1.425,193,2.952,194,1.425,195,2.328,196,2.328,197,2.329,198,3.007,199,2.656,200,2.328,201,1.917,202,1.173,203,2.328,204,0.702,205,2.328,206,1.425,207,1.425,208,1.007,209,1.007,210,1.425,211,3.32,212,3.32,213,0.702,214,1.007,215,1.425,216,2.328,217,1.173,218,1.425,219,1.425,220,1.173,221,1.425,222,1.425,223,1.425,224,1.173,225,0.883,226,1.007,227,1.425,228,1.425,229,1.173,230,2.43,231,1.173,232,1.425,233,1.425,234,1.425]],["title/classes/CreatePostMetaOptionsDto.html",[13,0.019,134,1.858]],["body/classes/CreatePostMetaOptionsDto.html",[3,0.47,4,0.405,5,0.343,7,0.47,8,0.038,12,0.47,13,0.03,16,0.03,17,0.03,48,0.774,51,1.357,54,1.66,91,1.357,115,1.594,116,3.578,118,2.036,129,2.036,134,2.848,147,2.244,197,3.307,199,3.247,204,1.772,209,3.578,225,3.138,226,3.578,235,2.961,236,3.596,237,3.596,238,3.596]],["title/classes/CreateUserDto.html",[13,0.019,239,1.65]],["body/classes/CreateUserDto.html",[3,0.356,4,0.306,5,0.259,7,0.356,8,0.038,12,0.356,13,0.025,16,0.025,17,0.025,48,0.585,51,1.408,54,1.969,91,1.408,92,1.524,96,3.622,98,3.11,115,1.206,118,1.689,129,2.112,173,3.138,197,2.955,198,2.695,199,3.369,201,2.241,202,2.241,204,1.341,224,3.138,239,2.099,240,4.131,241,1.924,242,3.11,243,4.399,244,2.722,245,2.722,246,2.722,247,2.722,248,2.722,249,2.722,250,2.722,251,4.767,252,3.812,253,3.812,254,3.812,255,3.812,256,3.812,257,3.812,258,4.282,259,3.812,260,1.878,261,3.812,262,3.812,263,2.722,264,3.812,265,2.722,266,3.812,267,2.722,268,2.722]],["title/classes/GetUsersParamDto.html",[13,0.019,269,1.65]],["body/classes/GetUsersParamDto.html",[3,0.445,4,0.383,5,0.324,7,0.645,8,0.039,12,0.445,13,0.032,16,0.029,17,0.029,48,0.732,51,1.005,91,1.456,92,1.773,103,2.441,115,1.509,118,1.965,129,1.509,144,1.361,157,2.749,162,2.803,198,3.135,204,1.677,212,3.651,213,1.677,214,2.406,260,2.43,269,2.441,270,3.651,271,2.441,272,2.803,273,3.83,274,3.651,275,3.404,276,3.404,277,3.651,278,2.803]],["title/classes/PatchPostDto.html",[13,0.019,279,1.858]],["body/classes/PatchPostDto.html",[3,0.453,4,0.39,5,0.33,7,0.65,8,0.039,12,0.453,13,0.029,16,0.029,17,0.029,48,0.744,51,1.022,91,1.022,114,1.905,115,1.534,117,2.446,118,1.986,129,1.534,144,1.384,147,1.986,153,2.849,197,2.779,204,1.705,208,2.446,211,3.69,213,1.705,260,2.208,273,3.85,277,3.69,279,2.779,280,3.69,281,3.69,282,4.482,283,4.482,284,3.461,285,3.461,286,2.849,287,2.849,288,2.849]],["title/classes/PatchUserDto.html",[13,0.019,289,1.858]],["body/classes/PatchUserDto.html",[3,0.518,4,0.446,5,0.377,7,0.638,8,0.038,12,0.518,13,0.026,16,0.032,17,0.032,103,2.178,115,1.754,208,3.448,230,3.258,239,2.178,241,2.797,281,4.016,286,3.258,289,3.024,290,3.258,291,4.878,292,3.258,293,3.258,294,3.258,295,3.957,296,3.957,297,3.258]],["title/controllers/PostsController.html",[0,1.083,298,1.858]],["body/controllers/PostsController.html",[0,0.787,2,0.787,3,0.285,4,0.245,5,0.208,7,0.601,8,0.039,9,0.522,12,0.285,13,0.014,15,0.965,16,0.021,17,0.021,48,0.468,49,1.599,51,1.145,53,1.911,54,1.401,55,1.073,60,1.54,68,1.073,69,1.073,70,0.965,71,1.073,83,2.885,89,2.135,90,1.911,91,1.145,92,1.551,114,2.652,126,2.294,129,1.719,144,1.718,147,2.323,213,1.073,231,2.671,279,2.664,287,2.671,288,2.671,298,2.011,299,1.793,300,2.178,301,3.245,302,3.245,303,3.245,304,2.178,305,3.245,306,2.011,307,4.297,308,3.245,309,5.128,310,3.538,311,3.245,312,2.178,313,2.178,314,3.245,315,2.178,316,3.245,317,2.178,318,2.671,319,2.178,320,2.671,321,3.245,322,2.178,323,2.178,324,3.245,325,1.793,326,1.793,327,2.671,328,1.911,329,1.793,330,3.192,331,3.192,332,1.793,333,2.178,334,2.178,335,2.178,336,2.178,337,2.178,338,2.178,339,2.671,340,3.245,341,2.178,342,2.178,343,2.178,344,2.178]],["title/modules/PostsModule.html",[18,1.083,31,1.65]],["body/modules/PostsModule.html",[2,1.545,3,0.421,4,0.362,5,0.307,7,0.696,8,0.039,9,0.772,12,0.421,13,0.021,16,0.028,17,0.028,18,1.923,20,1.427,21,1.427,22,1.772,23,1.772,24,1.427,25,2.642,26,2.353,31,3.12,32,2.424,33,2.353,34,1.772,35,1.586,37,2.65,70,1.427,78,2.65,225,1.996,271,1.772,298,2.975,328,2.695,329,2.65,345,2.65,346,3.219,347,2.65,348,3.219,349,3.219,350,3.219,351,3.219]],["title/injectables/PostsService.html",[45,1.083,328,1.477]],["body/injectables/PostsService.html",[3,0.394,4,0.339,5,0.287,7,0.534,8,0.039,9,0.722,12,0.394,13,0.019,15,1.333,16,0.026,17,0.026,45,1.476,46,1.656,48,0.647,49,2.012,51,1.206,53,1.482,54,1.676,55,1.482,68,2.012,69,1.482,70,1.333,71,1.482,83,2.553,86,2.477,87,2.145,89,2.249,90,2.012,91,1.206,92,1.633,100,2.477,103,2.952,109,1.865,119,4.095,128,4.095,318,2.477,328,2.012,352,2.477,353,3.363,354,3.009,355,4.085,356,3.009,357,3.009,358,4.095,359,4.085]],["title/controllers/UsersController.html",[0,1.083,360,1.858]],["body/controllers/UsersController.html",[0,0.596,2,0.596,3,0.216,4,0.186,5,0.157,7,0.564,8,0.039,9,0.396,12,0.216,13,0.011,15,0.731,16,0.017,17,0.017,48,0.355,49,1.29,51,0.962,53,1.605,54,0.596,55,1.994,60,1.166,68,0.813,69,0.813,70,0.731,71,0.813,83,2.657,87,1.303,89,2.042,90,1.994,91,1.334,92,1.484,103,0.908,104,1.166,109,1.022,126,1.166,129,1.444,137,3.054,138,3.054,144,1.723,147,1.644,148,2.905,157,2.3,166,1.358,177,1.358,213,0.813,229,1.358,239,2.657,242,1.166,260,2.602,269,2.042,271,2.486,289,2.905,294,2.156,306,1.624,310,1.358,325,2.156,326,2.156,327,2.682,330,2.156,331,2.156,332,1.358,339,1.358,360,1.624,361,1.358,362,3.258,363,3.258,364,2.619,365,1.649,366,4.047,367,1.649,368,1.649,369,3.547,370,1.649,371,2.619,372,2.619,373,2.619,374,1.649,375,2.619,376,2.619,377,2.619,378,2.156,379,1.649,380,2.619,381,2.619,382,2.619,383,3.71,384,1.649,385,2.619,386,2.156,387,3.258,388,2.619,389,1.649,390,2.156,391,1.649,392,1.649,393,1.649,394,1.649,395,1.358,396,1.649,397,1.649,398,1.649,399,3.258,400,1.649,401,2.619,402,1.649,403,1.358,404,1.358,405,1.649,406,1.358,407,3.258,408,1.649,409,1.358,410,1.649,411,1.649,412,1.649,413,1.649,414,1.358,415,1.649,416,1.649,417,1.649,418,1.649,419,1.649,420,1.649,421,1.649,422,1.649,423,1.649,424,1.649,425,1.649,426,1.649,427,1.649,428,1.649,429,1.649]],["title/modules/UsersModule.html",[18,1.083,32,1.329]],["body/modules/UsersModule.html",[2,1.714,3,0.411,4,0.354,5,0.3,7,0.663,8,0.039,9,0.754,12,0.551,13,0.02,16,0.027,17,0.027,18,1.714,20,1.394,21,1.394,22,1.732,23,1.732,24,1.394,25,2.788,26,2.611,30,2.337,32,2.459,33,2.317,34,1.732,35,1.55,37,2.609,76,2.609,79,2.59,80,1.95,81,1.95,87,2.343,360,2.941,406,2.59,430,2.59,431,2.59,432,2.59,433,3.146,434,3.146,435,3.146,436,3.146]],["title/injectables/UsersService.html",[45,1.083,87,1.199]],["body/injectables/UsersService.html",[3,0.308,4,0.265,5,0.224,7,0.53,8,0.039,9,0.564,12,0.308,13,0.026,15,1.042,16,0.022,17,0.022,45,1.241,46,1.294,48,0.506,49,1.691,51,1.197,53,1.691,54,1.714,55,1.691,61,2.427,62,2.266,68,1.691,69,1.158,70,1.521,71,1.158,76,1.458,80,1.458,81,1.458,83,2.726,84,1.936,87,1.373,89,2.232,90,1.998,91,1.197,92,1.621,98,3.152,99,1.936,105,1.936,106,1.936,109,1.458,144,0.94,148,2.514,242,3.152,260,2.519,269,2.454,271,2.232,273,2.866,278,1.936,353,3.338,369,3.338,390,2.826,403,1.936,404,1.936,437,1.936,438,3.433,439,2.826,440,3.433,441,3.433,442,3.433,443,2.351,444,2.351,445,2.351,446,2.351,447,3.433,448,2.351,449,2.351,450,2.351,451,2.351,452,2.351,453,3.433,454,3.433]],["title/coverage.html",[455,2.88]],["body/coverage.html",[0,1.776,1,1.812,5,0.279,6,2.407,8,0.038,10,1.44,13,0.034,16,0.026,17,0.026,24,1.296,45,1.776,47,2.407,58,1.812,59,2.407,62,1.296,82,2.407,87,1.169,91,0.863,114,1.609,116,2.831,117,2.831,134,1.812,147,1.296,209,2.067,235,2.407,239,1.609,240,2.407,241,2.831,269,1.609,270,2.407,271,1.609,272,2.407,279,1.812,280,2.407,289,1.812,290,2.407,298,1.812,299,2.407,306,1.812,328,1.44,352,2.407,360,1.812,361,2.407,437,2.407,439,2.407,455,2.067,456,2.407,457,2.924,458,2.924,459,5.866,460,4.915,461,4.569,462,4.569,463,2.407,464,2.924,465,4.006,466,2.924,467,2.924,468,2.924,469,2.924,470,2.924]],["title/dependencies.html",[21,1.596,471,1.775]],["body/dependencies.html",[8,0.039,9,0.94,13,0.031,16,0.031,17,0.031,21,1.737,204,1.931,213,1.931,214,2.771,292,3.227,293,3.227,472,3.92,473,3.92,474,5.266,475,3.92,476,3.92,477,3.92,478,3.92,479,3.92,480,3.92,481,3.92,482,3.92,483,3.92,484,3.92,485,3.92,486,3.92]],["title/miscellaneous/enumerations.html",[487,1.557,488,2.965]],["body/miscellaneous/enumerations.html",[8,0.038,16,0.03,17,0.03,48,0.801,122,3.868,147,2.082,148,2.913,149,3.868,181,3.868,182,3.868,183,3.868,184,3.868,217,3.868,220,3.868,226,4.13,487,2.31,488,3.067,489,4.698,490,4.698,491,4.698,492,4.698]],["title/miscellaneous/functions.html",[487,1.557,493,2.965]],["body/miscellaneous/functions.html",[8,0.034,16,0.034,17,0.034,24,2.481,48,0.972,463,3.72,487,2.801,493,3.72,494,4.518]],["title/index.html",[48,0.54,495,2.512,496,2.512]],["body/index.html",[4,0.157,5,0.381,8,0.034,16,0.015,17,0.015,35,1.967,64,1.804,65,1.804,90,1.128,104,0.987,107,3.288,144,0.558,145,1.15,157,2.087,225,0.866,258,1.15,260,0.688,274,2.396,297,1.885,306,0.866,320,1.15,358,1.885,378,1.15,386,2.772,395,1.15,409,3.288,414,3.288,455,0.987,456,3.957,471,1.619,497,1.396,498,1.396,499,2.911,500,2.29,501,1.396,502,1.396,503,1.396,504,1.396,505,2.29,506,1.396,507,1.396,508,4.218,509,1.396,510,4.403,511,1.396,512,4.218,513,1.396,514,1.396,515,2.911,516,2.29,517,1.396,518,2.29,519,1.396,520,2.911,521,1.396,522,1.396,523,1.396,524,1.396,525,1.396,526,1.396,527,3.367,528,4.403,529,2.29,530,1.396,531,1.396,532,1.396,533,1.396,534,2.29,535,3.367,536,1.396,537,2.29,538,1.396,539,2.29,540,3.993,541,3.367,542,1.396,543,2.29,544,1.396,545,1.396,546,1.396,547,1.396,548,3.367,549,1.396,550,1.396,551,1.396,552,1.396,553,2.29,554,1.396,555,1.396,556,1.396,557,1.396,558,1.396,559,2.29,560,1.396,561,1.396,562,1.396,563,2.29,564,1.396,565,1.396,566,2.772,567,2.29,568,1.396,569,1.396,570,1.396,571,1.396,572,1.396,573,1.396,574,1.396,575,1.396,576,2.29,577,1.396,578,1.396,579,1.396,580,1.396,581,2.911,582,1.396,583,1.396,584,2.911,585,1.396,586,1.396,587,1.396,588,2.29,589,1.396,590,1.396,591,1.396,592,1.396,593,2.29,594,1.396,595,1.396,596,1.396,597,2.29,598,2.29,599,1.396,600,1.396,601,1.396,602,1.396,603,1.396,604,1.396,605,1.396,606,1.396,607,1.396,608,3.367,609,1.396,610,1.15,611,1.396,612,1.396,613,1.396,614,1.396,615,1.396,616,1.396,617,1.15,618,1.396,619,2.911,620,4.559,621,1.396,622,2.29,623,3.367,624,2.29,625,1.396,626,1.396,627,1.396,628,1.396,629,1.396,630,1.396,631,1.396,632,1.396,633,1.396,634,2.29,635,1.396,636,1.396,637,4.218,638,1.396,639,1.396,640,1.396,641,1.396,642,1.396,643,1.396,644,1.396,645,1.396,646,2.29,647,2.29,648,3.993,649,3.367,650,2.911,651,3.367,652,2.911,653,1.396,654,1.396,655,1.396,656,1.396,657,1.396,658,2.29,659,1.396,660,1.396,661,1.396,662,3.367,663,1.396,664,2.29,665,1.396,666,2.29,667,1.396,668,3.367,669,1.396,670,1.396,671,1.396,672,1.396,673,1.396,674,2.29,675,2.29,676,2.29,677,1.396,678,1.396,679,1.396,680,1.396,681,1.396,682,2.911,683,1.396,684,1.396,685,1.396,686,1.396,687,1.396,688,1.396,689,1.396,690,1.396,691,1.396]],["title/modules.html",[20,1.806]],["body/modules.html",[8,0.033,16,0.033,17,0.033,19,2.615,20,1.87,30,2.079,31,2.322,32,1.87,566,4.646,692,5.643,693,5.643,694,5.643]],["title/overview.html",[695,3.355]],["body/overview.html",[2,1.124,8,0.038,10,2.324,16,0.027,17,0.027,18,1.124,19,3.569,20,1.378,21,1.378,22,1.712,23,1.712,24,1.378,25,1.712,26,1.712,27,2.561,28,2.561,29,2.561,30,2.668,31,3.046,32,2.452,33,2.3,34,1.712,35,1.532,46,1.712,62,2.452,72,2.561,73,2.561,74,2.561,87,2.213,115,1.378,328,2.324,345,2.561,347,2.561,430,2.561,431,2.561,432,2.561,695,2.561,696,4.717,697,3.11]],["title/properties.html",[118,1.596,471,1.775]],["body/properties.html",[8,0.038,16,0.034,17,0.034,118,1.97,144,1.778,610,3.66,617,3.66,698,4.445,699,4.445,700,4.445]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":459,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":699,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":481,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":484,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":480,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":460,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":466,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":461,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":465,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":462,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":467,"title":{},"body":{"coverage.html":{}}}],["03",{"_index":159,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1",{"_index":388,"title":{},"body":{"controllers/UsersController.html":{}}}],["1.1.23",{"_index":473,"title":{},"body":{"dependencies.html":{}}}],["1/4",{"_index":469,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":416,"title":{},"body":{"controllers/UsersController.html":{}}}],["10.0.0",{"_index":474,"title":{},"body":{"dependencies.html":{}}}],["10})@apiquery({name",{"_index":384,"title":{},"body":{"controllers/UsersController.html":{}}}],["1234",{"_index":278,"title":{},"body":{"classes/GetUsersParamDto.html":{},"injectables/UsersService.html":{}}}],["1234'})@isoptional()@isint()@type(undefined",{"_index":275,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["16t07:46:32+0000",{"_index":223,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["16t07:46:32+0000'})@isiso8601()@isoptional",{"_index":160,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["2",{"_index":359,"title":{},"body":{"injectables/PostsService.html":{}}}],["2.0.5",{"_index":476,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":375,"title":{},"body":{"controllers/UsersController.html":{}}}],["201",{"_index":309,"title":{},"body":{"controllers/PostsController.html":{}}}],["2024",{"_index":158,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["25",{"_index":468,"title":{},"body":{"coverage.html":{}}}],["3001",{"_index":672,"title":{},"body":{"index.html":{}}}],["4",{"_index":696,"title":{},"body":{"overview.html":{}}}],["6",{"_index":697,"title":{},"body":{"overview.html":{}}}],["7.3.0",{"_index":479,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":486,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":255,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["9",{"_index":172,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["add",{"_index":104,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["against",{"_index":234,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["alice",{"_index":453,"title":{},"body":{"injectables/UsersService.html":{}}}],["alice@doe.com",{"_index":454,"title":{},"body":{"injectables/UsersService.html":{}}}],["allowing",{"_index":554,"title":{},"body":{"index.html":{}}}],["along",{"_index":636,"title":{},"body":{"index.html":{}}}],["amazing",{"_index":603,"title":{},"body":{"index.html":{}}}],["api",{"_index":387,"title":{},"body":{"controllers/UsersController.html":{}}}],["apioperation",{"_index":330,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":305,"title":{},"body":{"controllers/PostsController.html":{}}}],["apiproperty",{"_index":211,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty()@isstring()@minlength(4)@isnotempty",{"_index":191,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiproperty({description",{"_index":153,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({enum",{"_index":143,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apipropertyoptional",{"_index":212,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional()@isarray()@isoptional()@isstring({each",{"_index":187,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apipropertyoptional()@isoptional()@isurl",{"_index":132,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apipropertyoptional({description",{"_index":162,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({type",{"_index":135,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiquery",{"_index":407,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponse",{"_index":331,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":332,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags('posts",{"_index":336,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('users",{"_index":412,"title":{},"body":{"controllers/UsersController.html":{}}}],["app.controller",{"_index":38,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":414,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["application'})@apiresponse({status",{"_index":374,"title":{},"body":{"controllers/UsersController.html":{}}}],["applications",{"_index":505,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":19,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":10,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["argument",{"_index":687,"title":{},"body":{"index.html":{}}}],["array",{"_index":136,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["auth",{"_index":61,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/UsersService.html":{}}}],["auth.controller",{"_index":77,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/providers/auth",{"_index":101,"title":{},"body":{"injectables/AuthService.html":{}}}],["authcontroller",{"_index":58,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authmodule",{"_index":30,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":610,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":62,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["avoid",{"_index":105,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["aws",{"_index":543,"title":{},"body":{"index.html":{}}}],["backers",{"_index":604,"title":{},"body":{"index.html":{}}}],["based",{"_index":378,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["basically",{"_index":641,"title":{},"body":{"index.html":{}}}],["bit",{"_index":626,"title":{},"body":{"index.html":{}}}],["blog",{"_index":307,"title":{},"body":{"controllers/PostsController.html":{}}}],["board",{"_index":596,"title":{},"body":{"index.html":{}}}],["body",{"_index":325,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["body(new",{"_index":423,"title":{},"body":{"controllers/UsersController.html":{}}}],["boolean",{"_index":94,"title":{},"body":{"injectables/AuthService.html":{}}}],["bootstrap",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":694,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":692,"title":{},"body":{"modules.html":{}}}],["building",{"_index":500,"title":{},"body":{"index.html":{}}}],["cause",{"_index":79,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["certain",{"_index":644,"title":{},"body":{"index.html":{}}}],["changes",{"_index":674,"title":{},"body":{"index.html":{}}}],["channel",{"_index":569,"title":{},"body":{"index.html":{}}}],["character",{"_index":262,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["chars",{"_index":256,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["check",{"_index":107,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["circular",{"_index":80,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["class",{"_index":13,"title":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":115,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"overview.html":{}}}],["clicks",{"_index":553,"title":{},"body":{"index.html":{}}}],["cloud",{"_index":538,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":72,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":73,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":74,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":345,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":346,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":347,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":430,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":431,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":432,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code",{"_index":297,"title":{},"body":{"classes/PatchUserDto.html":{},"index.html":{}}}],["combo",{"_index":685,"title":{},"body":{"index.html":{}}}],["come",{"_index":560,"title":{},"body":{"index.html":{}}}],["comma",{"_index":621,"title":{},"body":{"index.html":{}}}],["compared",{"_index":665,"title":{},"body":{"index.html":{}}}],["compo",{"_index":637,"title":{},"body":{"index.html":{}}}],["compodoc",{"_index":618,"title":{},"body":{"index.html":{}}}],["compodoc/compodoc",{"_index":472,"title":{},"body":{"dependencies.html":{}}}],["config",{"_index":648,"title":{},"body":{"index.html":{}}}],["configurations",{"_index":645,"title":{},"body":{"index.html":{}}}],["connect",{"_index":438,"title":{},"body":{"injectables/UsersService.html":{}}}],["console.log(createpostdto",{"_index":342,"title":{},"body":{"controllers/PostsController.html":{}}}],["console.log(createuserdto",{"_index":424,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(firstname",{"_index":426,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(headers",{"_index":425,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(patchpostsdto",{"_index":344,"title":{},"body":{"controllers/PostsController.html":{}}}],["const",{"_index":109,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":68,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":443,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(private",{"_index":14,"title":{},"body":{"controllers/AppController.html":{}}}],["constructor(usersservice",{"_index":86,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["content",{"_index":119,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":67,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('posts",{"_index":335,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('users",{"_index":411,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["courses",{"_index":575,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":455,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":208,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["created",{"_index":311,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost",{"_index":301,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(@body",{"_index":341,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(createpostdto",{"_index":304,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpostdto",{"_index":114,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["createpostmetaoptionsdto",{"_index":134,"title":{"classes/CreatePostMetaOptionsDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["creates",{"_index":231,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{}}}],["createuserdto",{"_index":239,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["createusers",{"_index":362,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusers(createuserdto",{"_index":365,"title":{},"body":{"controllers/UsersController.html":{}}}],["d",{"_index":684,"title":{},"body":{"index.html":{}}}],["date",{"_index":152,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["declarations",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorator",{"_index":227,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["decorators",{"_index":129,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["deeper",{"_index":571,"title":{},"body":{"index.html":{}}}],["defaultvaluepipe",{"_index":400,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(1",{"_index":420,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(10",{"_index":418,"title":{},"body":{"controllers/UsersController.html":{}}}],["defined",{"_index":51,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dependencies",{"_index":21,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["dependency",{"_index":81,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["deploy",{"_index":527,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":542,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":534,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":552,"title":{},"body":{"index.html":{}}}],["description",{"_index":144,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"properties.html":{}}}],["details",{"_index":689,"title":{},"body":{"index.html":{}}}],["development",{"_index":513,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":583,"title":{},"body":{"index.html":{}}}],["directory",{"_index":682,"title":{},"body":{"index.html":{}}}],["disable",{"_index":394,"title":{},"body":{"controllers/UsersController.html":{}}}],["discord",{"_index":568,"title":{},"body":{"index.html":{}}}],["dive",{"_index":570,"title":{},"body":{"index.html":{}}}],["doc",{"_index":620,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":456,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["draft",{"_index":182,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["dto",{"_index":230,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchUserDto.html":{}}}],["dto/create",{"_index":333,"title":{},"body":{"controllers/PostsController.html":{}}}],["dto/patch",{"_index":334,"title":{},"body":{"controllers/PostsController.html":{}}}],["dtos/create",{"_index":402,"title":{},"body":{"controllers/UsersController.html":{}}}],["dtos/get",{"_index":403,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/patch",{"_index":405,"title":{},"body":{"controllers/UsersController.html":{}}}],["e2e",{"_index":522,"title":{},"body":{"index.html":{}}}],["each",{"_index":189,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["efficient",{"_index":501,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":533,"title":{},"body":{"index.html":{}}}],["email",{"_index":98,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/UsersService.html":{}}}],["enable",{"_index":673,"title":{},"body":{"index.html":{}}}],["endpoint",{"_index":428,"title":{},"body":{"controllers/UsersController.html":{}}}],["ensure",{"_index":531,"title":{},"body":{"index.html":{}}}],["enterprise",{"_index":587,"title":{},"body":{"index.html":{}}}],["entire",{"_index":350,"title":{},"body":{"modules/PostsModule.html":{}}}],["entries",{"_index":380,"title":{},"body":{"controllers/UsersController.html":{}}}],["enum",{"_index":216,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["enumerations",{"_index":488,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/post",{"_index":205,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["error",{"_index":167,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["eslint",{"_index":393,"title":{},"body":{"controllers/UsersController.html":{}}}],["eslint/no",{"_index":396,"title":{},"body":{"controllers/UsersController.html":{}}}],["example",{"_index":157,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["existing",{"_index":321,"title":{},"body":{"controllers/PostsController.html":{}}}],["exists",{"_index":108,"title":{},"body":{"injectables/AuthService.html":{}}}],["experience",{"_index":573,"title":{},"body":{"index.html":{}}}],["explain",{"_index":631,"title":{},"body":{"index.html":{}}}],["export",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":478,"title":{},"body":{"dependencies.html":{}}}],["extend",{"_index":295,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["extends",{"_index":281,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["false",{"_index":138,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["fast",{"_index":546,"title":{},"body":{"index.html":{}}}],["featuredimageurl",{"_index":120,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["features",{"_index":556,"title":{},"body":{"index.html":{}}}],["fetched",{"_index":376,"title":{},"body":{"controllers/UsersController.html":{}}}],["fetches",{"_index":371,"title":{},"body":{"controllers/UsersController.html":{}}}],["few",{"_index":548,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{}}}],["finally",{"_index":680,"title":{},"body":{"index.html":{}}}],["findall",{"_index":353,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["findall(getuserparamdto",{"_index":445,"title":{},"body":{"injectables/UsersService.html":{}}}],["findall(userid",{"_index":355,"title":{},"body":{"injectables/PostsService.html":{}}}],["findonebyid",{"_index":442,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyid(id",{"_index":447,"title":{},"body":{"injectables/UsersService.html":{}}}],["first",{"_index":634,"title":{},"body":{"index.html":{}}}],["firstname",{"_index":242,"title":{},"body":{"classes/CreateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["flag",{"_index":662,"title":{},"body":{"index.html":{}}}],["flat",{"_index":102,"title":{},"body":{"injectables/AuthService.html":{}}}],["focus",{"_index":555,"title":{},"body":{"index.html":{}}}],["follow",{"_index":590,"title":{},"body":{"index.html":{}}}],["forwardref",{"_index":76,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["framework",{"_index":499,"title":{},"body":{"index.html":{}}}],["full",{"_index":586,"title":{},"body":{"index.html":{}}}],["function",{"_index":464,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":493,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":551,"title":{},"body":{"index.html":{}}}],["generate",{"_index":65,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"index.html":{}}}],["generated",{"_index":667,"title":{},"body":{"index.html":{}}}],["generating",{"_index":683,"title":{},"body":{"index.html":{}}}],["get('/:id",{"_index":413,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:id?')@apioperation({summary",{"_index":370,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:userid",{"_index":316,"title":{},"body":{"controllers/PostsController.html":{}}}],["gethello",{"_index":50,"title":{},"body":{"injectables/AppService.html":{}}}],["getposts",{"_index":302,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(@param('userid",{"_index":337,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(userid",{"_index":315,"title":{},"body":{"controllers/PostsController.html":{}}}],["getting",{"_index":495,"title":{"index.html":{}},"body":{}}],["getuserparamdto",{"_index":390,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getusers",{"_index":363,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(getuserparamdto",{"_index":368,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusersparamdto",{"_index":269,"title":{"classes/GetUsersParamDto.html":{}},"body":{"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["give",{"_index":681,"title":{},"body":{"index.html":{}}}],["global",{"_index":422,"title":{},"body":{"controllers/UsersController.html":{}}}],["go",{"_index":633,"title":{},"body":{"index.html":{}}}],["going",{"_index":655,"title":{},"body":{"index.html":{}}}],["graph",{"_index":578,"title":{},"body":{"index.html":{}}}],["grow",{"_index":600,"title":{},"body":{"index.html":{}}}],["hands",{"_index":572,"title":{},"body":{"index.html":{}}}],["handy",{"_index":561,"title":{},"body":{"index.html":{}}}],["having",{"_index":669,"title":{},"body":{"index.html":{}}}],["headers",{"_index":366,"title":{},"body":{"controllers/UsersController.html":{}}}],["hello",{"_index":56,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":576,"title":{},"body":{"index.html":{}}}],["here",{"_index":608,"title":{},"body":{"index.html":{}}}],["https://nestjs.com",{"_index":614,"title":{},"body":{"index.html":{}}}],["hyphen",{"_index":649,"title":{},"body":{"index.html":{}}}],["i'll",{"_index":629,"title":{},"body":{"index.html":{}}}],["i'm",{"_index":676,"title":{},"body":{"index.html":{}}}],["id",{"_index":273,"title":{},"body":{"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":457,"title":{},"body":{"coverage.html":{}}}],["import",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["include",{"_index":257,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["incoming",{"_index":228,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["index",{"_index":48,"title":{"index.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["information",{"_index":536,"title":{},"body":{"index.html":{}}}],["infrastructure",{"_index":558,"title":{},"body":{"index.html":{}}}],["inject",{"_index":99,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["inject(forwardref",{"_index":106,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["injectable",{"_index":45,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":46,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injecting",{"_index":69,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["install",{"_index":550,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":511,"title":{},"body":{"index.html":{}}}],["instance",{"_index":232,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["instructs",{"_index":664,"title":{},"body":{"index.html":{}}}],["interact",{"_index":579,"title":{},"body":{"index.html":{}}}],["isarray",{"_index":193,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isauth",{"_index":84,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["isemail",{"_index":264,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isemail()@isnotempty",{"_index":244,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":194,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(poststatus",{"_index":221,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttype",{"_index":218,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isint",{"_index":277,"title":{},"body":{"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{}}}],["isiso8601",{"_index":195,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isjson",{"_index":196,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isnotempty",{"_index":197,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchPostDto.html":{}}}],["iso8601",{"_index":156,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isoptional",{"_index":198,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{}}}],["isstring",{"_index":199,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{}}}],["isstring()@apipropertyoptional()@isoptional",{"_index":130,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isstring()@isnotempty",{"_index":236,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":246,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(8)@matches(/^(?=.*[a",{"_index":250,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isoptional()@minlength(3)@maxlength(96",{"_index":248,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isurl",{"_index":200,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["it's",{"_index":654,"title":{},"body":{"index.html":{}}}],["items",{"_index":139,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["itself",{"_index":624,"title":{},"body":{"index.html":{}}}],["job",{"_index":593,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":595,"title":{},"body":{"index.html":{}}}],["john",{"_index":451,"title":{},"body":{"injectables/UsersService.html":{}}}],["john@doe.com",{"_index":452,"title":{},"body":{"injectables/UsersService.html":{}}}],["join",{"_index":606,"title":{},"body":{"index.html":{}}}],["json",{"_index":164,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["kamil",{"_index":611,"title":{},"body":{"index.html":{}}}],["key",{"_index":225,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"modules/PostsModule.html":{},"index.html":{}}}],["lastname",{"_index":243,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["learn",{"_index":564,"title":{},"body":{"index.html":{}}}],["legend",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["lengthy",{"_index":628,"title":{},"body":{"index.html":{}}}],["let's",{"_index":671,"title":{},"body":{"index.html":{}}}],["letter",{"_index":259,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["letters",{"_index":175,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["license",{"_index":617,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":598,"title":{},"body":{"index.html":{}}}],["limit",{"_index":369,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["linkedin",{"_index":592,"title":{},"body":{"index.html":{}}}],["list",{"_index":372,"title":{},"body":{"controllers/UsersController.html":{}}}],["little",{"_index":625,"title":{},"body":{"index.html":{}}}],["localhost:3001",{"_index":691,"title":{},"body":{"index.html":{}}}],["login",{"_index":85,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(email",{"_index":95,"title":{},"body":{"injectables/AuthService.html":{}}}],["looking",{"_index":537,"title":{},"body":{"index.html":{}}}],["loop",{"_index":589,"title":{},"body":{"index.html":{}}}],["make",{"_index":408,"title":{},"body":{"controllers/UsersController.html":{}}}],["makes",{"_index":544,"title":{},"body":{"index.html":{}}}],["managing",{"_index":557,"title":{},"body":{"index.html":{}}}],["matches",{"_index":201,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["matches(/^(?=.*[a",{"_index":268,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(/^[a",{"_index":219,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["matching",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["mau",{"_index":540,"title":{},"body":{"index.html":{}}}],["maxlength",{"_index":265,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["maxlength(96",{"_index":266,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["message",{"_index":173,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["meta",{"_index":209,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["metadata",{"_index":483,"title":{},"body":{"dependencies.html":{}}}],["metaoptions",{"_index":121,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["methods",{"_index":49,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["minimum",{"_index":254,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength",{"_index":202,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":224,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(4",{"_index":215,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["minlength(8",{"_index":267,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":487,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["mit",{"_index":597,"title":{},"body":{"index.html":{}}}],["mode",{"_index":516,"title":{},"body":{"index.html":{}}}],["module",{"_index":18,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":20,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":535,"title":{},"body":{"index.html":{}}}],["multiple",{"_index":415,"title":{},"body":{"controllers/UsersController.html":{}}}],["myśliwiec",{"_index":612,"title":{},"body":{"index.html":{}}}],["name",{"_index":90,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["need",{"_index":584,"title":{},"body":{"index.html":{}}}],["needed",{"_index":679,"title":{},"body":{"index.html":{}}}],["needs",{"_index":283,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["nest",{"_index":64,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"index.html":{}}}],["nestframework",{"_index":616,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":528,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":475,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":292,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":477,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":213,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["never",{"_index":436,"title":{},"body":{"modules/UsersModule.html":{}}}],["new",{"_index":306,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"index.html":{}}}],["next",{"_index":661,"title":{},"body":{"index.html":{}}}],["node.js",{"_index":498,"title":{},"body":{"index.html":{}}}],["now",{"_index":623,"title":{},"body":{"index.html":{}}}],["npcs",{"_index":635,"title":{},"body":{"index.html":{}}}],["npm",{"_index":510,"title":{},"body":{"index.html":{}}}],["npx",{"_index":42,"title":{},"body":{"modules/AppModule.html":{}}}],["number",{"_index":260,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["object",{"_index":165,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["offer",{"_index":594,"title":{},"body":{"index.html":{}}}],["official",{"_index":541,"title":{},"body":{"index.html":{}}}],["once",{"_index":659,"title":{},"body":{"index.html":{}}}],["one",{"_index":258,"title":{},"body":{"classes/CreateUserDto.html":{},"index.html":{}}}],["open",{"_index":599,"title":{},"body":{"index.html":{}}}],["operations",{"_index":441,"title":{},"body":{"injectables/UsersService.html":{}}}],["operator",{"_index":410,"title":{},"body":{"controllers/UsersController.html":{}}}],["optional",{"_index":92,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["options.dto",{"_index":210,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["options.dto.ts",{"_index":235,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["options.dto.ts:6",{"_index":237,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["options.dto.ts:9",{"_index":238,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["order",{"_index":638,"title":{},"body":{"index.html":{}}}],["out",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["over",{"_index":622,"title":{},"body":{"index.html":{}}}],["overview",{"_index":695,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":471,"title":{"dependencies.html":{},"properties.html":{}},"body":{"index.html":{}}}],["page",{"_index":148,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["param",{"_index":326,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["param.dto",{"_index":404,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param.dto.ts",{"_index":272,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["param.dto.ts:13",{"_index":276,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["parameters",{"_index":89,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["parseintpipe",{"_index":399,"title":{},"body":{"controllers/UsersController.html":{}}}],["part",{"_index":585,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":286,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["partialtype(createpostdto",{"_index":282,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["partialtype(createuserdto",{"_index":291,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["particular",{"_index":658,"title":{},"body":{"index.html":{}}}],["parts",{"_index":632,"title":{},"body":{"index.html":{}}}],["pass",{"_index":686,"title":{},"body":{"index.html":{}}}],["password",{"_index":96,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{}}}],["patch",{"_index":327,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["patchpostdto",{"_index":279,"title":{"classes/PatchPostDto.html":{}},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["patchpostsdto",{"_index":324,"title":{},"body":{"controllers/PostsController.html":{}}}],["patchuser",{"_index":364,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(@body",{"_index":429,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(patchuserdto",{"_index":391,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuserdto",{"_index":289,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["path",{"_index":646,"title":{},"body":{"index.html":{}}}],["per",{"_index":382,"title":{},"body":{"controllers/UsersController.html":{}}}],["perform",{"_index":440,"title":{},"body":{"injectables/UsersService.html":{}}}],["pick",{"_index":656,"title":{},"body":{"index.html":{}}}],["platform",{"_index":539,"title":{},"body":{"index.html":{}}}],["please",{"_index":567,"title":{},"body":{"index.html":{}}}],["port",{"_index":668,"title":{},"body":{"index.html":{}}}],["position",{"_index":385,"title":{},"body":{"controllers/UsersController.html":{}}}],["possible",{"_index":145,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["post",{"_index":147,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["post'})@apiresponse({status",{"_index":308,"title":{},"body":{"controllers/PostsController.html":{}}}],["post.dto",{"_index":287,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{}}}],["post.dto.ts",{"_index":117,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"coverage.html":{}}}],["post.dto.ts:11",{"_index":285,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["post.dto.ts:110",{"_index":142,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:25",{"_index":192,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:33",{"_index":151,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:44",{"_index":180,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:52",{"_index":186,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:57",{"_index":131,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:65",{"_index":169,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:70",{"_index":133,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:78",{"_index":161,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:85",{"_index":190,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["posts",{"_index":300,"title":{},"body":{"controllers/PostsController.html":{}}}],["posts.controller",{"_index":349,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts/posts.module",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["postscontroller",{"_index":298,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":31,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsservice",{"_index":328,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["poststatus",{"_index":181,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["posttype",{"_index":122,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["prefix",{"_index":60,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["prettier",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["private",{"_index":71,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["production",{"_index":518,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":497,"title":{},"body":{"index.html":{}}}],["project",{"_index":508,"title":{},"body":{"index.html":{}}}],["properties",{"_index":118,"title":{"properties.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"properties.html":{}}}],["provide",{"_index":643,"title":{},"body":{"index.html":{}}}],["provided",{"_index":660,"title":{},"body":{"index.html":{}}}],["providers",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers/auth.service",{"_index":63,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["providers/posts.service",{"_index":329,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["providers/users.service",{"_index":406,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["pts",{"_index":647,"title":{},"body":{"index.html":{}}}],["public",{"_index":83,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["published",{"_index":220,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["published''})@isenum(poststatus)@isnotempty",{"_index":185,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["publishon",{"_index":123,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["query",{"_index":383,"title":{},"body":{"controllers/UsersController.html":{}}}],["query'})@apiquery({name",{"_index":379,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('limit",{"_index":417,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('page",{"_index":419,"title":{},"body":{"controllers/UsersController.html":{}}}],["questions",{"_index":565,"title":{},"body":{"index.html":{}}}],["rate",{"_index":639,"title":{},"body":{"index.html":{}}}],["read",{"_index":607,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["ready",{"_index":526,"title":{},"body":{"index.html":{}}}],["real",{"_index":580,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":482,"title":{},"body":{"dependencies.html":{}}}],["regenerate",{"_index":678,"title":{},"body":{"index.html":{}}}],["registered",{"_index":373,"title":{},"body":{"controllers/UsersController.html":{}}}],["repeat",{"_index":296,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["repository",{"_index":507,"title":{},"body":{"index.html":{}}}],["req",{"_index":229,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["required",{"_index":137,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["requiring",{"_index":547,"title":{},"body":{"index.html":{}}}],["reset",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resources",{"_index":559,"title":{},"body":{"index.html":{}}}],["response",{"_index":310,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["results",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["return",{"_index":55,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returned",{"_index":381,"title":{},"body":{"controllers/UsersController.html":{}}}],["returns",{"_index":53,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["review",{"_index":184,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["root",{"_index":652,"title":{},"body":{"index.html":{}}}],["run",{"_index":512,"title":{},"body":{"index.html":{}}}],["runs",{"_index":532,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":485,"title":{},"body":{"dependencies.html":{}}}],["s",{"_index":663,"title":{},"body":{"index.html":{}}}],["sample_token",{"_index":112,"title":{},"body":{"injectables/AuthService.html":{}}}],["saying",{"_index":688,"title":{},"body":{"index.html":{}}}],["scalable",{"_index":502,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":183,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["schema",{"_index":124,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["script",{"_index":619,"title":{},"body":{"index.html":{}}}],["seen",{"_index":690,"title":{},"body":{"index.html":{}}}],["sent",{"_index":427,"title":{},"body":{"controllers/UsersController.html":{}}}],["serialize",{"_index":163,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["series",{"_index":217,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["series''})@isenum(posttype)@isnotempty",{"_index":150,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["serve",{"_index":666,"title":{},"body":{"index.html":{}}}],["server",{"_index":503,"title":{},"body":{"index.html":{}}}],["service",{"_index":70,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["setup",{"_index":509,"title":{},"body":{"index.html":{}}}],["side",{"_index":504,"title":{},"body":{"index.html":{}}}],["simple",{"_index":549,"title":{},"body":{"index.html":{}}}],["slash",{"_index":640,"title":{},"body":{"index.html":{}}}],["slug",{"_index":125,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["small",{"_index":174,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["spaces",{"_index":178,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["spec",{"_index":66,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["special",{"_index":261,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["specific",{"_index":274,"title":{},"body":{"classes/GetUsersParamDto.html":{},"index.html":{}}}],["sponsors",{"_index":602,"title":{},"body":{"index.html":{}}}],["src/.../main.ts",{"_index":494,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../post",{"_index":489,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":36,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":47,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":52,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":59,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.module",{"_index":435,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":75,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/providers/auth.service",{"_index":449,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/auth/providers/auth.service.ts",{"_index":82,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts:12",{"_index":97,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:21",{"_index":93,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:5",{"_index":88,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/main.ts",{"_index":463,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/posts/dto/create",{"_index":116,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["src/posts/dto/patch",{"_index":280,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["src/posts/enums/post",{"_index":492,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/posts.controller.ts",{"_index":299,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:16",{"_index":317,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:27",{"_index":313,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:39",{"_index":323,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module.ts",{"_index":348,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/providers/posts.service.ts",{"_index":352,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/providers/posts.service.ts:10",{"_index":356,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:5",{"_index":354,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/users/dtos/create",{"_index":240,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dtos/get",{"_index":270,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["src/users/dtos/patch",{"_index":290,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["src/users/providers/users.service",{"_index":100,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["src/users/providers/users.service.ts",{"_index":437,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/providers/users.service.ts:15",{"_index":446,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:34",{"_index":448,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:9",{"_index":444,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.controller.ts",{"_index":361,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:53",{"_index":389,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:62",{"_index":367,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:77",{"_index":392,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":78,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostsModule.html":{}}}],["src/users/users.module.ts",{"_index":433,"title":{},"body":{"modules/UsersModule.html":{}}}],["start",{"_index":514,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":517,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":519,"title":{},"body":{"index.html":{}}}],["started",{"_index":496,"title":{"index.html":{}},"body":{}}],["starter",{"_index":506,"title":{},"body":{"index.html":{}}}],["statements",{"_index":458,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":126,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["status.enum",{"_index":207,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["status.enum.ts",{"_index":490,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["stay",{"_index":588,"title":{},"body":{"index.html":{}}}],["steps",{"_index":529,"title":{},"body":{"index.html":{}}}],["story",{"_index":149,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["straightforward",{"_index":545,"title":{},"body":{"index.html":{}}}],["string",{"_index":54,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["successfully",{"_index":377,"title":{},"body":{"controllers/UsersController.html":{}}}],["sucessfully",{"_index":340,"title":{},"body":{"controllers/PostsController.html":{}}}],["sucessfully'})@patch",{"_index":322,"title":{},"body":{"controllers/PostsController.html":{}}}],["sucessfully'})@post",{"_index":312,"title":{},"body":{"controllers/PostsController.html":{}}}],["summary",{"_index":339,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["support",{"_index":566,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":693,"title":{},"body":{"modules.html":{}}}],["table",{"_index":439,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":470,"title":{},"body":{"coverage.html":{}}}],["tags",{"_index":127,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["take",{"_index":530,"title":{},"body":{"index.html":{}}}],["test",{"_index":358,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{}}}],["test:covdeployment",{"_index":524,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":523,"title":{},"body":{"index.html":{}}}],["tests",{"_index":520,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":601,"title":{},"body":{"index.html":{}}}],["this.authservice.isauth",{"_index":450,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.postsservice.findall(userid",{"_index":338,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.usersservice.findall(getuserparamdto",{"_index":421,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findonebyid('1234",{"_index":110,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findonebyid(userid",{"_index":357,"title":{},"body":{"injectables/PostsService.html":{}}}],["thrown",{"_index":222,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["thrown'})@isoptional()@isjson",{"_index":168,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["time",{"_index":581,"title":{},"body":{"index.html":{}}}],["timestamp",{"_index":155,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["title",{"_index":128,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["token",{"_index":111,"title":{},"body":{"injectables/AuthService.html":{}}}],["touch",{"_index":609,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":214,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"dependencies.html":{}}}],["triggers",{"_index":642,"title":{},"body":{"index.html":{}}}],["true",{"_index":113,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{}}}],["true})@minlength(3",{"_index":188,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["true})@type(undefined",{"_index":141,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["try",{"_index":630,"title":{},"body":{"index.html":{}}}],["tsconfig.json",{"_index":653,"title":{},"body":{"index.html":{}}}],["tts",{"_index":650,"title":{},"body":{"index.html":{}}}],["twitter",{"_index":615,"title":{},"body":{"index.html":{}}}],["type",{"_index":91,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["type.enum",{"_index":206,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["type.enum.ts",{"_index":491,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["types",{"_index":293,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":395,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["undefined})@isoptional()@isarray()@validatenested({each",{"_index":140,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["unit",{"_index":521,"title":{},"body":{"index.html":{}}}],["unlicensed",{"_index":700,"title":{},"body":{"properties.html":{}}}],["unused",{"_index":397,"title":{},"body":{"controllers/UsersController.html":{}}}],["up",{"_index":657,"title":{},"body":{"index.html":{}}}],["updated",{"_index":288,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{}}}],["updated'})@isint()@isnotempty",{"_index":284,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["updatepost",{"_index":303,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(@body",{"_index":343,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(patchpostsdto",{"_index":319,"title":{},"body":{"controllers/PostsController.html":{}}}],["updates",{"_index":320,"title":{},"body":{"controllers/PostsController.html":{},"index.html":{}}}],["url",{"_index":179,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["url''})@isstring()@isnotempty()@matches(/^[a",{"_index":170,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["use",{"_index":409,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["user",{"_index":103,"title":{},"body":{"injectables/AuthService.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchUserDto.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["user.dto",{"_index":294,"title":{},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{}}}],["user.dto.ts",{"_index":241,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:15",{"_index":247,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:21",{"_index":249,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:25",{"_index":245,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:33",{"_index":263,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["userid",{"_index":318,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["users",{"_index":271,"title":{},"body":{"classes/GetUsersParamDto.html":{},"modules/PostsModule.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["users.controller",{"_index":434,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/users.module",{"_index":39,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":360,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":32,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":87,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["uses",{"_index":176,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["using",{"_index":582,"title":{},"body":{"index.html":{}}}],["valid",{"_index":154,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validated",{"_index":233,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validatenested",{"_index":203,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validation",{"_index":166,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["validationpipe",{"_index":401,"title":{},"body":{"controllers/UsersController.html":{}}}],["validator",{"_index":204,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"dependencies.html":{}}}],["value",{"_index":226,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["values",{"_index":146,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["vars",{"_index":398,"title":{},"body":{"controllers/UsersController.html":{}}}],["verbose",{"_index":627,"title":{},"body":{"index.html":{}}}],["version",{"_index":698,"title":{},"body":{"properties.html":{}}}],["video",{"_index":574,"title":{},"body":{"index.html":{}}}],["view",{"_index":351,"title":{},"body":{"modules/PostsModule.html":{}}}],["visit",{"_index":563,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":577,"title":{},"body":{"index.html":{}}}],["void",{"_index":314,"title":{},"body":{"controllers/PostsController.html":{}}}],["want",{"_index":386,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["watch",{"_index":515,"title":{},"body":{"index.html":{}}}],["website",{"_index":613,"title":{},"body":{"index.html":{}}}],["well",{"_index":670,"title":{},"body":{"index.html":{}}}],["whenever",{"_index":675,"title":{},"body":{"index.html":{}}}],["within",{"_index":651,"title":{},"body":{"index.html":{}}}],["without",{"_index":177,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["working",{"_index":562,"title":{},"body":{"index.html":{}}}],["world",{"_index":57,"title":{},"body":{"injectables/AppService.html":{}}}],["write",{"_index":44,"title":{},"body":{"modules/AppModule.html":{}}}],["writing",{"_index":677,"title":{},"body":{"index.html":{}}}],["x",{"_index":591,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":605,"title":{},"body":{"index.html":{}}}],["you're",{"_index":525,"title":{},"body":{"index.html":{}}}],["z0",{"_index":171,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["z\\d@$!%*?&]{8,16",{"_index":253,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*?&])[a",{"_index":252,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["za",{"_index":251,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UsersModule } from './users/users.module';\nimport { PostsModule } from './posts/posts.module';\nimport { AuthModule } from './auth/auth.module';\n\n@Module({\n  imports: [UsersModule, PostsModule, AuthModule],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n//npx prettier --write .\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { AuthService } from './providers/auth.service';\n// nest generate controller auth --no-spec\n@Controller('auth')\nexport class AuthController {\n  constructor(\n    // Injecting the auth service\n    private readonly authService: AuthService,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './providers/auth.service';\nimport { UsersModule } from 'src/users/users.module';\n// nest generate module auth\n@Module({\n  controllers: [AuthController],\n  providers: [AuthService],\n  // imports: [UsersModule], will cause a circular dependency\n  imports: [forwardRef(() => UsersModule)],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                isAuth\n                            \n                            \n                                    Public\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/auth.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isAuth\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAuth()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, forwardRef, Inject } from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users.service';\n// nest generate service auth/providers/auth --flat  --no-spec\n@Injectable()\nexport class AuthService {\n  constructor(\n    // Injecting the user service\n    // Add this to avoid circular dependency\n    @Inject(forwardRef(() => UsersService))\n    private readonly usersService: UsersService,\n  ) {}\n  public login(email: string, password: string) {\n    // Check user exists\n\n    const user = this.usersService.findOneById('1234');\n    // Login\n    // Return token\n    return 'SAMPLE_TOKEN';\n  }\n\n  public isAuth() {\n    return true;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dto/create-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                publishOn\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiPropertyOptional()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsUrl()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreatePostMetaOptionsDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'array', required: false, items: undefined})@IsOptional()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:110\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: PostType, description: 'Possible values  'post', 'page', 'story', 'series''})@IsEnum(PostType)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Must be a valid timestamp in ISO8601', example: '2024-03-16T07:46:32+0000'})@IsISO8601()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Serialize your JSON object else a validation error will be thrown'})@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'For example 'my-url''})@IsString()@IsNotEmpty()@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url\"'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: PostStatus, description: 'Possible values 'draft', 'scheduled', 'review', 'published''})@IsEnum(PostStatus)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsArray()@IsOptional()@IsString({each: true})@MinLength(3, {each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:85\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@MinLength(4)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:25\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsArray,\n  IsEnum,\n  IsISO8601,\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\nimport { PostType } from '../enums/post-type.enum';\nimport { PostStatus } from '../enums/post-status.enum';\nimport { CreatePostMetaOptionsDto } from './create-post-meta-options.dto';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\n\nexport class CreatePostDto {\n  @ApiProperty()\n  @IsString()\n  @MinLength(4)\n  @IsNotEmpty()\n  title: string;\n\n  @ApiProperty({\n    enum: PostType,\n    description: \"Possible values  'post', 'page', 'story', 'series'\",\n  })\n  @IsEnum(PostType)\n  @IsNotEmpty()\n  postType: PostType;\n\n  @ApiProperty({\n    description: \"For example 'my-url'\",\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url\"',\n  })\n  slug: string;\n\n  @ApiProperty({\n    enum: PostStatus,\n    description: \"Possible values 'draft', 'scheduled', 'review', 'published'\",\n  })\n  @IsEnum(PostStatus)\n  @IsNotEmpty()\n  status: PostStatus;\n\n  @IsString()\n  @ApiPropertyOptional()\n  @IsOptional()\n  content?: string;\n\n  @ApiPropertyOptional({\n    description:\n      'Serialize your JSON object else a validation error will be thrown',\n  })\n  @IsOptional()\n  @IsJSON()\n  schema?: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsUrl()\n  featuredImageUrl?: string;\n\n  @ApiProperty({\n    description: 'Must be a valid timestamp in ISO8601',\n    example: '2024-03-16T07:46:32+0000',\n  })\n  @IsISO8601()\n  @IsOptional()\n  publishOn?: Date;\n\n  @ApiPropertyOptional()\n  @IsArray()\n  @IsOptional()\n  @IsString({ each: true })\n  @MinLength(3, { each: true })\n  tags?: string[];\n\n  @ApiPropertyOptional({\n    type: 'array',\n    required: false,\n    items: {\n      type: 'object',\n      properties: {\n        key: {\n          type: 'string',\n        },\n        value: {\n          type: 'string',\n        },\n      },\n    },\n  })\n  @IsOptional()\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => CreatePostMetaOptionsDto)\n  // Type decorator\n  // Matches the incoming req to the dto\n  // Creates an instance of the dto\n  // All the properties are validated against the dto\n  metaOptions?: CreatePostMetaOptionsDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostMetaOptionsDto.html":{"url":"classes/CreatePostMetaOptionsDto.html","title":"class - CreatePostMetaOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostMetaOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dto/create-post-meta-options.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                key\n                            \n                            \n                                    \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post-meta-options.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post-meta-options.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class CreatePostMetaOptionsDto {\n  @IsString()\n  @IsNotEmpty()\n  key: string;\n\n  @IsNotEmpty()\n  value: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(8)@Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,16}$/, {message: 'Minimum 8 chars, include at least one letter, one number, and one special character.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:33\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\nexport class CreateUserDto {\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(96)\n  firstName: string;\n\n  @IsString()\n  @IsOptional()\n  @MinLength(3)\n  @MaxLength(96)\n  lastName?: string;\n\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(8)\n  @Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,16}$/, {\n    message:\n      'Minimum 8 chars, include at least one letter, one number, and one special character.',\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersParamDto.html":{"url":"classes/GetUsersParamDto.html","title":"class - GetUsersParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-users-param.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Get user with a specific id', example: '1234'})@IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-users-param.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport { IsInt, IsOptional } from 'class-validator';\n\nexport class GetUsersParamDto {\n  @ApiPropertyOptional({\n    description: 'Get user with a specific id',\n    example: '1234',\n  })\n  @IsOptional()\n  @IsInt()\n  @Type(() => Number)\n  id?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchPostDto.html":{"url":"classes/PatchPostDto.html","title":"class - PatchPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dto/patch-post.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The ID of the post that needs to be updated'})@IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/patch-post.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsInt, IsNotEmpty } from 'class-validator';\nimport { CreatePostDto } from './create-post.dto';\n\nexport class PatchPostDto extends PartialType(CreatePostDto) {\n  @ApiProperty({\n    description: 'The ID of the post that needs to be updated',\n  })\n  @IsInt()\n  @IsNotEmpty()\n  id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/patch-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\n// Extend the create user dto to not repeat the code\nexport class PatchUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createPost\n                            \n                            \n                                    \n                                    Public\n                                getPosts\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Creates a new blog post'})@ApiResponse({status: 201, description: 'You get a 201 response if your post is created sucessfully'})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        getPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPosts(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:userId?')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(patchPostsDto: PatchPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Updates an existing blog post'})@ApiResponse({status: 201, description: 'You get a 201 response if your post is updated sucessfully'})@Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchPostsDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Param, Patch, Post } from '@nestjs/common';\nimport { PostsService } from './providers/posts.service';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { CreatePostDto } from './dto/create-post.dto';\nimport { PatchPostDto } from './dto/patch-post.dto';\n\n@Controller('posts')\n@ApiTags('Posts')\nexport class PostsController {\n  constructor(\n    // Injecting post service\n    private readonly postsService: PostsService,\n  ) {}\n\n  @Get('/:userId?')\n  public getPosts(@Param('userId') userId: string) {\n    return this.postsService.findAll(userId);\n  }\n  @ApiOperation({\n    summary: 'Creates a new blog post',\n  })\n  @ApiResponse({\n    status: 201,\n    description: 'You get a 201 response if your post is created sucessfully',\n  })\n  @Post()\n  public createPost(@Body() createPostDto: CreatePostDto) {\n    console.log(createPostDto);\n  }\n\n  @ApiOperation({\n    summary: 'Updates an existing blog post',\n  })\n  @ApiResponse({\n    status: 201,\n    description: 'You get a 201 response if your post is updated sucessfully',\n  })\n  @Patch()\n  public updatePost(@Body() patchPostsDto: PatchPostDto) {\n    console.log(patchPostsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_imports\n\n\n\ncluster_PostsModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsController } from './posts.controller';\nimport { PostsService } from './providers/posts.service';\nimport { UsersModule } from 'src/users/users.module';\n\n// Import entire module not only a service (view users module exports key)\n@Module({\n  controllers: [PostsController],\n  providers: [PostsService],\n  imports: [UsersModule],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/providers/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/posts/providers/posts.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users.service';\n\n@Injectable()\nexport class PostsService {\n  constructor(\n    // Injecting User Service\n    private readonly usersService: UsersService,\n  ) {}\n  public findAll(userId: string) {\n    const user = this.usersService.findOneById(userId);\n    return [\n      {\n        user: user,\n        title: 'Test Title',\n        content: 'Test Content',\n      },\n      {\n        user: user,\n        title: 'Test Title 2',\n        content: 'Test Content 2',\n      },\n    ];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUsers\n                            \n                            \n                                    \n                                    Public\n                                patchUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUsers(createUserDto: CreateUserDto, headers: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                headers\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getUserParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id?')@ApiOperation({summary: 'Fetches a list of registered users on the application'})@ApiResponse({status: 200, description: 'Users fetched successfully based on the query'})@ApiQuery({name: 'limit', type: 'number', required: false, description: 'The number of entries returned per query', example: 10})@ApiQuery({name: 'page', type: 'number', required: false, description: 'The position of the page number that you want the API to return', example: 1})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        patchUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchUser(patchUserDto: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:77\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PatchUserDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        /* eslint-disable @typescript-eslint/no-unused-vars */\nimport {\n  Body,\n  Headers,\n  Controller,\n  Get,\n  Param,\n  Post,\n  Query,\n  ParseIntPipe,\n  DefaultValuePipe,\n  ValidationPipe,\n  Patch,\n} from '@nestjs/common';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { GetUsersParamDto } from './dtos/get-users-param.dto';\nimport { PatchUserDto } from './dtos/patch-user.dto';\nimport { UsersService } from './providers/users.service';\nimport { ApiOperation, ApiQuery, ApiResponse, ApiTags } from '@nestjs/swagger';\n\n// To make parameters optional, use the ? operator\n@Controller('users')\n@ApiTags('Users')\nexport class UsersController {\n  constructor(\n    // Injecting user service\n    private readonly usersService: UsersService,\n  ) {}\n  @Get('/:id?')\n  @ApiOperation({\n    summary: 'Fetches a list of registered users on the application',\n  })\n  // We can add multiple api response\n  @ApiResponse({\n    status: 200,\n    description: 'Users fetched successfully based on the query',\n  })\n  @ApiQuery({\n    name: 'limit',\n    type: 'number',\n    required: false,\n    description: 'The number of entries returned per query',\n    example: 10,\n  })\n  @ApiQuery({\n    name: 'page',\n    type: 'number',\n    required: false,\n    description:\n      'The position of the page number that you want the API to return',\n    example: 1,\n  })\n  public getUsers(\n    @Param() getUserParamDto: GetUsersParamDto,\n    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\n  ) {\n    return this.usersService.findAll(getUserParamDto, limit, page);\n  }\n\n  @Post()\n  public createUsers(\n    // Without the global validation\n    // @Body(new ValidationPipe()) createUserDto: CreateUserDto,\n\n    // With\n    @Body() createUserDto: CreateUserDto,\n    @Headers() headers: any,\n  ) {\n    console.log(createUserDto);\n    console.log(headers);\n    const { firstName } = createUserDto;\n    console.log(firstName);\n    return 'You sent a post req to users endpoint';\n  }\n  @Patch()\n  public patchUser(@Body() patchUserDto: PatchUserDto) {\n    return patchUserDto;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './providers/users.service';\nimport { AuthModule } from 'src/auth/auth.module';\n\n// We can only export providers, never controllers\n@Module({\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService],\n  // imports: [AuthModule], will cause a circular dependency\n  imports: [forwardRef(() => AuthModule)],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Class to connect to Users table and perform operations\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                findAll\n                            \n                            \n                                    Public\n                                findOneById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/users.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(getUserParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { id: number; firstName: string; email: string; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { GetUsersParamDto } from '../dtos/get-users-param.dto';\nimport { AuthService } from 'src/auth/providers/auth.service';\n\n/**\n * Class to connect to Users table and perform operations\n */\n@Injectable()\nexport class UsersService {\n  constructor(\n    // Injecting auth service to avoid circular dependency\n    @Inject(forwardRef(() => AuthService))\n    private readonly authService: AuthService,\n  ) {}\n  public findAll(\n    getUserParamDto: GetUsersParamDto,\n    limit: number,\n    page: number,\n  ) {\n    const isAuth = this.authService.isAuth();\n    // Auth service\n    return [\n      {\n        firstName: 'John',\n        email: 'john@doe.com',\n      },\n      {\n        firstName: 'Alice',\n        email: 'alice@doe.com',\n      },\n    ];\n  }\n\n  public findOneById(id: string) {\n    return {\n      id: 1234,\n      firstName: 'Alice',\n      email: 'alice@doe.com',\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/providers/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/dto/create-post-meta-options.dto.ts\n            \n            class\n            CreatePostMetaOptionsDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dto/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/posts/dto/patch-post.dto.ts\n            \n            class\n            PatchPostDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/posts/providers/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dtos/get-users-param.dto.ts\n            \n            class\n            GetUsersParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/providers/users.service.ts\n            \n            injectable\n            UsersService\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.23\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/mapped-types : ^2.0.5\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.3.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            PostStatus   (src/.../post-status.enum.ts)\n                        \n                        \n                            PostType   (src/.../post-type.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/posts/enums/post-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PostStatus\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n            \n        \n\n    src/posts/enums/post-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PostType\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\nCompodoc Documentation\nScript\nLet me name this as doc.\nIt should be a comma over here.\nNow this script itself a little bit verbose and lengthy, and I'll try to explain all the parts of the\nscript as we go.\nSo first of all, we need to use NPCs and along with Compo Doc in order to generate the Compo Doc documentation.\nSo we use at the rate compo doc, which is the name of the package.\nSo compo doc slash compo doc.\nSo this basically triggers the compo doc package for us.\nAnd then we need to provide it certain configurations.\nThe first one is the path to the pts config file.\nSo hyphen path to the pts config file TTS config file is within the root of the project itself.\nSo we use tsconfig.json.\nSo it's going to pick up this particular config file which is there in the root of our project.\nSo this particular TTS config file over here.\nNow once we have provided the TTS config file, the next flag that we want to add is the s flag.\nNow what this flag does is that it instructs compared to serve generated documentation on a port.\nNow, having said that, I want to have a specific port number as well.\nSo I use hyphen hyphen port.\nAnd let's serve the documentation on port 3001.\nWith that, I also want to enable Compo doc to watch for changes within my code.\nSo whenever I'm writing any new code, it should watch for changes and regenerate the documentation\nwhenever needed.\nFinally, I want to give it a specific directory for generating the documentation so we can use a hyphen\nd flag, which instructs combo doc to generate the documentation within a specific directory, which\nwe can pass as an argument.\nSo here I'm saying within the root of my project, just use the documentation directory to generate\nyour documentation.\nThe details can be seen at localhost:3001\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    6 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
