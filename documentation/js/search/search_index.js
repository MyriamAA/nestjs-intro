var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.07,1,2.274]],["body/controllers/AppController.html",[0,1.878,1,3.991,2,1.702,3,0.404,4,0.356,5,0.31,6,4.286,7,0.476,8,0.026,9,1.062,10,3.538,11,4.286,12,0.404,13,0.018,14,3.385,15,1.948,16,0.022,17,0.022]],["title/modules/AppModule.html",[18,1.07,19,2.274]],["body/modules/AppModule.html",[1,3.433,2,1.505,3,0.258,4,0.227,5,0.198,7,0.529,8,0.026,9,0.679,10,3.355,11,2.738,12,0.258,13,0.012,16,0.017,17,0.017,18,1.615,19,4.509,20,1.432,21,1.244,22,1.663,23,1.663,24,1.432,25,2.64,26,1.663,27,2.738,28,2.738,29,2.738,30,3.355,31,3.659,32,3.659,33,3.355,34,3.094,35,2.302,36,1.663,37,1.54,38,2.409,39,2.862,40,3.239,41,3.239,42,3.239,43,3.239,44,1.967,45,1.334,46,3.239,47,1.432,48,1.54,49,3.239,50,3.79,51,4.925,52,2.163,53,4.482,54,3.239,55,2.738,56,3.239,57,2.409,58,4.482,59,3.239,60,4.482,61,3.239,62,1.663,63,3.824,64,2.738,65,2.738,66,3.239,67,3.239,68,2.163,69,2.738,70,3.239,71,3.239,72,3.239,73,1.163,74,3.239,75,3.239,76,3.239,77,3.239,78,3.239,79,2.738,80,2.738,81,1.803,82,3.239,83,0.545,84,3.239,85,1.54,86,0.952,87,3.239,88,3.239,89,3.239,90,3.239,91,3.239,92,3.239,93,1.334,94,3.239,95,2.738,96,3.239,97,2.738,98,3.239,99,3.239,100,3.239,101,2.163,102,3.239,103,3.239,104,3.239,105,1.803,106,3.239,107,2.409,108,2.738,109,2.738]],["title/injectables/AppService.html",[10,1.896,110,1.001]],["body/injectables/AppService.html",[3,0.395,4,0.348,5,0.303,7,0.395,8,0.026,9,1.038,10,3.282,12,0.395,13,0.018,16,0.022,17,0.022,110,1.734,111,2.357,112,4.19,113,0.654,114,2.266,115,6.514,116,0.899,117,4.955,118,1.904,119,1.852,120,1.904,121,4.955,122,4.955]],["title/controllers/AuthController.html",[0,1.07,123,2.274]],["body/controllers/AuthController.html",[0,1.834,2,1.636,3,0.388,4,0.342,5,0.298,7,0.465,8,0.026,9,1.021,12,0.388,13,0.018,15,1.872,16,0.022,17,0.022,123,3.899,124,4.12,125,2.959,126,4.649,127,3.209,128,4.12,129,2.959,130,2.959,131,3.625,132,4.873,133,2.318,134,3.255,135,1.75,136,2.318]],["title/modules/AuthModule.html",[18,1.07,30,1.896]],["body/modules/AuthModule.html",[2,1.819,3,0.344,4,0.303,5,0.263,7,0.495,8,0.026,9,0.904,12,0.344,13,0.016,16,0.02,17,0.02,18,1.951,20,1.907,21,1.658,22,2.215,23,2.215,24,1.907,25,3.041,26,3.041,30,3.69,34,3.041,35,2.781,36,2.215,37,2.052,39,3.016,123,3.955,126,3.209,127,3.535,128,3.648,129,2.619,130,2.619,137,3.648,138,3.648,139,3.648,140,4.314,141,3.618,142,4.314,143,3.648,144,3.648,145,2.881,146,3.209]],["title/injectables/AuthService.html",[110,1.001,127,1.749]],["body/injectables/AuthService.html",[3,0.315,4,0.278,5,0.242,7,0.408,8,0.026,9,0.829,12,0.315,13,0.014,15,1.52,16,0.019,17,0.019,62,2.032,73,1.421,81,2.203,83,0.862,86,1.672,101,3.798,110,1.507,111,1.882,113,0.522,114,1.97,116,1.031,118,1.97,119,2.042,120,2.185,127,2.632,129,2.402,130,2.402,131,2.943,133,2.438,134,2.642,135,1.841,136,1.882,141,2.642,145,2.642,146,2.943,147,3.345,148,2.629,149,6.015,150,5.687,151,3.345,152,3.091,153,3.956,154,2.111,155,1.721,156,1.41,157,3.956,158,3.956,159,5.126,160,3.956,161,2.642,162,3.345,163,3.956,164,2.943,165,2.642,166,3.956,167,3.345,168,2.402,169,2.943,170,3.956,171,3.956,172,3.956]],["title/classes/CreateManyUsersDto.html",[13,0.012,173,1.896]],["body/classes/CreateManyUsersDto.html",[3,0.35,4,0.308,5,0.268,7,0.498,8,0.026,12,0.35,13,0.022,16,0.02,17,0.02,73,2.143,83,1.082,86,1.29,113,0.579,116,0.796,173,3.048,174,1.94,175,4.073,176,2.42,177,3.711,178,1.839,179,3.323,180,3.209,181,1.29,182,3.711,183,3.657,184,3.657,185,4.63,186,4.389,187,3.711,188,4.389,189,4.63,190,3.048,191,4.63,192,2.087,193,1.474,194,2.931,195,2.931,196,3.657,197,2.087,198,3.711]],["title/classes/CreatePostDto.html",[13,0.012,199,1.896]],["body/classes/CreatePostDto.html",[3,0.141,4,0.125,5,0.108,7,0.382,8,0.026,12,0.141,13,0.013,16,0.011,17,0.011,47,1.812,73,1.723,83,1.073,93,1.175,113,0.234,116,1.03,119,1.784,156,1.591,174,0.785,178,1.377,181,1.669,182,1.501,183,2.738,184,2.738,185,2.413,187,1.501,189,2.413,190,2.671,191,2.413,192,0.844,195,1.185,196,3.205,197,0.844,198,2.413,199,1.589,200,4.89,201,1.32,202,1.277,203,1.613,204,3.569,205,0.958,206,4.302,207,1.755,208,3.579,209,4.577,210,3.026,211,2.39,212,3.902,213,3.026,214,2.39,215,3.615,216,2.501,217,1.838,218,4.577,219,1.206,220,2.854,221,1.377,222,2.49,223,2.953,224,1.775,225,1.775,226,3.342,227,3.467,228,1.775,229,1.775,230,3.205,231,2.738,232,2.738,233,1.775,234,1.775,235,2.283,236,2.854,237,1.775,238,2.307,239,1.775,240,1.775,241,2.413,242,1.838,243,2.854,244,3.467,245,4.1,246,2.49,247,3.05,248,1.775,249,1.775,250,3.569,251,2.662,252,3.205,253,3.342,254,2.854,255,2.854,256,1.775,257,1.775,258,4.1,259,2.854,260,2.671,261,1.838,262,2.137,263,2.854,264,1.775,265,1.775,266,1.775,267,1.775,268,1.32,269,1.775,270,3.467,271,3.467,272,1.589,273,2.413,274,1.733,275,2.854,276,1.775,277,2.413,278,2.413,279,3.342,280,3.05,281,3.467,282,3.467,283,1.775,284,1.775,285,1.688,286,3.05,287,2.738,288,1.775,289,1.775,290,1.775,291,1.775,292,1.775,293,1.775,294,2.662,295,2.854,296,2.123,297,3.369,298,2.738,299,2.413,300,2.123,301,1.32,302,1.32,303,2.413,304,1.501,305,1.501,306,1.32,307,1.32,308,3.752,309,3.579,310,1.501,311,2.413,312,1.775,313,1.501,314,1.501,315,1.775,316,1.775,317,1.775,318,1.775,319,1.775,320,1.501,321,1.775,322,1.906,323,1.775,324,1.32,325,1.501,326,1.775,327,1.775,328,1.775,329,0.911,330,1.32,331,1.775,332,1.775]],["title/classes/CreatePostMetaOptionsDto.html",[13,0.012,235,1.896]],["body/classes/CreatePostMetaOptionsDto.html",[3,0.354,4,0.312,5,0.271,7,0.354,8,0.026,12,0.354,13,0.02,16,0.02,17,0.02,47,2.775,73,1.596,83,0.748,113,0.586,116,0.806,119,1.972,174,1.964,178,1.853,181,1.307,190,3.072,192,2.114,202,0.931,203,1.981,204,4.105,207,1.615,223,2.625,235,3.072,242,2.834,260,3.072,262,2.625,296,4.105,298,2.968,306,4.105,324,4.465,325,3.758,333,2.439,334,3.758,335,4.444,336,4.444,337,3.686]],["title/classes/CreateTagDto.html",[13,0.012,338,2.068]],["body/classes/CreateTagDto.html",[3,0.217,4,0.191,5,0.166,7,0.316,8,0.026,12,0.217,13,0.014,16,0.015,17,0.015,83,0.918,113,0.359,116,0.989,119,1.959,155,1.973,174,1.204,178,1.331,181,1.604,190,2.602,192,1.296,196,3.122,197,1.296,202,1.351,203,1.424,204,2.949,205,1.331,214,3.122,215,4.1,223,3.217,226,3.477,230,3.643,231,3.428,232,3.428,238,2.036,260,2.858,262,2.441,268,2.949,270,4.34,271,4.34,272,2.207,273,3.352,274,2.407,277,4.34,278,4.34,285,2.785,287,3.428,296,2.949,297,3.428,298,3.428,299,3.352,300,2.027,301,2.027,302,2.027,308,3.818,310,2.304,313,2.304,314,2.304,320,2.304,338,2.407,339,4.813,340,2.304,341,2.036,342,2.949,343,3.952,344,5.133,345,2.066,346,2.4,347,4.968,348,2.724,349,2.724,350,3.952,351,2.724,352,2.724,353,2.724,354,2.724,355,3.952,356,2.724,357,2.724,358,2.207,359,2.724,360,3.965,361,3.965,362,2.724,363,2.724,364,2.304,365,3.352,366,3.352,367,3.352]],["title/classes/CreateUserDto.html",[13,0.012,180,1.749]],["body/classes/CreateUserDto.html",[3,0.311,4,0.274,5,0.238,7,0.311,8,0.026,12,0.311,13,0.018,16,0.019,17,0.019,83,1.007,101,3.774,113,0.515,116,1.086,119,2.064,156,1.398,161,3.774,174,1.726,175,4.616,178,1.707,180,2.609,181,1.76,190,3.332,192,1.857,219,1.494,272,2.829,297,3.394,298,3.997,300,2.904,301,2.904,302,2.904,364,4.297,368,2.904,369,4.203,370,4.778,371,3.904,372,3.904,373,3.904,374,3.904,375,3.904,376,3.904,377,3.904,378,5.985,379,5.082,380,5.082,381,5.082,382,4.297,383,5.082,384,5.082,385,4.249,386,5.082,387,5.082,388,5.082,389,3.904,390,5.082,391,5.985,392,3.904,393,3.904]],["title/classes/GetUsersParamDto.html",[13,0.012,394,2.068]],["body/classes/GetUsersParamDto.html",[3,0.361,4,0.319,5,0.277,7,0.483,8,0.026,12,0.361,13,0.022,16,0.021,17,0.021,83,1.019,86,1.643,113,0.598,116,0.823,156,1.538,174,2.005,178,1.877,179,3.111,181,1.334,192,2.157,195,3.029,197,2.157,202,0.95,219,1.781,221,2.18,223,2.658,226,3.374,294,4.157,297,3.732,308,4.157,394,3.393,395,4.725,396,3.835,397,4.157,398,4.535,399,4.535,400,4.535]],["title/entities/MetaOption.html",[401,1.144,402,1.62]],["body/entities/MetaOption.html",[3,0.255,4,0.225,5,0.196,7,0.354,8,0.026,12,0.255,13,0.012,16,0.017,17,0.017,48,2.856,80,3.762,83,1.01,85,1.524,93,1.832,113,0.423,116,1.052,119,1.398,178,1.494,181,1.706,202,0.671,207,1.706,219,1.308,221,1.716,252,3.688,260,3.343,262,2.627,287,2.971,324,3.802,333,2.654,337,2.971,345,1.966,358,2.477,385,3.688,401,2.016,402,2.987,403,2.709,404,3.762,405,4.449,406,4.322,407,4.322,408,4.322,409,3.203,410,4.108,411,3.353,412,5.522,413,2.116,414,3.414,415,3.203,416,2.701,417,2.14,418,2.971,419,3.203,420,4.449,421,3.762,422,4.449,423,4.449,424,4.449,425,2.709,426,4.449,427,3.762,428,3.203,429,3.203,430,3.309,431,3.074,432,3.414,433,4.322,434,3.203,435,3.762,436,2.477,437,2.383,438,2.971,439,3.762,440,3.762,441,1.231]],["title/controllers/MetaOptionsController.html",[0,1.07,442,2.274]],["body/controllers/MetaOptionsController.html",[0,1.76,2,1.288,3,0.306,4,0.269,5,0.234,7,0.446,8,0.026,9,0.804,12,0.306,13,0.014,14,2.562,15,1.474,16,0.019,17,0.019,47,2.799,48,2.39,83,0.645,113,0.506,114,1.931,116,0.696,118,1.931,120,1.474,125,2.329,135,1.377,148,2.307,154,1.58,155,1.288,156,1.055,181,1.128,202,1.053,203,1.804,205,1.687,207,1.684,235,3.31,242,3.052,261,2.58,262,2.935,307,2.854,329,2.58,333,2.221,413,2.39,442,3.356,443,3.244,444,2.58,445,5.602,446,3.836,447,3.836,448,5.027,449,5.602,450,3.737,451,3.051,452,1.97,453,3.435,454,3.244,455,3.244,456,3.836,457,2.854,458,2.39,459,2.562,460,2.329,461,3.836]],["title/modules/MetaOptionsModule.html",[18,1.07,31,2.068]],["body/modules/MetaOptionsModule.html",[2,1.93,3,0.322,4,0.284,5,0.247,7,0.5,8,0.026,9,0.848,12,0.322,13,0.015,16,0.019,17,0.019,18,2.018,20,1.789,21,1.555,22,2.078,23,2.078,24,1.789,25,2.952,26,2.078,31,3.9,35,2.671,36,2.078,37,1.925,39,2.896,44,2.457,45,1.666,47,2.299,48,1.925,202,0.848,242,2.671,262,2.734,333,1.789,345,2.299,346,2.952,401,1.359,402,2.474,441,1.555,442,3.839,444,2.671,453,3.637,454,3.422,455,3.422,462,3.422,463,3.422,464,4.047,465,4.047,466,2.457,467,5.202,468,3.159,469,4.047,470,4.047,471,3.422,472,4.047,473,4.047]],["title/injectables/MetaOptionsService.html",[110,1.001,453,1.896]],["body/injectables/MetaOptionsService.html",[3,0.27,4,0.238,5,0.207,7,0.472,8,0.026,9,0.711,12,0.27,13,0.012,16,0.017,17,0.017,45,1.398,47,2.702,62,1.743,81,2.577,83,0.779,110,1.361,111,1.614,113,0.448,114,2.175,116,0.84,118,1.779,120,1.304,133,2.202,135,1.662,136,1.614,148,2.169,154,1.906,155,1.555,156,1.274,193,2.052,202,1.104,203,1.662,205,1.555,207,0.873,211,3.092,235,3.151,238,2.906,242,2.377,261,2.377,307,2.525,333,2.329,341,2.906,342,4.21,401,2.052,402,3.106,441,1.304,444,2.377,448,3.914,452,1.743,453,2.577,458,2.202,466,2.061,471,3.914,474,4.455,475,2.87,476,3.914,477,2.933,478,3.394,479,3.866,480,3.394,481,5.268,482,3.914,483,4.629,484,3.394,485,3.092,486,3.914,487,4.629,488,2.377,489,1.89,490,3.914,491,4.629,492,4.629,493,2.267,494,2.87,495,3.394,496,2.061,497,3.394]],["title/classes/PatchPostDto.html",[13,0.012,498,2.068]],["body/classes/PatchPostDto.html",[3,0.331,4,0.292,5,0.254,7,0.464,8,0.026,12,0.331,13,0.019,16,0.02,17,0.02,83,0.698,113,0.548,116,0.753,156,1.455,174,1.835,178,1.775,181,1.221,190,2.944,192,1.975,193,1.394,196,3.531,197,1.975,199,3.239,201,3.088,202,1.108,203,1.898,207,1.664,219,1.555,221,2.255,223,2.515,268,3.088,294,3.933,322,2.773,436,3.41,498,3.211,499,4.471,500,5.287,501,3.933,502,5.179,503,5.287,504,4.471,505,5.287,506,5.287,507,5.287,508,4.152,509,4.152,510,3.51,511,3.088]],["title/classes/PatchUserDto.html",[13,0.012,512,2.274]],["body/classes/PatchUserDto.html",[3,0.396,4,0.349,5,0.303,7,0.471,8,0.026,12,0.396,13,0.018,16,0.022,17,0.022,86,1.461,174,2.196,180,2.551,193,1.983,194,3.319,203,1.784,368,3.696,502,4.994,510,4.201,512,3.944,513,4.201,514,5.906,515,4.201,516,4.201,517,4.969,518,4.969,519,4.201]],["title/entities/Post.html",[207,0.876,401,1.144]],["body/entities/Post.html",[3,0.164,4,0.145,5,0.126,7,0.408,8,0.026,12,0.164,13,0.007,16,0.012,17,0.012,47,1.421,48,0.981,57,3.317,73,2.275,83,1.098,85,0.981,86,1.626,93,2.277,113,0.272,116,1.09,119,1.889,156,1.654,176,2.263,178,1.079,181,1.768,202,0.432,206,2.391,207,1.707,209,4.087,210,3.34,211,3.42,212,4.114,213,3.34,214,3.228,215,2.638,216,2.691,217,2.482,218,4.087,219,0.945,221,1.326,222,2.935,227,2.718,230,2.978,231,2.147,232,2.147,242,1.651,246,1.952,247,2.391,250,2.391,251,2.391,252,2.978,253,3.317,260,1.79,279,3.596,280,2.391,285,2.108,287,2.978,303,2.718,304,1.744,305,1.744,311,4.676,333,0.912,341,1.651,345,1.421,358,2.483,385,3.42,401,1.497,402,2.121,404,2.718,410,2.391,414,2.638,416,2.708,417,3.694,418,4.198,425,1.744,430,3.809,432,2.147,438,3.795,439,1.744,440,2.718,441,0.793,466,1.253,520,1.744,521,2.063,522,3.215,523,5.12,524,2.063,525,3.771,526,2.063,527,3.215,528,3.809,529,3.809,530,2.718,531,2.063,532,2.063,533,3.215,534,2.063,535,3.215,536,2.391,537,2.063,538,2.063,539,2.718,540,2.063,541,3.215,542,2.718,543,2.063,544,2.718,545,2.063,546,3.215,547,1.744,548,3.215,549,2.063,550,2.063,551,2.718,552,2.063,553,3.215,554,2.718,555,3.215,556,2.063,557,2.063,558,2.063,559,2.063,560,1.744,561,1.744]],["title/controllers/PostsController.html",[0,1.07,562,2.274]],["body/controllers/PostsController.html",[0,1.291,2,0.737,3,0.175,4,0.154,5,0.134,7,0.396,8,0.026,9,0.46,12,0.175,13,0.008,14,1.467,15,0.844,16,0.013,17,0.013,73,1.212,83,0.884,86,1.608,93,1.389,113,0.29,114,1.297,116,0.836,118,2.271,119,1.291,120,1.772,125,1.334,135,0.789,148,2.512,154,1.899,155,1.764,156,1.505,181,1.356,184,3.079,197,1.045,199,3.045,202,1.386,205,1.764,206,4.199,207,1.754,216,3.045,217,1.733,219,1.463,221,2.135,272,1.879,329,2.555,330,1.634,341,2.555,345,2.731,397,3.43,413,2.193,431,1.879,436,2.924,444,1.733,451,1.334,458,2.498,498,3.321,501,3.43,511,2.51,562,2.744,563,1.857,564,3.374,565,3.653,566,3.374,567,3.374,568,2.196,569,4.109,570,3.374,571,4.611,572,4.109,573,3.374,574,2.853,575,2.51,576,2.196,577,2.196,578,1.467,579,3.079,580,1.857,581,2.196,582,3.899,583,3.899,584,2.196,585,2.196,586,2.853,587,2.196,588,2.196,589,3.079,590,2.196,591,3.701,592,2.196,593,2.8,594,2.196,595,2.196,596,3.43,597,2.196,598,2.196,599,2.51,600,2.853,601,1.334,602,2.567,603,1.857,604,4.207,605,4.773,606,1.857,607,3.374,608,2.853,609,1.857,610,1.857,611,2.196,612,2.196,613,2.196,614,3.899,615,2.196,616,2.196,617,3.474,618,2.196,619,2.196,620,2.049,621,2.196,622,2.196,623,1.857,624,2.196,625,2.196,626,2.196,627,1.634,628,2.196,629,2.196,630,1.857,631,2.196]],["title/modules/PostsModule.html",[18,1.07,32,2.068]],["body/modules/PostsModule.html",[2,1.714,3,0.313,4,0.276,5,0.24,7,0.534,8,0.026,9,0.823,12,0.313,13,0.014,16,0.019,17,0.019,18,1.954,20,1.737,21,1.51,22,2.018,23,2.018,24,1.737,25,2.911,26,2.621,32,4.072,33,3.548,34,3.272,35,2.621,36,2.018,37,1.869,39,2.842,44,2.386,45,1.618,48,1.869,85,1.869,135,1.411,143,3.323,179,2.188,193,1.32,207,1.314,333,1.737,401,1.32,402,2.428,459,2.625,466,2.386,562,3.786,602,3.548,603,3.323,632,3.323,633,3.323,634,3.93,635,3.93,636,3.93,637,3.323,638,3.93,639,3.93,640,3.93,641,3.323,642,3.93,643,3.93,644,3.93,645,3.93,646,3.93,647,3.93]],["title/injectables/PostsService.html",[110,1.001,602,1.896]],["body/injectables/PostsService.html",[3,0.13,4,0.114,5,0.099,7,0.419,8,0.026,9,0.341,12,0.13,13,0.006,15,1.498,16,0.01,17,0.01,21,1.023,45,0.671,47,1.9,48,0.775,62,2.207,68,1.088,73,1.4,81,1.482,83,0.723,85,1.854,86,1.146,93,0.671,105,1.482,110,0.783,111,0.775,113,0.215,114,1.023,116,0.78,118,2.019,119,1.061,120,2.019,133,1.854,135,1.656,136,1.854,148,2.366,151,1.378,152,2.315,154,1.77,155,1.443,156,1.182,162,1.378,165,1.088,168,0.989,193,1.309,199,2.925,202,0.966,203,1.4,205,1.764,207,1.673,211,2.604,216,1.482,217,2.499,219,1.264,221,1.858,222,1.617,238,1.734,242,2.207,261,2.002,272,0.907,274,2.05,285,1.39,286,1.212,322,1.778,329,1.367,333,0.72,345,2.151,346,2.698,402,1.854,411,1.617,413,1.266,431,1.88,432,1.088,436,1.482,441,0.626,444,2.002,451,0.989,458,2.415,459,1.778,460,2.801,466,0.989,468,2.367,476,1.378,477,3.199,479,3.36,488,1.367,489,2.171,490,1.378,493,1.088,494,1.378,496,3.632,498,2.956,501,1.98,504,2.251,511,1.98,536,1.98,565,3.081,575,2.511,578,2.255,579,2.255,586,1.378,589,1.778,591,1.98,593,1.617,596,1.98,601,0.989,602,1.482,609,1.378,610,1.378,620,0.989,623,1.378,627,1.212,637,1.378,648,1.378,649,2.251,650,3.297,651,3.899,652,3.899,653,2.607,654,1.629,655,3.297,656,1.629,657,1.629,658,2.662,659,2.662,660,1.629,661,2.511,662,2.662,663,1.629,664,2.855,665,2.662,666,1.629,667,1.629,668,1.378,669,1.378,670,2.9,671,1.629,672,1.629,673,1.629,674,1.629,675,1.629,676,1.629,677,2.662,678,3.376,679,1.378,680,1.629,681,1.629,682,1.629,683,1.378,684,1.629,685,1.629,686,1.629,687,1.629,688,1.629,689,2.662,690,2.855,691,1.378,692,1.629,693,1.378,694,1.629,695,1.378,696,3.251,697,1.629,698,1.629,699,1.629,700,3.431,701,1.629,702,1.629,703,1.629,704,1.629,705,1.629,706,1.378,707,1.629,708,1.088,709,1.378,710,2.251,711,2.9,712,3.081,713,1.629,714,1.378,715,1.378,716,1.629,717,1.629,718,1.629,719,1.629,720,1.212,721,1.378,722,1.378,723,1.629,724,1.629,725,1.212,726,1.378,727,1.629,728,1.629,729,2.855,730,2.855,731,2.855,732,2.511,733,2.855,734,1.378,735,1.629,736,1.629,737,1.629,738,1.629,739,1.629,740,1.629,741,1.629,742,1.378,743,1.378,744,2.662,745,1.629,746,2.662,747,1.629,748,2.662,749,1.629,750,2.662,751,1.629,752,2.662,753,1.629,754,2.662,755,1.629,756,2.662,757,1.629,758,1.378,759,1.629]],["title/entities/Tag.html",[285,1.402,401,1.144]],["body/entities/Tag.html",[3,0.198,4,0.175,5,0.152,7,0.296,8,0.026,12,0.198,13,0.009,16,0.014,17,0.014,73,2.192,83,1.085,85,1.184,93,2.024,113,0.329,116,1.107,119,1.918,155,1.765,156,1.021,176,2.173,178,1.246,181,1.795,202,1.155,207,1.418,214,3.511,215,3.511,219,1.091,221,1.489,223,2.903,230,3.283,231,2.478,232,2.478,241,3.138,252,3.681,260,2.066,262,1.765,285,2.756,343,3.75,345,2.436,346,1.279,347,3.75,350,2.106,355,2.106,358,3.069,365,2.106,366,2.106,367,2.106,401,1.651,406,3.75,407,3.75,408,3.75,410,4.1,411,3.347,413,1.765,414,2.962,416,2.253,417,3.511,418,4.077,427,3.138,430,2.76,431,2.066,432,2.478,433,3.75,435,3.138,436,2.066,437,1.852,438,3.681,441,0.957,488,1.905,525,4.156,528,4.1,529,4.1,530,3.138,542,3.138,544,3.138,547,2.106,551,3.138,554,3.138,758,3.138,760,2.106,761,3.711,762,4.435,763,2.49,764,4.435,765,2.49,766,2.76,767,2.49,768,2.49,769,2.49,770,2.49,771,2.49,772,2.49,773,2.49,774,2.49,775,2.49,776,2.49]],["title/controllers/TagsController.html",[0,1.07,777,2.274]],["body/controllers/TagsController.html",[0,1.533,2,0.988,3,0.234,4,0.207,5,0.18,7,0.389,8,0.026,9,0.616,12,0.234,13,0.011,14,1.965,15,1.131,16,0.016,17,0.016,83,0.821,105,2.333,113,0.388,114,1.61,116,0.885,118,2.245,120,1.875,125,1.787,135,1.056,148,2.575,154,2.01,155,1.639,156,1.343,181,1.435,193,1.407,202,1.114,203,1.505,205,1.407,207,1.256,217,1.511,219,1.718,221,2.211,238,2.731,261,2.152,285,2.758,329,2.152,338,3.651,341,2.152,346,2.152,411,3.23,413,1.993,431,2.333,451,1.787,452,1.511,457,2.188,458,2.53,459,1.965,460,1.787,468,2.544,477,3.253,489,2.333,565,4.329,578,1.965,579,3.552,599,3.63,601,1.787,630,2.488,653,2.886,661,3.956,679,2.488,708,3.552,766,4.346,777,2.799,778,2.488,779,3.117,780,4.19,781,4.19,782,2.488,783,2.942,784,2.942,785,4.497,786,2.942,787,4.19,788,2.942,789,3.543,790,3.117,791,3.543,792,2.488,793,2.488,794,2.942,795,2.942,796,2.942,797,2.942,798,2.942,799,2.942,800,2.942]],["title/modules/TagsModule.html",[18,1.07,33,1.896]],["body/modules/TagsModule.html",[2,1.844,3,0.351,4,0.31,5,0.269,7,0.513,8,0.026,9,0.924,12,0.351,13,0.016,16,0.02,17,0.02,18,1.879,20,1.95,21,1.695,22,2.265,23,2.265,24,1.95,25,3.072,26,3.072,33,3.708,35,2.82,36,2.265,37,2.098,39,2.456,44,2.678,45,1.816,285,1.816,653,3.545,777,3.995,792,3.73,801,3.73,802,3.73,803,3.73,804,4.411,805,4.411,806,3.73,807,4.411]],["title/injectables/TagsService.html",[110,1.001,653,1.749]],["body/injectables/TagsService.html",[3,0.188,4,0.166,5,0.144,7,0.409,8,0.026,9,0.495,12,0.188,13,0.009,15,0.907,16,0.018,17,0.013,45,0.972,62,2.205,73,1.28,83,0.864,93,0.972,105,1.985,107,1.756,110,1.048,111,1.123,113,0.311,114,1.37,116,0.932,118,2.219,120,1.974,129,1.433,130,1.433,131,1.756,133,1.696,135,1.542,136,1.123,148,2.554,154,2.115,155,1.725,156,1.414,164,1.756,168,1.433,169,1.756,183,3.431,193,1.197,202,1.132,203,1.28,205,1.197,217,2.88,219,1.738,221,2.162,238,2.774,261,1.83,272,1.314,285,2.802,286,3.821,329,1.83,338,3.28,341,1.83,342,2.652,346,1.83,401,1.607,411,2.906,413,1.696,431,2.86,441,1.651,452,1.212,457,2.652,458,2.444,460,2.165,468,2.165,477,3.453,479,3.506,482,3.014,485,2.381,488,1.83,489,2.664,493,1.577,496,3.12,565,3.608,578,2.381,579,3.196,593,2.165,620,2.608,653,1.83,661,3.821,708,3.196,766,4.018,782,3.014,785,4.046,789,3.014,790,2.652,791,3.014,793,1.996,806,1.996,808,1.996,809,3.565,810,3.565,811,2.36,812,2.36,813,4.295,814,2.36,815,2.36,816,3.565,817,2.36,818,4.295,819,3.014,820,3.565,821,2.36,822,1.996,823,2.36,824,2.36,825,2.36,826,2.36,827,2.36,828,1.996,829,2.36,830,2.36,831,2.36,832,2.36,833,2.36,834,2.36]],["title/entities/User.html",[86,1.001,401,1.144]],["body/entities/User.html",[3,0.278,4,0.245,5,0.213,7,0.376,8,0.026,12,0.278,13,0.013,16,0.018,17,0.018,73,2.057,83,1.105,85,1.662,86,1.573,93,2.539,101,3.572,113,0.461,116,1.118,119,2.014,161,3.572,168,2.122,176,1.545,178,1.586,181,1.813,203,1.255,207,1.587,219,1.388,221,1.796,345,2.532,358,2.629,369,3.978,370,4.522,401,1.586,414,3.572,417,3.826,418,4.282,437,2.6,438,4.118,441,1.815,528,4.769,529,4.769,835,2.955,836,6.41,837,3.495,838,3.495,839,3.495,840,3.495,841,3.495,842,3.495,843,4.722,844,3.495,845,4.722,846,3.495,847,3.495,848,3.495,849,2.955,850,3.495,851,3.495,852,2.955,853,3.495]],["title/controllers/UsersController.html",[0,1.07,854,2.274]],["body/controllers/UsersController.html",[0,0.632,2,0.675,3,0.16,4,0.141,5,0.123,7,0.422,8,0.026,9,0.421,12,0.16,13,0.007,15,0.773,16,0.012,17,0.012,62,1.033,73,1.132,83,0.989,86,1.968,93,1.811,113,0.265,114,1.211,116,0.866,118,2.259,119,1.501,120,2.107,125,1.221,133,0.957,134,1.343,135,0.722,136,0.957,148,2.551,152,1.848,154,2.086,155,1.841,156,1.394,165,1.343,173,2.949,176,2.111,179,3.211,180,2.895,181,1.404,184,3.384,193,1.058,194,2.105,197,0.957,202,1.31,205,1.841,207,1,216,2.163,219,1.803,221,2.034,223,2.092,246,3.33,250,2.344,274,1.221,322,2.105,329,2.258,341,2.602,394,2.671,413,2.092,421,1.701,436,1.755,450,2.344,451,1.914,452,1.618,458,2.41,485,2.105,488,1.995,512,3.765,560,3.719,574,1.701,580,1.701,582,3.719,583,2.665,589,2.938,591,1.496,593,2.671,599,2.891,600,3.286,601,3.077,604,3.286,605,3.719,606,1.701,608,3.719,614,2.665,617,2.665,620,1.914,650,2.665,683,1.701,710,1.701,712,1.343,779,2.891,790,1.496,819,1.701,854,2.105,855,1.701,856,3.151,857,3.886,858,3.151,859,3.886,860,3.151,861,2.011,862,3.151,863,2.011,864,2.011,865,2.011,866,2.011,867,2.011,868,2.665,869,2.011,870,2.011,871,2.011,872,3.151,873,3.151,874,2.011,875,4.284,876,2.011,877,3.151,878,3.151,879,2.011,880,3.151,881,2.011,882,3.151,883,3.151,884,3.151,885,2.011,886,3.151,887,2.665,888,2.011,889,2.665,890,2.665,891,2.011,892,2.011,893,3.151,894,2.011,895,1.701,896,1.701,897,2.011,898,1.701,899,1.496,900,2.011,901,2.011,902,2.011,903,2.011,904,2.011,905,3.151,906,2.011,907,2.011,908,2.011,909,1.496,910,2.011,911,2.011,912,2.011,913,2.011,914,2.011,915,1.701,916,1.701,917,2.011,918,2.011,919,2.011,920,2.011,921,2.011,922,2.011]],["title/injectables/UsersCreateManyProvider.html",[110,1.001,923,1.896]],["body/injectables/UsersCreateManyProvider.html",[3,0.269,4,0.237,5,0.206,7,0.45,8,0.026,9,0.707,12,0.269,13,0.012,15,1.297,16,0.017,17,0.017,62,3.035,68,2.254,81,1.879,83,0.776,86,1.66,105,2.567,110,1.356,111,1.605,113,0.445,114,1.772,116,0.836,118,1.297,120,1.297,133,2.193,136,1.605,148,2.163,154,1.899,155,1.548,156,1.269,173,3.291,176,1.492,193,1.896,202,0.966,205,1.764,330,2.51,441,1.297,452,1.733,477,2.924,489,1.879,496,3.705,601,2.8,670,2.51,690,3.899,693,2.854,695,2.854,696,3.508,700,3.907,706,2.854,708,2.254,709,2.854,711,3.907,712,3.508,714,2.854,715,2.854,720,2.51,721,3.899,722,3.899,726,2.854,899,2.51,923,2.567,924,4.442,925,2.854,926,3.899,927,3.375,928,5.377,929,3.375,930,3.899,931,3.375,932,3.375,933,2.51,934,4.611,935,3.375,936,4.611,937,3.375,938,4.611,939,3.375,940,2.854,941,3.375,942,3.375,943,3.375,944,3.375,945,3.375,946,3.375,947,3.375,948,4.611,949,4.611]],["title/modules/UsersModule.html",[18,1.07,34,1.749]],["body/modules/UsersModule.html",[2,1.91,3,0.315,4,0.278,5,0.242,7,0.53,8,0.026,9,0.829,12,0.408,13,0.014,16,0.019,17,0.019,18,1.787,20,1.749,21,1.52,22,2.032,23,2.032,24,1.749,25,3.089,26,2.92,30,3.166,34,3.418,35,2.632,36,2.032,37,1.882,39,2.854,44,2.402,45,1.629,50,3.345,52,2.642,86,1.163,141,3.424,144,3.345,145,2.642,146,2.943,152,3.235,193,1.329,854,3.798,898,3.345,923,3.555,933,2.943,950,3.345,951,3.345,952,3.345,953,3.956,954,3.956,955,3.956,956,3.956,957,3.345,958,3.345,959,3.345,960,3.956,961,3.956,962,3.956]],["title/injectables/UsersService.html",[110,1.001,152,1.62]],["body/injectables/UsersService.html",[3,0.146,4,0.129,5,0.112,7,0.456,8,0.026,9,0.383,12,0.146,13,0.007,15,1.753,16,0.011,17,0.011,21,1.869,45,0.754,51,3.089,52,1.222,81,2.323,83,0.767,86,1.863,95,2.473,105,2.54,110,0.86,111,0.87,113,0.241,114,1.124,116,0.827,118,1.869,119,0.919,120,1.753,127,2.941,133,1.391,134,1.953,135,1.747,136,2.314,141,1.222,145,1.953,148,2.401,152,1.985,154,1.878,155,1.532,156,1.255,161,1.953,167,1.547,169,1.361,173,2.54,176,0.809,179,3.122,180,2.342,183,2.44,193,0.982,194,1.222,202,1.111,203,1.05,205,1.715,216,1.019,219,1.821,221,1.633,238,1.502,246,2.954,261,2.498,346,2.498,358,2.323,369,1.361,394,2.77,416,1.776,441,0.703,444,1.502,452,1.502,458,2.17,460,2.954,468,1.776,477,3.045,479,2.534,488,2.142,489,2.034,493,1.222,496,2.534,536,2.176,575,2.717,589,2.787,593,1.776,620,1.111,649,3.089,655,3.528,668,1.547,669,1.547,670,3.104,696,3.249,700,3.618,711,2.717,712,3.41,729,3.089,730,3.089,731,3.089,732,2.717,733,3.089,742,1.547,743,2.473,868,2.473,875,3.528,889,2.473,890,3.089,895,1.547,896,1.547,899,1.361,923,2.953,926,2.473,928,4.485,930,2.473,933,1.361,940,3.089,957,1.547,958,2.473,959,1.547,963,1.547,964,3.528,965,2.925,966,2.925,967,2.925,968,4.172,969,2.925,970,2.925,971,2.925,972,2.925,973,2.925,974,1.83,975,4.172,976,3.653,977,4.172,978,1.83,979,2.925,980,2.925,981,1.83,982,2.925,983,1.83,984,1.83,985,1.83,986,2.925,987,2.925,988,2.925,989,1.83,990,2.925,991,2.925,992,2.925,993,1.83,994,2.925,995,2.925,996,1.83,997,1.83,998,1.83,999,1.83,1000,2.925,1001,2.925,1002,1.83,1003,1.83,1004,1.83,1005,1.83,1006,1.83,1007,1.83,1008,1.83,1009,1.83,1010,1.83,1011,3.653,1012,3.653,1013,1.83,1014,3.653,1015,1.83,1016,1.83,1017,1.83,1018,1.83,1019,1.83,1020,1.83,1021,1.83,1022,1.83]],["title/coverage.html",[1023,3.451]],["body/coverage.html",[0,1.928,1,2.298,5,0.21,6,2.909,8,0.026,10,1.915,13,0.023,16,0.017,17,0.017,24,1.521,38,2.559,47,1.521,48,2.222,63,2.559,83,0.579,86,1.012,110,1.846,112,2.909,123,2.298,124,2.909,127,1.767,147,2.909,152,1.636,173,1.915,175,3.475,176,1.521,177,2.909,179,1.915,180,1.767,193,1.155,199,1.915,200,2.909,201,3.475,205,1.155,207,1.202,235,1.915,285,1.417,306,2.559,333,2.516,334,2.909,338,2.089,339,2.909,340,2.909,368,3.475,394,2.089,395,2.909,396,2.909,401,1.911,402,1.636,403,2.909,416,2.089,442,2.298,443,2.909,453,1.915,474,2.909,475,2.909,498,2.089,499,2.909,512,2.298,513,2.909,520,2.909,562,2.298,563,2.909,602,1.915,648,2.909,653,1.767,760,2.909,777,2.298,778,2.909,808,2.909,835,2.909,854,2.298,855,2.909,923,1.915,924,2.909,925,2.909,963,2.909,964,2.909,1023,2.559,1024,2.559,1025,3.44,1026,6.608,1027,5.95,1028,3.44,1029,5.305,1030,3.44,1031,2.909,1032,2.909,1033,6.741,1034,5.691,1035,5.305,1036,3.44,1037,3.44,1038,3.44,1039,5.305,1040,3.44,1041,3.44,1042,3.44,1043,3.44,1044,3.44,1045,3.44,1046,3.44,1047,3.44]],["title/dependencies.html",[21,1.573,1048,2.118]],["body/dependencies.html",[8,0.026,9,0.994,13,0.021,16,0.021,17,0.021,21,1.822,45,1.953,52,3.167,192,2.256,195,3.167,197,2.256,262,2.256,441,1.822,515,4.01,516,4.01,1049,4.742,1050,4.742,1051,6.177,1052,4.742,1053,4.742,1054,4.742,1055,4.742,1056,4.742,1057,4.742,1058,4.742,1059,4.742,1060,4.742,1061,4.742,1062,4.742,1063,4.742,1064,4.742,1065,4.742,1066,4.742,1067,4.742,1068,4.742,1069,4.742]],["title/miscellaneous/enumerations.html",[1070,1.585,1071,3.461]],["body/miscellaneous/enumerations.html",[8,0.026,16,0.021,17,0.021,113,0.632,207,1.488,212,4.3,246,3.51,247,4.3,251,4.3,253,4.3,279,4.3,280,4.3,281,4.887,282,4.887,337,4.565,1070,2.669,1071,4.053,1072,5.78,1073,5.78,1074,5.78,1075,5.78]],["title/miscellaneous/functions.html",[1070,1.585,1076,3.461]],["body/miscellaneous/functions.html",[8,0.022,16,0.022,17,0.022,24,2.909,113,0.674,725,3.803,779,3.803,909,3.803,915,4.323,916,4.323,1024,3.803,1031,4.323,1032,5.079,1070,2.846,1076,4.323,1077,5.112,1078,5.112,1079,5.112,1080,4.323,1081,5.112,1082,5.112,1083,5.112,1084,5.112]],["title/index.html",[113,0.376,561,2.408,1085,2.848]],["body/index.html",[0,1.059,4,0.154,5,0.321,8,0.025,16,0.013,17,0.013,18,1.059,37,2.497,55,1.855,65,4.771,68,1.465,69,1.855,79,1.855,97,3.896,107,3.699,108,1.855,109,1.855,126,1.632,129,3.32,130,3.427,135,1.21,155,1.132,164,2.507,165,1.465,168,3.188,176,1.49,202,0.46,205,0.737,217,1.126,219,0.645,222,1.332,223,2.859,244,1.855,274,3.188,345,0.97,385,1.465,397,3.054,444,1.126,450,1.632,479,1.332,485,1.465,486,1.855,488,1.126,519,2.85,539,3.472,596,1.632,627,2.507,641,1.855,664,1.855,691,1.855,696,1.465,720,1.632,725,1.632,732,2.507,734,3.472,822,1.855,828,3.896,849,1.855,852,1.855,887,3.896,909,3.905,1023,2.507,1024,4.471,1048,2.507,1080,4.771,1086,2.193,1087,2.193,1088,4.106,1089,3.371,1090,2.193,1091,2.193,1092,2.193,1093,2.193,1094,3.371,1095,2.193,1096,2.193,1097,5.467,1098,2.193,1099,5.787,1100,2.193,1101,2.193,1102,4.106,1103,3.371,1104,2.193,1105,3.371,1106,2.193,1107,4.106,1108,2.193,1109,3.371,1110,2.193,1111,2.193,1112,2.193,1113,2.193,1114,2.193,1115,4.608,1116,3.371,1117,2.193,1118,2.193,1119,2.193,1120,2.193,1121,3.371,1122,4.608,1123,3.371,1124,2.193,1125,3.371,1126,5.25,1127,4.608,1128,2.193,1129,3.371,1130,2.193,1131,2.193,1132,2.193,1133,4.608,1134,2.193,1135,2.193,1136,2.193,1137,2.193,1138,3.371,1139,2.193,1140,2.193,1141,2.193,1142,2.193,1143,3.371,1144,2.193,1145,2.193,1146,2.193,1147,3.371,1148,2.193,1149,2.193,1150,3.896,1151,2.193,1152,2.193,1153,2.193,1154,2.193,1155,2.193,1156,2.193,1157,2.193,1158,2.193,1159,3.371,1160,2.193,1161,2.193,1162,2.193,1163,2.193,1164,2.193,1165,2.193,1166,2.193,1167,2.193,1168,3.371,1169,2.193,1170,2.193,1171,2.193,1172,2.193,1173,3.371,1174,2.193,1175,2.193,1176,2.193,1177,3.371,1178,3.371,1179,2.193,1180,2.193,1181,2.193,1182,2.193,1183,2.193,1184,2.193,1185,2.193,1186,2.193,1187,2.193,1188,4.608,1189,2.193,1190,2.193,1191,2.193,1192,2.193,1193,2.193,1194,2.193,1195,1.855,1196,2.193,1197,4.106,1198,2.193,1199,5.787,1200,2.193,1201,2.193,1202,2.193,1203,3.371,1204,4.608,1205,3.371,1206,2.193,1207,2.193,1208,2.193,1209,2.193,1210,2.193,1211,2.193,1212,2.193,1213,2.193,1214,3.371,1215,2.193,1216,5.467,1217,2.193,1218,2.193,1219,2.193,1220,2.193,1221,2.193,1222,2.193,1223,2.193,1224,2.193,1225,3.371,1226,3.371,1227,5.25,1228,4.608,1229,4.106,1230,4.106,1231,2.193,1232,2.193,1233,2.193,1234,3.371,1235,2.193,1236,2.193,1237,4.608,1238,2.193,1239,3.371,1240,2.193,1241,3.371,1242,2.193,1243,2.193,1244,2.193,1245,2.193,1246,2.193,1247,2.193,1248,3.371,1249,3.371,1250,3.371,1251,2.193,1252,2.193,1253,2.193,1254,2.193,1255,4.106,1256,2.193,1257,2.193,1258,2.193,1259,2.193,1260,2.193,1261,2.193,1262,2.193,1263,2.193,1264,2.193,1265,2.193,1266,2.193,1267,3.371,1268,2.193,1269,2.193,1270,2.193,1271,2.193,1272,2.193,1273,2.193]],["title/modules.html",[20,2.051]],["body/modules.html",[8,0.022,16,0.022,17,0.022,19,3.347,20,2.215,30,2.79,31,3.043,32,3.043,33,2.79,34,2.573,1150,5.723,1274,6.768,1275,6.768,1276,6.768]],["title/overview.html",[1277,3.923]],["body/overview.html",[2,1.291,8,0.026,10,3.122,16,0.019,17,0.019,18,1.208,19,4.569,20,1.699,21,1.477,22,1.974,23,1.974,24,1.699,25,1.974,26,1.974,27,3.251,28,3.251,29,3.251,30,3.527,31,3.75,32,4.02,33,3.593,34,3.4,35,2.583,36,1.974,37,1.829,85,1.829,111,1.829,127,3.314,137,3.251,138,3.251,139,3.251,152,3.07,174,1.699,382,3.251,453,3.122,462,3.251,463,3.251,602,3.122,632,3.251,633,3.251,653,3.314,801,3.251,802,3.251,803,3.251,923,3.122,950,3.251,951,3.251,952,3.251,1277,3.251,1278,5.031,1279,3.844,1280,3.844]],["title/properties.html",[178,1.375,1048,2.118]],["body/properties.html",[8,0.025,16,0.023,17,0.023,178,1.784,202,1.113,222,3.226,1195,4.492,1281,5.312,1282,5.312,1283,5.312]],["title/miscellaneous/variables.html",[1070,1.585,1284,3.461]],["body/miscellaneous/variables.html",[8,0.024,16,0.023,17,0.023,38,3.952,57,3.952,63,4.569,64,4.492,113,0.701,337,3.548,1070,2.958,1284,4.492,1285,5.312]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":1026,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":1282,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":1060,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":1066,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":1069,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1059,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1027,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1029,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1042,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1030,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1041,"title":{},"body":{"coverage.html":{}}}],["03",{"_index":255,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1",{"_index":322,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["1.1.23",{"_index":1050,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":1034,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":905,"title":{},"body":{"controllers/UsersController.html":{}}}],["10.0.0",{"_index":1051,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":1058,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":1033,"title":{},"body":{"coverage.html":{}}}],["1024",{"_index":530,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["10})@apiquery({name",{"_index":885,"title":{},"body":{"controllers/UsersController.html":{}}}],["12/12",{"_index":1037,"title":{},"body":{"coverage.html":{}}}],["1234",{"_index":400,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["1234'})@isoptional()@isint()@type(undefined",{"_index":398,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["16t07:46:32+0000",{"_index":321,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["16t07:46:32+0000'})@isiso8601()@isoptional",{"_index":256,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["17.12.2",{"_index":1062,"title":{},"body":{"dependencies.html":{}}}],["1})@isint()@isnotempty",{"_index":508,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["1})@isnotempty()@isint",{"_index":224,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["2",{"_index":323,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["2.0.5",{"_index":1054,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":1035,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":582,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["201",{"_index":571,"title":{},"body":{"controllers/PostsController.html":{}}}],["2024",{"_index":254,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["256",{"_index":542,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["3.2.2",{"_index":1052,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":1036,"title":{},"body":{"coverage.html":{}}}],["3001",{"_index":1246,"title":{},"body":{"index.html":{}}}],["4",{"_index":1279,"title":{},"body":{"overview.html":{}}}],["4/4",{"_index":1040,"title":{},"body":{"coverage.html":{}}}],["4/6",{"_index":1044,"title":{},"body":{"coverage.html":{}}}],["400",{"_index":573,"title":{},"body":{"controllers/PostsController.html":{}}}],["404",{"_index":583,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["5/5",{"_index":1038,"title":{},"body":{"coverage.html":{}}}],["5/6",{"_index":1046,"title":{},"body":{"coverage.html":{}}}],["512",{"_index":551,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["6",{"_index":1278,"title":{},"body":{"overview.html":{}}}],["6/6",{"_index":1039,"title":{},"body":{"coverage.html":{}}}],["66",{"_index":1043,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":1280,"title":{},"body":{"overview.html":{}}}],["7.3.0",{"_index":1057,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":1068,"title":{},"body":{"dependencies.html":{}}}],["71",{"_index":1005,"title":{},"body":{"injectables/UsersService.html":{}}}],["8",{"_index":382,"title":{},"body":{"classes/CreateUserDto.html":{},"overview.html":{}}}],["8.11.5",{"_index":1064,"title":{},"body":{"dependencies.html":{}}}],["83",{"_index":1045,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":271,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["96",{"_index":836,"title":{},"body":{"entities/User.html":{}}}],["actual",{"_index":629,"title":{},"body":{"controllers/PostsController.html":{}}}],["add",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["additional",{"_index":241,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Tag.html":{}}}],["again",{"_index":1011,"title":{},"body":{"injectables/UsersService.html":{}}}],["against",{"_index":332,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["allowing",{"_index":1139,"title":{},"body":{"index.html":{}}}],["along",{"_index":664,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{}}}],["already",{"_index":1019,"title":{},"body":{"injectables/UsersService.html":{}}}],["always",{"_index":1263,"title":{},"body":{"index.html":{}}}],["amazing",{"_index":1183,"title":{},"body":{"index.html":{}}}],["api",{"_index":779,"title":{},"body":{"controllers/TagsController.html":{},"controllers/UsersController.html":{},"miscellaneous/functions.html":{}}}],["apioperation",{"_index":604,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":569,"title":{},"body":{"controllers/PostsController.html":{}}}],["apiparam",{"_index":607,"title":{},"body":{"controllers/PostsController.html":{}}}],["apiproperty",{"_index":196,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({description",{"_index":268,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({enum",{"_index":243,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiproperty({example",{"_index":290,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiproperty({type",{"_index":182,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["apipropertyoptional",{"_index":308,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({description",{"_index":226,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({type",{"_index":237,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiquery",{"_index":608,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiresponse",{"_index":605,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":606,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags('posts",{"_index":612,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('users",{"_index":902,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":1082,"title":{},"body":{"miscellaneous/functions.html":{}}}],["app.controller",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appconfig",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":909,"title":{},"body":{"controllers/UsersController.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["application'})@apiresponse({status",{"_index":879,"title":{},"body":{"controllers/UsersController.html":{}}}],["applications",{"_index":1094,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":19,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":10,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["argument",{"_index":1259,"title":{},"body":{"index.html":{}}}],["array",{"_index":183,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["associated",{"_index":287,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{}}}],["async",{"_index":477,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["atomically",{"_index":692,"title":{},"body":{"injectables/PostsService.html":{}}}],["auth",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"index.html":{}}}],["auth.controller",{"_index":142,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/providers/auth",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{}}}],["authcontroller",{"_index":123,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authentication",{"_index":968,"title":{},"body":{"injectables/UsersService.html":{}}}],["authgenerate",{"_index":1268,"title":{},"body":{"index.html":{}}}],["authmodule",{"_index":30,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":222,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"index.html":{},"properties.html":{}}}],["authorid",{"_index":208,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["authservice",{"_index":127,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["autoloadentities",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["automatically",{"_index":702,"title":{},"body":{"injectables/PostsService.html":{}}}],["available",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{}}}],["avoid",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{}}}],["avoided",{"_index":971,"title":{},"body":{"injectables/UsersService.html":{}}}],["await",{"_index":496,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["aws",{"_index":1129,"title":{},"body":{"index.html":{}}}],["backers",{"_index":1184,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":668,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["badrequestexception('please",{"_index":738,"title":{},"body":{"injectables/PostsService.html":{}}}],["badrequestexception('the",{"_index":1018,"title":{},"body":{"injectables/UsersService.html":{}}}],["based",{"_index":485,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["basic",{"_index":991,"title":{},"body":{"injectables/UsersService.html":{}}}],["basically",{"_index":1220,"title":{},"body":{"index.html":{}}}],["becaused",{"_index":1007,"title":{},"body":{"injectables/UsersService.html":{}}}],["become",{"_index":675,"title":{},"body":{"injectables/PostsService.html":{}}}],["before",{"_index":829,"title":{},"body":{"injectables/TagsService.html":{}}}],["between",{"_index":628,"title":{},"body":{"controllers/PostsController.html":{}}}],["bidirectional",{"_index":535,"title":{},"body":{"entities/Post.html":{}}}],["bit",{"_index":1207,"title":{},"body":{"index.html":{}}}],["blog",{"_index":206,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{}}}],["blue",{"_index":366,"title":{},"body":{"classes/CreateTagDto.html":{},"entities/Tag.html":{}}}],["blue\"}'})@isoptional()@isjson",{"_index":356,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["board",{"_index":1176,"title":{},"body":{"index.html":{}}}],["body",{"_index":451,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["body(new",{"_index":917,"title":{},"body":{"controllers/UsersController.html":{}}}],["boolean",{"_index":158,"title":{},"body":{"injectables/AuthService.html":{}}}],["bootstrap",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["both",{"_index":691,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{}}}],["brief",{"_index":344,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["browse",{"_index":1276,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1274,"title":{},"body":{"modules.html":{}}}],["building",{"_index":1089,"title":{},"body":{"index.html":{}}}],["business",{"_index":472,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["c:\\users\\mfabouatmeh\\desktop\\codesdar\\more\\postgre\\data",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["cascade",{"_index":432,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{}}}],["cascade'})@joincolumn",{"_index":428,"title":{},"body":{"entities/MetaOption.html":{}}}],["cascades",{"_index":624,"title":{},"body":{"controllers/PostsController.html":{}}}],["catch",{"_index":711,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["cause",{"_index":144,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["certain",{"_index":1223,"title":{},"body":{"index.html":{}}}],["changes",{"_index":1248,"title":{},"body":{"index.html":{}}}],["channel",{"_index":1152,"title":{},"body":{"index.html":{}}}],["character",{"_index":388,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["chars",{"_index":383,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["check",{"_index":168,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"index.html":{}}}],["checks",{"_index":969,"title":{},"body":{"injectables/UsersService.html":{}}}],["circular",{"_index":145,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["class",{"_index":13,"title":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":174,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"overview.html":{}}}],["clean",{"_index":724,"title":{},"body":{"injectables/PostsService.html":{}}}],["clicks",{"_index":1138,"title":{},"body":{"index.html":{}}}],["cloud",{"_index":1124,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":137,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":139,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":138,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule",{"_index":462,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule_providers",{"_index":463,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":632,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":634,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":633,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule",{"_index":801,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_exports",{"_index":802,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_providers",{"_index":803,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":950,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":952,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":951,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cmd",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["code",{"_index":519,"title":{},"body":{"classes/PatchUserDto.html":{},"index.html":{}}}],["color",{"_index":355,"title":{},"body":{"classes/CreateTagDto.html":{},"entities/Tag.html":{}}}],["column",{"_index":438,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["column({type",{"_index":417,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["combo",{"_index":1257,"title":{},"body":{"index.html":{}}}],["come",{"_index":1144,"title":{},"body":{"index.html":{}}}],["comma",{"_index":1202,"title":{},"body":{"index.html":{}}}],["commit",{"_index":706,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["compared",{"_index":1240,"title":{},"body":{"index.html":{}}}],["complete",{"_index":947,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["compo",{"_index":1216,"title":{},"body":{"index.html":{}}}],["compodoc",{"_index":1196,"title":{},"body":{"index.html":{}}}],["compodoc/compodoc",{"_index":1049,"title":{},"body":{"dependencies.html":{}}}],["config",{"_index":1227,"title":{},"body":{"index.html":{}}}],["config/app.config",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["config/database.config",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["config/environment.validation",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["config/profile.config",{"_index":959,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["configmodule",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["configmodule.forfeature(profileconfig",{"_index":962,"title":{},"body":{"modules/UsersModule.html":{}}}],["configmodule.forroot",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"injectables/UsersService.html":{}}}],["configservice.get('database.autoloadentities",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.host",{"_index":104,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.name",{"_index":106,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.pass",{"_index":102,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.port",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.synchronize",{"_index":90,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.user",{"_index":100,"title":{},"body":{"modules/AppModule.html":{}}}],["configtype",{"_index":977,"title":{},"body":{"injectables/UsersService.html":{}}}],["configurations",{"_index":1224,"title":{},"body":{"index.html":{}}}],["conflictexception",{"_index":932,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["conflictexception('could",{"_index":946,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["connect",{"_index":936,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["connecting",{"_index":1012,"title":{},"body":{"injectables/UsersService.html":{}}}],["connection",{"_index":949,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["console.error(error",{"_index":718,"title":{},"body":{"injectables/PostsService.html":{}}}],["const",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["constructor",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":974,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(datasource",{"_index":927,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["constructor(metaoptionrepository",{"_index":478,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["constructor(private",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{}}}],["constructor(tagsrepository",{"_index":811,"title":{},"body":{"injectables/TagsService.html":{}}}],["constructor(usersservice",{"_index":151,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["constructs",{"_index":979,"title":{},"body":{"injectables/UsersService.html":{}}}],["containing",{"_index":261,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["content",{"_index":209,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["context",{"_index":263,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"index.html":{}}}],["controller('auth",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('meta",{"_index":456,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["controller('posts",{"_index":611,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('tags",{"_index":794,"title":{},"body":{"controllers/TagsController.html":{}}}],["controller('users",{"_index":901,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["copy",{"_index":685,"title":{},"body":{"injectables/PostsService.html":{}}}],["corresponding",{"_index":645,"title":{},"body":{"modules/PostsModule.html":{}}}],["courses",{"_index":1158,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":1023,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":193,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["create(@body",{"_index":679,"title":{},"body":{"injectables/PostsService.html":{},"controllers/TagsController.html":{}}}],["create(createmetaoptiondto",{"_index":483,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["create(createpostdto",{"_index":656,"title":{},"body":{"injectables/PostsService.html":{}}}],["create(createtagdto",{"_index":782,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["create=many.provider",{"_index":1272,"title":{},"body":{"index.html":{}}}],["created",{"_index":413,"title":{},"body":{"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{}}}],["createdate",{"_index":406,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["createdatecolumn",{"_index":408,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["createmany",{"_index":926,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["createmany(createmanyusersdto",{"_index":930,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["createmanyusers",{"_index":856,"title":{},"body":{"controllers/UsersController.html":{}}}],["createmanyusers(@body",{"_index":920,"title":{},"body":{"controllers/UsersController.html":{}}}],["createmanyusers(createmanyusersdto",{"_index":861,"title":{},"body":{"controllers/UsersController.html":{}}}],["createmanyusersdto",{"_index":173,"title":{"classes/CreateManyUsersDto.html":{}},"body":{"classes/CreateManyUsersDto.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createmanyusersdto.users",{"_index":939,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["createmetaoption",{"_index":445,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["createmetaoption(createpostmetaoptiondto",{"_index":446,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["createmetaoptiondto",{"_index":487,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["createpost",{"_index":564,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(@body",{"_index":618,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(createpostdto",{"_index":568,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpostdto",{"_index":199,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["createpostmetaoptiondto",{"_index":449,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["createpostmetaoptionsdto",{"_index":235,"title":{"classes/CreatePostMetaOptionsDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["creates",{"_index":329,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{}}}],["createtagdto",{"_index":338,"title":{"classes/CreateTagDto.html":{}},"body":{"classes/CreateTagDto.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"coverage.html":{}}}],["createuser",{"_index":972,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuser(createuserdto",{"_index":982,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto",{"_index":180,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":1016,"title":{},"body":{"injectables/UsersService.html":{}}}],["createusers",{"_index":857,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusers(createuserdto",{"_index":864,"title":{},"body":{"controllers/UsersController.html":{}}}],["creating",{"_index":204,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{}}}],["creation",{"_index":658,"title":{},"body":{"injectables/PostsService.html":{}}}],["crowded",{"_index":676,"title":{},"body":{"injectables/PostsService.html":{}}}],["crud",{"_index":966,"title":{},"body":{"injectables/UsersService.html":{}}}],["d",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["data",{"_index":341,"title":{},"body":{"classes/CreateTagDto.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{}}}],["data'})@post",{"_index":576,"title":{},"body":{"controllers/PostsController.html":{}}}],["database",{"_index":105,"title":{},"body":{"modules/AppModule.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["databaseconfig",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["datasource",{"_index":928,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["date",{"_index":252,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["db",{"_index":647,"title":{},"body":{"modules/PostsModule.html":{}}}],["declarations",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorator",{"_index":326,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["decorators",{"_index":181,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["deeper",{"_index":1154,"title":{},"body":{"index.html":{}}}],["default",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"entities/Post.html":{},"miscellaneous/variables.html":{}}}],["defaultvaluepipe",{"_index":894,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(1",{"_index":913,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(10",{"_index":911,"title":{},"body":{"controllers/UsersController.html":{}}}],["define",{"_index":1264,"title":{},"body":{"index.html":{}}}],["defined",{"_index":116,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":565,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["delete'})@apiresponse({status",{"_index":581,"title":{},"body":{"controllers/PostsController.html":{}}}],["delete('soft",{"_index":787,"title":{},"body":{"controllers/TagsController.html":{}}}],["delete(@query('id",{"_index":630,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{}}}],["delete(id",{"_index":578,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["deleted",{"_index":431,"title":{},"body":{"entities/MetaOption.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["deletedat",{"_index":762,"title":{},"body":{"entities/Tag.html":{}}}],["deletedatecolumn",{"_index":764,"title":{},"body":{"entities/Tag.html":{}}}],["deletes",{"_index":579,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["deleting",{"_index":830,"title":{},"body":{"injectables/TagsService.html":{}}}],["deletion",{"_index":661,"title":{},"body":{"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["dependencies",{"_index":21,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{},"overview.html":{}}}],["dependency",{"_index":146,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{}}}],["deploy",{"_index":1115,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":1128,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":1121,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":1137,"title":{},"body":{"index.html":{}}}],["description",{"_index":202,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"index.html":{},"properties.html":{}}}],["details",{"_index":488,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["details'})@apiresponse({status",{"_index":870,"title":{},"body":{"controllers/UsersController.html":{}}}],["development",{"_index":1101,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":1164,"title":{},"body":{"index.html":{}}}],["differ",{"_index":847,"title":{},"body":{"entities/User.html":{}}}],["directory",{"_index":1255,"title":{},"body":{"index.html":{}}}],["discord",{"_index":1151,"title":{},"body":{"index.html":{}}}],["dive",{"_index":1153,"title":{},"body":{"index.html":{}}}],["doc",{"_index":1199,"title":{},"body":{"index.html":{}}}],["doclet",{"_index":1198,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":1024,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["doesn't",{"_index":742,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["doesnt",{"_index":674,"title":{},"body":{"injectables/PostsService.html":{}}}],["draft",{"_index":280,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["dto",{"_index":203,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["dto/create",{"_index":609,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["dto/patch",{"_index":610,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["dtos/create",{"_index":452,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["dtos/get",{"_index":895,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/patch",{"_index":897,"title":{},"body":{"controllers/UsersController.html":{}}}],["e.g",{"_index":250,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/UsersController.html":{}}}],["e2e",{"_index":1110,"title":{},"body":{"index.html":{}}}],["each",{"_index":198,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["eager",{"_index":523,"title":{},"body":{"entities/Post.html":{}}}],["efficient",{"_index":1090,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":1120,"title":{},"body":{"index.html":{}}}],["email",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["enable",{"_index":1247,"title":{},"body":{"index.html":{}}}],["endpoint",{"_index":1001,"title":{},"body":{"injectables/UsersService.html":{}}}],["ensure",{"_index":1118,"title":{},"body":{"index.html":{}}}],["ensuring",{"_index":970,"title":{},"body":{"injectables/UsersService.html":{}}}],["enterprise",{"_index":1167,"title":{},"body":{"index.html":{}}}],["entire",{"_index":639,"title":{},"body":{"modules/PostsModule.html":{}}}],["entities",{"_index":85,"title":{},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"overview.html":{}}}],["entity",{"_index":401,"title":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}},"body":{"entities/MetaOption.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"coverage.html":{}}}],["entries",{"_index":882,"title":{},"body":{"controllers/UsersController.html":{}}}],["enum",{"_index":311,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["enumerations",{"_index":1071,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/post",{"_index":303,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["env",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["env.${env",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["environmentvalidation",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["equal",{"_index":735,"title":{},"body":{"injectables/PostsService.html":{}}}],["error",{"_index":712,"title":{},"body":{"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["error('post",{"_index":701,"title":{},"body":{"injectables/PostsService.html":{}}}],["error.message",{"_index":719,"title":{},"body":{"injectables/PostsService.html":{}}}],["etc",{"_index":546,"title":{},"body":{"entities/Post.html":{}}}],["everything",{"_index":707,"title":{},"body":{"injectables/PostsService.html":{}}}],["example",{"_index":223,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"entities/Tag.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["except",{"_index":505,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["exception",{"_index":1017,"title":{},"body":{"injectables/UsersService.html":{}}}],["exist",{"_index":743,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["existing",{"_index":501,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["existinguser",{"_index":1014,"title":{},"body":{"injectables/UsersService.html":{}}}],["exists",{"_index":169,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["experience",{"_index":1156,"title":{},"body":{"index.html":{}}}],["explain",{"_index":1211,"title":{},"body":{"index.html":{}}}],["export",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":1056,"title":{},"body":{"dependencies.html":{}}}],["extend",{"_index":517,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["extends",{"_index":502,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["failure",{"_index":717,"title":{},"body":{"injectables/PostsService.html":{}}}],["false",{"_index":93,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["fast",{"_index":1131,"title":{},"body":{"index.html":{}}}],["feature",{"_index":643,"title":{},"body":{"modules/PostsModule.html":{}}}],["featured",{"_index":231,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["featuredimage",{"_index":343,"title":{},"body":{"classes/CreateTagDto.html":{},"entities/Tag.html":{}}}],["featuredimageurl",{"_index":210,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["features",{"_index":1141,"title":{},"body":{"index.html":{}}}],["fetch",{"_index":560,"title":{},"body":{"entities/Post.html":{},"controllers/UsersController.html":{}}}],["fetched",{"_index":880,"title":{},"body":{"controllers/UsersController.html":{}}}],["fetches",{"_index":877,"title":{},"body":{"controllers/UsersController.html":{}}}],["few",{"_index":1133,"title":{},"body":{"index.html":{}}}],["fields",{"_index":504,"title":{},"body":{"classes/PatchPostDto.html":{},"injectables/PostsService.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{}}}],["filename",{"_index":1002,"title":{},"body":{"injectables/UsersService.html":{}}}],["filters",{"_index":986,"title":{},"body":{"injectables/UsersService.html":{}}}],["finally",{"_index":720,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{},"index.html":{}}}],["find",{"_index":697,"title":{},"body":{"injectables/PostsService.html":{}}}],["findall",{"_index":649,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["findall(getuserparamdto",{"_index":984,"title":{},"body":{"injectables/UsersService.html":{}}}],["findall(userid",{"_index":662,"title":{},"body":{"injectables/PostsService.html":{}}}],["findmultipletags",{"_index":809,"title":{},"body":{"injectables/TagsService.html":{}}}],["findmultipletags(tags",{"_index":816,"title":{},"body":{"injectables/TagsService.html":{}}}],["findonebyid",{"_index":973,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyid(id",{"_index":992,"title":{},"body":{"injectables/UsersService.html":{}}}],["finds",{"_index":818,"title":{},"body":{"injectables/TagsService.html":{}}}],["first",{"_index":1214,"title":{},"body":{"index.html":{}}}],["firstname",{"_index":369,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["flag",{"_index":1237,"title":{},"body":{"index.html":{}}}],["flat",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TagsService.html":{},"index.html":{}}}],["focus",{"_index":1140,"title":{},"body":{"index.html":{}}}],["follow",{"_index":1170,"title":{},"body":{"index.html":{}}}],["format",{"_index":421,"title":{},"body":{"entities/MetaOption.html":{},"controllers/UsersController.html":{}}}],["forwardref",{"_index":141,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["found",{"_index":620,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["found'})@delete",{"_index":584,"title":{},"body":{"controllers/PostsController.html":{}}}],["found'})@patch",{"_index":597,"title":{},"body":{"controllers/PostsController.html":{}}}],["framework",{"_index":1088,"title":{},"body":{"index.html":{}}}],["friendly",{"_index":544,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["full",{"_index":1166,"title":{},"body":{"index.html":{}}}],["function",{"_index":1032,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["functions",{"_index":1076,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":1136,"title":{},"body":{"index.html":{}}}],["generate",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/TagsService.html":{},"index.html":{}}}],["generated",{"_index":1242,"title":{},"body":{"index.html":{}}}],["generating",{"_index":1256,"title":{},"body":{"index.html":{}}}],["get('/:id",{"_index":908,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:id?')@apioperation({summary",{"_index":876,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:userid",{"_index":613,"title":{},"body":{"controllers/PostsController.html":{}}}],["get('/:userid?')@apioperation({summary",{"_index":588,"title":{},"body":{"controllers/PostsController.html":{}}}],["get()@apioperation({summary",{"_index":867,"title":{},"body":{"controllers/UsersController.html":{}}}],["gethello",{"_index":115,"title":{},"body":{"injectables/AppService.html":{}}}],["getposts",{"_index":566,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(@param('userid",{"_index":615,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(userid",{"_index":587,"title":{},"body":{"controllers/PostsController.html":{}}}],["getting",{"_index":561,"title":{"index.html":{}},"body":{"entities/Post.html":{}}}],["getuserbyid",{"_index":858,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuserbyid(@query('id",{"_index":903,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuserbyid(id",{"_index":866,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuserparamdto",{"_index":890,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getusers",{"_index":859,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(getuserparamdto",{"_index":874,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusersparamdto",{"_index":394,"title":{"classes/GetUsersParamDto.html":{}},"body":{"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["give",{"_index":1254,"title":{},"body":{"index.html":{}}}],["global",{"_index":915,"title":{},"body":{"controllers/UsersController.html":{},"miscellaneous/functions.html":{}}}],["go",{"_index":1213,"title":{},"body":{"index.html":{}}}],["going",{"_index":1232,"title":{},"body":{"index.html":{}}}],["graph",{"_index":1161,"title":{},"body":{"index.html":{}}}],["grow",{"_index":1180,"title":{},"body":{"index.html":{}}}],["handle",{"_index":655,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["handling",{"_index":468,"title":{},"body":{"modules/MetaOptionsModule.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["hands",{"_index":1155,"title":{},"body":{"index.html":{}}}],["handy",{"_index":1145,"title":{},"body":{"index.html":{}}}],["having",{"_index":1243,"title":{},"body":{"index.html":{}}}],["hello",{"_index":121,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":1159,"title":{},"body":{"index.html":{}}}],["here",{"_index":1188,"title":{},"body":{"index.html":{}}}],["host",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["http://localhost.com/images/image1.jpg",{"_index":319,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["http://localhost.com/images/image1.jpg'})@isoptional()@minlength(4)@maxlength(1024)@isurl",{"_index":233,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["http://localhost:3001/coverage.htmlit",{"_index":1201,"title":{},"body":{"index.html":{}}}],["httpexception",{"_index":995,"title":{},"body":{"injectables/UsersService.html":{}}}],["https://example.com/images/tag",{"_index":350,"title":{},"body":{"classes/CreateTagDto.html":{},"entities/Tag.html":{}}}],["https://nestjs.com",{"_index":1192,"title":{},"body":{"index.html":{}}}],["https://orkhan.gitbook.io/typeorm/docs/decorator",{"_index":775,"title":{},"body":{"entities/Tag.html":{}}}],["https://schema.org",{"_index":264,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://schema.org\",\\r\\n",{"_index":317,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["httpstatus",{"_index":996,"title":{},"body":{"injectables/UsersService.html":{}}}],["httpstatus.moved_permanently",{"_index":1000,"title":{},"body":{"injectables/UsersService.html":{}}}],["hyphen",{"_index":1228,"title":{},"body":{"index.html":{}}}],["i'll",{"_index":1210,"title":{},"body":{"index.html":{}}}],["i'm",{"_index":1250,"title":{},"body":{"index.html":{}}}],["i.e",{"_index":1266,"title":{},"body":{"index.html":{}}}],["id",{"_index":221,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["id'})@apiquery({name",{"_index":580,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["id=5",{"_index":873,"title":{},"body":{"controllers/UsersController.html":{}}}],["identifier",{"_index":416,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["ids",{"_index":286,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["image",{"_index":232,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["image.jpg",{"_index":367,"title":{},"body":{"classes/CreateTagDto.html":{},"entities/Tag.html":{}}}],["image.jpg'})@isoptional()@isurl()@maxlength(1024",{"_index":351,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["import",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["important",{"_index":723,"title":{},"body":{"injectables/PostsService.html":{}}}],["imported",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["imports",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}}}],["in(tags",{"_index":827,"title":{},"body":{"injectables/TagsService.html":{}}}],["include",{"_index":384,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["incoming",{"_index":327,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["index",{"_index":113,"title":{"index.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["indicating",{"_index":411,"title":{},"body":{"entities/MetaOption.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["information",{"_index":450,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["infrastructure",{"_index":1142,"title":{},"body":{"index.html":{}}}],["initializing",{"_index":1078,"title":{},"body":{"miscellaneous/functions.html":{}}}],["inject",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["inject(forwardref",{"_index":167,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["inject(profileconfig.key",{"_index":999,"title":{},"body":{"injectables/UsersService.html":{}}}],["injectable",{"_index":110,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":111,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injecting",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["injectrepository",{"_index":493,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(metaoption",{"_index":494,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{}}}],["injectrepository(post",{"_index":672,"title":{},"body":{"injectables/PostsService.html":{}}}],["injectrepository(tag",{"_index":823,"title":{},"body":{"injectables/TagsService.html":{}}}],["injectrepository(user",{"_index":998,"title":{},"body":{"injectables/UsersService.html":{}}}],["injects",{"_index":457,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["innovations",{"_index":365,"title":{},"body":{"classes/CreateTagDto.html":{},"entities/Tag.html":{}}}],["innovations'})@isoptional()@isstring",{"_index":348,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["inside",{"_index":646,"title":{},"body":{"modules/PostsModule.html":{}}}],["install",{"_index":1135,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":1100,"title":{},"body":{"index.html":{}}}],["instance",{"_index":330,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["instead",{"_index":704,"title":{},"body":{"injectables/PostsService.html":{}}}],["instructs",{"_index":1239,"title":{},"body":{"index.html":{}}}],["integer",{"_index":220,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["interact",{"_index":1162,"title":{},"body":{"index.html":{}}}],["interacting",{"_index":482,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/TagsService.html":{}}}],["interacts",{"_index":965,"title":{},"body":{"injectables/UsersService.html":{}}}],["invalid",{"_index":574,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["isarray",{"_index":189,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["isauth",{"_index":149,"title":{},"body":{"injectables/AuthService.html":{}}}],["isemail",{"_index":390,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isemail()@isnotempty()@maxlength(96",{"_index":371,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":293,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(poststatus",{"_index":315,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttype",{"_index":312,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isglobal",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["isint",{"_index":294,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{}}}],["isiso8601",{"_index":295,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isjson",{"_index":296,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{}}}],["isnan(userid",{"_index":906,"title":{},"body":{"controllers/UsersController.html":{}}}],["isnotempty",{"_index":190,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchPostDto.html":{}}}],["isnotempty()@isjson",{"_index":335,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["isoptional",{"_index":297,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{}}}],["isoptional()@isjson",{"_index":266,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isstring",{"_index":298,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@maxlength(96)@minlength(8)@matches(/^(?=.*[a",{"_index":377,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":373,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isoptional()@minlength(3)@maxlength(96",{"_index":375,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isurl",{"_index":299,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["it's",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["items",{"_index":185,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["itself",{"_index":1205,"title":{},"body":{"index.html":{}}}],["job",{"_index":1173,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":1175,"title":{},"body":{"index.html":{}}}],["joi",{"_index":1061,"title":{},"body":{"dependencies.html":{}}}],["join",{"_index":1186,"title":{},"body":{"index.html":{}}}],["joincolumn",{"_index":439,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["jointable",{"_index":553,"title":{},"body":{"entities/Post.html":{}}}],["json",{"_index":260,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["kamil",{"_index":1190,"title":{},"body":{"index.html":{}}}],["key",{"_index":641,"title":{},"body":{"modules/PostsModule.html":{},"index.html":{}}}],["large",{"_index":527,"title":{},"body":{"entities/Post.html":{}}}],["last",{"_index":435,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["lastname",{"_index":370,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["later",{"_index":733,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["learn",{"_index":1148,"title":{},"body":{"index.html":{}}}],["legend",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":529,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["lengthy",{"_index":1209,"title":{},"body":{"index.html":{}}}],["let's",{"_index":1245,"title":{},"body":{"index.html":{}}}],["letter",{"_index":386,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["letters",{"_index":360,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["license",{"_index":1195,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1178,"title":{},"body":{"index.html":{}}}],["limit",{"_index":875,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["linenumber",{"_index":1004,"title":{},"body":{"injectables/UsersService.html":{}}}],["linkedin",{"_index":1172,"title":{},"body":{"index.html":{}}}],["list",{"_index":593,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["little",{"_index":1206,"title":{},"body":{"index.html":{}}}],["load",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["loaded",{"_index":698,"title":{},"body":{"injectables/PostsService.html":{}}}],["localhost:3001",{"_index":1262,"title":{},"body":{"index.html":{}}}],["log",{"_index":716,"title":{},"body":{"injectables/PostsService.html":{}}}],["logic",{"_index":473,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["login",{"_index":150,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(email",{"_index":159,"title":{},"body":{"injectables/AuthService.html":{}}}],["looking",{"_index":1123,"title":{},"body":{"index.html":{}}}],["loop",{"_index":1169,"title":{},"body":{"index.html":{}}}],["lowercase",{"_index":273,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["main",{"_index":227,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["make",{"_index":900,"title":{},"body":{"controllers/UsersController.html":{}}}],["makes",{"_index":79,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["making",{"_index":503,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["managing",{"_index":444,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["manually",{"_index":94,"title":{},"body":{"modules/AppModule.html":{}}}],["many",{"_index":176,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{}}}],["many.provider",{"_index":957,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["many.provider.ts",{"_index":925,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{},"coverage.html":{}}}],["many.provider.ts:11",{"_index":929,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["many.provider.ts:19",{"_index":931,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["manytomany",{"_index":554,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["manytomany(undefined",{"_index":547,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["manytoone",{"_index":555,"title":{},"body":{"entities/Post.html":{}}}],["manytoone(undefined",{"_index":521,"title":{},"body":{"entities/Post.html":{}}}],["marking",{"_index":789,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["match",{"_index":853,"title":{},"body":{"entities/User.html":{}}}],["matches",{"_index":300,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["matches(/^(?=.*[a",{"_index":393,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(/^[a",{"_index":314,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["matching",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["mau",{"_index":1126,"title":{},"body":{"index.html":{}}}],["maximum",{"_index":988,"title":{},"body":{"injectables/UsersService.html":{}}}],["maxlength",{"_index":301,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["maxlength(1024",{"_index":320,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(256",{"_index":313,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(512",{"_index":310,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(96",{"_index":391,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["meaning",{"_index":686,"title":{},"body":{"injectables/PostsService.html":{}}}],["message",{"_index":272,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["meta",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["metadata",{"_index":262,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"entities/Tag.html":{},"dependencies.html":{}}}],["metaoption",{"_index":402,"title":{"entities/MetaOption.html":{}},"body":{"entities/MetaOption.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["metaoptionrepository",{"_index":481,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["metaoptions",{"_index":211,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"injectables/PostsService.html":{}}}],["metaoptions.post",{"_index":533,"title":{},"body":{"entities/Post.html":{}}}],["metaoptionscontroller",{"_index":442,"title":{"controllers/MetaOptionsController.html":{}},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"coverage.html":{}}}],["metaoptionsmodule",{"_index":31,"title":{"modules/MetaOptionsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules.html":{},"overview.html":{}}}],["metaoptionsrepository",{"_index":652,"title":{},"body":{"injectables/PostsService.html":{}}}],["metaoptionsservice",{"_index":453,"title":{"injectables/MetaOptionsService.html":{}},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{},"overview.html":{}}}],["metavalue",{"_index":324,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"entities/MetaOption.html":{}}}],["method",{"_index":623,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["methods",{"_index":114,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["migrations",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["minimum",{"_index":381,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength",{"_index":302,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":364,"title":{},"body":{"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(4",{"_index":309,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["minlength(8",{"_index":392,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":1070,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1177,"title":{},"body":{"index.html":{}}}],["mode",{"_index":1103,"title":{},"body":{"index.html":{}}}],["module",{"_index":18,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["modules",{"_index":20,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["moment",{"_index":731,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["more",{"_index":1122,"title":{},"body":{"index.html":{}}}],["moved",{"_index":1009,"title":{},"body":{"injectables/UsersService.html":{}}}],["multiple",{"_index":819,"title":{},"body":{"injectables/TagsService.html":{},"controllers/UsersController.html":{}}}],["mysql",{"_index":424,"title":{},"body":{"entities/MetaOption.html":{}}}],["myśliwiec",{"_index":1191,"title":{},"body":{"index.html":{}}}],["name",{"_index":155,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateTagDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["necessary",{"_index":980,"title":{},"body":{"injectables/UsersService.html":{}}}],["need",{"_index":734,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{}}}],["needed",{"_index":1253,"title":{},"body":{"index.html":{}}}],["needs",{"_index":507,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["nest",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/TagsService.html":{},"index.html":{}}}],["nestframework",{"_index":1194,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":1080,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["nestjs/common",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":1053,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":515,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1055,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":197,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["never",{"_index":960,"title":{},"body":{"modules/UsersModule.html":{}}}],["new",{"_index":205,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{}}}],["newly",{"_index":659,"title":{},"body":{"injectables/PostsService.html":{}}}],["newuser",{"_index":940,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["newusers",{"_index":934,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["newusers.push(result",{"_index":944,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["next",{"_index":1236,"title":{},"body":{"index.html":{}}}],["node.js",{"_index":1087,"title":{},"body":{"index.html":{}}}],["note",{"_index":422,"title":{},"body":{"entities/MetaOption.html":{}}}],["notfoundexception",{"_index":669,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["notfoundexception(\"this",{"_index":741,"title":{},"body":{"injectables/PostsService.html":{}}}],["notfoundexception('user",{"_index":1013,"title":{},"body":{"injectables/UsersService.html":{}}}],["now",{"_index":1204,"title":{},"body":{"index.html":{}}}],["npcs",{"_index":1215,"title":{},"body":{"index.html":{}}}],["npm",{"_index":1099,"title":{},"body":{"index.html":{}}}],["npx",{"_index":107,"title":{},"body":{"modules/AppModule.html":{},"injectables/TagsService.html":{},"index.html":{}}}],["null",{"_index":236,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["nullable",{"_index":418,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["number",{"_index":219,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["object",{"_index":238,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["objects",{"_index":990,"title":{},"body":{"injectables/UsersService.html":{}}}],["occured",{"_index":1006,"title":{},"body":{"injectables/UsersService.html":{}}}],["occurs",{"_index":713,"title":{},"body":{"injectables/PostsService.html":{}}}],["offer",{"_index":1174,"title":{},"body":{"index.html":{}}}],["official",{"_index":1127,"title":{},"body":{"index.html":{}}}],["once",{"_index":1235,"title":{},"body":{"index.html":{}}}],["ondelete",{"_index":427,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["one",{"_index":385,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"index.html":{}}}],["onetomany",{"_index":845,"title":{},"body":{"entities/User.html":{}}}],["onetomany(undefined",{"_index":842,"title":{},"body":{"entities/User.html":{}}}],["onetoone",{"_index":440,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["onetoone(undefined",{"_index":425,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["open",{"_index":1179,"title":{},"body":{"index.html":{}}}],["operations",{"_index":460,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["operator",{"_index":683,"title":{},"body":{"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["option",{"_index":448,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{}}}],["option.entity",{"_index":466,"title":{},"body":{"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["option.entity.ts",{"_index":403,"title":{},"body":{"entities/MetaOption.html":{},"coverage.html":{}}}],["option.entity.ts:21",{"_index":415,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:31",{"_index":419,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:37",{"_index":409,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:43",{"_index":434,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:53",{"_index":429,"title":{},"body":{"entities/MetaOption.html":{}}}],["optional",{"_index":156,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["optional)'})@apiresponse({status",{"_index":592,"title":{},"body":{"controllers/PostsController.html":{}}}],["options",{"_index":242,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"injectables/PostsService.html":{}}}],["options.controller",{"_index":465,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["options.controller.ts",{"_index":443,"title":{},"body":{"controllers/MetaOptionsController.html":{},"coverage.html":{}}}],["options.controller.ts:22",{"_index":447,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["options.dto",{"_index":307,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{}}}],["options.dto.ts",{"_index":334,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["options.dto.ts:14",{"_index":336,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["options.module",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["options.module.ts",{"_index":464,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["options.service",{"_index":455,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{}}}],["options.service.ts",{"_index":475,"title":{},"body":{"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["options.service.ts:12",{"_index":480,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["options.service.ts:27",{"_index":484,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["options/dtos/create",{"_index":306,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["options/meta",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["options/providers/meta",{"_index":474,"title":{},"body":{"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["order",{"_index":1217,"title":{},"body":{"index.html":{}}}],["out",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["over",{"_index":1203,"title":{},"body":{"index.html":{}}}],["overview",{"_index":1277,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1048,"title":{"dependencies.html":{},"properties.html":{}},"body":{"index.html":{}}}],["page",{"_index":246,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["pagination",{"_index":889,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param",{"_index":458,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param.dto",{"_index":896,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param.dto.ts",{"_index":396,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["param.dto.ts:13",{"_index":399,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["parameter",{"_index":872,"title":{},"body":{"controllers/UsersController.html":{}}}],["parameters",{"_index":154,"title":{},"body":{"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["parseint(id",{"_index":904,"title":{},"body":{"controllers/UsersController.html":{}}}],["parseintpipe",{"_index":599,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["part",{"_index":1165,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":510,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["partialtype(createpostdto",{"_index":506,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["partialtype(createuserdto",{"_index":514,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["particular",{"_index":1234,"title":{},"body":{"index.html":{}}}],["parts",{"_index":1212,"title":{},"body":{"index.html":{}}}],["pass",{"_index":1258,"title":{},"body":{"index.html":{}}}],["passed",{"_index":687,"title":{},"body":{"injectables/PostsService.html":{}}}],["password",{"_index":101,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["patch",{"_index":600,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["patches",{"_index":893,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchpostdto",{"_index":498,"title":{"classes/PatchPostDto.html":{}},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["patchpostdto.content",{"_index":747,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.featuredimageurl",{"_index":755,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.id",{"_index":740,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.posttype",{"_index":751,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.publishon",{"_index":757,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.slug",{"_index":753,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.status",{"_index":749,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.tags.length",{"_index":737,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.title",{"_index":745,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchuser",{"_index":860,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(@body",{"_index":922,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(patchuserdto",{"_index":891,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuserdto",{"_index":512,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["path",{"_index":1225,"title":{},"body":{"index.html":{}}}],["per",{"_index":884,"title":{},"body":{"controllers/UsersController.html":{}}}],["perform",{"_index":95,"title":{},"body":{"modules/AppModule.html":{},"injectables/UsersService.html":{}}}],["permanently",{"_index":1008,"title":{},"body":{"injectables/UsersService.html":{}}}],["person",{"_index":265,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["person\"\\r\\n",{"_index":318,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["pg",{"_index":1063,"title":{},"body":{"dependencies.html":{}}}],["pg_ctl",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["pick",{"_index":1233,"title":{},"body":{"index.html":{}}}],["pipes",{"_index":1083,"title":{},"body":{"miscellaneous/functions.html":{}}}],["platform",{"_index":1125,"title":{},"body":{"index.html":{}}}],["please",{"_index":732,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["port",{"_index":97,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["position",{"_index":886,"title":{},"body":{"controllers/UsersController.html":{}}}],["possible",{"_index":244,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["post",{"_index":207,"title":{"entities/Post.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["post'})@apiresponse({status",{"_index":570,"title":{},"body":{"controllers/PostsController.html":{}}}],["post'})@isstring()@isnotempty()@maxlength(256)@minlength(4)@matches(/^[a",{"_index":269,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post'})@isstring()@minlength(4)@maxlength(512)@isnotempty",{"_index":291,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post('create",{"_index":862,"title":{},"body":{"controllers/UsersController.html":{}}}],["post.'})@isstring()@isoptional",{"_index":228,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.author",{"_index":843,"title":{},"body":{"entities/User.html":{}}}],["post.content",{"_index":746,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.dto",{"_index":511,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["post.dto.ts",{"_index":201,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"coverage.html":{}}}],["post.dto.ts:112",{"_index":234,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:123",{"_index":257,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:135",{"_index":289,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:161",{"_index":240,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:174",{"_index":225,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:19",{"_index":509,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["post.dto.ts:37",{"_index":292,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:48",{"_index":249,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:65",{"_index":276,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:76",{"_index":284,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:87",{"_index":229,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:99",{"_index":267,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.entity",{"_index":637,"title":{},"body":{"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["post.featuredimageurl",{"_index":754,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.metaoptions",{"_index":426,"title":{},"body":{"entities/MetaOption.html":{}}}],["post.posttype",{"_index":750,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.publishon",{"_index":756,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.slug",{"_index":752,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.status",{"_index":748,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.tags",{"_index":758,"title":{},"body":{"injectables/PostsService.html":{},"entities/Tag.html":{}}}],["post.title",{"_index":744,"title":{},"body":{"injectables/PostsService.html":{}}}],["postgres",{"_index":84,"title":{},"body":{"modules/AppModule.html":{}}}],["postgresql",{"_index":851,"title":{},"body":{"entities/User.html":{}}}],["posts",{"_index":345,"title":{},"body":{"classes/CreateTagDto.html":{},"entities/MetaOption.html":{},"modules/MetaOptionsModule.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"index.html":{}}}],["posts.controller",{"_index":636,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts/posts.module",{"_index":42,"title":{},"body":{"modules/AppModule.html":{}}}],["postscontroller",{"_index":562,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":32,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsrepository",{"_index":651,"title":{},"body":{"injectables/PostsService.html":{}}}],["postsservice",{"_index":602,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["poststatus",{"_index":279,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["poststatus.draft",{"_index":559,"title":{},"body":{"entities/Post.html":{}}}],["posttype",{"_index":212,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["posttype.post",{"_index":558,"title":{},"body":{"entities/Post.html":{}}}],["pr",{"_index":1270,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["prettier",{"_index":108,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["primarygeneratedcolumn",{"_index":414,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["private",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["proceed",{"_index":832,"title":{},"body":{"injectables/TagsService.html":{}}}],["process",{"_index":730,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["process.env.node_env",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["production",{"_index":1105,"title":{},"body":{"index.html":{}}}],["profileconfig",{"_index":958,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["profileconfiguration",{"_index":976,"title":{},"body":{"injectables/UsersService.html":{}}}],["progressive",{"_index":1086,"title":{},"body":{"index.html":{}}}],["project",{"_index":1097,"title":{},"body":{"index.html":{}}}],["promise",{"_index":490,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{}}}],["properties",{"_index":178,"title":{"properties.html":{}},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"properties.html":{}}}],["provide",{"_index":1222,"title":{},"body":{"index.html":{}}}],["provided",{"_index":486,"title":{},"body":{"injectables/MetaOptionsService.html":{},"index.html":{}}}],["provider",{"_index":1269,"title":{},"body":{"index.html":{}}}],["providers",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers/auth.service",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["providers/meta",{"_index":454,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{}}}],["providers/posts.service",{"_index":603,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["providers/tags.service",{"_index":792,"title":{},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{}}}],["providers/users",{"_index":956,"title":{},"body":{"modules/UsersModule.html":{}}}],["providers/users.service",{"_index":898,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["provides",{"_index":471,"title":{},"body":{"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{}}}],["pts",{"_index":1226,"title":{},"body":{"index.html":{}}}],["public",{"_index":148,"title":{},"body":{"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["publication",{"_index":258,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["published",{"_index":253,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["published''})@isenum(poststatus)@isnotempty",{"_index":283,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["publishon",{"_index":213,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["query",{"_index":601,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["query'})@apiquery({name",{"_index":881,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('limit",{"_index":910,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('page",{"_index":912,"title":{},"body":{"controllers/UsersController.html":{}}}],["queryrunner",{"_index":693,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["queryrunner.committransaction",{"_index":709,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["queryrunner.connect",{"_index":937,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["queryrunner.manager.create(user",{"_index":941,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["queryrunner.manager.delete(post",{"_index":703,"title":{},"body":{"injectables/PostsService.html":{}}}],["queryrunner.manager.save(newuser",{"_index":943,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["queryrunner.release",{"_index":726,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["queryrunner.rollbacktransaction",{"_index":715,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["queryrunner.starttransaction",{"_index":695,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["questions",{"_index":1149,"title":{},"body":{"index.html":{}}}],["r\\n",{"_index":316,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["rate",{"_index":1218,"title":{},"body":{"index.html":{}}}],["read",{"_index":1187,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["ready",{"_index":1114,"title":{},"body":{"index.html":{}}}],["real",{"_index":1163,"title":{},"body":{"index.html":{}}}],["record",{"_index":412,"title":{},"body":{"entities/MetaOption.html":{}}}],["reference",{"_index":776,"title":{},"body":{"entities/Tag.html":{}}}],["reflect",{"_index":1065,"title":{},"body":{"dependencies.html":{}}}],["regenerate",{"_index":1252,"title":{},"body":{"index.html":{}}}],["registered",{"_index":878,"title":{},"body":{"controllers/UsersController.html":{}}}],["registers",{"_index":467,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["related",{"_index":346,"title":{},"body":{"classes/CreateTagDto.html":{},"modules/MetaOptionsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["relations",{"_index":678,"title":{},"body":{"injectables/PostsService.html":{}}}],["relationship",{"_index":430,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["relationships",{"_index":627,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"index.html":{}}}],["release",{"_index":721,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["relevant",{"_index":626,"title":{},"body":{"controllers/PostsController.html":{}}}],["remove",{"_index":705,"title":{},"body":{"injectables/PostsService.html":{}}}],["removes",{"_index":625,"title":{},"body":{"controllers/PostsController.html":{}}}],["removing",{"_index":791,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["repeat",{"_index":518,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["repositories",{"_index":673,"title":{},"body":{"injectables/PostsService.html":{}}}],["repository",{"_index":479,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["representing",{"_index":761,"title":{},"body":{"entities/Tag.html":{}}}],["represents",{"_index":404,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["req",{"_index":328,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["request",{"_index":575,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["requesting",{"_index":665,"title":{},"body":{"injectables/PostsService.html":{}}}],["requests",{"_index":780,"title":{},"body":{"controllers/TagsController.html":{}}}],["requesttimeoutexception",{"_index":670,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["requesttimeoutexception('could",{"_index":938,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["required",{"_index":184,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["requiring",{"_index":1132,"title":{},"body":{"index.html":{}}}],["reset",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resolves",{"_index":491,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["resources",{"_index":1143,"title":{},"body":{"index.html":{}}}],["response",{"_index":710,"title":{},"body":{"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["responsible",{"_index":459,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{}}}],["result",{"_index":942,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["results",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["retrieval",{"_index":987,"title":{},"body":{"injectables/UsersService.html":{}}}],["retrieve",{"_index":994,"title":{},"body":{"injectables/UsersService.html":{}}}],["retrieves",{"_index":589,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["return",{"_index":120,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["returned",{"_index":883,"title":{},"body":{"controllers/UsersController.html":{}}}],["returns",{"_index":118,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["review",{"_index":282,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["rollback",{"_index":714,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["root",{"_index":1230,"title":{},"body":{"index.html":{}}}],["route",{"_index":798,"title":{},"body":{"controllers/TagsController.html":{}}}],["routes",{"_index":469,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["run",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["runner",{"_index":722,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["running",{"_index":1079,"title":{},"body":{"miscellaneous/functions.html":{}}}],["runs",{"_index":1119,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":1067,"title":{},"body":{"dependencies.html":{}}}],["s",{"_index":1238,"title":{},"body":{"index.html":{}}}],["sample_token",{"_index":172,"title":{},"body":{"injectables/AuthService.html":{}}}],["save",{"_index":476,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{}}}],["saved",{"_index":492,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["saying",{"_index":1260,"title":{},"body":{"index.html":{}}}],["scalable",{"_index":1091,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":281,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["schema",{"_index":214,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["script",{"_index":1197,"title":{},"body":{"index.html":{}}}],["see",{"_index":1200,"title":{},"body":{"index.html":{}}}],["seen",{"_index":1261,"title":{},"body":{"index.html":{}}}],["separator",{"_index":361,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["serialized",{"_index":259,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["series",{"_index":251,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["series''})@isenum(posttype)@isnotempty",{"_index":248,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["serve",{"_index":1241,"title":{},"body":{"index.html":{}}}],["server",{"_index":1092,"title":{},"body":{"index.html":{}}}],["service",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["set",{"_index":92,"title":{},"body":{"modules/AppModule.html":{}}}],["sets",{"_index":1081,"title":{},"body":{"miscellaneous/functions.html":{}}}],["setting",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["setup",{"_index":1098,"title":{},"body":{"index.html":{}}}],["shallow",{"_index":684,"title":{},"body":{"injectables/PostsService.html":{}}}],["side",{"_index":1093,"title":{},"body":{"index.html":{}}}],["sidebarenabled",{"_index":325,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{}}}],["sides",{"_index":1265,"title":{},"body":{"index.html":{}}}],["simple",{"_index":1134,"title":{},"body":{"index.html":{}}}],["single",{"_index":868,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["slash",{"_index":1219,"title":{},"body":{"index.html":{}}}],["slug",{"_index":215,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["soft",{"_index":766,"title":{},"body":{"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["softdelete",{"_index":781,"title":{},"body":{"controllers/TagsController.html":{}}}],["softdelete(@query('id",{"_index":797,"title":{},"body":{"controllers/TagsController.html":{}}}],["softdelete(id",{"_index":786,"title":{},"body":{"controllers/TagsController.html":{}}}],["softremove",{"_index":810,"title":{},"body":{"injectables/TagsService.html":{}}}],["softremove(id",{"_index":820,"title":{},"body":{"injectables/TagsService.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["spaces",{"_index":275,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["spec",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/TagsService.html":{}}}],["specgenerate",{"_index":1267,"title":{},"body":{"index.html":{}}}],["special",{"_index":387,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["specific",{"_index":397,"title":{},"body":{"classes/GetUsersParamDto.html":{},"controllers/PostsController.html":{},"index.html":{}}}],["specprettier",{"_index":1273,"title":{},"body":{"index.html":{}}}],["sponsors",{"_index":1182,"title":{},"body":{"index.html":{}}}],["spread",{"_index":682,"title":{},"body":{"injectables/PostsService.html":{}}}],["sql",{"_index":850,"title":{},"body":{"entities/User.html":{}}}],["src/.../app.module.ts",{"_index":1285,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1077,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../post",{"_index":1072,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app.service.ts",{"_index":112,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":117,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.module",{"_index":955,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":140,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/providers/auth.service",{"_index":997,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/auth/providers/auth.service.ts",{"_index":147,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts:12",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:21",{"_index":157,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:5",{"_index":153,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/main.ts",{"_index":1031,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/meta",{"_index":333,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/dto/create",{"_index":200,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["src/posts/dto/patch",{"_index":499,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["src/posts/enums/post",{"_index":1075,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/post.entity",{"_index":437,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["src/posts/post.entity.ts",{"_index":520,"title":{},"body":{"entities/Post.html":{},"coverage.html":{}}}],["src/posts/post.entity.ts:100",{"_index":534,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:106",{"_index":524,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:26",{"_index":532,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:32",{"_index":552,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:43",{"_index":537,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:49",{"_index":543,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:60",{"_index":545,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:66",{"_index":526,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:72",{"_index":540,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:78",{"_index":531,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:84",{"_index":538,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:91",{"_index":550,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/posts.controller.ts",{"_index":563,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:48",{"_index":594,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:61",{"_index":577,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:74",{"_index":598,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:94",{"_index":585,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module.ts",{"_index":635,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/providers/posts.service.ts",{"_index":648,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/providers/posts.service.ts:122",{"_index":667,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:177",{"_index":660,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:21",{"_index":654,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:46",{"_index":663,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:64",{"_index":657,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/tags/dtos/create",{"_index":339,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["src/tags/providers/tags.service",{"_index":671,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/tags/providers/tags.service.ts",{"_index":808,"title":{},"body":{"injectables/TagsService.html":{},"coverage.html":{}}}],["src/tags/providers/tags.service.ts:13",{"_index":812,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:28",{"_index":814,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:38",{"_index":817,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:53",{"_index":815,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:74",{"_index":821,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tag.entity",{"_index":557,"title":{},"body":{"entities/Post.html":{}}}],["src/tags/tag.entity.ts",{"_index":760,"title":{},"body":{"entities/Tag.html":{},"coverage.html":{}}}],["src/tags/tag.entity.ts:103",{"_index":765,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:21",{"_index":769,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:33",{"_index":770,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:45",{"_index":773,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:55",{"_index":767,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:65",{"_index":772,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:76",{"_index":768,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:84",{"_index":771,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:91",{"_index":763,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:97",{"_index":774,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tags.controller.ts",{"_index":778,"title":{},"body":{"controllers/TagsController.html":{},"coverage.html":{}}}],["src/tags/tags.controller.ts:29",{"_index":783,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.controller.ts:39",{"_index":784,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.controller.ts:49",{"_index":788,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.module",{"_index":638,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/tags/tags.module.ts",{"_index":804,"title":{},"body":{"modules/TagsModule.html":{}}}],["src/users/dtos/create",{"_index":175,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dtos/get",{"_index":395,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["src/users/dtos/patch",{"_index":513,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["src/users/providers/users",{"_index":924,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{},"coverage.html":{}}}],["src/users/providers/users.service",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["src/users/providers/users.service.ts",{"_index":963,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/providers/users.service.ts:102",{"_index":993,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:124",{"_index":983,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:159",{"_index":981,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:30",{"_index":978,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:77",{"_index":985,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/user.entity",{"_index":556,"title":{},"body":{"entities/Post.html":{}}}],["src/users/user.entity.ts",{"_index":835,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/user.entity.ts:15",{"_index":838,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:21",{"_index":840,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:28",{"_index":837,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:34",{"_index":841,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:38",{"_index":844,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:9",{"_index":839,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.controller.ts",{"_index":855,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:100",{"_index":865,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:116",{"_index":863,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:126",{"_index":892,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:51",{"_index":871,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:86",{"_index":888,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":143,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostsModule.html":{}}}],["src/users/users.module.ts",{"_index":953,"title":{},"body":{"modules/UsersModule.html":{}}}],["start",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{},"index.html":{}}}],["start:dev",{"_index":1104,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":1106,"title":{},"body":{"index.html":{}}}],["started",{"_index":1085,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1096,"title":{},"body":{"index.html":{}}}],["statements",{"_index":1025,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":216,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["status.enum",{"_index":305,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["status.enum.ts",{"_index":1073,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["stay",{"_index":1168,"title":{},"body":{"index.html":{}}}],["steps",{"_index":1116,"title":{},"body":{"index.html":{}}}],["storage",{"_index":423,"title":{},"body":{"entities/MetaOption.html":{}}}],["stored",{"_index":420,"title":{},"body":{"entities/MetaOption.html":{}}}],["storing",{"_index":405,"title":{},"body":{"entities/MetaOption.html":{}}}],["story",{"_index":247,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["straightforward",{"_index":1130,"title":{},"body":{"index.html":{}}}],["string",{"_index":119,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["string(error",{"_index":948,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["structured",{"_index":541,"title":{},"body":{"entities/Post.html":{}}}],["success",{"_index":586,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["successful",{"_index":708,"title":{},"body":{"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["successfully",{"_index":617,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["successfully'})@apiresponse({status",{"_index":572,"title":{},"body":{"controllers/PostsController.html":{}}}],["summary",{"_index":614,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["support",{"_index":1150,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":1275,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1084,"title":{},"body":{"miscellaneous/functions.html":{}}}],["synchronize",{"_index":89,"title":{},"body":{"modules/AppModule.html":{}}}],["table",{"_index":964,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["tables",{"_index":644,"title":{},"body":{"modules/PostsModule.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1047,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":285,"title":{"entities/Tag.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"coverage.html":{}}}],["tag.dto",{"_index":793,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["tag.dto.ts",{"_index":340,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["tag.dto.ts:30",{"_index":354,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:48",{"_index":363,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:61",{"_index":349,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:74",{"_index":357,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:88",{"_index":352,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.entity",{"_index":806,"title":{},"body":{"modules/TagsModule.html":{},"injectables/TagsService.html":{}}}],["tag.posts",{"_index":548,"title":{},"body":{"entities/Post.html":{}}}],["tags",{"_index":217,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"index.html":{}}}],["tags.controller",{"_index":805,"title":{},"body":{"modules/TagsModule.html":{}}}],["tags.length",{"_index":736,"title":{},"body":{"injectables/PostsService.html":{}}}],["tags/providers/tags",{"_index":822,"title":{},"body":{"injectables/TagsService.html":{},"index.html":{}}}],["tags/soft",{"_index":799,"title":{},"body":{"controllers/TagsController.html":{}}}],["tags/tags.module",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["tagscontroller",{"_index":777,"title":{"controllers/TagsController.html":{}},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{},"coverage.html":{}}}],["tagsmodule",{"_index":33,"title":{"modules/TagsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules.html":{},"overview.html":{}}}],["tagsrepository",{"_index":813,"title":{},"body":{"injectables/TagsService.html":{}}}],["tagsservice",{"_index":653,"title":{"injectables/TagsService.html":{}},"body":{"injectables/PostsService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"coverage.html":{},"overview.html":{}}}],["take",{"_index":1117,"title":{},"body":{"index.html":{}}}],["technology",{"_index":347,"title":{},"body":{"classes/CreateTagDto.html":{},"entities/Tag.html":{}}}],["technology'})@isstring()@isnotempty()@matches(/^[a",{"_index":359,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["technology'})@isstring()@minlength(3)@isnotempty()@maxlength(256",{"_index":353,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["test",{"_index":1109,"title":{},"body":{"index.html":{}}}],["test:covdeployment",{"_index":1112,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1111,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1107,"title":{},"body":{"index.html":{}}}],["text",{"_index":525,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["thanks",{"_index":1181,"title":{},"body":{"index.html":{}}}],["this.datasource.createqueryrunner",{"_index":935,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["this.metaoptionrepository.create(createmetaoptiondto",{"_index":495,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionrepository.save(metaoption",{"_index":497,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionsservice.create(createpostmetaoptiondto",{"_index":461,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["this.postsrepository.create",{"_index":688,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.delete(id",{"_index":759,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.find",{"_index":677,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.findone",{"_index":699,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.findoneby",{"_index":739,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.manager.connection.createqueryrunner",{"_index":694,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.save(post",{"_index":689,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsservice.create(createpostdto",{"_index":619,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.delete(id",{"_index":631,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.findall(userid",{"_index":616,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.update(patchpostdto",{"_index":622,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.tagsrepository.create(createtagdto",{"_index":824,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.delete(id",{"_index":833,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.find",{"_index":826,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.findone",{"_index":831,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.save(tag",{"_index":825,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.softdelete(id",{"_index":834,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsservice.create(createtagdto",{"_index":795,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.tagsservice.delete(id",{"_index":796,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.tagsservice.findmultipletags(createpostdto.tags",{"_index":681,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.tagsservice.findmultipletags(patchpostdto.tags",{"_index":728,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.tagsservice.softremove(id",{"_index":800,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.userscreatemanyprovider.createmany(createmanyusersdto",{"_index":1022,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.create(createuserdto",{"_index":1020,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findone",{"_index":1015,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findoneby",{"_index":1010,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.save(newuser",{"_index":1021,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.createmany(createmanyusersdto",{"_index":921,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.createuser(createuserdto",{"_index":919,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall(getuserparamdto",{"_index":914,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findonebyid(1234",{"_index":170,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findonebyid(createpostdto.authorid",{"_index":680,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.usersservice.findonebyid(userid",{"_index":907,"title":{},"body":{"controllers/UsersController.html":{}}}],["throw",{"_index":700,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["time",{"_index":539,"title":{},"body":{"entities/Post.html":{},"index.html":{}}}],["timestamp",{"_index":410,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["title",{"_index":218,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["token",{"_index":171,"title":{},"body":{"injectables/AuthService.html":{}}}],["touch",{"_index":1189,"title":{},"body":{"index.html":{}}}],["transaction",{"_index":690,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["transfer",{"_index":342,"title":{},"body":{"classes/CreateTagDto.html":{},"injectables/MetaOptionsService.html":{},"injectables/TagsService.html":{}}}],["transformer",{"_index":195,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"dependencies.html":{}}}],["triggers",{"_index":1221,"title":{},"body":{"index.html":{}}}],["true",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["true})@jointable",{"_index":549,"title":{},"body":{"entities/Post.html":{}}}],["true})@type(undefined",{"_index":187,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["try",{"_index":696,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["tsconfig.json",{"_index":1231,"title":{},"body":{"index.html":{}}}],["tts",{"_index":1229,"title":{},"body":{"index.html":{}}}],["twitter",{"_index":1193,"title":{},"body":{"index.html":{}}}],["type",{"_index":83,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["type.enum",{"_index":304,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["type.enum.ts",{"_index":1074,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["typees",{"_index":846,"title":{},"body":{"entities/User.html":{}}}],["typeorm",{"_index":441,"title":{},"body":{"entities/MetaOption.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([metaoption",{"_index":470,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["typeormmodule.forfeature([post",{"_index":642,"title":{},"body":{"modules/PostsModule.html":{}}}],["typeormmodule.forfeature([tag",{"_index":807,"title":{},"body":{"modules/TagsModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":961,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":516,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":1095,"title":{},"body":{"index.html":{}}}],["unable",{"_index":729,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["undefined",{"_index":536,"title":{},"body":{"entities/Post.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["undefined})@isarray()@isoptional()@isint({each",{"_index":288,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["undefined})@isnotempty()@isarray()@validatenested({each",{"_index":186,"title":{},"body":{"classes/CreateManyUsersDto.html":{}}}],["undefined})@isoptional()@validatenested({each",{"_index":239,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["unique",{"_index":358,"title":{},"body":{"classes/CreateTagDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["unit",{"_index":1108,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":489,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["unlicensed",{"_index":1283,"title":{},"body":{"properties.html":{}}}],["unsuccessful",{"_index":945,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["up",{"_index":725,"title":{},"body":{"injectables/PostsService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["update",{"_index":650,"title":{},"body":{"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["update(@body",{"_index":727,"title":{},"body":{"injectables/PostsService.html":{}}}],["update(patchpostdto",{"_index":666,"title":{},"body":{"injectables/PostsService.html":{}}}],["updated",{"_index":436,"title":{},"body":{"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/UsersController.html":{}}}],["updatedate",{"_index":407,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["updatedatecolumn",{"_index":433,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["updatepost",{"_index":567,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(@body",{"_index":621,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(patchpostdto",{"_index":595,"title":{},"body":{"controllers/PostsController.html":{}}}],["updates",{"_index":596,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"index.html":{}}}],["updating",{"_index":500,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["url",{"_index":230,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["url\"'})@maxlength(512",{"_index":362,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["urls",{"_index":278,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["use",{"_index":274,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["used",{"_index":277,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["usefactory",{"_index":82,"title":{},"body":{"modules/AppModule.html":{}}}],["user",{"_index":86,"title":{"entities/User.html":{}},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["user'})@apiparam({name",{"_index":590,"title":{},"body":{"controllers/PostsController.html":{}}}],["user'})@apiresponse({status",{"_index":869,"title":{},"body":{"controllers/UsersController.html":{}}}],["user.dto",{"_index":194,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":368,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:15",{"_index":374,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:21",{"_index":376,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:26",{"_index":372,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:35",{"_index":389,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.entity",{"_index":933,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["user.posts",{"_index":522,"title":{},"body":{"entities/Post.html":{}}}],["userid",{"_index":591,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["username",{"_index":99,"title":{},"body":{"modules/AppModule.html":{}}}],["users",{"_index":179,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/GetUsersParamDto.html":{},"modules/PostsModule.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["users.controller",{"_index":954,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.dto",{"_index":899,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["users.dto.ts",{"_index":177,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"coverage.html":{}}}],["users.dto.ts:17",{"_index":188,"title":{},"body":{"classes/CreateManyUsersDto.html":{}}}],["users.service.ts",{"_index":1003,"title":{},"body":{"injectables/UsersService.html":{}}}],["users/providers/users",{"_index":1271,"title":{},"body":{"index.html":{}}}],["users/users.module",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":854,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userscreatemanyprovider",{"_index":923,"title":{"injectables/UsersCreateManyProvider.html":{}},"body":{"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["usersmodule",{"_index":34,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":975,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersservice",{"_index":152,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["uses",{"_index":967,"title":{},"body":{"injectables/UsersService.html":{}}}],["using",{"_index":849,"title":{},"body":{"entities/User.html":{},"index.html":{}}}],["validated",{"_index":331,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validatenested",{"_index":191,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["validation",{"_index":916,"title":{},"body":{"controllers/UsersController.html":{},"miscellaneous/functions.html":{}}}],["validationpipe",{"_index":918,"title":{},"body":{"controllers/UsersController.html":{}}}],["validationschema",{"_index":77,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":192,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"dependencies.html":{}}}],["value",{"_index":337,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"entities/MetaOption.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":245,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["varchar",{"_index":528,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["variable",{"_index":1028,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1284,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verbose",{"_index":1208,"title":{},"body":{"index.html":{}}}],["version",{"_index":1281,"title":{},"body":{"properties.html":{}}}],["video",{"_index":1157,"title":{},"body":{"index.html":{}}}],["view",{"_index":640,"title":{},"body":{"modules/PostsModule.html":{}}}],["visit",{"_index":1147,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":1160,"title":{},"body":{"index.html":{}}}],["void",{"_index":989,"title":{},"body":{"injectables/UsersService.html":{}}}],["want",{"_index":887,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["watch",{"_index":1102,"title":{},"body":{"index.html":{}}}],["we're",{"_index":848,"title":{},"body":{"entities/User.html":{}}}],["website",{"_index":852,"title":{},"body":{"entities/User.html":{},"index.html":{}}}],["well",{"_index":1244,"title":{},"body":{"index.html":{}}}],["whenever",{"_index":1249,"title":{},"body":{"index.html":{}}}],["whether",{"_index":785,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["within",{"_index":828,"title":{},"body":{"injectables/TagsService.html":{},"index.html":{}}}],["without",{"_index":790,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{}}}],["working",{"_index":1146,"title":{},"body":{"index.html":{}}}],["world",{"_index":122,"title":{},"body":{"injectables/AppService.html":{}}}],["write",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["writing",{"_index":1251,"title":{},"body":{"index.html":{}}}],["x",{"_index":1171,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":1185,"title":{},"body":{"index.html":{}}}],["you're",{"_index":1113,"title":{},"body":{"index.html":{}}}],["z0",{"_index":270,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["z\\d@$!%*?&]{8,16",{"_index":380,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*?&])[a",{"_index":379,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["za",{"_index":378,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            MetaOptionsModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            TagsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UsersModule } from './users/users.module';\nimport { PostsModule } from './posts/posts.module';\nimport { AuthModule } from './auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { TagsModule } from './tags/tags.module';\nimport { MetaOptionsModule } from './meta-options/meta-options.module';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport appConfig from './config/app.config'; // Since it's imported as a default\nimport databaseConfig from './config/database.config';\nimport environmentValidation from './config/environment.validation';\n\nconst ENV = process.env.NODE_ENV;\n\n// Run this in cmd pg_ctl start -D \"C:\\users\\mfabouatmeh\\Desktop\\CodesDar\\more\\Postgre\\data\"\n@Module({\n  imports: [\n    UsersModule,\n    PostsModule,\n    AuthModule,\n    ConfigModule.forRoot({\n      isGlobal: true,\n      envFilePath: !ENV ? '.env' : `.env.${ENV}`,\n      load: [appConfig, databaseConfig],\n      validationSchema: environmentValidation,\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule], // Makes ConfigService available\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        type: 'postgres',\n        // entities: [User],\n        autoLoadEntities: configService.get('database.autoLoadEntities'),\n        synchronize: configService.get('database.synchronize'), // If this setting is set to false, we would have to manually perform migrations\n        port: configService.get('database.port'),\n        username: configService.get('database.user'),\n        password: configService.get('database.pass'),\n        host: configService.get('database.host'),\n        database: configService.get('database.name'),\n      }),\n    }),\n    TagsModule,\n    MetaOptionsModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n//npx prettier --write .\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { AuthService } from './providers/auth.service';\n// nest generate controller auth --no-spec\n@Controller('auth')\nexport class AuthController {\n  constructor(\n    // Injecting the auth service\n    private readonly authService: AuthService,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './providers/auth.service';\nimport { UsersModule } from 'src/users/users.module';\n// nest generate module auth\n@Module({\n  controllers: [AuthController],\n  providers: [AuthService],\n  // imports: [UsersModule], will cause a circular dependency\n  imports: [forwardRef(() => UsersModule)],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                isAuth\n                            \n                            \n                                    Public\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/auth.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isAuth\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAuth()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, forwardRef, Inject } from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users.service';\n// nest generate service auth/providers/auth --flat  --no-spec\n@Injectable()\nexport class AuthService {\n  constructor(\n    // Injecting the user service\n    // Add this to avoid circular dependency\n    @Inject(forwardRef(() => UsersService))\n    private readonly usersService: UsersService,\n  ) {}\n  public login(email: string, password: string) {\n    // Check user exists\n\n    const user = this.usersService.findOneById(1234);\n    // Login\n    // Return token\n    return 'SAMPLE_TOKEN';\n  }\n\n  public isAuth() {\n    return true;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateManyUsersDto.html":{"url":"classes/CreateManyUsersDto.html","title":"class - CreateManyUsersDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateManyUsersDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-many-users.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreateUserDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'array', required: true, items: undefined})@IsNotEmpty()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-many-users.dto.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, IsNotEmpty, ValidateNested } from 'class-validator';\nimport { CreateUserDto } from './create-user.dto';\nimport { Type } from 'class-transformer';\nimport { ApiProperty } from '@nestjs/swagger';\nexport class CreateManyUsersDto {\n  @ApiProperty({\n    type: 'array',\n    required: true,\n    items: {\n      type: 'User',\n    },\n  })\n  @IsNotEmpty()\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => CreateUserDto)\n  users: CreateUserDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dto/create-post.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for creating a new blog post.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                authorId\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                publishOn\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        authorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'integer', required: true, description: 'The ID of the author creating the post', example: 1})@IsNotEmpty()@IsInt()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:174\n                        \n                    \n\n            \n                \n                    The ID of the author creating the post.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The main content of the post', example: 'This is the content of the blog post.'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:87\n                        \n                    \n\n            \n                \n                    The main content of the post.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The URL of the featured image for the post', example: 'http://localhost.com/images/image1.jpg'})@IsOptional()@MinLength(4)@MaxLength(1024)@IsUrl()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:112\n                        \n                    \n\n            \n                \n                    The URL of the featured image for the post.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreatePostMetaOptionsDto | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'object', required: false, items: undefined})@IsOptional()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:161\n                        \n                    \n\n            \n                \n                    Additional meta options for the post.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: PostType, description: 'Possible values: 'post', 'page', 'story', 'series''})@IsEnum(PostType)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:48\n                        \n                    \n\n            \n                \n                    The type of post (e.g., 'post', 'page', 'story', 'series').\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The date on which the post is published', example: '2024-03-16T07:46:32+0000'})@IsISO8601()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:123\n                        \n                    \n\n            \n                \n                    The publication date of the post.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Serialized JSON object containing metadata', example: '{\n \"@context\": \"https://schema.org\",\n \"@type\": \"Person\"\n }'})@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:99\n                        \n                    \n\n            \n                \n                    JSON metadata for the post.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'A slug for the post (e.g., \"my-blog-post\")', example: 'my-blog-post'})@IsString()@IsNotEmpty()@MaxLength(256)@MinLength(4)@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'A slug should be all lowercase, use only \"-\", and have no spaces. Example: \"my-url\"'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:65\n                        \n                    \n\n            \n                \n                    A slug for the post, used in URLs.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: PostStatus, description: 'Possible values: 'draft', 'scheduled', 'review', 'published''})@IsEnum(PostStatus)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:76\n                        \n                    \n\n            \n                \n                    The publication status of the post (e.g., 'draft', 'scheduled', 'review', 'published').\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Array of tag IDs associated with the post', example: undefined})@IsArray()@IsOptional()@IsInt({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:135\n                        \n                    \n\n            \n                \n                    An array of tag IDs associated with the post.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'This is a title', description: 'The title for the blog post'})@IsString()@MinLength(4)@MaxLength(512)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:37\n                        \n                    \n\n            \n                \n                    The title of the blog post.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsArray,\n  IsEnum,\n  IsInt,\n  IsISO8601,\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MaxLength,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\nimport { PostType } from '../enums/post-type.enum';\nimport { PostStatus } from '../enums/post-status.enum';\nimport { CreatePostMetaOptionsDto } from '../../meta-options/dtos/create-post-meta-options.dto';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\n\n/**\n * DTO for creating a new blog post.\n */\nexport class CreatePostDto {\n  /**\n   * The title of the blog post.\n   */\n  @ApiProperty({\n    example: 'This is a title',\n    description: 'The title for the blog post',\n  })\n  @IsString()\n  @MinLength(4)\n  @MaxLength(512)\n  @IsNotEmpty()\n  title: string;\n\n  /**\n   * The type of post (e.g., 'post', 'page', 'story', 'series').\n   */\n  @ApiProperty({\n    enum: PostType,\n    description: \"Possible values: 'post', 'page', 'story', 'series'\",\n  })\n  @IsEnum(PostType)\n  @IsNotEmpty()\n  postType: PostType;\n\n  /**\n   * A slug for the post, used in URLs.\n   */\n  @ApiProperty({\n    description: 'A slug for the post (e.g., \"my-blog-post\")',\n    example: 'my-blog-post',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(256)\n  @MinLength(4)\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'A slug should be all lowercase, use only \"-\", and have no spaces. Example: \"my-url\"',\n  })\n  slug: string;\n\n  /**\n   * The publication status of the post (e.g., 'draft', 'scheduled', 'review', 'published').\n   */\n  @ApiProperty({\n    enum: PostStatus,\n    description: \"Possible values: 'draft', 'scheduled', 'review', 'published'\",\n  })\n  @IsEnum(PostStatus)\n  @IsNotEmpty()\n  status: PostStatus;\n\n  /**\n   * The main content of the post.\n   */\n  @ApiPropertyOptional({\n    description: 'The main content of the post',\n    example: 'This is the content of the blog post.',\n  })\n  @IsString()\n  @IsOptional()\n  content?: string;\n\n  /**\n   * JSON metadata for the post.\n   */\n  @ApiPropertyOptional({\n    description: 'Serialized JSON object containing metadata',\n    example:\n      '{\\r\\n \"@context\": \"https://schema.org\",\\r\\n \"@type\": \"Person\"\\r\\n }',\n  })\n  @IsOptional()\n  @IsJSON()\n  schema?: string;\n\n  /**\n   * The URL of the featured image for the post.\n   */\n  @ApiPropertyOptional({\n    description: 'The URL of the featured image for the post',\n    example: 'http://localhost.com/images/image1.jpg',\n  })\n  @IsOptional()\n  @MinLength(4)\n  @MaxLength(1024)\n  @IsUrl()\n  featuredImageUrl?: string;\n\n  /**\n   * The publication date of the post.\n   */\n  @ApiPropertyOptional({\n    description: 'The date on which the post is published',\n    example: '2024-03-16T07:46:32+0000',\n  })\n  @IsISO8601()\n  @IsOptional()\n  publishOn?: Date;\n\n  /**\n   * An array of tag IDs associated with the post.\n   */\n  @ApiPropertyOptional({\n    description: 'Array of tag IDs associated with the post',\n    example: [1, 2],\n  })\n  @IsArray()\n  @IsOptional()\n  @IsInt({ each: true })\n  tags?: number[];\n\n  /**\n   * Additional meta options for the post.\n   */\n  @ApiPropertyOptional({\n    type: 'object',\n    required: false,\n    items: {\n      type: 'object',\n      properties: {\n        metavalue: {\n          type: 'json',\n          description: 'A JSON string containing metadata options',\n          example: '{\"sidebarEnabled\": true}',\n        },\n      },\n    },\n  })\n  @IsOptional()\n  @ValidateNested({ each: true })\n  @Type(() => CreatePostMetaOptionsDto)\n  // Type decorator\n  // Matches the incoming req to the dto\n  // Creates an instance of the dto\n  // All the properties are validated against the dto\n  metaOptions?: CreatePostMetaOptionsDto | null;\n\n  /**\n   * The ID of the author creating the post.\n   */\n  @ApiProperty({\n    type: 'integer',\n    required: true,\n    description: 'The ID of the author creating the post',\n    example: 1,\n  })\n  @IsNotEmpty()\n  @IsInt()\n  authorId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostMetaOptionsDto.html":{"url":"classes/CreatePostMetaOptionsDto.html","title":"class - CreatePostMetaOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostMetaOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/dtos/create-post-meta-options.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for creating metadata options for a post.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                metaValue\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/dtos/create-post-meta-options.dto.ts:14\n                        \n                    \n\n            \n                \n                    The meta value as a JSON string.\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsJSON, IsNotEmpty, IsString } from 'class-validator';\n\n/**\n * DTO for creating metadata options for a post.\n */\nexport class CreatePostMetaOptionsDto {\n  /**\n   * The meta value as a JSON string.\n   *\n   * @example '{\"sidebarEnabled\": true}'\n   */\n  @IsNotEmpty()\n  @IsJSON()\n  metaValue: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTagDto.html":{"url":"classes/CreateTagDto.html","title":"class - CreateTagDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTagDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/dtos/create-tag.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object (DTO) for creating a new tag.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                featuredImage\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'A brief description of the tag', example: 'Posts related to technology and innovations'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:61\n                        \n                    \n\n            \n                \n                    A brief description of the tag.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        featuredImage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'URL of the featured image for the tag', example: 'https://example.com/images/tag-image.jpg'})@IsOptional()@IsUrl()@MaxLength(1024)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:88\n                        \n                    \n\n            \n                \n                    URL of the featured image for the tag.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The name of the tag', example: 'Technology'})@IsString()@MinLength(3)@IsNotEmpty()@MaxLength(256)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:30\n                        \n                    \n\n            \n                \n                    The name of the tag.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'JSON metadata associated with the tag', example: '{\"color\": \"blue\"}'})@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:74\n                        \n                    \n\n            \n                \n                    JSON metadata associated with the tag.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'A unique slug for the tag, used in URLs', example: 'technology'})@IsString()@IsNotEmpty()@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'A slug should be all lowercase letters and use only \"-\" as a separator. For example \"my-url\"'})@MaxLength(512)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:48\n                        \n                    \n\n            \n                \n                    The slug for the tag, used in URLs.\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\n/**\n * Data Transfer Object (DTO) for creating a new tag.\n */\nexport class CreateTagDto {\n  /**\n   * The name of the tag.\n   *\n   * @example \"Technology\"\n   */\n  @ApiProperty({\n    description: 'The name of the tag',\n    example: 'Technology',\n  })\n  @IsString()\n  @MinLength(3)\n  @IsNotEmpty()\n  @MaxLength(256)\n  name: string;\n\n  /**\n   * The slug for the tag, used in URLs.\n   *\n   * @example \"technology\"\n   */\n  @ApiProperty({\n    description: 'A unique slug for the tag, used in URLs',\n    example: 'technology',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'A slug should be all lowercase letters and use only \"-\" as a separator. For example \"my-url\"',\n  })\n  @MaxLength(512)\n  slug: string;\n\n  /**\n   * A brief description of the tag.\n   *\n   * @example \"Posts related to technology and innovations\"\n   */\n  @ApiPropertyOptional({\n    description: 'A brief description of the tag',\n    example: 'Posts related to technology and innovations',\n  })\n  @IsOptional()\n  @IsString()\n  description: string;\n\n  /**\n   * JSON metadata associated with the tag.\n   *\n   * @example '{\"color\": \"blue\"}'\n   */\n  @ApiPropertyOptional({\n    description: 'JSON metadata associated with the tag',\n    example: '{\"color\": \"blue\"}',\n  })\n  @IsOptional()\n  @IsJSON()\n  schema: string;\n\n  /**\n   * URL of the featured image for the tag.\n   *\n   * @example \"https://example.com/images/tag-image.jpg\"\n   */\n  @ApiPropertyOptional({\n    description: 'URL of the featured image for the tag',\n    example: 'https://example.com/images/tag-image.jpg',\n  })\n  @IsOptional()\n  @IsUrl()\n  @MaxLength(1024)\n  featuredImage: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MaxLength(96)@MinLength(8)@Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,16}$/, {message: 'Minimum 8 chars, include at least one letter, one number, and one special character.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\nexport class CreateUserDto {\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(96)\n  firstName: string;\n\n  @IsString()\n  @IsOptional()\n  @MinLength(3)\n  @MaxLength(96)\n  lastName?: string;\n\n  @IsEmail()\n  @IsNotEmpty()\n  @MaxLength(96)\n  email: string;\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(96)\n  @MinLength(8)\n  @Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,16}$/, {\n    message:\n      'Minimum 8 chars, include at least one letter, one number, and one special character.',\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersParamDto.html":{"url":"classes/GetUsersParamDto.html","title":"class - GetUsersParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-users-param.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Get user with a specific id', example: '1234'})@IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-users-param.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport { IsInt, IsOptional } from 'class-validator';\n\nexport class GetUsersParamDto {\n  @ApiPropertyOptional({\n    description: 'Get user with a specific id',\n    example: '1234',\n  })\n  @IsOptional()\n  @IsInt()\n  @Type(() => Number)\n  id?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/MetaOption.html":{"url":"entities/MetaOption.html","title":"entity - MetaOption","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  MetaOption\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-option.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the MetaOption entity, storing metadata for posts.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createDate\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                metaValue\n                            \n                            \n                                    \n                                    \n                                post\n                            \n                            \n                                    \n                                updateDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:37\n                        \n                    \n\n            \n                \n                    Timestamp indicating when the record was created.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:21\n                        \n                    \n\n            \n                \n                    Unique identifier for the MetaOption.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'json', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:31\n                        \n                    \n\n            \n                \n                    Metadata value stored in JSON format.\nNote: JSON storage is not available in MySQL.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        post\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, post => post.metaOptions, {onDelete: 'CASCADE'})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:53\n                        \n                    \n\n            \n                \n                    Associated post entity (One-to-One relationship).\nIf the post is deleted, the metaOption is also deleted (CASCADE).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:43\n                        \n                    \n\n            \n                \n                    Timestamp indicating when the record was last updated.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Post } from 'src/posts/post.entity';\nimport {\n  Column,\n  CreateDateColumn,\n  Entity,\n  JoinColumn,\n  OneToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n/**\n * Represents the MetaOption entity, storing metadata for posts.\n */\n@Entity()\nexport class MetaOption {\n  /**\n   * Unique identifier for the MetaOption.\n   */\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  /**\n   * Metadata value stored in JSON format.\n   * Note: JSON storage is not available in MySQL.\n   */\n  @Column({\n    type: 'json',\n    nullable: false,\n  })\n  metaValue: string;\n\n  /**\n   * Timestamp indicating when the record was created.\n   */\n  @CreateDateColumn()\n  createDate: Date;\n\n  /**\n   * Timestamp indicating when the record was last updated.\n   */\n  @UpdateDateColumn()\n  updateDate: Date;\n\n  /**\n   * Associated post entity (One-to-One relationship).\n   * If the post is deleted, the metaOption is also deleted (`CASCADE`).\n   */\n  @OneToOne(() => Post, (post) => post.metaOptions, {\n    onDelete: 'CASCADE',\n  })\n  @JoinColumn()\n  post: Post;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MetaOptionsController.html":{"url":"controllers/MetaOptionsController.html","title":"controller - MetaOptionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MetaOptionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-options.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                meta-options\n            \n\n\n            \n                Description\n            \n            \n                Controller for managing post metadata options.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createMetaOption\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createMetaOption\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMetaOption(createPostMetaOptionDto: CreatePostMetaOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/meta-options/meta-options.controller.ts:22\n                        \n                    \n\n\n            \n                \n                        Creates a new meta option for a post.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createPostMetaOptionDto\n                                            \n                                                            CreatePostMetaOptionsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    DTO containing metadata information.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The created meta option.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { CreatePostMetaOptionsDto } from './dtos/create-post-meta-options.dto';\nimport { MetaOptionsService } from './providers/meta-options.service';\n\n/**\n * Controller for managing post metadata options.\n */\n@Controller('meta-options')\nexport class MetaOptionsController {\n  /**\n   * Injects the MetaOptionsService.\n   * @param metaOptionsService The service responsible for metadata operations.\n   */\n  constructor(private readonly metaOptionsService: MetaOptionsService) {}\n\n  /**\n   * Creates a new meta option for a post.\n   * @param createPostMetaOptionDto DTO containing metadata information.\n   * @returns The created meta option.\n   */\n  @Post()\n  public createMetaOption(\n    @Body() createPostMetaOptionDto: CreatePostMetaOptionsDto,\n  ) {\n    return this.metaOptionsService.create(createPostMetaOptionDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MetaOptionsModule.html":{"url":"modules/MetaOptionsModule.html","title":"module - MetaOptionsModule","body":"\n                   \n\n\n\n\n    Modules\n    MetaOptionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/meta-options/meta-options.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Module for managing metadata options related to posts.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MetaOptionsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MetaOptionsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MetaOptionsController } from './meta-options.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { MetaOption } from './meta-option.entity';\nimport { MetaOptionsService } from './providers/meta-options.service';\n\n/**\n * Module for managing metadata options related to posts.\n */\n@Module({\n  /**\n   * Registers controllers for handling metadata-related routes.\n   */\n  controllers: [MetaOptionsController],\n\n  /**\n   * Imports TypeORM module and registers the MetaOption entity.\n   */\n  imports: [TypeOrmModule.forFeature([MetaOption])],\n\n  /**\n   * Provides the MetaOptionsService for handling business logic.\n   */\n  providers: [MetaOptionsService],\n})\nexport class MetaOptionsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MetaOptionsService.html":{"url":"injectables/MetaOptionsService.html","title":"injectable - MetaOptionsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MetaOptionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/providers/meta-options.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for managing MetaOptions.\nProvides methods to create and save meta options.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(metaOptionRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/meta-options/providers/meta-options.service.ts:12\n                            \n                        \n\n                \n                    \n                            Inject the repository for MetaOption entity.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        metaOptionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Repository for interacting with MetaOption entity.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createMetaOptionDto: CreatePostMetaOptionsDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/meta-options/providers/meta-options.service.ts:27\n                        \n                    \n\n\n            \n                \n                        Create a new MetaOption based on the provided data transfer object (DTO).\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createMetaOptionDto\n                                            \n                                                            CreatePostMetaOptionsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Data transfer object containing meta option details.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                A promise that resolves to the saved MetaOption entity.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { MetaOption } from '../meta-option.entity';\nimport { Repository } from 'typeorm';\nimport { CreatePostMetaOptionsDto } from '../dtos/create-post-meta-options.dto';\n\n/**\n * Service for managing MetaOptions.\n * Provides methods to create and save meta options.\n */\n@Injectable()\nexport class MetaOptionsService {\n  /**\n   * Inject the repository for MetaOption entity.\n   * @param metaOptionRepository Repository for interacting with MetaOption entity.\n   */\n  constructor(\n    @InjectRepository(MetaOption)\n    private metaOptionRepository: Repository,\n  ) {}\n\n  /**\n   * Create a new MetaOption based on the provided data transfer object (DTO).\n   * @param createMetaOptionDto Data transfer object containing meta option details.\n   * @returns A promise that resolves to the saved MetaOption entity.\n   */\n  public async create(createMetaOptionDto: CreatePostMetaOptionsDto) {\n    const metaOption = this.metaOptionRepository.create(createMetaOptionDto);\n    return await this.metaOptionRepository.save(metaOption);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchPostDto.html":{"url":"classes/PatchPostDto.html","title":"class - PatchPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dto/patch-post.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for updating an existing post.\nExtends CreatePostDto, making all fields optional except id.\n\n            \n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The ID of the post that needs to be updated', example: 1})@IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/patch-post.dto.ts:19\n                        \n                    \n\n            \n                \n                    The ID of the post to be updated.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsInt, IsNotEmpty } from 'class-validator';\nimport { CreatePostDto } from './create-post.dto';\n\n/**\n * DTO for updating an existing post.\n * Extends `CreatePostDto`, making all fields optional except `id`.\n */\nexport class PatchPostDto extends PartialType(CreatePostDto) {\n  /**\n   * The ID of the post to be updated.\n   */\n  @ApiProperty({\n    description: 'The ID of the post that needs to be updated',\n    example: 1,\n  })\n  @IsInt()\n  @IsNotEmpty()\n  id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/patch-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\n// Extend the create user dto to not repeat the code\nexport class PatchUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Post.html":{"url":"entities/Post.html","title":"entity - Post","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/post.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a blog post entity.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                author\n                            \n                            \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                postType\n                            \n                            \n                                    \n                                    Optional\n                                publishOn\n                            \n                            \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.posts, {eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:106\n                        \n                    \n\n            \n                \n                    Author of the post (many-to-one relationship with User).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:66\n                        \n                    \n\n            \n                \n                    Main content of the post (large string)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:78\n                        \n                    \n\n            \n                \n                    URL of the featured image.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:26\n                        \n                    \n\n            \n                \n                    Unique identifier for the post.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MetaOption\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, metaOptions => metaOptions.post, {cascade: true, eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:100\n                        \n                    \n\n            \n                \n                    Meta options associated with the post (one-to-one relationship bidirectional).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: PostType, default: undefined, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:43\n                        \n                    \n\n            \n                \n                    Type of the post (e.g., post, page, story, series.).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:84\n                        \n                    \n\n            \n                \n                    Date and time when the post is published.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:72\n                        \n                    \n\n            \n                \n                    JSON schema for structured data.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:49\n                        \n                    \n\n            \n                \n                    URL-friendly identifier for the post.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: PostStatus, default: undefined, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:60\n                        \n                    \n\n            \n                \n                    Status of the post (draft, published, etc.).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Tag[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, tag => tag.posts, {eager: true})@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:91\n                        \n                    \n\n            \n                \n                    Tags associated with the post (many-to-many relationship).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 512, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:32\n                        \n                    \n\n            \n                \n                    Title of the post.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  Entity,\n  JoinColumn,\n  JoinTable,\n  ManyToMany,\n  ManyToOne,\n  OneToOne,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport { PostType } from './enums/post-type.enum';\nimport { PostStatus } from './enums/post-status.enum';\nimport { MetaOption } from 'src/meta-options/meta-option.entity';\nimport { User } from 'src/users/user.entity';\nimport { Tag } from 'src/tags/tag.entity';\n\n/**\n * Represents a blog post entity.\n */\n@Entity()\nexport class Post {\n  /**\n   * Unique identifier for the post.\n   */\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  /**\n   * Title of the post.\n   */\n  @Column({ type: 'varchar', length: 512, nullable: false })\n  title: string;\n\n  /**\n   * Type of the post (e.g., post, page, story, series.).\n   */\n  @Column({\n    type: 'enum',\n    enum: PostType,\n    default: PostType.POST,\n    nullable: false,\n  })\n  postType: PostType;\n\n  /**\n   * URL-friendly identifier for the post.\n   */\n  @Column({ type: 'varchar', length: 256, nullable: false, unique: true })\n  slug: string;\n\n  /**\n   * Status of the post (draft, published, etc.).\n   */\n  @Column({\n    type: 'enum',\n    enum: PostStatus,\n    default: PostStatus.DRAFT,\n    nullable: false,\n  })\n  status: PostStatus;\n\n  /**\n   * Main content of the post (large string)\n   */\n  @Column({ type: 'text', nullable: true })\n  content?: string;\n\n  /**\n   * JSON schema for structured data.\n   */\n  @Column({ type: 'text', nullable: true })\n  schema?: string;\n\n  /**\n   * URL of the featured image.\n   */\n  @Column({ type: 'varchar', length: 1024, nullable: true })\n  featuredImageUrl?: string;\n\n  /**\n   * Date and time when the post is published.\n   */\n  @Column({ type: 'timestamp', nullable: true })\n  publishOn?: Date;\n\n  /**\n   * Tags associated with the post (many-to-many relationship).\n   */\n  @ManyToMany(() => Tag, (tag) => tag.posts, { eager: true })\n  @JoinTable()\n  tags?: Tag[];\n\n  /**\n   * Meta options associated with the post (one-to-one relationship bidirectional).\n   */\n  @OneToOne(() => MetaOption, (metaOptions) => metaOptions.post, {\n    cascade: true,\n    eager: true, // Will fetch posts AND metaOptions when getting posts\n  })\n  metaOptions?: MetaOption;\n\n  /**\n   * Author of the post (many-to-one relationship with User).\n   */\n  @ManyToOne(() => User, (user) => user.posts, { eager: true })\n  author: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n            \n                Description\n            \n            \n                Controller for managing posts.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                createPost\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                delete\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getPosts\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Creates a new blog post'})@ApiResponse({status: 201, description: 'Post created successfully'})@ApiResponse({status: 400, description: 'Invalid request data'})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:61\n                        \n                    \n\n\n            \n                \n                        Creates a new blog post.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data for the new post.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The created post.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Deletes a post by ID'})@ApiQuery({name: 'id', required: true, type: Number, description: 'Post ID to delete'})@ApiResponse({status: 200, description: 'Post deleted successfully'})@ApiResponse({status: 404, description: 'Post not found'})@Delete()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:94\n                        \n                    \n\n\n            \n                \n                        Deletes a post by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the post to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A success message.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                        getPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPosts(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:userId?')@ApiOperation({summary: 'Retrieves all posts for a specific user'})@ApiParam({name: 'userId', required: false, description: 'User ID (optional)'})@ApiResponse({status: 200, description: 'Returns the list of posts'})\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:48\n                        \n                    \n\n\n            \n                \n                        Retrieves all posts for a specific user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user (optional).\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A list of posts.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(patchPostDto: PatchPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Updates an existing blog post'})@ApiResponse({status: 201, description: 'Post updated successfully'})@ApiResponse({status: 404, description: 'Post not found'})@Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:74\n                        \n                    \n\n\n            \n                \n                        Updates an existing blog post.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                patchPostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe updated post data.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The updated post.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Query,\n} from '@nestjs/common';\nimport { PostsService } from './providers/posts.service';\nimport {\n  ApiOperation,\n  ApiResponse,\n  ApiTags,\n  ApiParam,\n  ApiQuery,\n} from '@nestjs/swagger';\nimport { CreatePostDto } from './dto/create-post.dto';\nimport { PatchPostDto } from './dto/patch-post.dto';\n\n/**\n * Controller for managing posts.\n */\n@Controller('posts')\n@ApiTags('Posts')\nexport class PostsController {\n  /**\n   * Creates an instance of PostsController.\n   * @param postsService - The posts service.\n   */\n  constructor(private readonly postsService: PostsService) {}\n\n  /**\n   * Retrieves all posts for a specific user.\n   * @param userId - The ID of the user (optional).\n   * @returns A list of posts.\n   */\n  @Get('/:userId?')\n  @ApiOperation({ summary: 'Retrieves all posts for a specific user' })\n  @ApiParam({\n    name: 'userId',\n    required: false,\n    description: 'User ID (optional)',\n  })\n  @ApiResponse({ status: 200, description: 'Returns the list of posts' })\n  public getPosts(@Param('userId') userId: string) {\n    return this.postsService.findAll(userId);\n  }\n\n  /**\n   * Creates a new blog post.\n   * @param createPostDto - The data for the new post.\n   * @returns The created post.\n   */\n  @ApiOperation({ summary: 'Creates a new blog post' })\n  @ApiResponse({ status: 201, description: 'Post created successfully' })\n  @ApiResponse({ status: 400, description: 'Invalid request data' })\n  @Post()\n  public createPost(@Body() createPostDto: CreatePostDto) {\n    return this.postsService.create(createPostDto);\n  }\n\n  /**\n   * Updates an existing blog post.\n   * @param patchPostDto - The updated post data.\n   * @returns The updated post.\n   */\n  @ApiOperation({ summary: 'Updates an existing blog post' })\n  @ApiResponse({ status: 201, description: 'Post updated successfully' })\n  @ApiResponse({ status: 404, description: 'Post not found' })\n  @Patch()\n  public updatePost(@Body() patchPostDto: PatchPostDto) {\n    return this.postsService.update(patchPostDto);\n  }\n\n  /**\n   * Deletes a post by its ID.\n   * @param id - The ID of the post to delete.\n   * @returns A success message.\n   */\n  @ApiOperation({ summary: 'Deletes a post by ID' })\n  @ApiQuery({\n    name: 'id',\n    required: true,\n    type: Number,\n    description: 'Post ID to delete',\n  })\n  @ApiResponse({ status: 200, description: 'Post deleted successfully' })\n  @ApiResponse({ status: 404, description: 'Post not found' })\n  // This method cascades and removes relevant relationships between posts and tags NOT the actual tags\n  @Delete()\n  public delete(@Query('id', ParseIntPipe) id: number) {\n    return this.postsService.delete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_PostsModule_imports\n\n\n\n\nTagsModule\n\nTagsModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nTagsModule->PostsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            TagsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsController } from './posts.controller';\nimport { PostsService } from './providers/posts.service';\nimport { UsersModule } from 'src/users/users.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Post } from './post.entity';\nimport { MetaOption } from 'src/meta-options/meta-option.entity';\nimport { TagsModule } from 'src/tags/tags.module';\n\n// Import entire module not only a service (view users module exports key)\n@Module({\n  controllers: [PostsController],\n  providers: [PostsService],\n  imports: [\n    UsersModule,\n    TagsModule,\n    TypeOrmModule.forFeature([Post, MetaOption]),\n  ], // Import the post entity, for feature is responsible to create tables corresponding to these entities inside the db\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/providers/posts.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service responsible for handling post-related operations.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, postsRepository: Repository, metaOptionsRepository: Repository, tagsService: TagsService)\n                    \n                \n                        \n                            \n                                Defined in src/posts/providers/posts.service.ts:21\n                            \n                        \n\n                \n                    \n                            Constructor to inject dependencies.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service to handle user-related operations.\n\n                                                        \n                                                \n                                                \n                                                        postsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Repository for managing Post entities.\n\n                                                        \n                                                \n                                                \n                                                        metaOptionsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Repository for managing MetaOption entities.\n\n                                                        \n                                                \n                                                \n                                                        tagsService\n                                                  \n                                                        \n                                                                        TagsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service for handling tag-related operations.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createPostDto: CreatePostDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:64\n                        \n                    \n\n\n            \n                \n                        Creates a new post.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    DTO containing post creation details.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The newly created post.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:177\n                        \n                    \n\n\n            \n                \n                        Deletes a post from the database.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the post to delete.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                An object indicating the deletion status.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:46\n                        \n                    \n\n\n            \n                \n                        Retrieves all posts along with their meta options.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the user requesting the posts.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                A list of posts with related meta options.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(patchPostDto: PatchPostDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:122\n                        \n                    \n\n\n            \n                \n                        Updates an existing post.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                patchPostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    DTO containing fields to update.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The updated post.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Body,\n  Injectable,\n  NotFoundException,\n  RequestTimeoutException,\n} from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users.service';\nimport { CreatePostDto } from '../dto/create-post.dto';\nimport { Repository } from 'typeorm';\nimport { Post } from '../post.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { MetaOption } from 'src/meta-options/meta-option.entity';\nimport { TagsService } from 'src/tags/providers/tags.service';\nimport { PatchPostDto } from '../dto/patch-post.dto';\n\n/**\n * Service responsible for handling post-related operations.\n */\n@Injectable()\nexport class PostsService {\n  /**\n   * Constructor to inject dependencies.\n   * @param usersService Service to handle user-related operations.\n   * @param postsRepository Repository for managing Post entities.\n   * @param metaOptionsRepository Repository for managing MetaOption entities.\n   * @param tagsService Service for handling tag-related operations.\n   */\n  constructor(\n    private readonly usersService: UsersService,\n\n    @InjectRepository(Post)\n    private readonly postsRepository: Repository, // Only add repositories for 1-1 relationships so that it doesnt become crowded\n\n    @InjectRepository(MetaOption)\n    private readonly metaOptionsRepository: Repository,\n\n    private readonly tagsService: TagsService,\n  ) {}\n\n  /**\n   * Retrieves all posts along with their meta options.\n   * @param userId The ID of the user requesting the posts.\n   * @returns A list of posts with related meta options.\n   */\n  public async findAll(userId: string) {\n    return await this.postsRepository.find({\n      relations: { metaOptions: true },\n    });\n\n    // Get meta options along with the posts\n    // return await this.postsRepository.find({\n    //   relations: {\n    //     metaOptions: true,\n    //   },\n    // });\n  }\n\n  /**\n   * Creates a new post.\n   * @param createPostDto DTO containing post creation details.\n   * @returns The newly created post.\n   */\n  public async create(@Body() createPostDto: CreatePostDto) {\n    const author = await this.usersService.findOneById(createPostDto.authorId);\n    const tags = await this.tagsService.findMultipleTags(createPostDto.tags);\n\n    // Use the spread operator to create a shallow copy of createPostDto, meaning a new object is passed to create()\n    const post = this.postsRepository.create({\n      ...createPostDto,\n      author,\n      tags,\n    }); // Only use await for the save method because it returns a promise\n\n    return await this.postsRepository.save(post);\n  }\n\n  /*\n   public async delete(id: number) {\n    // Start a transaction to handle both deletes atomically\n    const queryRunner =\n      this.postsRepository.manager.connection.createQueryRunner();\n    await queryRunner.startTransaction();\n\n    try {\n      // Find the post (with related metaOptions loaded)\n      const post = await this.postsRepository.findOne({\n        where: { id },\n        relations: ['metaOptions'],\n      });\n      if (!post) {\n        throw new Error('Post not found');\n      }\n\n      // Delete the post (cascade will handle the metaOption deletion automatically)\n      await queryRunner.manager.delete(Post, id); // Use delete instead of remove\n\n      // Commit the transaction if everything is successful\n      await queryRunner.commitTransaction();\n\n      // Return a success response\n      return { deleted: true, id };\n    } catch (error) {\n      // If any error occurs, rollback the transaction\n      await queryRunner.rollbackTransaction();\n\n      // Log the error and return a failure response\n      console.error(error);\n      return { deleted: false, message: error.message };\n    } finally {\n      // Release the query runner (important for clean-up)\n      await queryRunner.release();\n    }\n  }\n*/\n\n  /**\n   * Updates an existing post.\n   * @param patchPostDto DTO containing fields to update.\n   * @returns The updated post.\n   */\n  public async update(@Body() patchPostDto: PatchPostDto) {\n    let tags = undefined;\n    let post = undefined;\n\n    try {\n      tags = await this.tagsService.findMultipleTags(patchPostDto.tags);\n    } catch (error) {\n      throw new RequestTimeoutException(\n        'Unable to process your request at the moment. Please try later',\n      );\n    }\n\n    /**\n     * Number of tags need to be equal\n     */\n\n    if (!tags || tags.length !== patchPostDto.tags.length) {\n      throw new BadRequestException('Please check your tag IDs.');\n    }\n    try {\n      post = await this.postsRepository.findOneBy({ id: patchPostDto.id });\n    } catch (error) {\n      throw new RequestTimeoutException(\n        'Unable to process your request at the moment. Please try later',\n      );\n    }\n    if (!post) {\n      throw new NotFoundException(\"This post doesn't exist.\");\n    }\n\n    post.title = patchPostDto.title ?? post.title;\n    post.content = patchPostDto.content ?? post.content;\n    post.status = patchPostDto.status ?? post.status;\n    post.postType = patchPostDto.postType ?? post.postType;\n    post.slug = patchPostDto.slug ?? post.slug;\n    post.featuredImageUrl =\n      patchPostDto.featuredImageUrl ?? post.featuredImageUrl;\n    post.publishOn = patchPostDto.publishOn ?? post.publishOn;\n    post.tags = tags;\n\n    try {\n      await this.postsRepository.save(post);\n    } catch (error) {\n      throw new RequestTimeoutException(\n        'Unable to process your request at the moment. Please try later',\n      );\n    }\n    return post;\n  }\n\n  /**\n   * Deletes a post from the database.\n   * @param id The ID of the post to delete.\n   * @returns An object indicating the deletion status.\n   */\n  public async delete(id: number) {\n    await this.postsRepository.delete(id);\n    return { deleted: true, id };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Tag.html":{"url":"entities/Tag.html","title":"entity - Tag","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Tag\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tag.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity representing a tag.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createDate\n                            \n                            \n                                    \n                                deletedAt\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                featuredImage\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                posts\n                            \n                            \n                                    \n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                updateDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:91\n                        \n                    \n\n            \n                \n                    Timestamp indicating when the tag was created.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:103\n                        \n                    \n\n            \n                \n                    Timestamp indicating when the tag was soft deleted.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:55\n                        \n                    \n\n            \n                \n                    Optional description of the tag.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        featuredImage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:76\n                        \n                    \n\n            \n                \n                    URL of the featured image for the tag.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:21\n                        \n                    \n\n            \n                \n                    Unique identifier for the tag.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:33\n                        \n                    \n\n            \n                \n                    Name of the tag.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, post => post.tags, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:84\n                        \n                    \n\n            \n                \n                    Many-to-many relationship with posts.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:65\n                        \n                    \n\n            \n                \n                    JSON metadata schema for additional tag details.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 512, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:45\n                        \n                    \n\n            \n                \n                    URL-friendly slug for the tag.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:97\n                        \n                    \n\n            \n                \n                    Timestamp indicating when the tag was last updated.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Post } from 'src/posts/post.entity';\nimport {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  ManyToMany,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n/**\n * Entity representing a tag.\n */\n@Entity()\nexport class Tag {\n  /**\n   * Unique identifier for the tag.\n   */\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  /**\n   * Name of the tag.\n   * @example \"Technology\"\n   */\n  @Column({\n    type: 'varchar',\n    length: 256,\n    nullable: false,\n    unique: true,\n  })\n  name: string;\n\n  /**\n   * URL-friendly slug for the tag.\n   * @example \"technology\"\n   */\n  @Column({\n    type: 'varchar',\n    length: 512,\n    nullable: false,\n    unique: true,\n  })\n  slug: string;\n\n  /**\n   * Optional description of the tag.\n   * @example \"Posts related to technology and innovations\"\n   */\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  description: string;\n\n  /**\n   * JSON metadata schema for additional tag details.\n   * @example '{\"color\": \"blue\"}'\n   */\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  schema: string;\n\n  /**\n   * URL of the featured image for the tag.\n   * @example \"https://example.com/images/tag-image.jpg\"\n   */\n  @Column({\n    type: 'varchar',\n    length: 1024,\n    nullable: true,\n  })\n  featuredImage: string;\n\n  /**\n   * Many-to-many relationship with posts.\n   */\n  @ManyToMany(() => Post, (post) => post.tags, {\n    onDelete: 'CASCADE',\n  })\n  posts: Post[];\n\n  // https://orkhan.gitbook.io/typeorm/docs/decorator-reference\n  /**\n   * Timestamp indicating when the tag was created.\n   */\n  @CreateDateColumn()\n  createDate: Date;\n\n  /**\n   * Timestamp indicating when the tag was last updated.\n   */\n  @UpdateDateColumn()\n  updateDate: Date;\n\n  /**\n   * Timestamp indicating when the tag was soft deleted.\n   */\n  @DeleteDateColumn()\n  deletedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TagsController.html":{"url":"controllers/TagsController.html","title":"controller - TagsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TagsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tags.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tags\n            \n\n\n            \n                Description\n            \n            \n                Controller for handling tag-related API requests.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                create\n                            \n                            \n                                    \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    \n                                    Public\n                                    Async\n                                softDelete\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createTagDto: CreateTagDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:29\n                        \n                    \n\n\n            \n                \n                        Creates a new tag.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createTagDto\n                                            \n                                                            CreateTagDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    DTO containing tag data.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The created tag.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete()\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:39\n                        \n                    \n\n\n            \n                \n                        Deletes a tag by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the tag to delete.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                An object indicating whether the deletion was successful.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Async\n                        softDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    softDelete(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('soft-delete')\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:49\n                        \n                    \n\n\n            \n                \n                        Soft deletes a tag by its ID, marking it as deleted without removing it from the database.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the tag to soft delete.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                An object indicating whether the soft deletion was successful.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  ParseIntPipe,\n  Post,\n  Query,\n} from '@nestjs/common';\nimport { TagsService } from './providers/tags.service';\nimport { CreateTagDto } from './dtos/create-tag.dto';\n\n/**\n * Controller for handling tag-related API requests.\n */\n@Controller('tags')\nexport class TagsController {\n  /**\n   * Injects the TagsService.\n   * @param tagsService The service responsible for tag operations.\n   */\n  constructor(private readonly tagsService: TagsService) {}\n\n  /**\n   * Creates a new tag.\n   * @param createTagDto DTO containing tag data.\n   * @returns The created tag.\n   */\n  @Post()\n  public create(@Body() createTagDto: CreateTagDto) {\n    return this.tagsService.create(createTagDto);\n  }\n\n  /**\n   * Deletes a tag by its ID.\n   * @param id The ID of the tag to delete.\n   * @returns An object indicating whether the deletion was successful.\n   */\n  @Delete()\n  public async delete(@Query('id', ParseIntPipe) id: number) {\n    return this.tagsService.delete(id);\n  }\n\n  /**\n   * Soft deletes a tag by its ID, marking it as deleted without removing it from the database.\n   * @param id The ID of the tag to soft delete.\n   * @returns An object indicating whether the soft deletion was successful.\n   */\n  @Delete('soft-delete')\n  public async softDelete(@Query('id', ParseIntPipe) id: number) {\n    // Route is /tags/soft-delete\n    return this.tagsService.softRemove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TagsModule.html":{"url":"modules/TagsModule.html","title":"module - TagsModule","body":"\n                   \n\n\n\n\n    Modules\n    TagsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_exports\n\n\n\ncluster_TagsModule_providers\n\n\n\n\nTagsService \n\nTagsService \n\n\n\nTagsModule\n\nTagsModule\n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tags/tags.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TagsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TagsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TagsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TagsController } from './tags.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Tag } from './tag.entity';\nimport { TagsService } from './providers/tags.service';\n\n@Module({\n  controllers: [TagsController],\n  imports: [TypeOrmModule.forFeature([Tag])],\n  providers: [TagsService],\n  exports: [TagsService],\n})\nexport class TagsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TagsService.html":{"url":"injectables/TagsService.html","title":"injectable - TagsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TagsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/providers/tags.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for handling tag-related operations.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                findMultipleTags\n                            \n                            \n                                    Public\n                                    Async\n                                softRemove\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tagsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/tags/providers/tags.service.ts:13\n                            \n                        \n\n                \n                    \n                            Injects the repository for interacting with the Tag entity.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        tagsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The TypeORM repository for the Tag entity.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createTagDto: CreateTagDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:28\n                        \n                    \n\n\n            \n                \n                        Creates a new tag.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createTagDto\n                                            \n                                                            CreateTagDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Data Transfer Object (DTO) containing tag details.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The created tag.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:53\n                        \n                    \n\n\n            \n                \n                        Deletes a tag by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the tag to delete.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                An object indicating whether the deletion was successful.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findMultipleTags\n                        \n                    \n                \n            \n            \n                \n                        \n                    findMultipleTags(tags: number[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:38\n                        \n                    \n\n\n            \n                \n                        Finds multiple tags based on an array of tag IDs.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tags\n                                            \n                                                        number[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    An array of tag IDs.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                A list of found tags.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        softRemove\n                        \n                    \n                \n            \n            \n                \n                        \n                    softRemove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:74\n                        \n                    \n\n\n            \n                \n                        Soft deletes a tag by its ID, marking it as deleted without removing it from the database.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the tag to soft delete.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                An object indicating whether the soft deletion was successful.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateTagDto } from '../dtos/create-tag.dto';\nimport { In, Repository } from 'typeorm';\nimport { Tag } from '../tag.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n//npx nest generate service tags/providers/tags --flat --no-spec\n\n/**\n * Service for handling tag-related operations.\n */\n@Injectable()\nexport class TagsService {\n  /**\n   * Injects the repository for interacting with the `Tag` entity.\n   * @param tagsRepository The TypeORM repository for the `Tag` entity.\n   */\n  constructor(\n    @InjectRepository(Tag)\n    private readonly tagsRepository: Repository,\n  ) {}\n\n  /**\n   * Creates a new tag.\n   * @param createTagDto Data Transfer Object (DTO) containing tag details.\n   * @returns The created tag.\n   */\n  public async create(createTagDto: CreateTagDto) {\n    const tag = this.tagsRepository.create(createTagDto);\n    return await this.tagsRepository.save(tag);\n  }\n\n  /**\n   * Finds multiple tags based on an array of tag IDs.\n   * @param tags An array of tag IDs.\n   * @returns A list of found tags.\n   */\n  public async findMultipleTags(tags: number[]) {\n    const results = await this.tagsRepository.find({\n      where: {\n        id: In(tags), // Finds all the tags with IDs within this array.\n      },\n    });\n\n    return results;\n  }\n\n  /**\n   * Deletes a tag by its ID.\n   * @param id The ID of the tag to delete.\n   * @returns An object indicating whether the deletion was successful.\n   */\n  public async delete(id: number) {\n    // Check if the tag exists before deleting\n    const tag = await this.tagsRepository.findOne({\n      where: { id },\n    });\n\n    if (!tag) {\n      return { deleted: false, message: 'Tag not found' };\n    }\n\n    // Proceed with deletion\n    await this.tagsRepository.delete(id);\n\n    return { deleted: true, id };\n  }\n\n  /**\n   * Soft deletes a tag by its ID, marking it as deleted without removing it from the database.\n   * @param id The ID of the tag to soft delete.\n   * @returns An object indicating whether the soft deletion was successful.\n   */\n  public async softRemove(id: number) {\n    await this.tagsRepository.softDelete(id);\n    return { deleted: true, id };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                posts\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, post => post.author)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:38\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from 'src/posts/post.entity';\nimport { Column, Entity, OneToMany, PrimaryGeneratedColumn } from 'typeorm';\n\n// Column typees differ if we're using SQL or PostgreSQL check typeorm website\n// Should match the DTO\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n  })\n  firstName: string;\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: true,\n  })\n  lastName: string;\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n    unique: true,\n  })\n  email: string;\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n  })\n  password: string;\n\n  // A user can have many posts\n  @OneToMany(() => Post, (post) => post.author)\n  posts: Post[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createManyUsers\n                            \n                            \n                                    \n                                    Public\n                                createUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUserById\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUsers\n                            \n                            \n                                    \n                                    Public\n                                patchUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createManyUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createManyUsers(createManyUsersDto: CreateManyUsersDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('create-many')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:116\n                        \n                    \n\n\n            \n                \n                        Creates many user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createManyUsersDto\n                                            \n                                                            CreateManyUsersDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe new users.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The created user.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUsers(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:100\n                        \n                    \n\n\n            \n                \n                        Creates a new user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data to create a new user.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The created user.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUserById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Fetch a single user by ID'})@ApiQuery({name: 'id', type: 'string', required: true, description: 'The ID of the user'})@ApiResponse({status: 200, description: 'Returns the user details'})@ApiResponse({status: 404, description: 'User not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:51\n                        \n                    \n\n\n            \n                \n                        Retrieves a user by ID from query parameter (e.g., id=5).\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user to fetch.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The user details.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getUserParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id?')@ApiOperation({summary: 'Fetches a list of registered users on the application'})@ApiResponse({status: 200, description: 'Users fetched successfully based on the query'})@ApiQuery({name: 'limit', type: 'number', required: false, description: 'The number of entries returned per query', example: 10})@ApiQuery({name: 'page', type: 'number', required: false, description: 'The position of the page number that you want the API to return', example: 1})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:86\n                        \n                    \n\n\n            \n                \n                        Retrieves a list of users with pagination.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        patchUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchUser(patchUserDto: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:126\n                        \n                    \n\n\n            \n                \n                        Patches user information.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data to update the user.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PatchUserDto\n\n                        \n                            \n                                The updated user data.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  Param,\n  Post,\n  Query,\n  ParseIntPipe,\n  DefaultValuePipe,\n  Patch,\n} from '@nestjs/common';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { GetUsersParamDto } from './dtos/get-users-param.dto';\nimport { PatchUserDto } from './dtos/patch-user.dto';\nimport { UsersService } from './providers/users.service';\nimport { ApiOperation, ApiQuery, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { CreateManyUsersDto } from './dtos/create-many-users.dto';\n\n// To make parameters optional, use the ? operator\n@Controller('users')\n@ApiTags('Users')\nexport class UsersController {\n  constructor(\n    /**\n     * Injecting user service\n     */\n    private readonly usersService: UsersService,\n  ) {}\n\n  /**\n   * Retrieves a user by ID from query parameter (e.g., `id=5`).\n   * @param id - The ID of the user to fetch.\n   * @returns The user details.\n   */\n  @Get()\n  @ApiOperation({ summary: 'Fetch a single user by ID' })\n  @ApiQuery({\n    name: 'id',\n    type: 'string',\n    required: true,\n    description: 'The ID of the user',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Returns the user details',\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'User not found',\n  })\n  public getUserById(@Query('id') id: string) {\n    const userId = parseInt(id, 10);\n    if (isNaN(userId)) {\n      return { error: 'Invalid ID format' };\n    }\n    return this.usersService.findOneById(userId);\n  }\n\n  /**\n   * Retrieves a list of users with pagination.\n   */\n  @Get('/:id?')\n  @ApiOperation({\n    summary: 'Fetches a list of registered users on the application',\n  })\n  // We can add multiple api response\n  @ApiResponse({\n    status: 200,\n    description: 'Users fetched successfully based on the query',\n  })\n  @ApiQuery({\n    name: 'limit',\n    type: 'number',\n    required: false,\n    description: 'The number of entries returned per query',\n    example: 10,\n  })\n  @ApiQuery({\n    name: 'page',\n    type: 'number',\n    required: false,\n    description:\n      'The position of the page number that you want the API to return',\n    example: 1,\n  })\n  public getUsers(\n    @Param() getUserParamDto: GetUsersParamDto,\n    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\n  ) {\n    return this.usersService.findAll(getUserParamDto, limit, page);\n  }\n\n  /**\n   * Creates a new user.\n   * @param createUserDto - The data to create a new user.\n   * @returns The created user.\n   */\n  @Post()\n  public createUsers(\n    // Without the global validation\n    // @Body(new ValidationPipe()) createUserDto: CreateUserDto,\n\n    // With\n    @Body() createUserDto: CreateUserDto,\n  ) {\n    return this.usersService.createUser(createUserDto);\n  }\n\n  /**\n   * Creates many user.\n   * @param createManyUsersDto - The new users.\n   * @returns The created user.\n   */\n  @Post('create-many')\n  public createManyUsers(@Body() createManyUsersDto: CreateManyUsersDto) {\n    return this.usersService.createMany(createManyUsersDto);\n  }\n\n  /**\n   * Patches user information.\n   * @param patchUserDto - The data to update the user.\n   * @returns The updated user data.\n   */\n  @Patch()\n  public patchUser(@Body() patchUserDto: PatchUserDto) {\n    return patchUserDto;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersCreateManyProvider.html":{"url":"injectables/UsersCreateManyProvider.html","title":"injectable - UsersCreateManyProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersCreateManyProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/users-create-many.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createMany\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dataSource: DataSource)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/users-create-many.provider.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createMany\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMany(createManyUsersDto: CreateManyUsersDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users-create-many.provider.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createManyUsersDto\n                                            \n                                                            CreateManyUsersDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ConflictException,\n  Injectable,\n  RequestTimeoutException,\n} from '@nestjs/common';\nimport { User } from '../user.entity';\nimport { DataSource } from 'typeorm';\nimport { CreateManyUsersDto } from '../dtos/create-many-users.dto';\n\n@Injectable()\nexport class UsersCreateManyProvider {\n  constructor(\n    /**\n     * Inject datasource\n     */\n\n    private readonly dataSource: DataSource,\n  ) {}\n  public async createMany(createManyUsersDto: CreateManyUsersDto) {\n    const newUsers: User[] = [];\n    // Create Query runner instance\n    const queryRunner = this.dataSource.createQueryRunner();\n    try {\n      // Connect query runner to datasource\n\n      await queryRunner.connect();\n\n      // Start transaction\n      await queryRunner.startTransaction();\n    } catch (error) {\n      throw new RequestTimeoutException('Could not connect to the database');\n    }\n\n    try {\n      for (const user of createManyUsersDto.users) {\n        const newUser = queryRunner.manager.create(User, user);\n        const result = await queryRunner.manager.save(newUser);\n\n        newUsers.push(result);\n      }\n      // If successful, commit to the database\n      await queryRunner.commitTransaction();\n    } catch (error) {\n      // If unsuccessful rollback\n      await queryRunner.rollbackTransaction();\n\n      throw new ConflictException('Could not complete the transaction', {\n        description: String(error),\n      });\n    } finally {\n      try {\n        // Release connection\n        await queryRunner.release();\n      } catch (error) {\n        throw new RequestTimeoutException('Could not release the connection', {\n          description: String(error),\n        });\n      }\n    }\n    return newUsers;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersCreateManyProvider\n\nUsersCreateManyProvider\n\nUsersModule -->\n\nUsersCreateManyProvider->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersCreateManyProvider\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './providers/users.service';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './user.entity';\nimport { ConfigModule } from '@nestjs/config';\nimport { UsersCreateManyProvider } from './providers/users-create-many.provider';\nimport profileConfig from './config/profile.config';\n\n// We can only export providers, never controllers\n@Module({\n  controllers: [UsersController],\n  providers: [UsersService, UsersCreateManyProvider],\n  exports: [UsersService],\n  // imports: [AuthModule], will cause a circular dependency\n  imports: [\n    forwardRef(() => AuthModule),\n    TypeOrmModule.forFeature([User]),\n    ConfigModule.forFeature(profileConfig),\n  ],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for managing user-related operations in the Users table.\nThis service interacts with the Users table to perform CRUD operations.\nIt also uses the AuthService to handle authentication-related checks and\ndependencies while ensuring circular dependencies are avoided.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createMany\n                            \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    Public\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findOneById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, usersRepository: Repository, profileConfiguration: ConfigType<>, dataSource: DataSource, usersCreateManyProvider: UsersCreateManyProvider)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/users.service.ts:30\n                            \n                        \n\n                \n                    \n                            Constructs the UsersService with necessary dependencies.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService for handling authentication-related operations.\n\n\n                                                        \n                                                \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        profileConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        usersCreateManyProvider\n                                                  \n                                                        \n                                                                        UsersCreateManyProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createMany\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMany(createManyUsersDto: CreateManyUsersDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:159\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createManyUsersDto\n                                            \n                                                            CreateManyUsersDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:124\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(getUserParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:77\n                        \n                    \n\n\n            \n                \n                        Retrieves a list of all users from the database.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing filters for user retrieval.\n\n\n                                            \n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe maximum number of users to return.\n\n\n                                            \n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe page number for pagination.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                Array of user objects containing basic details.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:102\n                        \n                    \n\n\n            \n                \n                        Retrieves a single user by their unique identifier.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe unique ID of the user to retrieve.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                A user object containing their details.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  forwardRef,\n  HttpException,\n  HttpStatus,\n  Inject,\n  Injectable,\n  NotFoundException,\n  RequestTimeoutException,\n} from '@nestjs/common';\nimport { GetUsersParamDto } from '../dtos/get-users-param.dto';\nimport { AuthService } from 'src/auth/providers/auth.service';\nimport { DataSource, Repository } from 'typeorm';\nimport { User } from '../user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { CreateUserDto } from '../dtos/create-user.dto';\nimport { ConfigType } from '@nestjs/config';\nimport profileConfig from '../config/profile.config';\nimport { UsersCreateManyProvider } from './users-create-many.provider';\nimport { CreateManyUsersDto } from '../dtos/create-many-users.dto';\n\n/**\n * Service for managing user-related operations in the Users table.\n *\n * This service interacts with the Users table to perform CRUD operations.\n * It also uses the AuthService to handle authentication-related checks and\n * dependencies while ensuring circular dependencies are avoided.\n */\n@Injectable()\nexport class UsersService {\n  /**\n   * Constructs the UsersService with necessary dependencies.\n   *\n   * @param {AuthService} authService - Service for handling authentication-related operations.\n   */\n  constructor(\n    @Inject(forwardRef(() => AuthService))\n    private readonly authService: AuthService,\n\n    /**\n     * Injecting usersRepository\n     */\n    @InjectRepository(User)\n    private usersRepository: Repository,\n\n    // /**\n    //  * Injecting ConfigService\n    //  */\n    // private readonly configService: ConfigService,\n\n    /**\n     * Inject profileConfig\n     */\n    @Inject(profileConfig.KEY)\n    private readonly profileConfiguration: ConfigType,\n\n    /**\n     * Inject datasource\n     */\n\n    private readonly dataSource: DataSource,\n\n    /**\n     * Inject usersCreateManyProvider\n     */\n    private readonly usersCreateManyProvider: UsersCreateManyProvider,\n  ) {}\n\n  /**\n   * Retrieves a list of all users from the database.\n   *\n   * @param {GetUsersParamDto} getUserParamDto - DTO containing filters for user retrieval.\n   * @param {number} limit - The maximum number of users to return.\n   * @param {number} page - The page number for pagination.\n   * @returns {Array} Array of user objects containing basic details.\n   */\n  public findAll(\n    getUserParamDto: GetUsersParamDto,\n    limit: number,\n    page: number,\n  ) {\n    throw new HttpException(\n      {\n        status: HttpStatus.MOVED_PERMANENTLY,\n        error: \"This endpoint doesn't exist\",\n        fileName: 'users.service.ts',\n        lineNumber: 71,\n      },\n      HttpStatus.MOVED_PERMANENTLY,\n      {\n        description: 'Occured becaused the endpoint was permanently moved',\n      },\n    );\n  }\n\n  /**\n   * Retrieves a single user by their unique identifier.\n   *\n   * @param {number} id - The unique ID of the user to retrieve.\n   * @returns {{ id: number; firstName: string; email: string }} A user object containing their details.\n   */\n  public async findOneById(id: number) {\n    let user = undefined;\n\n    try {\n      user = await this.usersRepository.findOneBy({ id });\n    } catch (error) {\n      throw new RequestTimeoutException(\n        'Unable to process your request at the moment. Please try again later',\n        {\n          description: 'Error connecting to the database',\n        },\n      );\n    }\n\n    /**\n     * Handle if user does not exist\n     */\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n    return user;\n  }\n  public async createUser(createUserDto: CreateUserDto) {\n    let existingUser = undefined;\n    try {\n      existingUser = await this.usersRepository.findOne({\n        where: { email: createUserDto.email },\n      });\n    } catch (error) {\n      throw new RequestTimeoutException(\n        'Unable to process your request at the moment. Please try again later',\n        {\n          description: 'Error connecting to the database',\n        },\n      );\n    }\n    // Handle exception\n\n    if (existingUser) {\n      throw new BadRequestException('The user already exists.');\n    }\n    // Create a new user\n    let newUser = this.usersRepository.create(createUserDto);\n\n    try {\n      newUser = await this.usersRepository.save(newUser);\n    } catch (error) {\n      throw new RequestTimeoutException(\n        'Unable to process your request at the moment. Please try again later',\n        {\n          description: 'Error connecting to the database',\n        },\n      );\n    }\n\n    return newUser;\n  }\n  public async createMany(createManyUsersDto: CreateManyUsersDto) {\n    return await this.usersCreateManyProvider.createMany(createManyUsersDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.module.ts\n            \n            variable\n            ENV\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/providers/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/meta-options/dtos/create-post-meta-options.dto.ts\n            \n            class\n            CreatePostMetaOptionsDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/meta-options/meta-option.entity.ts\n            \n            entity\n            MetaOption\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/meta-options/meta-options.controller.ts\n            \n            controller\n            MetaOptionsController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/meta-options/providers/meta-options.service.ts\n            \n            injectable\n            MetaOptionsService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/posts/dto/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                100 %\n                (12/12)\n            \n        \n        \n            \n                \n                src/posts/dto/patch-post.dto.ts\n            \n            class\n            PatchPostDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/posts/post.entity.ts\n            \n            entity\n            Post\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/posts/providers/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/tags/dtos/create-tag.dto.ts\n            \n            class\n            CreateTagDto\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/tags/providers/tags.service.ts\n            \n            injectable\n            TagsService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/tags/tag.entity.ts\n            \n            entity\n            Tag\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/tags/tags.controller.ts\n            \n            controller\n            TagsController\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/users/dtos/create-many-users.dto.ts\n            \n            class\n            CreateManyUsersDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dtos/get-users-param.dto.ts\n            \n            class\n            GetUsersParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/providers/users-create-many.provider.ts\n            \n            injectable\n            UsersCreateManyProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/providers/users.service.ts\n            \n            injectable\n            UsersService\n            \n                66 %\n                (4/6)\n            \n        \n        \n            \n                \n                src/users/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                83 %\n                (5/6)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.23\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.2.2\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/mapped-types : ^2.0.5\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.3.0\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            joi : ^17.12.2\n        \n            pg : ^8.11.5\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            PostStatus   (src/.../post-status.enum.ts)\n                        \n                        \n                            PostType   (src/.../post-type.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/posts/enums/post-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PostStatus\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n            \n        \n\n    src/posts/enums/post-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PostType\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                        Bootstrap function for initializing and running the NestJS application.\nThis function sets up the app with global validation pipes and Swagger API documentation.\n\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\nCompodoc Documentation\nScript\nExample :$ npm run docLet me name this as doc.\nTo see the coverage\nExample :$ http://localhost:3001/coverage.htmlIt should be a comma over here.\nNow this script itself a little bit verbose and lengthy, and I'll try to explain all the parts of the\nscript as we go.\nSo first of all, we need to use NPCs and along with Compo Doc in order to generate the Compo Doc documentation.\nSo we use at the rate compo doc, which is the name of the package.\nSo compo doc slash compo doc.\nSo this basically triggers the compo doc package for us.\nAnd then we need to provide it certain configurations.\nThe first one is the path to the pts config file.\nSo hyphen path to the pts config file TTS config file is within the root of the project itself.\nSo we use tsconfig.json.\nSo it's going to pick up this particular config file which is there in the root of our project.\nSo this particular TTS config file over here.\nNow once we have provided the TTS config file, the next flag that we want to add is the s flag.\nNow what this flag does is that it instructs compared to serve generated documentation on a port.\nNow, having said that, I want to have a specific port number as well.\nSo I use hyphen hyphen port.\nAnd let's serve the documentation on port 3001.\nWith that, I also want to enable Compo doc to watch for changes within my code.\nSo whenever I'm writing any new code, it should watch for changes and regenerate the documentation\nwhenever needed.\nFinally, I want to give it a specific directory for generating the documentation so we can use a hyphen\nd flag, which instructs combo doc to generate the documentation within a specific directory, which\nwe can pass as an argument.\nSo here I'm saying within the root of my project, just use the documentation directory to generate\nyour documentation.\nThe details can be seen at localhost:3001\nAlways define both sides of the relationships in many to many relationships i.e tags and posts\nGenerate a service\nExample :$ npx nest generate service tags/providers/tags --flat --no-specGenerate a module\nExample :$ npx nest generate module authGenerate a controller\nExample :$ npx nest generate controller auth --no-specGenerate a provider\nExample :$ npx nest generate pr users/providers/users-create=many.provider --flat --no-specPrettier\nExample :$ npx prettier --write .\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MetaOptionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TagsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_exports\n\n\n\ncluster_TagsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nPostsModule -->\n\nTagsModule->PostsModule\n\n\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nTagsService \n\nTagsService \n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\nUsersCreateManyProvider\n\nUsersCreateManyProvider\n\nUsersModule -->\n\nUsersCreateManyProvider->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        6 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    7 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    8 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ENV   (src/.../app.module.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENV\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.NODE_ENV\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
