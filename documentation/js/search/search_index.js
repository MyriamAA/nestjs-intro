var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.07,1,2.274]],["body/controllers/AppController.html",[0,1.885,1,4.006,2,1.713,3,0.406,4,0.358,5,0.312,6,4.313,7,0.478,8,0.026,9,1.069,10,3.547,11,4.313,12,0.406,13,0.018,14,2.84,15,1.96,16,0.022,17,0.022]],["title/modules/AppModule.html",[18,1.07,19,2.274]],["body/modules/AppModule.html",[1,3.486,2,1.536,3,0.266,4,0.234,5,0.204,7,0.532,8,0.026,9,0.699,10,3.385,11,2.819,12,0.266,13,0.012,16,0.017,17,0.017,18,1.64,19,4.526,20,1.474,21,1.281,22,1.712,23,1.712,24,1.474,25,2.68,26,1.712,27,2.819,28,2.819,29,2.819,30,3.385,31,3.692,32,3.692,33,3.385,34,3.122,35,2.348,36,1.712,37,1.586,38,2.48,39,2.906,40,3.334,41,3.334,42,3.334,43,3.334,44,2.024,45,1.373,46,3.334,47,1.474,48,1.586,49,3.334,50,3.867,51,5.885,52,2.227,53,4.573,54,3.334,55,2.819,56,3.334,57,2.48,58,4.573,59,3.334,60,4.573,61,3.334,62,1.712,63,3.883,64,2.819,65,2.819,66,3.334,67,3.334,68,2.227,69,2.819,70,3.334,71,3.334,72,3.334,73,1.197,74,3.334,75,3.334,76,3.334,77,3.334,78,3.334,79,2.819,80,2.819,81,2.024,82,3.334,83,0.561,84,3.334,85,1.586,86,0.858,87,3.334,88,3.334,89,3.334,90,3.334,91,3.334,92,3.334,93,1.373,94,3.334,95,3.334,96,3.334,97,2.819,98,3.334,99,3.334,100,3.334,101,2.227,102,3.334,103,3.334,104,3.334,105,1.712,106,3.334,107,2.48,108,2.819,109,2.819]],["title/injectables/AppService.html",[10,1.896,110,1.001]],["body/injectables/AppService.html",[3,0.398,4,0.351,5,0.305,7,0.398,8,0.026,9,1.046,10,3.298,12,0.398,13,0.018,16,0.022,17,0.022,110,1.742,111,2.375,112,4.223,113,0.659,114,2.276,115,6.531,116,0.906,117,4.994,118,1.919,119,1.989,120,1.919,121,4.994,122,4.223]],["title/controllers/AuthController.html",[0,1.07,123,2.274]],["body/controllers/AuthController.html",[0,1.739,2,1.499,3,0.356,4,0.314,5,0.273,7,0.479,8,0.026,9,0.935,12,0.356,13,0.016,15,1.716,16,0.021,17,0.021,86,1.424,123,4.199,124,3.775,125,2.711,126,3.321,127,0.589,128,4.117,129,4.899,130,2.477,131,4.117,132,4.117,133,4.117,134,4.68,135,4.68,136,4.68,137,3.228,138,3.775,139,3.321,140,3.321,141,3.321,142,1.973,143,4.464,144,4.464,145,4.464,146,4.464,147,2.292,148,3.775,149,2.982,150,3.321,151,2.486]],["title/modules/AuthModule.html",[18,1.07,30,1.896]],["body/modules/AuthModule.html",[2,1.837,3,0.349,4,0.308,5,0.268,7,0.498,8,0.026,9,0.918,12,0.349,13,0.016,16,0.02,17,0.02,18,1.962,20,1.937,21,1.684,22,2.25,23,2.25,24,1.937,25,3.062,26,3.062,30,3.702,34,3.062,35,2.809,36,2.25,37,2.084,39,3.046,123,3.983,126,3.26,137,3.542,138,3.705,152,3.705,153,3.705,154,3.705,155,4.382,156,3.654,157,4.382,158,3.705,159,2.927,160,2.927,161,3.705,162,3.26,163,3.26]],["title/injectables/AuthService.html",[110,1.001,137,1.749]],["body/injectables/AuthService.html",[3,0.215,4,0.189,5,0.165,7,0.314,8,0.026,9,0.565,12,0.215,13,0.017,15,1.037,16,0.015,17,0.015,62,1.385,73,2.037,81,1.638,83,0.662,86,1.762,101,4.259,110,1.158,111,1.283,113,0.356,114,1.513,116,0.843,118,2.18,119,2.089,120,1.513,122,3.329,127,0.613,128,3.801,129,2.928,130,1.914,135,3.329,136,3.329,137,2.913,147,2.021,148,2.281,150,4.042,151,1.502,156,2.629,159,1.802,160,1.802,162,2.007,163,2.007,164,2.281,165,3.801,166,2.192,167,1.872,168,5.673,169,2.336,170,5.11,171,5.673,172,2.281,173,2.999,174,2.698,175,2.928,176,3.413,177,1.513,178,1.158,179,0.947,180,3.93,181,2.055,182,2.698,183,5.11,184,3.937,185,3.104,186,3.329,187,3.329,188,3.937,189,5.11,190,6.222,191,3.937,192,2.259,193,5.11,194,2.192,195,3.937,196,2.698,197,2.928,198,3.937,199,3.937,200,2.845,201,4.648,202,2.822,203,3.937,204,3.413,205,5.11,206,4.321,207,3.329,208,3.937,209,3.937,210,2.281,211,0.969,212,2.698,213,2.007,214,2.281,215,1.914,216,1.802,217,2.698,218,2.698,219,2.281,220,2.007,221,3.937,222,2.698,223,2.281,224,2.281,225,2.391,226,2.698,227,2.698,228,2.698,229,2.698,230,2.698,231,1.802,232,0.793,233,2.698,234,2.007,235,2.698,236,2.281,237,2.281,238,2.698,239,2.698]],["title/classes/CreateManyUsersDto.html",[13,0.012,240,1.896]],["body/classes/CreateManyUsersDto.html",[3,0.327,4,0.288,5,0.25,7,0.486,8,0.026,12,0.327,13,0.021,16,0.019,17,0.019,73,2.076,83,1.102,86,1.488,113,0.541,116,0.743,127,0.692,142,1.811,167,3.116,240,2.919,241,1.811,242,3.9,243,2.494,244,3.465,245,1.443,246,2.919,247,3.184,248,4.434,249,1.647,250,3.235,251,1.205,252,2.737,253,4.071,254,4.434,255,2.342,256,3.502,257,4.434,258,4.098,259,3.465,260,4.098,261,2.494,262,4.434,263,2.919,264,4.434,265,1.949,266,1.376,267,2.737,268,2.737,269,3.502,270,3.048]],["title/classes/CreatePostDto.html",[13,0.012,271,1.896]],["body/classes/CreatePostDto.html",[3,0.148,4,0.131,5,0.114,7,0.39,8,0.026,12,0.148,13,0.013,16,0.011,17,0.011,47,1.862,73,1.76,83,1.081,93,1.221,113,0.246,116,1.044,119,1.933,127,0.812,142,0.823,176,1.243,179,1.409,192,2.769,216,1.98,232,0.872,234,2.205,241,0.823,245,1.266,246,2.728,249,1.324,251,1.692,252,1.243,253,2.814,256,2.814,257,2.506,259,1.574,262,2.506,263,2.728,264,2.506,265,0.885,268,1.243,269,3.273,270,2.205,271,1.65,272,4.953,273,1.384,274,4.357,275,1.762,276,3.694,277,4.65,278,3.124,279,2.467,280,3.97,281,3.124,282,2.467,283,3.673,284,2.561,285,1.897,286,4.65,287,1.239,288,1.861,289,2.964,290,1.415,291,2.558,292,1.861,293,1.861,294,3.422,295,3.562,296,1.861,297,1.861,298,3.273,299,2.814,300,2.814,301,1.861,302,1.861,303,2.345,304,2.964,305,1.861,306,2.561,307,1.861,308,1.861,309,1.897,310,2.964,311,3.562,312,4.213,313,2.558,314,3.134,315,1.861,316,1.861,317,3.645,318,2.748,319,3.273,320,3.422,321,2.964,322,2.964,323,1.861,324,1.861,325,4.213,326,2.964,327,2.728,328,1.633,329,2.188,330,2.964,331,1.861,332,1.861,333,1.861,334,1.861,335,1.861,336,3.562,337,3.562,338,1.65,339,2.506,340,1.98,341,2.964,342,1.861,343,2.506,344,3.422,345,3.134,346,3.562,347,3.562,348,1.861,349,1.861,350,1.735,351,3.134,352,2.814,353,1.861,354,1.861,355,1.861,356,1.861,357,1.861,358,1.861,359,2.748,360,2.964,361,2.205,362,3.433,363,2.814,364,2.506,365,2.205,366,1.384,367,1.384,368,2.506,369,1.574,370,1.574,371,1.384,372,1.384,373,3.824,374,3.694,375,1.574,376,2.506,377,1.861,378,1.574,379,1.574,380,1.861,381,1.861,382,1.861,383,1.861,384,1.861,385,1.574,386,1.861,387,1.98,388,1.861,389,1.384,390,1.574,391,1.861,392,1.861,393,1.861,394,0.823,395,1.861,396,1.861]],["title/classes/CreatePostMetaOptionsDto.html",[13,0.012,303,1.896]],["body/classes/CreatePostMetaOptionsDto.html",[3,0.359,4,0.317,5,0.275,7,0.359,8,0.026,12,0.359,13,0.02,16,0.021,17,0.021,47,2.788,73,1.618,83,0.758,113,0.595,116,0.818,119,2.118,127,0.595,192,2.461,241,1.992,245,1.532,246,3.099,249,1.749,251,1.325,263,3.099,265,2.144,275,1.623,303,3.099,309,2.858,327,3.099,329,2.648,361,4.141,363,3.01,371,4.141,389,4.493,390,3.811,397,2.461,398,3.811,399,4.507,400,4.507,401,3.718]],["title/classes/CreateTagDto.html",[13,0.012,402,2.068]],["body/classes/CreateTagDto.html",[3,0.225,4,0.198,5,0.172,7,0.324,8,0.026,12,0.225,13,0.015,16,0.015,17,0.015,83,0.931,113,0.372,116,1.003,119,2.111,127,0.856,130,1.964,142,1.248,178,1.746,181,1.798,192,3.002,216,3.485,232,1.196,241,1.248,245,1.119,246,2.265,249,1.278,251,1.627,252,2.717,263,2.655,265,1.343,269,3.185,282,3.185,283,4.136,294,3.547,298,3.695,299,3.485,300,3.485,306,2.265,327,2.905,329,2.482,336,4.413,337,4.413,338,2.265,339,3.439,340,2.717,343,4.413,350,2.796,352,3.485,361,3.026,362,3.485,363,3.485,364,3.439,365,2.1,366,2.1,367,2.1,373,3.882,375,2.387,378,2.387,379,2.387,385,2.387,402,2.47,403,4.872,404,2.387,405,3.026,406,4.032,407,5.219,408,2.108,409,5.022,410,2.823,411,2.823,412,4.032,413,2.823,414,2.823,415,2.823,416,2.823,417,4.032,418,2.823,419,2.823,420,2.265,421,2.823,422,4.068,423,4.068,424,2.823,425,2.823,426,2.387,427,3.439,428,3.439,429,3.439]],["title/classes/CreateUserDto.html",[13,0.012,250,1.749]],["body/classes/CreateUserDto.html",[3,0.246,4,0.217,5,0.188,7,0.246,8,0.026,12,0.246,13,0.02,16,0.016,17,0.016,83,0.914,86,1.649,101,4.07,113,0.407,116,0.985,119,2.228,127,0.407,178,1.829,179,1.307,204,4.223,232,1.274,241,1.363,242,4.256,245,1.192,246,2.412,249,1.361,250,2.225,251,1.597,263,3.024,265,1.467,287,1.597,338,2.412,362,2.894,363,3.628,365,2.294,366,2.294,367,2.294,426,3.664,430,2.294,431,4.333,432,3.223,433,4.333,434,4.04,435,3.628,436,4.235,437,4.235,438,3.084,439,3.084,440,4.333,441,3.664,442,5.432,443,3.963,444,3.664,445,5.017,446,6.221,447,3.084,448,3.084,449,4.593,450,5.432,451,3.084,452,3.084,453,3.084,454,5.432,455,4.333,456,4.333,457,4.333,458,4.593,459,4.333,460,5.432,461,3.97,462,5.432,463,5.432,464,5.432,465,3.084,466,4.333,467,4.333,468,5.432,469,3.084,470,3.084]],["title/classes/GetUsersParamDto.html",[13,0.012,471,2.068]],["body/classes/GetUsersParamDto.html",[3,0.329,4,0.29,5,0.252,7,0.462,8,0.026,12,0.329,13,0.024,16,0.02,17,0.02,83,0.976,86,1.71,113,0.544,116,0.748,127,0.695,142,1.823,149,3.517,167,2.504,177,2.023,179,1.47,192,2.701,216,3.517,241,1.823,245,1.449,249,1.654,251,1.213,265,1.962,268,2.755,287,1.705,290,2.253,294,3.068,359,3.917,362,3.517,373,3.917,471,3.197,472,4.452,473,3.488,474,2.931,475,4.545,476,4.124,477,4.124,478,4.452,479,4.452,480,5.265]],["title/entities/MetaOption.html",[481,1.144,482,1.62]],["body/entities/MetaOption.html",[3,0.263,4,0.232,5,0.201,7,0.362,8,0.026,12,0.263,13,0.012,16,0.017,17,0.017,48,2.882,80,3.839,83,1.02,85,1.569,93,1.869,113,0.435,116,1.064,119,1.525,127,0.435,194,3.113,249,1.427,251,1.724,255,1.745,275,1.714,287,1.335,290,1.743,319,3.735,327,3.374,329,2.66,352,3.032,389,3.861,397,2.679,401,3.032,408,2.007,420,2.528,435,3.032,461,3.396,481,2.035,482,3.008,483,2.79,484,3.377,485,4.54,486,4.389,487,4.389,488,4.389,489,3.299,490,4.16,491,5.592,492,3.467,493,3.299,494,2.757,495,2.203,496,3.032,497,3.299,498,4.54,499,3.839,500,4.54,501,4.54,502,4.54,503,2.79,504,4.54,505,3.839,506,3.299,507,3.299,508,3.377,509,3.113,510,3.467,511,4.389,512,3.299,513,2.528,514,2.454,515,3.032,516,3.839,517,3.839,518,1.268]],["title/controllers/MetaOptionsController.html",[0,1.07,519,2.274]],["body/controllers/MetaOptionsController.html",[0,1.779,2,1.316,3,0.312,4,0.275,5,0.239,7,0.451,8,0.026,9,0.821,12,0.312,13,0.014,14,2.182,15,1.506,16,0.019,17,0.019,47,2.815,48,2.424,83,0.659,113,0.517,114,1.958,116,0.711,118,1.958,120,1.506,125,2.38,127,0.672,166,2.182,169,2.331,177,1.506,178,1.153,179,0.943,211,1.407,215,2.098,232,1.498,245,1.402,251,1.153,255,1.958,275,1.692,303,3.337,309,3.078,328,2.252,329,2.955,372,2.916,394,2.252,397,2.252,519,3.403,520,3.315,521,2.616,522,5.661,523,3.92,524,3.92,525,5.068,526,5.661,527,3.79,528,3.094,529,2.013,530,3.459,531,3.315,532,3.315,533,3.92,534,2.916,535,2.013,536,3.92]],["title/modules/MetaOptionsModule.html",[18,1.07,31,2.068]],["body/modules/MetaOptionsModule.html",[2,1.948,3,0.329,4,0.29,5,0.252,7,0.503,8,0.026,9,0.864,12,0.329,13,0.015,16,0.02,17,0.02,18,2.028,20,1.823,21,1.585,22,2.118,23,2.118,24,1.823,25,2.978,26,2.118,31,3.92,35,2.704,36,2.118,37,1.962,39,2.931,44,2.505,45,1.698,47,2.327,48,1.962,127,0.544,130,2.388,133,3.068,134,3.488,150,3.068,309,2.704,329,2.759,397,1.823,408,2.327,481,1.385,482,2.504,518,1.585,519,3.874,521,2.704,530,3.653,531,3.488,532,3.488,537,3.488,538,3.488,539,4.124,540,4.124,541,2.505,542,5.265,543,2.931,544,4.124,545,4.124]],["title/injectables/MetaOptionsService.html",[110,1.001,530,1.896]],["body/injectables/MetaOptionsService.html",[3,0.278,4,0.245,5,0.213,7,0.476,8,0.026,9,0.731,12,0.278,13,0.013,16,0.017,17,0.017,45,1.436,47,2.724,62,1.791,81,2.863,83,0.793,110,1.386,111,1.659,113,0.46,114,2.199,116,0.855,118,1.812,120,1.34,127,0.705,133,3.507,147,2.421,151,1.941,169,2.2,177,1.812,178,1.386,179,1.134,181,2.53,211,1.693,215,1.942,232,1.386,245,1.297,266,2.069,275,0.897,279,3.149,303,3.186,306,3.186,309,2.421,328,2.084,372,2.594,397,2.361,405,4.257,481,2.069,482,3.122,518,1.34,521,2.421,525,3.987,529,1.791,530,2.625,541,2.118,546,4.517,547,2.949,548,3.507,549,2.974,550,3.487,551,3.891,552,3.487,553,5.342,554,3.987,555,4.715,556,3.487,557,3.149,558,3.987,559,4.715,560,2.421,561,1.941,562,3.507,563,4.715,564,4.715,565,2.329,566,2.949,567,3.487,568,2.118,569,3.487]],["title/classes/PatchPostDto.html",[13,0.012,570,2.068]],["body/classes/PatchPostDto.html",[3,0.337,4,0.297,5,0.258,7,0.467,8,0.026,12,0.337,13,0.019,16,0.02,17,0.02,83,0.711,113,0.557,116,0.766,127,0.705,142,1.868,179,1.286,192,2.363,241,1.868,245,1.471,249,1.68,251,1.243,252,2.822,263,2.977,265,2.01,266,1.419,269,3.571,271,3.266,273,3.143,275,1.672,287,1.572,290,2.262,359,3.977,387,2.822,513,3.432,570,3.247,571,4.521,572,4.521,573,3.977,574,5.213,575,4.521,576,4.521,577,5.347,578,5.347,579,5.347,580,4.226,581,4.226,582,3.573,583,3.143]],["title/classes/PatchUserDto.html",[13,0.012,584,2.274]],["body/classes/PatchUserDto.html",[3,0.382,4,0.337,5,0.293,7,0.46,8,0.026,12,0.382,13,0.017,16,0.021,17,0.021,86,1.487,127,0.632,179,1.39,241,2.118,245,1.59,249,1.816,250,3.186,266,1.609,267,3.2,430,3.564,572,4.886,574,5.447,575,4.886,582,4.052,584,3.86,585,4.052,586,5.779,587,5.779,588,4.052,589,4.052]],["title/entities/Post.html",[275,0.876,481,1.144]],["body/entities/Post.html",[3,0.172,4,0.151,5,0.132,7,0.415,8,0.026,12,0.172,13,0.008,16,0.012,17,0.012,47,1.47,48,1.025,57,3.396,73,2.293,83,1.105,85,1.025,86,1.444,93,2.31,113,0.284,116,1.102,119,2.04,127,0.284,179,1.461,181,1.47,243,2.479,249,1.045,251,1.786,274,2.474,275,1.716,277,4.171,278,3.434,279,3.482,280,4.174,281,3.434,282,3.295,283,2.712,284,2.746,285,2.533,286,4.171,287,0.978,290,1.364,291,2.995,295,2.812,298,3.049,299,2.221,300,2.221,309,1.708,313,2.019,314,2.474,317,2.474,318,2.474,319,3.049,320,3.396,327,1.851,344,3.669,345,2.474,350,2.146,352,3.049,368,2.812,369,1.822,370,1.822,376,4.744,397,0.953,408,1.47,420,2.542,443,3.482,461,3.165,481,1.533,482,2.171,484,2.474,490,2.474,492,2.712,494,2.772,495,3.747,496,4.232,503,1.822,508,3.878,510,2.221,515,3.845,516,1.822,517,2.812,518,0.828,541,1.309,590,1.822,591,2.155,592,3.325,593,5.213,594,2.155,595,3.86,596,2.155,597,3.325,598,3.878,599,2.812,600,2.155,601,2.155,602,3.325,603,2.155,604,3.325,605,2.812,606,2.155,607,2.155,608,2.812,609,2.155,610,3.325,611,2.812,612,2.155,613,2.812,614,2.155,615,3.325,616,1.822,617,3.325,618,2.155,619,2.155,620,2.812,621,2.155,622,3.325,623,2.812,624,3.325,625,2.155,626,2.155,627,2.155,628,2.155,629,1.822,630,1.822]],["title/controllers/PostsController.html",[0,1.07,631,2.274]],["body/controllers/PostsController.html",[0,1.325,2,0.769,3,0.183,4,0.161,5,0.14,7,0.404,8,0.026,9,0.48,12,0.183,13,0.008,14,1.275,15,0.88,16,0.013,17,0.013,73,1.251,83,0.898,86,1.429,93,1.435,113,0.302,114,1.339,116,0.855,118,2.297,119,1.416,120,1.811,125,1.391,127,0.877,139,1.704,140,3.771,141,4.256,142,1.012,169,2.537,176,1.53,177,1.811,178,1.57,179,1.335,181,2.241,200,1.94,211,0.822,215,2.199,232,1.57,251,1.386,255,1.811,256,3.148,261,2.242,271,3.091,274,4.256,275,1.76,284,3.091,285,1.789,287,1.491,290,2.151,338,1.94,394,2.241,408,2.756,449,1.937,474,1.275,475,3.506,509,1.94,513,2.973,521,1.789,528,1.391,570,3.371,573,3.506,583,2.592,631,2.817,632,1.937,633,3.484,634,3.708,635,3.484,636,3.484,637,2.291,638,4.217,639,3.484,640,4.713,641,3.566,642,3.484,643,2.946,644,2.946,645,2.291,646,2.291,647,1.53,648,3.148,649,1.937,650,2.291,651,3.985,652,3.985,653,2.291,654,2.291,655,2.946,656,2.291,657,2.291,658,3.148,659,2.291,660,3.771,661,2.291,662,2.291,663,2.291,664,3.148,665,2.291,666,2.291,667,2.592,668,2.946,669,2.624,670,1.937,671,3.484,672,2.946,673,1.937,674,1.937,675,2.291,676,2.291,677,2.291,678,3.985,679,2.291,680,2.291,681,3.137,682,2.291,683,2.291,684,2.291,685,2.291,686,1.937,687,2.291,688,2.291,689,2.291,690,1.704,691,2.291,692,1.937,693,2.291]],["title/modules/PostsModule.html",[18,1.07,32,2.068]],["body/modules/PostsModule.html",[2,1.737,3,0.32,4,0.282,5,0.245,7,0.536,8,0.026,9,0.84,12,0.32,13,0.015,16,0.019,17,0.019,18,1.966,20,1.773,21,1.541,22,2.06,23,2.06,24,1.773,25,2.939,26,2.656,32,4.087,33,3.568,34,3.29,35,2.656,36,2.06,37,1.908,39,2.879,44,2.436,45,1.652,48,1.908,85,1.908,158,3.392,166,2.233,167,1.908,211,1.44,266,1.347,275,1.331,397,1.773,481,1.347,482,2.46,541,2.436,631,3.823,669,3.568,670,3.392,694,3.392,695,3.392,696,4.011,697,4.011,698,4.011,699,3.392,700,4.011,701,4.011,702,4.011,703,3.392,704,4.011,705,4.011,706,4.011,707,4.011,708,4.011,709,4.011]],["title/injectables/PostsService.html",[110,1.001,669,1.896]],["body/injectables/PostsService.html",[3,0.136,4,0.12,5,0.105,7,0.426,8,0.026,9,0.359,12,0.136,13,0.006,15,1.543,16,0.01,17,0.01,21,1.065,45,0.705,47,1.949,48,0.814,62,2.264,68,1.143,73,1.441,81,1.683,83,0.742,85,1.909,86,1.033,93,0.705,105,1.423,110,0.815,111,0.814,113,0.226,114,1.065,116,0.8,118,2.054,119,1.173,120,2.054,127,0.623,130,2.201,147,2.061,149,2.681,151,2.235,166,1.543,169,2.397,172,1.447,173,2.364,177,1.694,178,1.297,179,1.061,185,1.143,194,1.543,200,0.953,202,2.866,206,1.447,210,1.447,211,1.695,215,2.131,225,1.039,231,3.152,232,1.572,245,1.104,255,1.065,261,1.318,266,1.348,271,2.976,275,1.684,279,2.681,284,1.543,285,2.552,287,1.297,290,1.886,291,1.683,306,1.944,309,2.264,328,1.774,338,0.953,340,2.332,350,1.438,351,1.273,387,1.851,394,1.225,397,0.757,408,2.196,474,0.953,482,1.909,509,1.944,510,1.143,513,1.543,518,0.658,521,2.061,528,1.039,535,2.423,541,1.039,543,2.235,548,1.273,549,3.241,551,3.411,560,1.423,561,2.235,562,1.273,565,1.143,566,1.447,568,3.673,570,3.017,573,2.061,576,2.343,583,2.061,605,2.343,634,3.152,644,2.953,647,2.332,648,2.332,655,1.447,658,1.851,660,2.061,664,1.851,669,1.543,673,1.447,674,1.447,686,1.447,690,1.273,699,1.447,710,1.447,711,2.343,712,4.014,713,4.014,714,4.014,715,2.657,716,1.711,717,1.711,718,1.711,719,2.061,720,2.771,721,1.711,722,2.598,723,2.771,724,1.711,725,2.953,726,2.771,727,1.711,728,1.711,729,1.447,730,1.447,731,2.986,732,1.711,733,1.711,734,1.447,735,1.711,736,1.711,737,1.711,738,1.711,739,2.771,740,3.492,741,1.447,742,1.711,743,1.711,744,1.711,745,1.711,746,1.711,747,1.711,748,1.711,749,1.711,750,1.711,751,2.771,752,2.953,753,1.447,754,1.711,755,1.447,756,1.711,757,1.447,758,3.319,759,1.711,760,1.711,761,1.711,762,1.711,763,1.711,764,1.711,765,1.711,766,1.711,767,1.447,768,1.711,769,1.447,770,2.771,771,2.986,772,1.711,773,1.447,774,1.447,775,1.447,776,1.711,777,1.711,778,1.273,779,1.447,780,1.447,781,1.711,782,1.711,783,1.273,784,1.447,785,1.711,786,1.711,787,2.953,788,3.492,789,3.492,790,2.953,791,3.492,792,1.447,793,1.711,794,1.711,795,1.711,796,1.711,797,1.711,798,1.711,799,1.711,800,1.447,801,1.447,802,2.771,803,1.711,804,2.771,805,1.711,806,2.771,807,1.711,808,2.771,809,1.711,810,2.771,811,1.711,812,2.771,813,1.711,814,2.771,815,1.711,816,1.447,817,1.711]],["title/entities/Tag.html",[350,1.402,481,1.144]],["body/entities/Tag.html",[3,0.206,4,0.182,5,0.158,7,0.304,8,0.026,12,0.206,13,0.009,16,0.014,17,0.014,73,2.212,83,1.092,85,1.231,93,2.062,113,0.341,116,1.118,119,2.069,127,0.737,130,1.065,178,1.571,179,0.918,192,2.723,194,3.112,234,2.84,243,2.382,249,1.2,251,1.812,255,1.467,275,1.438,282,3.568,283,3.568,287,1.123,290,1.523,298,3.345,299,2.55,300,2.55,319,3.733,327,2.126,329,1.816,350,2.769,406,3.836,408,2.471,409,3.836,412,2.188,417,2.188,420,3.112,427,2.188,428,2.188,429,2.188,435,2.55,443,3.733,481,1.682,486,3.836,487,3.836,488,3.836,490,4.158,492,3.03,494,2.318,495,3.568,496,4.115,505,3.228,508,2.84,509,2.126,510,2.55,511,3.836,513,2.126,514,1.925,515,3.733,518,0.994,560,1.96,595,4.235,598,4.158,599,3.228,611,3.228,613,3.228,616,2.188,620,3.228,623,3.228,816,3.228,818,2.188,819,3.818,820,4.537,821,2.588,822,4.537,823,2.588,824,2.84,825,2.588,826,2.588,827,2.588,828,2.588,829,2.588,830,2.588,831,2.588,832,2.588,833,2.588,834,2.588]],["title/controllers/TagsController.html",[0,1.07,835,2.274]],["body/controllers/TagsController.html",[0,1.561,2,1.021,3,0.242,4,0.213,5,0.186,7,0.396,8,0.026,9,0.637,12,0.242,13,0.011,14,1.692,15,1.168,16,0.016,17,0.016,83,0.836,105,2.202,113,0.401,114,1.648,116,0.901,118,2.269,120,1.909,125,1.846,127,0.712,130,1.766,131,3.19,132,3.19,166,1.692,169,2.595,177,1.909,178,1.461,179,1.195,181,1.896,194,3.005,211,1.092,215,2.222,225,3.277,232,1.261,245,1.18,251,1.461,255,1.648,266,1.44,275,1.279,285,1.561,287,1.737,290,2.223,306,3.005,328,1.896,350,2.77,394,1.896,402,3.685,474,1.692,509,2.388,528,1.846,529,1.561,534,2.261,535,1.561,543,2.388,549,3.288,561,2.388,634,4.355,647,2.03,648,3.605,667,3.696,692,2.57,715,2.922,722,4.015,741,2.57,824,4.393,835,2.864,836,2.57,837,4.288,838,2.57,839,3.04,840,3.04,841,4.563,842,3.04,843,4.288,844,3.04,845,3.626,846,3.19,847,3.626,848,2.57,849,2.57,850,3.04,851,3.04,852,3.04,853,3.04,854,3.04,855,3.04,856,3.04]],["title/modules/TagsModule.html",[18,1.07,33,1.896]],["body/modules/TagsModule.html",[2,1.861,3,0.357,4,0.314,5,0.273,7,0.515,8,0.026,9,0.938,12,0.357,13,0.016,16,0.021,17,0.021,18,1.892,20,1.978,21,1.72,22,2.298,23,2.298,24,1.978,25,3.092,26,3.092,33,3.719,35,2.846,36,2.298,37,2.129,39,2.491,44,2.717,45,1.843,350,1.843,715,3.552,835,4.021,848,3.784,857,3.784,858,3.784,859,3.784,860,4.475,861,4.475,862,3.784,863,4.475]],["title/injectables/TagsService.html",[110,1.001,715,1.749]],["body/injectables/TagsService.html",[3,0.196,4,0.173,5,0.15,7,0.416,8,0.026,9,0.515,12,0.196,13,0.009,15,0.944,16,0.018,17,0.014,45,1.012,62,2.259,73,1.319,83,0.879,93,1.012,105,1.886,107,1.828,110,1.08,111,1.169,113,0.324,114,1.412,116,0.948,118,2.246,120,2.008,127,0.724,130,1.513,147,1.886,151,1.368,159,1.641,160,1.641,169,2.576,177,2.008,178,1.537,179,1.257,181,1.624,185,1.641,194,2.718,197,1.828,200,2.45,211,1.58,213,1.828,214,2.077,215,2.152,225,2.965,232,1.08,245,1.011,247,2.231,253,3.491,255,1.412,261,1.747,266,1.234,285,2.919,287,1.757,290,2.177,306,3.053,328,1.624,338,1.368,350,2.813,351,3.888,394,1.624,402,3.33,405,2.733,481,1.64,509,2.91,518,1.691,529,1.262,534,2.733,535,1.886,543,2.045,549,3.482,551,3.549,554,3.106,557,2.454,560,1.886,561,2.718,565,1.641,568,3.174,634,3.663,647,2.454,648,3.261,715,1.886,722,3.888,824,4.08,838,3.106,841,4.129,845,3.106,846,2.733,847,3.106,849,2.077,862,2.077,864,2.077,865,3.673,866,3.673,867,2.457,868,2.457,869,4.4,870,2.457,871,2.457,872,3.673,873,2.457,874,4.4,875,3.673,876,2.457,877,2.077,878,2.457,879,2.457,880,2.457,881,2.457,882,2.457,883,2.077,884,2.457,885,2.457,886,2.457,887,2.457,888,2.457,889,2.457]],["title/entities/User.html",[86,0.876,481,1.144]],["body/entities/User.html",[3,0.258,4,0.228,5,0.198,7,0.357,8,0.026,12,0.258,13,0.012,16,0.017,17,0.017,73,1.993,83,1.089,85,1.542,86,1.738,93,2.482,101,3.892,105,2.304,113,0.428,116,1.093,119,2.115,127,0.428,178,1.632,179,1.079,204,3.892,249,1.41,251,1.772,261,2.134,275,1.551,287,1.319,290,1.727,408,2.576,420,3.356,434,3.337,435,2.996,436,4.35,437,4.35,441,3.794,443,4.207,445,5.326,479,3.794,481,1.864,484,3.337,492,3.436,494,2.724,495,3.707,496,4.207,514,2.412,515,3.892,518,1.246,598,4.685,890,2.742,891,3.243,892,3.243,893,3.243,894,3.243,895,3.243,896,3.243,897,4.486,898,3.243,899,4.486,900,4.486]],["title/controllers/UsersController.html",[0,1.07,901,2.274]],["body/controllers/UsersController.html",[0,1.23,2,0.683,3,0.162,4,0.143,5,0.124,7,0.424,8,0.026,9,0.426,12,0.162,13,0.007,14,1.133,15,0.782,16,0.012,17,0.012,62,1.045,73,1.142,83,0.992,86,1.715,93,1.823,113,0.268,114,1.222,116,0.871,118,2.224,119,1.613,120,1.956,125,1.236,127,0.827,130,1.31,132,2.366,139,1.514,140,2.912,141,3.293,142,0.899,167,3.028,169,2.558,173,2.105,175,1.514,177,2.174,178,1.619,179,1.28,181,2.251,192,1.957,200,1.771,202,1.236,211,0.731,215,2.383,223,2.689,232,1.302,240,2.962,243,1.862,245,0.875,247,2.688,250,2.905,251,1.412,255,1.701,256,3.677,261,2.105,266,1.486,267,2.124,275,1.008,284,2.18,287,1.843,290,2.04,313,3.581,317,2.366,328,1.957,387,2.124,394,1.957,432,1.514,471,2.688,474,2.674,499,1.721,513,1.771,527,2.366,528,1.931,529,1.633,535,1.045,543,2.18,560,2.273,584,3.779,629,4.305,641,1.721,643,1.721,649,1.721,651,3.743,652,2.689,658,2.956,660,1.514,664,2.956,667,2.912,668,3.311,672,3.743,678,2.689,681,2.366,846,1.514,901,2.615,902,1.721,903,3.18,904,3.311,905,3.18,906,3.915,907,3.18,908,2.035,909,3.18,910,2.035,911,1.721,912,2.035,913,2.035,914,2.035,915,3.18,916,2.035,917,4.426,918,2.035,919,3.18,920,2.035,921,4.498,922,2.035,923,3.18,924,2.035,925,2.035,926,3.18,927,4.426,928,2.035,929,2.035,930,3.915,931,3.311,932,2.689,933,2.035,934,2.035,935,2.035,936,1.721,937,1.721,938,2.035,939,1.721,940,1.514,941,2.035,942,2.035,943,2.035,944,2.035,945,3.18,946,2.035,947,2.035,948,2.035,949,2.035,950,2.035,951,2.035,952,2.035,953,2.035,954,1.721,955,2.035,956,2.035,957,2.035,958,2.035,959,2.035,960,2.035]],["title/injectables/UsersCreateManyProvider.html",[110,1.001,961,1.896]],["body/injectables/UsersCreateManyProvider.html",[3,0.231,4,0.204,5,0.177,7,0.421,8,0.026,9,0.608,12,0.231,13,0.01,14,1.615,15,1.115,16,0.015,17,0.015,62,2.871,68,1.937,83,0.698,86,1.576,105,2.713,110,1.22,111,1.38,113,0.383,114,1.594,116,0.752,118,1.594,120,1.115,127,0.738,147,2.486,166,2.309,167,2.848,169,1.994,176,2.77,177,1.594,178,1.22,179,0.998,202,2.94,211,1.489,215,1.708,220,3.085,224,2.452,225,1.761,231,3.234,232,1.424,240,3.237,243,1.38,245,1.141,247,3.209,253,2.77,254,3.507,255,2.031,261,1.973,266,1.626,270,2.157,328,1.833,394,1.833,461,1.761,474,2.696,518,1.861,529,1.489,535,2.13,543,2.309,548,2.157,549,2.696,557,2.77,561,1.615,562,3.085,568,3.531,681,3.085,719,3.085,731,3.085,752,5.177,755,2.452,757,2.452,758,3.234,767,2.452,769,2.452,771,3.602,773,2.452,774,2.452,775,2.452,778,2.157,779,3.507,780,4.094,784,2.452,787,2.452,940,2.157,961,2.942,962,4.094,963,2.452,964,3.507,965,4.148,966,4.842,967,3.507,968,2.9,969,5.27,970,2.9,971,3.507,972,2.9,973,4.148,974,4.148,975,4.148,976,2.157,977,4.148,978,2.9,979,4.148,980,2.9,981,2.9,982,4.094,983,2.9,984,2.9,985,4.148,986,2.9,987,2.452,988,2.9,989,2.452,990,2.9,991,2.9,992,2.9,993,2.9,994,2.9,995,2.9,996,2.9,997,4.148]],["title/modules/UsersModule.html",[18,1.07,34,1.749]],["body/modules/UsersModule.html",[2,1.928,3,0.322,4,0.283,5,0.247,7,0.532,8,0.026,9,0.846,12,0.414,13,0.015,16,0.019,17,0.019,18,1.804,20,1.784,21,1.551,22,2.073,23,2.073,24,1.784,25,3.112,26,2.948,30,3.196,34,3.431,35,2.667,36,2.073,37,1.92,39,2.891,44,2.451,45,1.662,50,3.413,52,2.696,86,1.039,156,3.468,161,3.413,162,3.003,163,3.003,173,3.245,266,1.356,901,3.835,939,3.413,961,3.574,976,3.003,998,3.413,999,3.413,1000,3.413,1001,4.037,1002,4.037,1003,4.037,1004,4.037,1005,3.413,1006,3.413,1007,3.413,1008,4.037,1009,4.037,1010,4.037]],["title/injectables/UsersService.html",[110,1.001,173,1.62]],["body/injectables/UsersService.html",[3,0.164,4,0.277,5,0.126,7,0.471,8,0.026,9,0.432,12,0.164,13,0.007,15,1.713,16,0.012,17,0.012,21,1.235,45,0.849,52,1.377,81,1.252,83,0.813,86,1.687,105,2.289,110,0.945,111,0.98,113,0.272,114,1.235,116,0.877,118,2.125,120,1.517,127,0.705,128,2.39,129,2.39,130,1.323,137,2.839,147,1.65,149,2.146,151,2.69,156,1.377,167,2.989,169,2.475,173,2.12,175,2.39,177,1.857,178,1.421,179,1.286,181,1.42,197,2.39,200,1.789,202,3.246,204,1.377,211,1.601,215,2.436,219,1.743,220,2.937,231,3.419,232,1.626,240,2.85,243,0.98,245,1.227,246,1.789,247,2.707,250,2.628,255,1.713,261,1.528,266,0.692,267,1.377,284,1.148,287,1.791,290,1.795,313,3.108,328,1.97,394,1.97,420,1.789,471,2.707,478,2.717,518,0.792,521,2.289,529,1.65,535,1.65,549,3.163,551,3.108,560,1.65,561,2.198,565,1.377,568,2.707,658,2.977,711,3.338,719,2.39,729,2.717,730,2.717,731,1.533,758,2.637,771,2.937,800,1.743,801,1.743,904,2.717,911,2.717,921,3.769,931,3.338,932,2.717,936,1.743,937,1.743,940,1.533,961,3.078,964,2.717,967,2.717,969,4.675,971,2.717,976,1.533,982,4.086,989,3.338,1005,1.743,1006,1.743,1007,1.743,1011,1.743,1012,3.213,1013,2.061,1014,4.458,1015,4.458,1016,4.458,1017,2.061,1018,3.213,1019,3.213,1020,3.213,1021,3.213,1022,2.061,1023,3.213,1024,3.213,1025,2.061,1026,2.061,1027,2.061,1028,3.213,1029,3.213,1030,2.061,1031,3.213,1032,2.061,1033,3.948,1034,2.061,1035,2.061,1036,2.061,1037,2.061,1038,3.948,1039,2.061,1040,3.213,1041,2.061,1042,2.061,1043,2.061,1044,2.061,1045,2.061,1046,2.061,1047,2.061,1048,3.948,1049,2.061,1050,3.213,1051,3.948,1052,2.061,1053,2.061,1054,2.061,1055,2.061,1056,2.061,1057,2.061]],["title/coverage.html",[1058,3.451]],["body/coverage.html",[0,1.943,1,2.359,5,0.216,6,2.987,8,0.026,10,1.967,13,0.023,16,0.018,17,0.018,24,1.562,38,2.628,47,1.562,48,2.262,63,2.628,83,0.594,86,0.909,110,1.859,112,2.987,123,2.359,124,2.987,137,1.814,164,2.987,167,1.68,173,1.68,232,1.039,240,1.967,242,3.538,243,1.68,244,2.987,250,1.814,266,1.186,271,1.967,272,2.987,273,3.538,275,1.224,303,1.967,350,1.455,371,2.628,397,2.543,398,2.987,402,2.145,403,2.987,404,2.987,430,3.538,471,2.145,472,2.987,473,2.987,481,1.932,482,1.68,483,2.987,494,2.145,519,2.359,520,2.987,530,1.967,546,2.987,547,2.987,570,2.145,571,2.987,584,2.359,585,2.987,590,2.987,631,2.359,632,2.987,669,1.967,710,2.987,715,1.814,818,2.987,835,2.359,836,2.987,864,2.987,890,2.987,901,2.359,902,2.987,961,1.967,962,2.987,963,2.987,1011,2.987,1058,2.628,1059,2.628,1060,3.533,1061,5.378,1062,4.757,1063,3.533,1064,3.533,1065,6.97,1066,6.321,1067,4.757,1068,2.987,1069,2.987,1070,6.005,1071,4.757,1072,3.533,1073,4.757,1074,6.005,1075,3.533,1076,3.533]],["title/dependencies.html",[21,1.573,1077,2.118]],["body/dependencies.html",[8,0.026,9,1.004,13,0.021,16,0.021,17,0.021,21,1.841,45,1.973,52,3.2,142,2.118,265,2.279,268,3.2,329,2.279,518,1.841,588,4.052,589,4.052,1078,4.792,1079,4.792,1080,6.205,1081,4.792,1082,4.792,1083,4.792,1084,4.792,1085,4.792,1086,4.792,1087,4.792,1088,4.792,1089,4.792,1090,4.792,1091,4.792,1092,4.792,1093,4.792,1094,4.792,1095,4.792,1096,4.792,1097,4.792,1098,4.792]],["title/miscellaneous/enumerations.html",[1099,1.585,1100,3.461]],["body/miscellaneous/enumerations.html",[8,0.026,16,0.022,17,0.022,113,0.639,275,1.496,280,4.325,313,3.531,314,4.325,318,4.325,320,4.325,344,4.325,345,4.325,346,4.916,347,4.916,401,4.573,1099,2.695,1100,4.093,1101,5.814,1102,5.814,1103,5.814,1104,5.814]],["title/miscellaneous/functions.html",[1099,1.585,1105,3.461]],["body/miscellaneous/functions.html",[8,0.022,16,0.022,17,0.022,24,2.915,113,0.678,131,3.826,165,3.826,432,3.826,783,3.826,954,4.349,1059,3.826,1068,4.349,1069,5.096,1099,2.863,1105,4.349,1106,5.143,1107,5.143,1108,5.143,1109,4.349,1110,5.143,1111,5.143,1112,5.143,1113,5.143]],["title/index.html",[113,0.376,630,2.408,1114,2.848]],["body/index.html",[0,1.094,4,0.161,5,0.326,8,0.025,16,0.013,17,0.013,18,1.094,37,2.539,55,1.934,65,4.836,68,1.528,69,1.934,79,1.934,97,3.982,107,3.769,108,1.934,109,1.934,126,1.702,127,0.302,159,3.706,160,3.82,165,3.97,178,1.024,180,1.934,185,3.565,186,1.934,187,1.934,192,2.685,207,1.934,211,1.25,213,2.59,232,0.673,236,3.982,237,3.982,243,1.656,248,1.934,285,1.175,287,0.673,291,1.389,311,1.934,340,3.565,408,1.011,434,2.59,444,3.982,461,1.389,475,3.135,521,1.175,527,1.702,551,1.389,557,1.528,558,1.934,560,1.175,608,3.563,664,1.528,690,2.59,703,1.934,725,1.934,734,1.934,753,1.934,758,1.528,778,1.702,783,1.702,790,2.944,792,3.563,877,1.934,883,3.982,987,2.944,1058,2.59,1059,4.518,1077,2.59,1109,4.836,1115,2.288,1116,2.288,1117,4.214,1118,3.481,1119,2.288,1120,2.288,1121,2.288,1122,2.288,1123,3.481,1124,2.288,1125,2.288,1126,5.549,1127,2.288,1128,5.858,1129,2.288,1130,2.288,1131,4.214,1132,3.481,1133,2.288,1134,3.481,1135,2.288,1136,4.214,1137,2.288,1138,3.481,1139,2.288,1140,2.288,1141,2.288,1142,2.288,1143,2.288,1144,4.71,1145,3.481,1146,2.288,1147,2.288,1148,2.288,1149,2.288,1150,3.481,1151,3.481,1152,2.288,1153,3.481,1154,5.337,1155,4.71,1156,2.288,1157,3.481,1158,2.288,1159,2.288,1160,2.288,1161,4.71,1162,2.288,1163,2.288,1164,2.288,1165,2.288,1166,3.481,1167,2.288,1168,2.288,1169,2.288,1170,2.288,1171,3.481,1172,2.288,1173,2.288,1174,2.288,1175,3.481,1176,2.288,1177,2.288,1178,3.982,1179,2.288,1180,2.288,1181,2.288,1182,2.288,1183,2.288,1184,2.288,1185,2.288,1186,2.288,1187,3.481,1188,2.288,1189,2.288,1190,2.288,1191,2.288,1192,2.288,1193,2.288,1194,2.288,1195,3.481,1196,2.288,1197,2.288,1198,2.288,1199,2.288,1200,3.481,1201,2.288,1202,2.288,1203,2.288,1204,3.481,1205,3.481,1206,2.288,1207,2.288,1208,2.288,1209,2.288,1210,2.288,1211,2.288,1212,2.288,1213,2.288,1214,2.288,1215,2.288,1216,2.288,1217,2.288,1218,2.288,1219,2.288,1220,2.288,1221,2.288,1222,1.934,1223,2.288,1224,4.214,1225,2.288,1226,5.858,1227,2.288,1228,2.288,1229,2.288,1230,3.481,1231,2.288,1232,2.288,1233,2.288,1234,2.288,1235,2.288,1236,2.288,1237,2.288,1238,2.288,1239,2.288,1240,5.549,1241,2.288,1242,2.288,1243,2.288,1244,2.288,1245,2.288,1246,2.288,1247,2.288,1248,2.288,1249,3.481,1250,3.481,1251,5.337,1252,4.71,1253,4.214,1254,4.214,1255,2.288,1256,2.288,1257,2.288,1258,3.481,1259,2.288,1260,4.71,1261,4.71,1262,2.288,1263,3.481,1264,2.288,1265,3.481,1266,2.288,1267,2.288,1268,2.288,1269,2.288,1270,2.288,1271,3.481,1272,3.481,1273,3.481,1274,3.481,1275,2.288,1276,2.288,1277,2.288,1278,2.288,1279,4.214,1280,2.288,1281,2.288,1282,2.288,1283,2.288,1284,2.288,1285,2.288,1286,2.288,1287,2.288,1288,2.288,1289,2.288,1290,3.481,1291,2.288,1292,2.288,1293,2.288,1294,2.288,1295,2.288,1296,2.288]],["title/modules.html",[20,2.051]],["body/modules.html",[8,0.022,16,0.022,17,0.022,19,3.371,20,2.231,30,2.81,31,3.065,32,3.065,33,2.81,34,2.592,1178,5.732,1297,6.778,1298,6.778,1299,6.778]],["title/overview.html",[1300,3.923]],["body/overview.html",[2,1.319,8,0.026,10,3.155,16,0.019,17,0.019,18,1.234,19,4.582,20,1.736,21,1.509,22,2.017,23,2.017,24,1.736,25,2.017,26,2.017,27,3.321,28,3.321,29,3.321,30,3.548,31,3.775,32,4.037,33,3.612,34,3.414,35,2.62,36,2.017,37,1.868,85,1.868,111,1.868,137,3.331,152,3.321,153,3.321,154,3.321,173,3.086,241,1.736,458,3.321,530,3.155,537,3.321,538,3.321,669,3.155,694,3.321,695,3.321,715,3.331,857,3.321,858,3.321,859,3.321,961,3.155,998,3.321,999,3.321,1000,3.321,1300,3.321,1301,5.102,1302,3.928,1303,3.928]],["title/properties.html",[249,1.286,1077,2.118]],["body/properties.html",[8,0.025,16,0.023,17,0.023,127,0.703,249,1.675,291,3.237,1222,4.508,1304,5.331,1305,5.331,1306,5.331]],["title/miscellaneous/variables.html",[1099,1.585,1307,3.461]],["body/miscellaneous/variables.html",[8,0.024,16,0.023,17,0.023,38,3.965,57,3.965,63,4.578,64,4.508,113,0.703,401,3.56,1099,2.968,1307,4.508,1308,5.331]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":1061,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":1305,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":1089,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":1095,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":1098,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1088,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1062,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1064,"title":{},"body":{"coverage.html":{}}}],["03",{"_index":322,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1",{"_index":387,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["1.1.23",{"_index":1079,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":1066,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":945,"title":{},"body":{"controllers/UsersController.html":{}}}],["10.0.0",{"_index":1080,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":1087,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":1065,"title":{},"body":{"coverage.html":{}}}],["1024",{"_index":599,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["10})@apiquery({name",{"_index":928,"title":{},"body":{"controllers/UsersController.html":{}}}],["12/12",{"_index":1072,"title":{},"body":{"coverage.html":{}}}],["1234",{"_index":480,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["1234'})@isoptional()@isint()@type(undefined",{"_index":476,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["16t07:46:32+0000",{"_index":386,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["16t07:46:32+0000'})@isiso8601()@isoptional",{"_index":323,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["17.12.2",{"_index":1091,"title":{},"body":{"dependencies.html":{}}}],["1})@isint()@isnotempty",{"_index":580,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["1})@isnotempty()@isint",{"_index":292,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["2",{"_index":388,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["2.0.5",{"_index":1083,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":1070,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":651,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["201",{"_index":640,"title":{},"body":{"controllers/PostsController.html":{}}}],["2024",{"_index":321,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["256",{"_index":611,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["3",{"_index":450,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["3.2.2",{"_index":1081,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":1071,"title":{},"body":{"coverage.html":{}}}],["3001",{"_index":1269,"title":{},"body":{"index.html":{}}}],["4",{"_index":1302,"title":{},"body":{"overview.html":{}}}],["4/4",{"_index":1067,"title":{},"body":{"coverage.html":{}}}],["400",{"_index":642,"title":{},"body":{"controllers/PostsController.html":{}}}],["404",{"_index":652,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["5/5",{"_index":1073,"title":{},"body":{"coverage.html":{}}}],["512",{"_index":620,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["6",{"_index":1301,"title":{},"body":{"overview.html":{}}}],["6/6",{"_index":1074,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":1303,"title":{},"body":{"overview.html":{}}}],["7.3.0",{"_index":1086,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":1097,"title":{},"body":{"dependencies.html":{}}}],["71",{"_index":1044,"title":{},"body":{"injectables/UsersService.html":{}}}],["8",{"_index":458,"title":{},"body":{"classes/CreateUserDto.html":{},"overview.html":{}}}],["8.11.5",{"_index":1093,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":337,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["96",{"_index":445,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["actual",{"_index":691,"title":{},"body":{"controllers/PostsController.html":{}}}],["add",{"_index":734,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{}}}],["added",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{}}}],["additional",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"entities/Tag.html":{}}}],["address",{"_index":441,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["against",{"_index":396,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["allowing",{"_index":1167,"title":{},"body":{"index.html":{}}}],["along",{"_index":725,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{}}}],["already",{"_index":1050,"title":{},"body":{"injectables/UsersService.html":{}}}],["always",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["amazing",{"_index":1210,"title":{},"body":{"index.html":{}}}],["api",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TagsController.html":{},"miscellaneous/functions.html":{}}}],["apioperation",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":638,"title":{},"body":{"controllers/PostsController.html":{}}}],["apiparam",{"_index":671,"title":{},"body":{"controllers/PostsController.html":{}}}],["apiproperty",{"_index":269,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({description",{"_index":252,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({enum",{"_index":310,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiproperty({example",{"_index":355,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiproperty({type",{"_index":288,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apipropertyoptional",{"_index":373,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({description",{"_index":294,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({type",{"_index":305,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiquery",{"_index":672,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiresponse",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags('authentication",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('posts",{"_index":676,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('users",{"_index":942,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":1111,"title":{},"body":{"miscellaneous/functions.html":{}}}],["app.controller",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appconfig",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["applications",{"_index":1123,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":19,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":10,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["argument",{"_index":1283,"title":{},"body":{"index.html":{}}}],["array",{"_index":253,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"injectables/TagsService.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["associated",{"_index":352,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{}}}],["async",{"_index":549,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["atomically",{"_index":754,"title":{},"body":{"injectables/PostsService.html":{}}}],["attempting",{"_index":205,"title":{},"body":{"injectables/AuthService.html":{}}}],["auth",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"index.html":{}}}],["auth.controller",{"_index":157,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/providers/auth",{"_index":212,"title":{},"body":{"injectables/AuthService.html":{}}}],["authcontroller",{"_index":123,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticated",{"_index":168,"title":{},"body":{"injectables/AuthService.html":{}}}],["authentication",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["authgenerate",{"_index":1291,"title":{},"body":{"index.html":{}}}],["authmodule",{"_index":30,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":291,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"index.html":{},"properties.html":{}}}],["authored",{"_index":899,"title":{},"body":{"entities/User.html":{}}}],["authorid",{"_index":276,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["authservice",{"_index":137,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["autoloadentities",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["automatically",{"_index":763,"title":{},"body":{"injectables/PostsService.html":{}}}],["available",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{}}}],["avoid",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{}}}],["await",{"_index":568,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["aws",{"_index":1157,"title":{},"body":{"index.html":{}}}],["backers",{"_index":1211,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":729,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["badrequestexception('please",{"_index":796,"title":{},"body":{"injectables/PostsService.html":{}}}],["badrequestexception('user",{"_index":1054,"title":{},"body":{"injectables/UsersService.html":{}}}],["based",{"_index":557,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/TagsService.html":{},"injectables/UsersCreateManyProvider.html":{},"index.html":{}}}],["basically",{"_index":1244,"title":{},"body":{"index.html":{}}}],["batch",{"_index":1023,"title":{},"body":{"injectables/UsersService.html":{}}}],["become",{"_index":737,"title":{},"body":{"injectables/PostsService.html":{}}}],["before",{"_index":884,"title":{},"body":{"injectables/TagsService.html":{}}}],["begin",{"_index":983,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["between",{"_index":449,"title":{},"body":{"classes/CreateUserDto.html":{},"controllers/PostsController.html":{}}}],["bidirectional",{"_index":604,"title":{},"body":{"entities/Post.html":{}}}],["bit",{"_index":1232,"title":{},"body":{"index.html":{}}}],["blog",{"_index":274,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{}}}],["blue",{"_index":428,"title":{},"body":{"classes/CreateTagDto.html":{},"entities/Tag.html":{}}}],["blue\"}'})@isoptional()@isjson",{"_index":418,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["board",{"_index":1203,"title":{},"body":{"index.html":{}}}],["body",{"_index":528,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["body(new",{"_index":955,"title":{},"body":{"controllers/UsersController.html":{}}}],["boolean",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{}}}],["bootstrap",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["both",{"_index":753,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{}}}],["brief",{"_index":407,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["browse",{"_index":1299,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1297,"title":{},"body":{"modules.html":{}}}],["building",{"_index":1118,"title":{},"body":{"index.html":{}}}],["bulk",{"_index":964,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["business",{"_index":545,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["c:\\users\\mfabouatmeh\\desktop\\codesdar\\more\\postgre\\data",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["cascade",{"_index":510,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{}}}],["cascade'})@joincolumn",{"_index":506,"title":{},"body":{"entities/MetaOption.html":{}}}],["cascades",{"_index":687,"title":{},"body":{"controllers/PostsController.html":{}}}],["case",{"_index":994,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["catch",{"_index":771,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["cause",{"_index":161,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["certain",{"_index":1247,"title":{},"body":{"index.html":{}}}],["changes",{"_index":1271,"title":{},"body":{"index.html":{}}}],["channel",{"_index":1180,"title":{},"body":{"index.html":{}}}],["character",{"_index":464,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["characters",{"_index":446,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["chars",{"_index":459,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["check",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"index.html":{}}}],["checking",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["checks",{"_index":183,"title":{},"body":{"injectables/AuthService.html":{}}}],["circular",{"_index":162,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{}}}],["class",{"_index":13,"title":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":241,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"overview.html":{}}}],["clean",{"_index":782,"title":{},"body":{"injectables/PostsService.html":{}}}],["clicks",{"_index":1166,"title":{},"body":{"index.html":{}}}],["cloud",{"_index":1152,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":152,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":154,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":153,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule",{"_index":537,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule_providers",{"_index":538,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":694,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":696,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":695,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule",{"_index":857,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_exports",{"_index":858,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_providers",{"_index":859,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":998,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":1000,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":999,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cmd",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["code",{"_index":1272,"title":{},"body":{"index.html":{}}}],["color",{"_index":417,"title":{},"body":{"classes/CreateTagDto.html":{},"entities/Tag.html":{}}}],["column",{"_index":515,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["column({type",{"_index":495,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["combo",{"_index":1281,"title":{},"body":{"index.html":{}}}],["come",{"_index":1172,"title":{},"body":{"index.html":{}}}],["comma",{"_index":1229,"title":{},"body":{"index.html":{}}}],["commit",{"_index":767,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["compared",{"_index":1264,"title":{},"body":{"index.html":{}}}],["complete",{"_index":996,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["compo",{"_index":1240,"title":{},"body":{"index.html":{}}}],["compodoc",{"_index":1223,"title":{},"body":{"index.html":{}}}],["compodoc/compodoc",{"_index":1078,"title":{},"body":{"dependencies.html":{}}}],["config",{"_index":1251,"title":{},"body":{"index.html":{}}}],["config/app.config",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["config/database.config",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["config/environment.validation",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["config/profile.config",{"_index":1007,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["configmodule",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["configmodule.forfeature(profileconfig",{"_index":1010,"title":{},"body":{"modules/UsersModule.html":{}}}],["configmodule.forroot",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.autoloadentities",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.host",{"_index":104,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.name",{"_index":106,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.pass",{"_index":102,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.port",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.synchronize",{"_index":90,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.user",{"_index":100,"title":{},"body":{"modules/AppModule.html":{}}}],["configtype",{"_index":1016,"title":{},"body":{"injectables/UsersService.html":{}}}],["configuration",{"_index":1021,"title":{},"body":{"injectables/UsersService.html":{}}}],["configurations",{"_index":1248,"title":{},"body":{"index.html":{}}}],["conflictexception",{"_index":975,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["conflictexception('could",{"_index":995,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["connect",{"_index":977,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["connection",{"_index":982,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["console.error(error",{"_index":776,"title":{},"body":{"injectables/PostsService.html":{}}}],["const",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["constructor",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":1013,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(datasource",{"_index":968,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["constructor(metaoptionrepository",{"_index":550,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["constructor(private",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["constructor(tagsrepository",{"_index":867,"title":{},"body":{"injectables/TagsService.html":{}}}],["constructor(usersservice",{"_index":172,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["constructs",{"_index":175,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["containing",{"_index":328,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["contains",{"_index":431,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["content",{"_index":277,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["context",{"_index":330,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"index.html":{}}}],["controller('auth",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('meta",{"_index":533,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["controller('posts",{"_index":675,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('tags",{"_index":850,"title":{},"body":{"controllers/TagsController.html":{}}}],["controller('users",{"_index":941,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["copy",{"_index":747,"title":{},"body":{"injectables/PostsService.html":{}}}],["corresponding",{"_index":707,"title":{},"body":{"modules/PostsModule.html":{}}}],["courses",{"_index":1186,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":1058,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":266,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["create(@body",{"_index":741,"title":{},"body":{"injectables/PostsService.html":{},"controllers/TagsController.html":{}}}],["create(createmetaoptiondto",{"_index":555,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["create(createpostdto",{"_index":717,"title":{},"body":{"injectables/PostsService.html":{}}}],["create(createtagdto",{"_index":838,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["create=many.provider",{"_index":1295,"title":{},"body":{"index.html":{}}}],["created",{"_index":255,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["createdate",{"_index":486,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["createdatecolumn",{"_index":488,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["createmany",{"_index":967,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["createmany(createmanyusersdto",{"_index":971,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["createmanyusers",{"_index":903,"title":{},"body":{"controllers/UsersController.html":{}}}],["createmanyusers(@body",{"_index":958,"title":{},"body":{"controllers/UsersController.html":{}}}],["createmanyusers(createmanyusersdto",{"_index":908,"title":{},"body":{"controllers/UsersController.html":{}}}],["createmanyusersdto",{"_index":240,"title":{"classes/CreateManyUsersDto.html":{}},"body":{"classes/CreateManyUsersDto.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createmanyusersdto.users",{"_index":988,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["createmetaoption",{"_index":522,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["createmetaoption(createpostmetaoptiondto",{"_index":523,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["createmetaoptiondto",{"_index":559,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["createpost",{"_index":633,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(@body",{"_index":682,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(createpostdto",{"_index":637,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpostdto",{"_index":271,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["createpostmetaoptiondto",{"_index":526,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["createpostmetaoptionsdto",{"_index":303,"title":{"classes/CreatePostMetaOptionsDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["creates",{"_index":394,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["createtagdto",{"_index":402,"title":{"classes/CreateTagDto.html":{}},"body":{"classes/CreateTagDto.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"coverage.html":{}}}],["createuser",{"_index":904,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createuser(createuserdto",{"_index":911,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createuserdto",{"_index":250,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":1053,"title":{},"body":{"injectables/UsersService.html":{}}}],["creating",{"_index":246,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/UsersService.html":{}}}],["creation",{"_index":719,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["criteria",{"_index":1029,"title":{},"body":{"injectables/UsersService.html":{}}}],["crowded",{"_index":738,"title":{},"body":{"injectables/PostsService.html":{}}}],["d",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["data",{"_index":181,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateTagDto.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["data'})@post",{"_index":645,"title":{},"body":{"controllers/PostsController.html":{}}}],["database",{"_index":105,"title":{},"body":{"modules/AppModule.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["databaseconfig",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["datasource",{"_index":969,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["date",{"_index":319,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["db",{"_index":709,"title":{},"body":{"modules/PostsModule.html":{}}}],["declarations",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorator",{"_index":391,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["decorators",{"_index":251,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["deeper",{"_index":1182,"title":{},"body":{"index.html":{}}}],["default",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"entities/Post.html":{},"miscellaneous/variables.html":{}}}],["defaultvaluepipe",{"_index":935,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(1",{"_index":952,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(10",{"_index":950,"title":{},"body":{"controllers/UsersController.html":{}}}],["define",{"_index":1287,"title":{},"body":{"index.html":{}}}],["defined",{"_index":116,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":634,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["delete'})@apiresponse({status",{"_index":650,"title":{},"body":{"controllers/PostsController.html":{}}}],["delete('soft",{"_index":843,"title":{},"body":{"controllers/TagsController.html":{}}}],["delete(@query('id",{"_index":692,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{}}}],["delete(id",{"_index":647,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["deleted",{"_index":509,"title":{},"body":{"entities/MetaOption.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["deletedat",{"_index":820,"title":{},"body":{"entities/Tag.html":{}}}],["deletedatecolumn",{"_index":822,"title":{},"body":{"entities/Tag.html":{}}}],["deletes",{"_index":648,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["deleting",{"_index":885,"title":{},"body":{"injectables/TagsService.html":{}}}],["deletion",{"_index":722,"title":{},"body":{"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["demonstration",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{}}}],["dependencies",{"_index":21,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{},"overview.html":{}}}],["dependency",{"_index":163,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{}}}],["deploy",{"_index":1144,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":1156,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":1150,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":1165,"title":{},"body":{"index.html":{}}}],["deprecated",{"_index":1039,"title":{},"body":{"injectables/UsersService.html":{}}}],["description",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"index.html":{},"properties.html":{}}}],["details",{"_index":560,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["development",{"_index":1130,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":1191,"title":{},"body":{"index.html":{}}}],["directory",{"_index":1279,"title":{},"body":{"index.html":{}}}],["discord",{"_index":1179,"title":{},"body":{"index.html":{}}}],["dive",{"_index":1181,"title":{},"body":{"index.html":{}}}],["doc",{"_index":1226,"title":{},"body":{"index.html":{}}}],["doclet",{"_index":1225,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":1059,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["doesn't",{"_index":800,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["doesnt",{"_index":736,"title":{},"body":{"injectables/PostsService.html":{}}}],["draft",{"_index":345,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["dto",{"_index":245,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["dto/create",{"_index":673,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["dto/patch",{"_index":674,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["dtos/create",{"_index":529,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["dtos/get",{"_index":936,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/patch",{"_index":938,"title":{},"body":{"controllers/UsersController.html":{}}}],["e.g",{"_index":317,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/UsersController.html":{}}}],["e2e",{"_index":1139,"title":{},"body":{"index.html":{}}}],["each",{"_index":270,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["eager",{"_index":593,"title":{},"body":{"entities/Post.html":{}}}],["efficient",{"_index":1119,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":1149,"title":{},"body":{"index.html":{}}}],["email",{"_index":204,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["empty",{"_index":442,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["enable",{"_index":1270,"title":{},"body":{"index.html":{}}}],["endpoint",{"_index":1038,"title":{},"body":{"injectables/UsersService.html":{}}}],["endpoints",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{}}}],["ensure",{"_index":1147,"title":{},"body":{"index.html":{}}}],["enterprise",{"_index":1194,"title":{},"body":{"index.html":{}}}],["entire",{"_index":701,"title":{},"body":{"modules/PostsModule.html":{}}}],["entities",{"_index":85,"title":{},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"overview.html":{}}}],["entity",{"_index":481,"title":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}},"body":{"entities/MetaOption.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"coverage.html":{}}}],["entries",{"_index":926,"title":{},"body":{"controllers/UsersController.html":{}}}],["enum",{"_index":376,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["enumerations",{"_index":1100,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/post",{"_index":368,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["env",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["env.${env",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["environmentvalidation",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["equal",{"_index":793,"title":{},"body":{"injectables/PostsService.html":{}}}],["error",{"_index":202,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["error('post",{"_index":762,"title":{},"body":{"injectables/PostsService.html":{}}}],["error('user",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{}}}],["error.message",{"_index":777,"title":{},"body":{"injectables/PostsService.html":{}}}],["establish",{"_index":981,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["etc",{"_index":615,"title":{},"body":{"entities/Post.html":{}}}],["everything",{"_index":768,"title":{},"body":{"injectables/PostsService.html":{}}}],["example",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"entities/Tag.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["except",{"_index":577,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["exist",{"_index":801,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["existing",{"_index":573,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["existinguser",{"_index":1051,"title":{},"body":{"injectables/UsersService.html":{}}}],["exists",{"_index":197,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["experience",{"_index":1184,"title":{},"body":{"index.html":{}}}],["explain",{"_index":1236,"title":{},"body":{"index.html":{}}}],["export",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":1085,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":574,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["fails",{"_index":978,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["failure",{"_index":775,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["false",{"_index":93,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["fast",{"_index":1159,"title":{},"body":{"index.html":{}}}],["feature",{"_index":705,"title":{},"body":{"modules/PostsModule.html":{}}}],["featured",{"_index":299,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["featuredimage",{"_index":406,"title":{},"body":{"classes/CreateTagDto.html":{},"entities/Tag.html":{}}}],["featuredimageurl",{"_index":278,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["features",{"_index":1169,"title":{},"body":{"index.html":{}}}],["fetch",{"_index":629,"title":{},"body":{"entities/Post.html":{},"controllers/UsersController.html":{}}}],["few",{"_index":1161,"title":{},"body":{"index.html":{}}}],["field",{"_index":479,"title":{},"body":{"classes/GetUsersParamDto.html":{},"entities/User.html":{}}}],["fields",{"_index":576,"title":{},"body":{"classes/PatchPostDto.html":{},"injectables/PostsService.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{}}}],["filename",{"_index":1041,"title":{},"body":{"injectables/UsersService.html":{}}}],["filter",{"_index":932,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["filters",{"_index":1028,"title":{},"body":{"injectables/UsersService.html":{}}}],["finally",{"_index":778,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{},"index.html":{}}}],["find",{"_index":759,"title":{},"body":{"injectables/PostsService.html":{}}}],["findall",{"_index":711,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["findall(getuserparamdto",{"_index":1026,"title":{},"body":{"injectables/UsersService.html":{}}}],["findall(userid",{"_index":723,"title":{},"body":{"injectables/PostsService.html":{}}}],["finding",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{}}}],["findmultipletags",{"_index":865,"title":{},"body":{"injectables/TagsService.html":{}}}],["findmultipletags(tags",{"_index":872,"title":{},"body":{"injectables/TagsService.html":{}}}],["findonebyid",{"_index":1012,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyid(id",{"_index":1031,"title":{},"body":{"injectables/UsersService.html":{}}}],["finds",{"_index":874,"title":{},"body":{"injectables/TagsService.html":{}}}],["first",{"_index":434,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"index.html":{}}}],["firstname",{"_index":436,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["flag",{"_index":1260,"title":{},"body":{"index.html":{}}}],["flat",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TagsService.html":{},"index.html":{}}}],["focus",{"_index":1168,"title":{},"body":{"index.html":{}}}],["follow",{"_index":1197,"title":{},"body":{"index.html":{}}}],["format",{"_index":499,"title":{},"body":{"entities/MetaOption.html":{},"controllers/UsersController.html":{}}}],["forwardref",{"_index":156,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["found",{"_index":200,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["found'})@delete",{"_index":653,"title":{},"body":{"controllers/PostsController.html":{}}}],["found'})@patch",{"_index":665,"title":{},"body":{"controllers/PostsController.html":{}}}],["framework",{"_index":1117,"title":{},"body":{"index.html":{}}}],["friendly",{"_index":613,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["full",{"_index":1193,"title":{},"body":{"index.html":{}}}],["function",{"_index":1069,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["functions",{"_index":1105,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":1164,"title":{},"body":{"index.html":{}}}],["generate",{"_index":160,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/TagsService.html":{},"index.html":{}}}],["generated",{"_index":207,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["generates",{"_index":199,"title":{},"body":{"injectables/AuthService.html":{}}}],["generating",{"_index":1280,"title":{},"body":{"index.html":{}}}],["get('/:id",{"_index":948,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:id?')@apioperation({summary",{"_index":922,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:userid",{"_index":677,"title":{},"body":{"controllers/PostsController.html":{}}}],["get('/:userid?')@apioperation({summary",{"_index":657,"title":{},"body":{"controllers/PostsController.html":{}}}],["get()@apioperation({summary",{"_index":914,"title":{},"body":{"controllers/UsersController.html":{}}}],["gethello",{"_index":115,"title":{},"body":{"injectables/AppService.html":{}}}],["getposts",{"_index":635,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(@param('userid",{"_index":679,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(userid",{"_index":656,"title":{},"body":{"controllers/PostsController.html":{}}}],["getting",{"_index":630,"title":{"index.html":{}},"body":{"entities/Post.html":{}}}],["getuserbyid",{"_index":905,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuserbyid(@query('id",{"_index":943,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuserbyid(id",{"_index":913,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuserparamdto",{"_index":931,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getusers",{"_index":906,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(getuserparamdto",{"_index":920,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusersparamdto",{"_index":471,"title":{"classes/GetUsersParamDto.html":{}},"body":{"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["give",{"_index":1278,"title":{},"body":{"index.html":{}}}],["global",{"_index":954,"title":{},"body":{"controllers/UsersController.html":{},"miscellaneous/functions.html":{}}}],["go",{"_index":1238,"title":{},"body":{"index.html":{}}}],["going",{"_index":1256,"title":{},"body":{"index.html":{}}}],["graph",{"_index":1189,"title":{},"body":{"index.html":{}}}],["grow",{"_index":1207,"title":{},"body":{"index.html":{}}}],["handle",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{},"classes/GetUsersParamDto.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["handles",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["handling",{"_index":543,"title":{},"body":{"modules/MetaOptionsModule.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["hands",{"_index":1183,"title":{},"body":{"index.html":{}}}],["handy",{"_index":1173,"title":{},"body":{"index.html":{}}}],["having",{"_index":1266,"title":{},"body":{"index.html":{}}}],["hello",{"_index":121,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":1187,"title":{},"body":{"index.html":{}}}],["here",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["host",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["http://localhost.com/images/image1.jpg",{"_index":384,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["http://localhost.com/images/image1.jpg'})@isoptional()@minlength(4)@maxlength(1024)@isurl",{"_index":301,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["http://localhost:3001/coverage.htmlit",{"_index":1228,"title":{},"body":{"index.html":{}}}],["httpexception",{"_index":1033,"title":{},"body":{"injectables/UsersService.html":{}}}],["https://example.com/images/tag",{"_index":412,"title":{},"body":{"classes/CreateTagDto.html":{},"entities/Tag.html":{}}}],["https://nestjs.com",{"_index":1219,"title":{},"body":{"index.html":{}}}],["https://orkhan.gitbook.io/typeorm/docs/decorator",{"_index":833,"title":{},"body":{"entities/Tag.html":{}}}],["https://schema.org",{"_index":331,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://schema.org\",\\r\\n",{"_index":382,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["httpstatus",{"_index":1034,"title":{},"body":{"injectables/UsersService.html":{}}}],["httpstatus.moved_permanently",{"_index":1040,"title":{},"body":{"injectables/UsersService.html":{}}}],["hyphen",{"_index":1252,"title":{},"body":{"index.html":{}}}],["i'll",{"_index":1235,"title":{},"body":{"index.html":{}}}],["i'm",{"_index":1274,"title":{},"body":{"index.html":{}}}],["i.e",{"_index":1289,"title":{},"body":{"index.html":{}}}],["id",{"_index":290,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["id'})@apiquery({name",{"_index":649,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["id=5",{"_index":919,"title":{},"body":{"controllers/UsersController.html":{}}}],["identifier",{"_index":494,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"coverage.html":{}}}],["ids",{"_index":351,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["image",{"_index":300,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["image.jpg",{"_index":429,"title":{},"body":{"classes/CreateTagDto.html":{},"entities/Tag.html":{}}}],["image.jpg'})@isoptional()@isurl()@maxlength(1024",{"_index":413,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["import",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["important",{"_index":781,"title":{},"body":{"injectables/PostsService.html":{}}}],["imported",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["imports",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}}}],["in(tags",{"_index":882,"title":{},"body":{"injectables/TagsService.html":{}}}],["include",{"_index":460,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["incoming",{"_index":392,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["incorrect",{"_index":201,"title":{},"body":{"injectables/AuthService.html":{}}}],["index",{"_index":113,"title":{"index.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["indicating",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{},"entities/MetaOption.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["information",{"_index":527,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["infrastructure",{"_index":1170,"title":{},"body":{"index.html":{}}}],["initializing",{"_index":1107,"title":{},"body":{"miscellaneous/functions.html":{}}}],["inject",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["inject(forwardref",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["inject(profileconfig.key",{"_index":1037,"title":{},"body":{"injectables/UsersService.html":{}}}],["injectable",{"_index":110,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":111,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injected",{"_index":1019,"title":{},"body":{"injectables/UsersService.html":{}}}],["injecting",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["injectrepository",{"_index":565,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(metaoption",{"_index":566,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{}}}],["injectrepository(post",{"_index":733,"title":{},"body":{"injectables/PostsService.html":{}}}],["injectrepository(tag",{"_index":878,"title":{},"body":{"injectables/TagsService.html":{}}}],["injectrepository(user",{"_index":1036,"title":{},"body":{"injectables/UsersService.html":{}}}],["injects",{"_index":534,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["innovations",{"_index":427,"title":{},"body":{"classes/CreateTagDto.html":{},"entities/Tag.html":{}}}],["innovations'})@isoptional()@isstring",{"_index":410,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["insertion",{"_index":966,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["inside",{"_index":708,"title":{},"body":{"modules/PostsModule.html":{}}}],["install",{"_index":1163,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":1129,"title":{},"body":{"index.html":{}}}],["instance",{"_index":176,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["instead",{"_index":765,"title":{},"body":{"injectables/PostsService.html":{}}}],["instructs",{"_index":1263,"title":{},"body":{"index.html":{}}}],["integer",{"_index":289,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["interact",{"_index":180,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["interacting",{"_index":554,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/TagsService.html":{}}}],["invalid",{"_index":643,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["isarray",{"_index":262,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["isauth",{"_index":170,"title":{},"body":{"injectables/AuthService.html":{}}}],["isemail",{"_index":467,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isemail()@isnotempty()@maxlength(96",{"_index":438,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":358,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(poststatus",{"_index":380,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttype",{"_index":377,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isglobal",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["isint",{"_index":359,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{}}}],["isiso8601",{"_index":360,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isjson",{"_index":361,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{}}}],["isnan(userid",{"_index":946,"title":{},"body":{"controllers/UsersController.html":{}}}],["isnotempty",{"_index":263,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchPostDto.html":{}}}],["isnotempty()@isjson",{"_index":399,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["isoptional",{"_index":362,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{}}}],["isoptional()@isjson",{"_index":333,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isstring",{"_index":363,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@maxlength(96)@minlength(8)@matches(/^(?=.*[a",{"_index":453,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":447,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isoptional()@minlength(3)@maxlength(96",{"_index":451,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["issues",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{}}}],["isurl",{"_index":364,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["it's",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["items",{"_index":257,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["iterate",{"_index":986,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["itself",{"_index":1230,"title":{},"body":{"index.html":{}}}],["job",{"_index":1200,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":1202,"title":{},"body":{"index.html":{}}}],["joi",{"_index":1090,"title":{},"body":{"dependencies.html":{}}}],["join",{"_index":1213,"title":{},"body":{"index.html":{}}}],["joincolumn",{"_index":516,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["jointable",{"_index":622,"title":{},"body":{"entities/Post.html":{}}}],["json",{"_index":327,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["jwt",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{}}}],["kamil",{"_index":1216,"title":{},"body":{"index.html":{}}}],["key",{"_index":703,"title":{},"body":{"modules/PostsModule.html":{},"index.html":{}}}],["large",{"_index":597,"title":{},"body":{"entities/Post.html":{}}}],["last",{"_index":435,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/MetaOption.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["lastname",{"_index":437,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["later",{"_index":791,"title":{},"body":{"injectables/PostsService.html":{}}}],["learn",{"_index":1176,"title":{},"body":{"index.html":{}}}],["legend",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":443,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["lengthy",{"_index":1234,"title":{},"body":{"index.html":{}}}],["let's",{"_index":1268,"title":{},"body":{"index.html":{}}}],["letter",{"_index":462,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["letters",{"_index":422,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["license",{"_index":1222,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1205,"title":{},"body":{"index.html":{}}}],["limit",{"_index":921,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["linenumber",{"_index":1043,"title":{},"body":{"injectables/UsersService.html":{}}}],["linkedin",{"_index":1199,"title":{},"body":{"index.html":{}}}],["list",{"_index":261,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["little",{"_index":1231,"title":{},"body":{"index.html":{}}}],["load",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["loaded",{"_index":760,"title":{},"body":{"injectables/PostsService.html":{}}}],["localhost:3001",{"_index":1286,"title":{},"body":{"index.html":{}}}],["log",{"_index":206,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["logged",{"_index":208,"title":{},"body":{"injectables/AuthService.html":{}}}],["logging",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logic",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"modules/MetaOptionsModule.html":{}}}],["login",{"_index":171,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(email",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{}}}],["long",{"_index":466,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["looking",{"_index":1151,"title":{},"body":{"index.html":{}}}],["loop",{"_index":1196,"title":{},"body":{"index.html":{}}}],["lowercase",{"_index":339,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["main",{"_index":295,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["makes",{"_index":79,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["making",{"_index":575,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["managing",{"_index":521,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["manner",{"_index":974,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["manually",{"_index":94,"title":{},"body":{"modules/AppModule.html":{}}}],["many",{"_index":243,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"entities/Post.html":{},"entities/Tag.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{}}}],["many.provider",{"_index":1005,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["many.provider.ts",{"_index":963,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{},"coverage.html":{}}}],["many.provider.ts:15",{"_index":970,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["many.provider.ts:29",{"_index":972,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["manytomany",{"_index":623,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["manytomany(undefined",{"_index":616,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["manytoone",{"_index":624,"title":{},"body":{"entities/Post.html":{}}}],["manytoone(undefined",{"_index":591,"title":{},"body":{"entities/Post.html":{}}}],["marking",{"_index":845,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["matches",{"_index":365,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["matches(/^(?=.*[a",{"_index":470,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(/^[a",{"_index":379,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["matching",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["mau",{"_index":1154,"title":{},"body":{"index.html":{}}}],["maxlength",{"_index":366,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["maxlength(1024",{"_index":385,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(256",{"_index":378,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(512",{"_index":375,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(96",{"_index":468,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["meaning",{"_index":748,"title":{},"body":{"injectables/PostsService.html":{}}}],["message",{"_index":338,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["meta",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["metadata",{"_index":329,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"entities/Tag.html":{},"dependencies.html":{}}}],["metaoption",{"_index":482,"title":{"entities/MetaOption.html":{}},"body":{"entities/MetaOption.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["metaoptionrepository",{"_index":553,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["metaoptions",{"_index":279,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"injectables/PostsService.html":{}}}],["metaoptions.post",{"_index":602,"title":{},"body":{"entities/Post.html":{}}}],["metaoptionscontroller",{"_index":519,"title":{"controllers/MetaOptionsController.html":{}},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"coverage.html":{}}}],["metaoptionsmodule",{"_index":31,"title":{"modules/MetaOptionsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules.html":{},"overview.html":{}}}],["metaoptionsrepository",{"_index":714,"title":{},"body":{"injectables/PostsService.html":{}}}],["metaoptionsservice",{"_index":530,"title":{"injectables/MetaOptionsService.html":{}},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{},"overview.html":{}}}],["metavalue",{"_index":389,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"entities/MetaOption.html":{}}}],["method",{"_index":686,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["methods",{"_index":114,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["migrations",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["minimum",{"_index":457,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength",{"_index":367,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":426,"title":{},"body":{"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(4",{"_index":374,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["minlength(8",{"_index":469,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":1099,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1204,"title":{},"body":{"index.html":{}}}],["mock",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{}}}],["mocked",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{}}}],["mode",{"_index":1132,"title":{},"body":{"index.html":{}}}],["module",{"_index":18,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["modules",{"_index":20,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["moment",{"_index":789,"title":{},"body":{"injectables/PostsService.html":{}}}],["more",{"_index":444,"title":{},"body":{"classes/CreateUserDto.html":{},"index.html":{}}}],["moved",{"_index":1046,"title":{},"body":{"injectables/UsersService.html":{}}}],["multiple",{"_index":247,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["mysql",{"_index":502,"title":{},"body":{"entities/MetaOption.html":{}}}],["myśliwiec",{"_index":1217,"title":{},"body":{"index.html":{}}}],["name",{"_index":178,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["necessary",{"_index":1018,"title":{},"body":{"injectables/UsersService.html":{}}}],["need",{"_index":792,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{}}}],["needed",{"_index":1277,"title":{},"body":{"index.html":{}}}],["needs",{"_index":579,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["nest",{"_index":159,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/TagsService.html":{},"index.html":{}}}],["nestframework",{"_index":1221,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":1109,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["nestjs/common",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":1082,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":588,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1084,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["never",{"_index":1008,"title":{},"body":{"modules/UsersModule.html":{}}}],["new",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{}}}],["newly",{"_index":720,"title":{},"body":{"injectables/PostsService.html":{}}}],["newuser",{"_index":989,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["newusers",{"_index":979,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["newusers.push(result",{"_index":993,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["next",{"_index":1259,"title":{},"body":{"index.html":{}}}],["node.js",{"_index":1116,"title":{},"body":{"index.html":{}}}],["note",{"_index":500,"title":{},"body":{"entities/MetaOption.html":{}}}],["notfoundexception",{"_index":730,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["notfoundexception(\"this",{"_index":799,"title":{},"body":{"injectables/PostsService.html":{}}}],["notfoundexception('user",{"_index":1049,"title":{},"body":{"injectables/UsersService.html":{}}}],["now",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["npcs",{"_index":1239,"title":{},"body":{"index.html":{}}}],["npm",{"_index":1128,"title":{},"body":{"index.html":{}}}],["npx",{"_index":107,"title":{},"body":{"modules/AppModule.html":{},"injectables/TagsService.html":{},"index.html":{}}}],["null",{"_index":304,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["nullable",{"_index":496,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["number",{"_index":287,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["object",{"_index":306,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["objects",{"_index":254,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["occurs",{"_index":772,"title":{},"body":{"injectables/PostsService.html":{}}}],["offer",{"_index":1201,"title":{},"body":{"index.html":{}}}],["official",{"_index":1155,"title":{},"body":{"index.html":{}}}],["once",{"_index":248,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"index.html":{}}}],["ondelete",{"_index":505,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["one",{"_index":461,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"injectables/UsersCreateManyProvider.html":{},"index.html":{}}}],["onetomany",{"_index":900,"title":{},"body":{"entities/User.html":{}}}],["onetomany(undefined",{"_index":896,"title":{},"body":{"entities/User.html":{}}}],["onetoone",{"_index":517,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["onetoone(undefined",{"_index":503,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["open",{"_index":1206,"title":{},"body":{"index.html":{}}}],["operations",{"_index":535,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["operator",{"_index":745,"title":{},"body":{"injectables/PostsService.html":{}}}],["option",{"_index":525,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{}}}],["option.entity",{"_index":541,"title":{},"body":{"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["option.entity.ts",{"_index":483,"title":{},"body":{"entities/MetaOption.html":{},"coverage.html":{}}}],["option.entity.ts:21",{"_index":493,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:31",{"_index":497,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:37",{"_index":489,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:43",{"_index":512,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:53",{"_index":507,"title":{},"body":{"entities/MetaOption.html":{}}}],["optional",{"_index":179,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["optional)'})@apiresponse({status",{"_index":661,"title":{},"body":{"controllers/PostsController.html":{}}}],["options",{"_index":309,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"injectables/PostsService.html":{}}}],["options.controller",{"_index":540,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["options.controller.ts",{"_index":520,"title":{},"body":{"controllers/MetaOptionsController.html":{},"coverage.html":{}}}],["options.controller.ts:22",{"_index":524,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["options.dto",{"_index":372,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{}}}],["options.dto.ts",{"_index":398,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["options.dto.ts:14",{"_index":400,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["options.module",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["options.module.ts",{"_index":539,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["options.service",{"_index":532,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{}}}],["options.service.ts",{"_index":547,"title":{},"body":{"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["options.service.ts:12",{"_index":552,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["options.service.ts:27",{"_index":556,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["options/dtos/create",{"_index":371,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["options/meta",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["options/providers/meta",{"_index":546,"title":{},"body":{"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["order",{"_index":1241,"title":{},"body":{"index.html":{}}}],["out",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["over",{"_index":987,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{},"index.html":{}}}],["overview",{"_index":1300,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1077,"title":{"dependencies.html":{},"properties.html":{}},"body":{"index.html":{}}}],["page",{"_index":313,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["pagination",{"_index":930,"title":{},"body":{"controllers/UsersController.html":{}}}],["pagination'})@apiresponse({status",{"_index":924,"title":{},"body":{"controllers/UsersController.html":{}}}],["param",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["param.dto",{"_index":937,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param.dto.ts",{"_index":473,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["param.dto.ts:23",{"_index":477,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["parameters",{"_index":177,"title":{},"body":{"injectables/AuthService.html":{},"classes/GetUsersParamDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["parseint(id",{"_index":944,"title":{},"body":{"controllers/UsersController.html":{}}}],["parseintpipe",{"_index":667,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["part",{"_index":1192,"title":{},"body":{"index.html":{}}}],["partially",{"_index":586,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["partialtype",{"_index":582,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["partialtype(createpostdto",{"_index":578,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["partialtype(createuserdto",{"_index":587,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["particular",{"_index":1258,"title":{},"body":{"index.html":{}}}],["parts",{"_index":1237,"title":{},"body":{"index.html":{}}}],["pass",{"_index":1282,"title":{},"body":{"index.html":{}}}],["passed",{"_index":749,"title":{},"body":{"injectables/PostsService.html":{}}}],["password",{"_index":101,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["patch",{"_index":668,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["patchpostdto",{"_index":570,"title":{"classes/PatchPostDto.html":{}},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["patchpostdto.content",{"_index":805,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.featuredimageurl",{"_index":813,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.id",{"_index":798,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.posttype",{"_index":809,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.publishon",{"_index":815,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.slug",{"_index":811,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.status",{"_index":807,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.tags.length",{"_index":795,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.title",{"_index":803,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchuser",{"_index":907,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(@body",{"_index":960,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(patchuserdto",{"_index":933,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuserdto",{"_index":584,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["path",{"_index":1249,"title":{},"body":{"index.html":{}}}],["per",{"_index":927,"title":{},"body":{"controllers/UsersController.html":{}}}],["perform",{"_index":95,"title":{},"body":{"modules/AppModule.html":{}}}],["permanently",{"_index":1045,"title":{},"body":{"injectables/UsersService.html":{}}}],["person",{"_index":332,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["person\"\\r\\n",{"_index":383,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["pg",{"_index":1092,"title":{},"body":{"dependencies.html":{}}}],["pg_ctl",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["pick",{"_index":1257,"title":{},"body":{"index.html":{}}}],["pipes",{"_index":1112,"title":{},"body":{"miscellaneous/functions.html":{}}}],["platform",{"_index":1153,"title":{},"body":{"index.html":{}}}],["please",{"_index":790,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{}}}],["port",{"_index":97,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["possible",{"_index":311,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["post",{"_index":275,"title":{"entities/Post.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["post'})@apiresponse({status",{"_index":639,"title":{},"body":{"controllers/PostsController.html":{}}}],["post'})@isstring()@isnotempty()@maxlength(256)@minlength(4)@matches(/^[a",{"_index":335,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post'})@isstring()@minlength(4)@maxlength(512)@isnotempty",{"_index":356,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post('create",{"_index":909,"title":{},"body":{"controllers/UsersController.html":{}}}],["post.'})@isstring()@isoptional",{"_index":296,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.author",{"_index":897,"title":{},"body":{"entities/User.html":{}}}],["post.content",{"_index":804,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.dto",{"_index":583,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["post.dto.ts",{"_index":273,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"coverage.html":{}}}],["post.dto.ts:112",{"_index":302,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:123",{"_index":324,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:135",{"_index":354,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:161",{"_index":308,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:174",{"_index":293,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:19",{"_index":581,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["post.dto.ts:37",{"_index":357,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:48",{"_index":316,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:65",{"_index":342,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:76",{"_index":349,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:87",{"_index":297,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:99",{"_index":334,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.entity",{"_index":699,"title":{},"body":{"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["post.featuredimageurl",{"_index":812,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.metaoptions",{"_index":504,"title":{},"body":{"entities/MetaOption.html":{}}}],["post.posttype",{"_index":808,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.publishon",{"_index":814,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.slug",{"_index":810,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.status",{"_index":806,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.tags",{"_index":816,"title":{},"body":{"injectables/PostsService.html":{},"entities/Tag.html":{}}}],["post.title",{"_index":802,"title":{},"body":{"injectables/PostsService.html":{}}}],["postgres",{"_index":84,"title":{},"body":{"modules/AppModule.html":{}}}],["posts",{"_index":408,"title":{},"body":{"classes/CreateTagDto.html":{},"entities/MetaOption.html":{},"modules/MetaOptionsModule.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"index.html":{}}}],["posts.controller",{"_index":698,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts/posts.module",{"_index":42,"title":{},"body":{"modules/AppModule.html":{}}}],["postscontroller",{"_index":631,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":32,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsrepository",{"_index":713,"title":{},"body":{"injectables/PostsService.html":{}}}],["postsservice",{"_index":669,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["poststatus",{"_index":344,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["poststatus.draft",{"_index":628,"title":{},"body":{"entities/Post.html":{}}}],["posttype",{"_index":280,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["posttype.post",{"_index":627,"title":{},"body":{"entities/Post.html":{}}}],["pr",{"_index":1293,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["prettier",{"_index":108,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["primarygeneratedcolumn",{"_index":492,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["private",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["proceed",{"_index":887,"title":{},"body":{"injectables/TagsService.html":{}}}],["process",{"_index":788,"title":{},"body":{"injectables/PostsService.html":{}}}],["process.env.node_env",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["production",{"_index":1134,"title":{},"body":{"index.html":{}}}],["profile",{"_index":1020,"title":{},"body":{"injectables/UsersService.html":{}}}],["profileconfig",{"_index":1006,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["profileconfiguration",{"_index":1015,"title":{},"body":{"injectables/UsersService.html":{}}}],["progressive",{"_index":1115,"title":{},"body":{"index.html":{}}}],["project",{"_index":1126,"title":{},"body":{"index.html":{}}}],["promise",{"_index":562,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["properties",{"_index":249,"title":{"properties.html":{}},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"properties.html":{}}}],["provide",{"_index":1246,"title":{},"body":{"index.html":{}}}],["provided",{"_index":558,"title":{},"body":{"injectables/MetaOptionsService.html":{},"index.html":{}}}],["provider",{"_index":1292,"title":{},"body":{"index.html":{}}}],["providers",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers/auth.service",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["providers/meta",{"_index":531,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{}}}],["providers/posts.service",{"_index":670,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["providers/tags.service",{"_index":848,"title":{},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{}}}],["providers/users",{"_index":1004,"title":{},"body":{"modules/UsersModule.html":{}}}],["providers/users.service",{"_index":939,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["provides",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{}}}],["pts",{"_index":1250,"title":{},"body":{"index.html":{}}}],["public",{"_index":169,"title":{},"body":{"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["publication",{"_index":325,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["published",{"_index":320,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["published''})@isenum(poststatus)@isnotempty",{"_index":348,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["publishon",{"_index":281,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["query",{"_index":474,"title":{},"body":{"classes/GetUsersParamDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["query('limit",{"_index":949,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('page",{"_index":951,"title":{},"body":{"controllers/UsersController.html":{}}}],["queryrunner",{"_index":755,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["queryrunner.committransaction",{"_index":769,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["queryrunner.connect",{"_index":984,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["queryrunner.manager.create(user",{"_index":990,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["queryrunner.manager.delete(post",{"_index":764,"title":{},"body":{"injectables/PostsService.html":{}}}],["queryrunner.manager.save(newuser",{"_index":992,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["queryrunner.release",{"_index":784,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["queryrunner.rollbacktransaction",{"_index":774,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["queryrunner.starttransaction",{"_index":757,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["questions",{"_index":1177,"title":{},"body":{"index.html":{}}}],["r\\n",{"_index":381,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["rate",{"_index":1242,"title":{},"body":{"index.html":{}}}],["read",{"_index":1214,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["ready",{"_index":1143,"title":{},"body":{"index.html":{}}}],["real",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["record",{"_index":491,"title":{},"body":{"entities/MetaOption.html":{}}}],["records",{"_index":1024,"title":{},"body":{"injectables/UsersService.html":{}}}],["reference",{"_index":834,"title":{},"body":{"entities/Tag.html":{}}}],["reflect",{"_index":1094,"title":{},"body":{"dependencies.html":{}}}],["regenerate",{"_index":1276,"title":{},"body":{"index.html":{}}}],["registered",{"_index":923,"title":{},"body":{"controllers/UsersController.html":{}}}],["registers",{"_index":542,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["related",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateTagDto.html":{},"modules/MetaOptionsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["relations",{"_index":740,"title":{},"body":{"injectables/PostsService.html":{}}}],["relationship",{"_index":508,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["relationships",{"_index":690,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"index.html":{}}}],["release",{"_index":779,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["relevant",{"_index":689,"title":{},"body":{"controllers/PostsController.html":{}}}],["remove",{"_index":766,"title":{},"body":{"injectables/PostsService.html":{}}}],["removes",{"_index":688,"title":{},"body":{"controllers/PostsController.html":{}}}],["removing",{"_index":847,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["repositories",{"_index":735,"title":{},"body":{"injectables/PostsService.html":{}}}],["repository",{"_index":551,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["representing",{"_index":819,"title":{},"body":{"entities/Tag.html":{}}}],["represents",{"_index":484,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/User.html":{}}}],["req",{"_index":393,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["request",{"_index":644,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["requesting",{"_index":726,"title":{},"body":{"injectables/PostsService.html":{}}}],["requests",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["requesttimeoutexception",{"_index":731,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["requesttimeoutexception('could",{"_index":985,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["requesttimeoutexception('database",{"_index":1048,"title":{},"body":{"injectables/UsersService.html":{}}}],["required",{"_index":256,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["requiring",{"_index":1160,"title":{},"body":{"index.html":{}}}],["reset",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resolves",{"_index":563,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["resources",{"_index":1171,"title":{},"body":{"index.html":{}}}],["response",{"_index":770,"title":{},"body":{"injectables/PostsService.html":{}}}],["responsible",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["result",{"_index":991,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["results",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["retrieve",{"_index":478,"title":{},"body":{"classes/GetUsersParamDto.html":{},"injectables/UsersService.html":{}}}],["retrieved",{"_index":917,"title":{},"body":{"controllers/UsersController.html":{}}}],["retrieves",{"_index":658,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["return",{"_index":120,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["returned",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["returning",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{}}}],["returns",{"_index":118,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["review",{"_index":347,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["rollback",{"_index":773,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["root",{"_index":1254,"title":{},"body":{"index.html":{}}}],["route",{"_index":854,"title":{},"body":{"controllers/TagsController.html":{}}}],["routes",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{},"modules/MetaOptionsModule.html":{}}}],["rules",{"_index":433,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["run",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["runner",{"_index":780,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["running",{"_index":1108,"title":{},"body":{"miscellaneous/functions.html":{}}}],["runs",{"_index":1148,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":1096,"title":{},"body":{"dependencies.html":{}}}],["s",{"_index":1262,"title":{},"body":{"index.html":{}}}],["sample",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{}}}],["sample_token",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{}}}],["save",{"_index":548,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["saved",{"_index":564,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["saying",{"_index":1284,"title":{},"body":{"index.html":{}}}],["scalable",{"_index":1120,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":346,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["schema",{"_index":282,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["script",{"_index":1224,"title":{},"body":{"index.html":{}}}],["see",{"_index":1227,"title":{},"body":{"index.html":{}}}],["seen",{"_index":1285,"title":{},"body":{"index.html":{}}}],["separator",{"_index":423,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["serialized",{"_index":326,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["series",{"_index":318,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["series''})@isenum(posttype)@isnotempty",{"_index":315,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["serve",{"_index":1265,"title":{},"body":{"index.html":{}}}],["server",{"_index":1121,"title":{},"body":{"index.html":{}}}],["service",{"_index":211,"title":{},"body":{"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["session",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{}}}],["set",{"_index":92,"title":{},"body":{"modules/AppModule.html":{}}}],["sets",{"_index":1110,"title":{},"body":{"miscellaneous/functions.html":{}}}],["setting",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["setup",{"_index":1127,"title":{},"body":{"index.html":{}}}],["shallow",{"_index":746,"title":{},"body":{"injectables/PostsService.html":{}}}],["side",{"_index":1122,"title":{},"body":{"index.html":{}}}],["sidebarenabled",{"_index":390,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{}}}],["sides",{"_index":1288,"title":{},"body":{"index.html":{}}}],["simple",{"_index":1162,"title":{},"body":{"index.html":{}}}],["simplified",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{}}}],["simulate",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{}}}],["single",{"_index":915,"title":{},"body":{"controllers/UsersController.html":{}}}],["slash",{"_index":1243,"title":{},"body":{"index.html":{}}}],["slug",{"_index":283,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["soft",{"_index":824,"title":{},"body":{"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["softdelete",{"_index":837,"title":{},"body":{"controllers/TagsController.html":{}}}],["softdelete(@query('id",{"_index":853,"title":{},"body":{"controllers/TagsController.html":{}}}],["softdelete(id",{"_index":842,"title":{},"body":{"controllers/TagsController.html":{}}}],["softremove",{"_index":866,"title":{},"body":{"injectables/TagsService.html":{}}}],["softremove(id",{"_index":875,"title":{},"body":{"injectables/TagsService.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["spaces",{"_index":341,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["spec",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TagsService.html":{}}}],["specgenerate",{"_index":1290,"title":{},"body":{"index.html":{}}}],["special",{"_index":463,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["specific",{"_index":475,"title":{},"body":{"classes/GetUsersParamDto.html":{},"controllers/PostsController.html":{},"index.html":{}}}],["specprettier",{"_index":1296,"title":{},"body":{"index.html":{}}}],["sponsors",{"_index":1209,"title":{},"body":{"index.html":{}}}],["spread",{"_index":744,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/.../app.module.ts",{"_index":1308,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1106,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../post",{"_index":1101,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app.service.ts",{"_index":112,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":117,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.module",{"_index":1003,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":155,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/providers/auth.service",{"_index":1035,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/auth/providers/auth.service.ts",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts:10",{"_index":174,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:33",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:54",{"_index":182,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/main.ts",{"_index":1068,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/meta",{"_index":397,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/dto/create",{"_index":272,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["src/posts/dto/patch",{"_index":571,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["src/posts/enums/post",{"_index":1104,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/post.entity",{"_index":514,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["src/posts/post.entity.ts",{"_index":590,"title":{},"body":{"entities/Post.html":{},"coverage.html":{}}}],["src/posts/post.entity.ts:100",{"_index":603,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:106",{"_index":594,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:26",{"_index":601,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:32",{"_index":621,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:43",{"_index":606,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:49",{"_index":612,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:60",{"_index":614,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:66",{"_index":596,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:72",{"_index":609,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:78",{"_index":600,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:84",{"_index":607,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:91",{"_index":619,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/posts.controller.ts",{"_index":632,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:48",{"_index":662,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:61",{"_index":646,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:74",{"_index":666,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:94",{"_index":654,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module.ts",{"_index":697,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/providers/posts.service.ts",{"_index":710,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/providers/posts.service.ts:122",{"_index":728,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:177",{"_index":721,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:21",{"_index":716,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:46",{"_index":724,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:64",{"_index":718,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/tags/dtos/create",{"_index":403,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["src/tags/providers/tags.service",{"_index":732,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/tags/providers/tags.service.ts",{"_index":864,"title":{},"body":{"injectables/TagsService.html":{},"coverage.html":{}}}],["src/tags/providers/tags.service.ts:13",{"_index":868,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:28",{"_index":870,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:38",{"_index":873,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:53",{"_index":871,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:74",{"_index":876,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tag.entity",{"_index":626,"title":{},"body":{"entities/Post.html":{}}}],["src/tags/tag.entity.ts",{"_index":818,"title":{},"body":{"entities/Tag.html":{},"coverage.html":{}}}],["src/tags/tag.entity.ts:103",{"_index":823,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:21",{"_index":827,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:33",{"_index":828,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:45",{"_index":831,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:55",{"_index":825,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:65",{"_index":830,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:76",{"_index":826,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:84",{"_index":829,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:91",{"_index":821,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:97",{"_index":832,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tags.controller.ts",{"_index":836,"title":{},"body":{"controllers/TagsController.html":{},"coverage.html":{}}}],["src/tags/tags.controller.ts:29",{"_index":839,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.controller.ts:39",{"_index":840,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.controller.ts:49",{"_index":844,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.module",{"_index":700,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/tags/tags.module.ts",{"_index":860,"title":{},"body":{"modules/TagsModule.html":{}}}],["src/users/dtos/create",{"_index":242,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dtos/get",{"_index":472,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["src/users/dtos/patch",{"_index":585,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["src/users/providers/users",{"_index":962,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{},"coverage.html":{}}}],["src/users/providers/users.service",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["src/users/providers/users.service.ts",{"_index":1011,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/providers/users.service.ts:102",{"_index":1025,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:132",{"_index":1022,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:26",{"_index":1017,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:57",{"_index":1027,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:82",{"_index":1032,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/user.entity",{"_index":625,"title":{},"body":{"entities/Post.html":{}}}],["src/users/user.entity.ts",{"_index":890,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/user.entity.ts:13",{"_index":893,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:23",{"_index":892,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:34",{"_index":894,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:46",{"_index":891,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:56",{"_index":895,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:62",{"_index":898,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.controller.ts",{"_index":902,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:107",{"_index":910,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:117",{"_index":934,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:49",{"_index":918,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:77",{"_index":929,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:91",{"_index":912,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":158,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostsModule.html":{}}}],["src/users/users.module.ts",{"_index":1001,"title":{},"body":{"modules/UsersModule.html":{}}}],["start",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{},"index.html":{}}}],["start:dev",{"_index":1133,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":1135,"title":{},"body":{"index.html":{}}}],["started",{"_index":1114,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1125,"title":{},"body":{"index.html":{}}}],["statements",{"_index":1060,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":284,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["status.enum",{"_index":370,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["status.enum.ts",{"_index":1102,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["stay",{"_index":1195,"title":{},"body":{"index.html":{}}}],["steps",{"_index":1145,"title":{},"body":{"index.html":{}}}],["storage",{"_index":501,"title":{},"body":{"entities/MetaOption.html":{}}}],["stored",{"_index":498,"title":{},"body":{"entities/MetaOption.html":{}}}],["storing",{"_index":485,"title":{},"body":{"entities/MetaOption.html":{}}}],["story",{"_index":314,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["straightforward",{"_index":1158,"title":{},"body":{"index.html":{}}}],["string",{"_index":119,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["string(error",{"_index":997,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["structured",{"_index":610,"title":{},"body":{"entities/Post.html":{}}}],["success",{"_index":655,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["successful",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["successfully",{"_index":681,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["successfully'})@apiquery({name",{"_index":925,"title":{},"body":{"controllers/UsersController.html":{}}}],["successfully'})@apiresponse({status",{"_index":641,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["summary",{"_index":678,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["support",{"_index":1178,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":1298,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1113,"title":{},"body":{"miscellaneous/functions.html":{}}}],["synchronize",{"_index":89,"title":{},"body":{"modules/AppModule.html":{}}}],["table",{"_index":1076,"title":{},"body":{"coverage.html":{}}}],["tables",{"_index":706,"title":{},"body":{"modules/PostsModule.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1075,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":350,"title":{"entities/Tag.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"coverage.html":{}}}],["tag.dto",{"_index":849,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["tag.dto.ts",{"_index":404,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["tag.dto.ts:30",{"_index":416,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:48",{"_index":425,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:61",{"_index":411,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:74",{"_index":419,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:88",{"_index":414,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.entity",{"_index":862,"title":{},"body":{"modules/TagsModule.html":{},"injectables/TagsService.html":{}}}],["tag.posts",{"_index":617,"title":{},"body":{"entities/Post.html":{}}}],["tagging",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{}}}],["tags",{"_index":285,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"index.html":{}}}],["tags.controller",{"_index":861,"title":{},"body":{"modules/TagsModule.html":{}}}],["tags.length",{"_index":794,"title":{},"body":{"injectables/PostsService.html":{}}}],["tags/providers/tags",{"_index":877,"title":{},"body":{"injectables/TagsService.html":{},"index.html":{}}}],["tags/soft",{"_index":855,"title":{},"body":{"controllers/TagsController.html":{}}}],["tags/tags.module",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["tagscontroller",{"_index":835,"title":{"controllers/TagsController.html":{}},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{},"coverage.html":{}}}],["tagsmodule",{"_index":33,"title":{"modules/TagsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules.html":{},"overview.html":{}}}],["tagsrepository",{"_index":869,"title":{},"body":{"injectables/TagsService.html":{}}}],["tagsservice",{"_index":715,"title":{"injectables/TagsService.html":{}},"body":{"injectables/PostsService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"coverage.html":{},"overview.html":{}}}],["take",{"_index":1146,"title":{},"body":{"index.html":{}}}],["technology",{"_index":409,"title":{},"body":{"classes/CreateTagDto.html":{},"entities/Tag.html":{}}}],["technology'})@isstring()@isnotempty()@matches(/^[a",{"_index":421,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["technology'})@isstring()@minlength(3)@isnotempty()@maxlength(256",{"_index":415,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["test",{"_index":1138,"title":{},"body":{"index.html":{}}}],["test:covdeployment",{"_index":1141,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1140,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1136,"title":{},"body":{"index.html":{}}}],["text",{"_index":595,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["thanks",{"_index":1208,"title":{},"body":{"index.html":{}}}],["this.datasource.createqueryrunner",{"_index":980,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["this.metaoptionrepository.create(createmetaoptiondto",{"_index":567,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionrepository.save(metaoption",{"_index":569,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionsservice.create(createpostmetaoptiondto",{"_index":536,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["this.postsrepository.create",{"_index":750,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.delete(id",{"_index":817,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.find",{"_index":739,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.findone",{"_index":761,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.findoneby",{"_index":797,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.manager.connection.createqueryrunner",{"_index":756,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.save(post",{"_index":751,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsservice.create(createpostdto",{"_index":683,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.delete(id",{"_index":693,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.findall(userid",{"_index":680,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.update(patchpostdto",{"_index":685,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.tagsrepository.create(createtagdto",{"_index":879,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.delete(id",{"_index":888,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.find",{"_index":881,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.findone",{"_index":886,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.save(tag",{"_index":880,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.softdelete(id",{"_index":889,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsservice.create(createtagdto",{"_index":851,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.tagsservice.delete(id",{"_index":852,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.tagsservice.findmultipletags(createpostdto.tags",{"_index":743,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.tagsservice.findmultipletags(patchpostdto.tags",{"_index":786,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.tagsservice.softremove(id",{"_index":856,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.userscreatemanyprovider.createmany(createmanyusersdto",{"_index":1057,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.create(createuserdto",{"_index":1055,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findone",{"_index":1052,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findoneby",{"_index":1047,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.save(newuser",{"_index":1056,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.createmany(createmanyusersdto",{"_index":959,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.createuser(createuserdto",{"_index":957,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall(getuserparamdto",{"_index":953,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findonebyid(1234",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findonebyid(createpostdto.authorid",{"_index":742,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.usersservice.findonebyid(userid",{"_index":947,"title":{},"body":{"controllers/UsersController.html":{}}}],["throw",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["thrown",{"_index":203,"title":{},"body":{"injectables/AuthService.html":{}}}],["throws",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["time",{"_index":608,"title":{},"body":{"entities/Post.html":{},"index.html":{}}}],["timestamp",{"_index":490,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["title",{"_index":286,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["token",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{}}}],["touch",{"_index":1215,"title":{},"body":{"index.html":{}}}],["transaction",{"_index":752,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["transactional",{"_index":973,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["transfer",{"_index":405,"title":{},"body":{"classes/CreateTagDto.html":{},"injectables/MetaOptionsService.html":{},"injectables/TagsService.html":{}}}],["transformer",{"_index":268,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"dependencies.html":{}}}],["triggers",{"_index":1245,"title":{},"body":{"index.html":{}}}],["true",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["true})@jointable",{"_index":618,"title":{},"body":{"entities/Post.html":{}}}],["true})@type(undefined",{"_index":259,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["try",{"_index":758,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["tsconfig.json",{"_index":1255,"title":{},"body":{"index.html":{}}}],["tts",{"_index":1253,"title":{},"body":{"index.html":{}}}],["twitter",{"_index":1220,"title":{},"body":{"index.html":{}}}],["type",{"_index":83,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["type.enum",{"_index":369,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["type.enum.ts",{"_index":1103,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["typeorm",{"_index":518,"title":{},"body":{"entities/MetaOption.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([metaoption",{"_index":544,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["typeormmodule.forfeature([post",{"_index":704,"title":{},"body":{"modules/PostsModule.html":{}}}],["typeormmodule.forfeature([tag",{"_index":863,"title":{},"body":{"modules/TagsModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":1009,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":589,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":1124,"title":{},"body":{"index.html":{}}}],["typically",{"_index":209,"title":{},"body":{"injectables/AuthService.html":{}}}],["unable",{"_index":787,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["undefined",{"_index":605,"title":{},"body":{"entities/Post.html":{},"injectables/PostsService.html":{}}}],["undefined})@isarray()@isoptional()@isint({each",{"_index":353,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["undefined})@isnotempty()@isarray()@validatenested({each",{"_index":258,"title":{},"body":{"classes/CreateManyUsersDto.html":{}}}],["undefined})@isoptional()@validatenested({each",{"_index":307,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["unique",{"_index":420,"title":{},"body":{"classes/CreateTagDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["unit",{"_index":1137,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":561,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["unlicensed",{"_index":1306,"title":{},"body":{"properties.html":{}}}],["up",{"_index":783,"title":{},"body":{"injectables/PostsService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["update",{"_index":712,"title":{},"body":{"injectables/PostsService.html":{}}}],["update(@body",{"_index":785,"title":{},"body":{"injectables/PostsService.html":{}}}],["update(patchpostdto",{"_index":727,"title":{},"body":{"injectables/PostsService.html":{}}}],["updated",{"_index":513,"title":{},"body":{"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/UsersController.html":{}}}],["updatedate",{"_index":487,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["updatedatecolumn",{"_index":511,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["updatepost",{"_index":636,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(@body",{"_index":684,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(patchpostdto",{"_index":663,"title":{},"body":{"controllers/PostsController.html":{}}}],["updates",{"_index":664,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["updating",{"_index":572,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["upon",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["url",{"_index":298,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["url\"'})@maxlength(512",{"_index":424,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["urls",{"_index":343,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["use",{"_index":340,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"injectables/PostsService.html":{},"index.html":{}}}],["used",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{}}}],["usefactory",{"_index":82,"title":{},"body":{"modules/AppModule.html":{}}}],["user",{"_index":86,"title":{"entities/User.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["user'})@apiparam({name",{"_index":659,"title":{},"body":{"controllers/PostsController.html":{}}}],["user'})@apiresponse({status",{"_index":916,"title":{},"body":{"controllers/UsersController.html":{}}}],["user.dto",{"_index":267,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":430,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:25",{"_index":448,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:35",{"_index":452,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:45",{"_index":439,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:59",{"_index":465,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.entity",{"_index":976,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["user.posts",{"_index":592,"title":{},"body":{"entities/Post.html":{}}}],["userid",{"_index":660,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["username",{"_index":99,"title":{},"body":{"modules/AppModule.html":{}}}],["users",{"_index":167,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/GetUsersParamDto.html":{},"modules/PostsModule.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["users.controller",{"_index":1002,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.dto",{"_index":940,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["users.dto.ts",{"_index":244,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"coverage.html":{}}}],["users.dto.ts:27",{"_index":260,"title":{},"body":{"classes/CreateManyUsersDto.html":{}}}],["users.service.ts",{"_index":1042,"title":{},"body":{"injectables/UsersService.html":{}}}],["users/providers/users",{"_index":1294,"title":{},"body":{"index.html":{}}}],["users/users.module",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":901,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userscreatemanyprovider",{"_index":961,"title":{"injectables/UsersCreateManyProvider.html":{}},"body":{"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["usersmodule",{"_index":34,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":1014,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersservice",{"_index":173,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":1190,"title":{},"body":{"index.html":{}}}],["utilizes",{"_index":965,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["valid",{"_index":440,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["validated",{"_index":395,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validatenested",{"_index":264,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["validation",{"_index":432,"title":{},"body":{"classes/CreateUserDto.html":{},"controllers/UsersController.html":{},"miscellaneous/functions.html":{}}}],["validationpipe",{"_index":956,"title":{},"body":{"controllers/UsersController.html":{}}}],["validationschema",{"_index":77,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":265,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"dependencies.html":{}}}],["value",{"_index":401,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"entities/MetaOption.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":312,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["varchar",{"_index":598,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["variable",{"_index":1063,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1307,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verbose",{"_index":1233,"title":{},"body":{"index.html":{}}}],["verifies",{"_index":198,"title":{},"body":{"injectables/AuthService.html":{}}}],["verify",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{}}}],["version",{"_index":1304,"title":{},"body":{"properties.html":{}}}],["video",{"_index":1185,"title":{},"body":{"index.html":{}}}],["view",{"_index":702,"title":{},"body":{"modules/PostsModule.html":{}}}],["visit",{"_index":1175,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":1188,"title":{},"body":{"index.html":{}}}],["void",{"_index":1030,"title":{},"body":{"injectables/UsersService.html":{}}}],["want",{"_index":1261,"title":{},"body":{"index.html":{}}}],["watch",{"_index":1131,"title":{},"body":{"index.html":{}}}],["website",{"_index":1218,"title":{},"body":{"index.html":{}}}],["well",{"_index":1267,"title":{},"body":{"index.html":{}}}],["whenever",{"_index":1273,"title":{},"body":{"index.html":{}}}],["whether",{"_index":841,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["within",{"_index":883,"title":{},"body":{"injectables/TagsService.html":{},"index.html":{}}}],["without",{"_index":846,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{}}}],["working",{"_index":1174,"title":{},"body":{"index.html":{}}}],["world",{"_index":122,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{}}}],["write",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["writing",{"_index":1275,"title":{},"body":{"index.html":{}}}],["x",{"_index":1198,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":1212,"title":{},"body":{"index.html":{}}}],["you're",{"_index":1142,"title":{},"body":{"index.html":{}}}],["z0",{"_index":336,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["z\\d@$!%*?&]{8,16",{"_index":456,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*?&])[a",{"_index":455,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["za",{"_index":454,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            MetaOptionsModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            TagsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UsersModule } from './users/users.module';\nimport { PostsModule } from './posts/posts.module';\nimport { AuthModule } from './auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { TagsModule } from './tags/tags.module';\nimport { MetaOptionsModule } from './meta-options/meta-options.module';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport appConfig from './config/app.config'; // Since it's imported as a default\nimport databaseConfig from './config/database.config';\nimport environmentValidation from './config/environment.validation';\n\nconst ENV = process.env.NODE_ENV;\n\n// Run this in cmd pg_ctl start -D \"C:\\users\\mfabouatmeh\\Desktop\\CodesDar\\more\\Postgre\\data\"\n@Module({\n  imports: [\n    UsersModule,\n    PostsModule,\n    AuthModule,\n    ConfigModule.forRoot({\n      isGlobal: true,\n      envFilePath: !ENV ? '.env' : `.env.${ENV}`,\n      load: [appConfig, databaseConfig],\n      validationSchema: environmentValidation,\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule], // Makes ConfigService available\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        type: 'postgres',\n        // entities: [User],\n        autoLoadEntities: configService.get('database.autoLoadEntities'),\n        synchronize: configService.get('database.synchronize'), // If this setting is set to false, we would have to manually perform migrations\n        port: configService.get('database.port'),\n        username: configService.get('database.user'),\n        password: configService.get('database.pass'),\n        host: configService.get('database.host'),\n        database: configService.get('database.name'),\n      }),\n    }),\n    TagsModule,\n    MetaOptionsModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n//npx prettier --write .\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n            \n                Description\n            \n            \n                AuthController handles authentication-related API requests.\nIt provides routes for logging in and checking user authentication.\n\n            \n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { AuthService } from './providers/auth.service';\nimport { ApiTags, ApiOperation, ApiResponse } from '@nestjs/swagger';\n\n/**\n * AuthController handles authentication-related API requests.\n * It provides routes for logging in and checking user authentication.\n */\n@ApiTags('Authentication') // Tagging the controller for authentication-related endpoints.\n@Controller('auth')\nexport class AuthController {\n  constructor(\n    // Injecting the AuthService to handle authentication logic.\n    private readonly authService: AuthService,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './providers/auth.service';\nimport { UsersModule } from 'src/users/users.module';\n// nest generate module auth\n@Module({\n  controllers: [AuthController],\n  providers: [AuthService],\n  // imports: [UsersModule], will cause a circular dependency\n  imports: [forwardRef(() => UsersModule)],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                AuthService class handles the authentication logic of the application.\nIt is responsible for logging users in and checking if a user is authenticated.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                isAuth\n                            \n                            \n                                    Public\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/auth.service.ts:10\n                            \n                        \n\n                \n                    \n                            Constructs an instance of the AuthService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The UsersService instance to interact with user-related data.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isAuth\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAuth()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:54\n                        \n                    \n\n\n            \n                \n                        Checks if a user is authenticated.\nThis is a simplified check that always returns true.\nIn a real-world application, this would verify a JWT token or session.\nExample :\n\n                        \n                            Returns :         boolean\n\n                        \n                            \n                                boolean true indicating the user is authenticated.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:33\n                        \n                    \n\n\n            \n                \n                        Handles the login logic for a user.\nIt checks if the user exists, verifies the password, and generates a token for the user.\nIf the user is not found or the password is incorrect, an error is thrown.\nExample :\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The email of the user attempting to log in.\n\n                                            \n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The password of the user attempting to log in.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                string A token generated for the logged-in user (typically a JWT token).\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, forwardRef, Inject } from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users.service';\n// nest generate service auth/providers/auth --flat  --no-spec\n\n/**\n * AuthService class handles the authentication logic of the application.\n * It is responsible for logging users in and checking if a user is authenticated.\n */\n@Injectable()\nexport class AuthService {\n  /**\n   * Constructs an instance of the AuthService.\n   * @param usersService The UsersService instance to interact with user-related data.\n   */\n  constructor(\n    // Injecting the UsersService to interact with user-related data.\n    // forwardRef is used to avoid circular dependency issues.\n    @Inject(forwardRef(() => UsersService))\n    private readonly usersService: UsersService,\n  ) {}\n\n  /**\n   * Handles the login logic for a user.\n   * It checks if the user exists, verifies the password, and generates a token for the user.\n   * If the user is not found or the password is incorrect, an error is thrown.\n   *\n   * @param email The email of the user attempting to log in.\n   * @param password The password of the user attempting to log in.\n   * @returns string A token generated for the logged-in user (typically a JWT token).\n   * @throws Error If the user is not found or the password is incorrect.\n   * @example 'SAMPLE_TOKEN' - A sample token string returned upon successful login.\n   */\n  public login(email: string, password: string) {\n    // Simulate user finding logic (mocked for demonstration)\n    const user = this.usersService.findOneById(1234);\n\n    if (!user) {\n      throw new Error('User not found');\n    }\n\n    // Additional password check can be added here\n    // For now, returning a mock token for successful login\n    return 'SAMPLE_TOKEN';\n  }\n\n  /**\n   * Checks if a user is authenticated.\n   * This is a simplified check that always returns `true`.\n   * In a real-world application, this would verify a JWT token or session.\n   *\n   * @returns boolean `true` indicating the user is authenticated.\n   * @example true\n   */\n  public isAuth(): boolean {\n    return true;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateManyUsersDto.html":{"url":"classes/CreateManyUsersDto.html","title":"class - CreateManyUsersDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateManyUsersDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-many-users.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for creating multiple users at once.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreateUserDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Array of user objects to be created.', type: 'array', required: true, items: undefined})@IsNotEmpty()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-many-users.dto.ts:27\n                        \n                    \n\n            \n                \n                    List of users to be created.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, IsNotEmpty, ValidateNested } from 'class-validator';\nimport { CreateUserDto } from './create-user.dto';\nimport { Type } from 'class-transformer';\nimport { ApiProperty } from '@nestjs/swagger';\n\n/**\n * DTO for creating multiple users at once.\n */\nexport class CreateManyUsersDto {\n  /**\n   * List of users to be created.\n   *\n   * @type {CreateUserDto[]}\n   */\n  @ApiProperty({\n    description: 'Array of user objects to be created.',\n    type: 'array',\n    required: true,\n    items: {\n      type: 'User',\n    },\n  })\n  @IsNotEmpty()\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => CreateUserDto)\n  users: CreateUserDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dto/create-post.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for creating a new blog post.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                authorId\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                publishOn\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        authorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'integer', required: true, description: 'The ID of the author creating the post', example: 1})@IsNotEmpty()@IsInt()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:174\n                        \n                    \n\n            \n                \n                    The ID of the author creating the post.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The main content of the post', example: 'This is the content of the blog post.'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:87\n                        \n                    \n\n            \n                \n                    The main content of the post.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The URL of the featured image for the post', example: 'http://localhost.com/images/image1.jpg'})@IsOptional()@MinLength(4)@MaxLength(1024)@IsUrl()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:112\n                        \n                    \n\n            \n                \n                    The URL of the featured image for the post.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreatePostMetaOptionsDto | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'object', required: false, items: undefined})@IsOptional()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:161\n                        \n                    \n\n            \n                \n                    Additional meta options for the post.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: PostType, description: 'Possible values: 'post', 'page', 'story', 'series''})@IsEnum(PostType)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:48\n                        \n                    \n\n            \n                \n                    The type of post (e.g., 'post', 'page', 'story', 'series').\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The date on which the post is published', example: '2024-03-16T07:46:32+0000'})@IsISO8601()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:123\n                        \n                    \n\n            \n                \n                    The publication date of the post.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Serialized JSON object containing metadata', example: '{\n \"@context\": \"https://schema.org\",\n \"@type\": \"Person\"\n }'})@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:99\n                        \n                    \n\n            \n                \n                    JSON metadata for the post.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'A slug for the post (e.g., \"my-blog-post\")', example: 'my-blog-post'})@IsString()@IsNotEmpty()@MaxLength(256)@MinLength(4)@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'A slug should be all lowercase, use only \"-\", and have no spaces. Example: \"my-url\"'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:65\n                        \n                    \n\n            \n                \n                    A slug for the post, used in URLs.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: PostStatus, description: 'Possible values: 'draft', 'scheduled', 'review', 'published''})@IsEnum(PostStatus)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:76\n                        \n                    \n\n            \n                \n                    The publication status of the post (e.g., 'draft', 'scheduled', 'review', 'published').\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Array of tag IDs associated with the post', example: undefined})@IsArray()@IsOptional()@IsInt({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:135\n                        \n                    \n\n            \n                \n                    An array of tag IDs associated with the post.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'This is a title', description: 'The title for the blog post'})@IsString()@MinLength(4)@MaxLength(512)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:37\n                        \n                    \n\n            \n                \n                    The title of the blog post.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsArray,\n  IsEnum,\n  IsInt,\n  IsISO8601,\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MaxLength,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\nimport { PostType } from '../enums/post-type.enum';\nimport { PostStatus } from '../enums/post-status.enum';\nimport { CreatePostMetaOptionsDto } from '../../meta-options/dtos/create-post-meta-options.dto';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\n\n/**\n * DTO for creating a new blog post.\n */\nexport class CreatePostDto {\n  /**\n   * The title of the blog post.\n   */\n  @ApiProperty({\n    example: 'This is a title',\n    description: 'The title for the blog post',\n  })\n  @IsString()\n  @MinLength(4)\n  @MaxLength(512)\n  @IsNotEmpty()\n  title: string;\n\n  /**\n   * The type of post (e.g., 'post', 'page', 'story', 'series').\n   */\n  @ApiProperty({\n    enum: PostType,\n    description: \"Possible values: 'post', 'page', 'story', 'series'\",\n  })\n  @IsEnum(PostType)\n  @IsNotEmpty()\n  postType: PostType;\n\n  /**\n   * A slug for the post, used in URLs.\n   */\n  @ApiProperty({\n    description: 'A slug for the post (e.g., \"my-blog-post\")',\n    example: 'my-blog-post',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(256)\n  @MinLength(4)\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'A slug should be all lowercase, use only \"-\", and have no spaces. Example: \"my-url\"',\n  })\n  slug: string;\n\n  /**\n   * The publication status of the post (e.g., 'draft', 'scheduled', 'review', 'published').\n   */\n  @ApiProperty({\n    enum: PostStatus,\n    description: \"Possible values: 'draft', 'scheduled', 'review', 'published'\",\n  })\n  @IsEnum(PostStatus)\n  @IsNotEmpty()\n  status: PostStatus;\n\n  /**\n   * The main content of the post.\n   */\n  @ApiPropertyOptional({\n    description: 'The main content of the post',\n    example: 'This is the content of the blog post.',\n  })\n  @IsString()\n  @IsOptional()\n  content?: string;\n\n  /**\n   * JSON metadata for the post.\n   */\n  @ApiPropertyOptional({\n    description: 'Serialized JSON object containing metadata',\n    example:\n      '{\\r\\n \"@context\": \"https://schema.org\",\\r\\n \"@type\": \"Person\"\\r\\n }',\n  })\n  @IsOptional()\n  @IsJSON()\n  schema?: string;\n\n  /**\n   * The URL of the featured image for the post.\n   */\n  @ApiPropertyOptional({\n    description: 'The URL of the featured image for the post',\n    example: 'http://localhost.com/images/image1.jpg',\n  })\n  @IsOptional()\n  @MinLength(4)\n  @MaxLength(1024)\n  @IsUrl()\n  featuredImageUrl?: string;\n\n  /**\n   * The publication date of the post.\n   */\n  @ApiPropertyOptional({\n    description: 'The date on which the post is published',\n    example: '2024-03-16T07:46:32+0000',\n  })\n  @IsISO8601()\n  @IsOptional()\n  publishOn?: Date;\n\n  /**\n   * An array of tag IDs associated with the post.\n   */\n  @ApiPropertyOptional({\n    description: 'Array of tag IDs associated with the post',\n    example: [1, 2],\n  })\n  @IsArray()\n  @IsOptional()\n  @IsInt({ each: true })\n  tags?: number[];\n\n  /**\n   * Additional meta options for the post.\n   */\n  @ApiPropertyOptional({\n    type: 'object',\n    required: false,\n    items: {\n      type: 'object',\n      properties: {\n        metavalue: {\n          type: 'json',\n          description: 'A JSON string containing metadata options',\n          example: '{\"sidebarEnabled\": true}',\n        },\n      },\n    },\n  })\n  @IsOptional()\n  @ValidateNested({ each: true })\n  @Type(() => CreatePostMetaOptionsDto)\n  // Type decorator\n  // Matches the incoming req to the dto\n  // Creates an instance of the dto\n  // All the properties are validated against the dto\n  metaOptions?: CreatePostMetaOptionsDto | null;\n\n  /**\n   * The ID of the author creating the post.\n   */\n  @ApiProperty({\n    type: 'integer',\n    required: true,\n    description: 'The ID of the author creating the post',\n    example: 1,\n  })\n  @IsNotEmpty()\n  @IsInt()\n  authorId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostMetaOptionsDto.html":{"url":"classes/CreatePostMetaOptionsDto.html","title":"class - CreatePostMetaOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostMetaOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/dtos/create-post-meta-options.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for creating metadata options for a post.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                metaValue\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/dtos/create-post-meta-options.dto.ts:14\n                        \n                    \n\n            \n                \n                    The meta value as a JSON string.\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsJSON, IsNotEmpty, IsString } from 'class-validator';\n\n/**\n * DTO for creating metadata options for a post.\n */\nexport class CreatePostMetaOptionsDto {\n  /**\n   * The meta value as a JSON string.\n   *\n   * @example '{\"sidebarEnabled\": true}'\n   */\n  @IsNotEmpty()\n  @IsJSON()\n  metaValue: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTagDto.html":{"url":"classes/CreateTagDto.html","title":"class - CreateTagDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTagDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/dtos/create-tag.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object (DTO) for creating a new tag.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                featuredImage\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'A brief description of the tag', example: 'Posts related to technology and innovations'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:61\n                        \n                    \n\n            \n                \n                    A brief description of the tag.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        featuredImage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'URL of the featured image for the tag', example: 'https://example.com/images/tag-image.jpg'})@IsOptional()@IsUrl()@MaxLength(1024)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:88\n                        \n                    \n\n            \n                \n                    URL of the featured image for the tag.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The name of the tag', example: 'Technology'})@IsString()@MinLength(3)@IsNotEmpty()@MaxLength(256)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:30\n                        \n                    \n\n            \n                \n                    The name of the tag.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'JSON metadata associated with the tag', example: '{\"color\": \"blue\"}'})@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:74\n                        \n                    \n\n            \n                \n                    JSON metadata associated with the tag.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'A unique slug for the tag, used in URLs', example: 'technology'})@IsString()@IsNotEmpty()@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'A slug should be all lowercase letters and use only \"-\" as a separator. For example \"my-url\"'})@MaxLength(512)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:48\n                        \n                    \n\n            \n                \n                    The slug for the tag, used in URLs.\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\n/**\n * Data Transfer Object (DTO) for creating a new tag.\n */\nexport class CreateTagDto {\n  /**\n   * The name of the tag.\n   *\n   * @example \"Technology\"\n   */\n  @ApiProperty({\n    description: 'The name of the tag',\n    example: 'Technology',\n  })\n  @IsString()\n  @MinLength(3)\n  @IsNotEmpty()\n  @MaxLength(256)\n  name: string;\n\n  /**\n   * The slug for the tag, used in URLs.\n   *\n   * @example \"technology\"\n   */\n  @ApiProperty({\n    description: 'A unique slug for the tag, used in URLs',\n    example: 'technology',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'A slug should be all lowercase letters and use only \"-\" as a separator. For example \"my-url\"',\n  })\n  @MaxLength(512)\n  slug: string;\n\n  /**\n   * A brief description of the tag.\n   *\n   * @example \"Posts related to technology and innovations\"\n   */\n  @ApiPropertyOptional({\n    description: 'A brief description of the tag',\n    example: 'Posts related to technology and innovations',\n  })\n  @IsOptional()\n  @IsString()\n  description: string;\n\n  /**\n   * JSON metadata associated with the tag.\n   *\n   * @example '{\"color\": \"blue\"}'\n   */\n  @ApiPropertyOptional({\n    description: 'JSON metadata associated with the tag',\n    example: '{\"color\": \"blue\"}',\n  })\n  @IsOptional()\n  @IsJSON()\n  schema: string;\n\n  /**\n   * URL of the featured image for the tag.\n   *\n   * @example \"https://example.com/images/tag-image.jpg\"\n   */\n  @ApiPropertyOptional({\n    description: 'URL of the featured image for the tag',\n    example: 'https://example.com/images/tag-image.jpg',\n  })\n  @IsOptional()\n  @IsUrl()\n  @MaxLength(1024)\n  featuredImage: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO class for creating a new user.\nContains validation rules for the first name, last name, email, and password.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:45\n                        \n                    \n\n            \n                \n                    The email of the user.\nShould be a valid email address and cannot be empty.\nThe length should be no more than 96 characters.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:25\n                        \n                    \n\n            \n                \n                    The first name of the user.\nShould be a string and cannot be empty.\nThe length should be between 3 and 96 characters.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:35\n                        \n                    \n\n            \n                \n                    The last name of the user (optional).\nShould be a string with a length between 3 and 96 characters.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MaxLength(96)@MinLength(8)@Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,16}$/, {message: 'Minimum 8 chars, include at least one letter, one number, and one special character.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:59\n                        \n                    \n\n            \n                \n                    The password of the user.\nMust be a string, at least 8 characters long, and include at least one letter, one number, and one special character.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\n/**\n * DTO class for creating a new user.\n * Contains validation rules for the first name, last name, email, and password.\n */\nexport class CreateUserDto {\n  /**\n   * The first name of the user.\n   * Should be a string and cannot be empty.\n   * The length should be between 3 and 96 characters.\n   */\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(96)\n  firstName: string;\n\n  /**\n   * The last name of the user (optional).\n   * Should be a string with a length between 3 and 96 characters.\n   */\n  @IsString()\n  @IsOptional()\n  @MinLength(3)\n  @MaxLength(96)\n  lastName?: string;\n\n  /**\n   * The email of the user.\n   * Should be a valid email address and cannot be empty.\n   * The length should be no more than 96 characters.\n   */\n  @IsEmail()\n  @IsNotEmpty()\n  @MaxLength(96)\n  email: string;\n\n  /**\n   * The password of the user.\n   * Must be a string, at least 8 characters long, and include at least one letter, one number, and one special character.\n   */\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(96)\n  @MinLength(8)\n  @Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,16}$/, {\n    message:\n      'Minimum 8 chars, include at least one letter, one number, and one special character.',\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersParamDto.html":{"url":"classes/GetUsersParamDto.html","title":"class - GetUsersParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-users-param.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO class to handle user query parameters.\nThis class will be used to get a user by their specific ID.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Get user with a specific id', example: '1234'})@IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-users-param.dto.ts:23\n                        \n                    \n\n            \n                \n                    The ID of the user to retrieve.\nThis is an optional field.\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport { IsInt, IsOptional } from 'class-validator';\n\n/**\n * DTO class to handle user query parameters.\n * This class will be used to get a user by their specific ID.\n */\nexport class GetUsersParamDto {\n  /**\n   * The ID of the user to retrieve.\n   * This is an optional field.\n   *\n   * @example '1234'\n   */\n  @ApiPropertyOptional({\n    description: 'Get user with a specific id',\n    example: '1234',\n  })\n  @IsOptional()\n  @IsInt()\n  @Type(() => Number)\n  id?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/MetaOption.html":{"url":"entities/MetaOption.html","title":"entity - MetaOption","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  MetaOption\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-option.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the MetaOption entity, storing metadata for posts.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createDate\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                metaValue\n                            \n                            \n                                    \n                                    \n                                post\n                            \n                            \n                                    \n                                updateDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:37\n                        \n                    \n\n            \n                \n                    Timestamp indicating when the record was created.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:21\n                        \n                    \n\n            \n                \n                    Unique identifier for the MetaOption.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'json', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:31\n                        \n                    \n\n            \n                \n                    Metadata value stored in JSON format.\nNote: JSON storage is not available in MySQL.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        post\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, post => post.metaOptions, {onDelete: 'CASCADE'})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:53\n                        \n                    \n\n            \n                \n                    Associated post entity (One-to-One relationship).\nIf the post is deleted, the metaOption is also deleted (CASCADE).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:43\n                        \n                    \n\n            \n                \n                    Timestamp indicating when the record was last updated.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Post } from 'src/posts/post.entity';\nimport {\n  Column,\n  CreateDateColumn,\n  Entity,\n  JoinColumn,\n  OneToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n/**\n * Represents the MetaOption entity, storing metadata for posts.\n */\n@Entity()\nexport class MetaOption {\n  /**\n   * Unique identifier for the MetaOption.\n   */\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  /**\n   * Metadata value stored in JSON format.\n   * Note: JSON storage is not available in MySQL.\n   */\n  @Column({\n    type: 'json',\n    nullable: false,\n  })\n  metaValue: string;\n\n  /**\n   * Timestamp indicating when the record was created.\n   */\n  @CreateDateColumn()\n  createDate: Date;\n\n  /**\n   * Timestamp indicating when the record was last updated.\n   */\n  @UpdateDateColumn()\n  updateDate: Date;\n\n  /**\n   * Associated post entity (One-to-One relationship).\n   * If the post is deleted, the metaOption is also deleted (`CASCADE`).\n   */\n  @OneToOne(() => Post, (post) => post.metaOptions, {\n    onDelete: 'CASCADE',\n  })\n  @JoinColumn()\n  post: Post;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MetaOptionsController.html":{"url":"controllers/MetaOptionsController.html","title":"controller - MetaOptionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MetaOptionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-options.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                meta-options\n            \n\n\n            \n                Description\n            \n            \n                Controller for managing post metadata options.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createMetaOption\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createMetaOption\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMetaOption(createPostMetaOptionDto: CreatePostMetaOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/meta-options/meta-options.controller.ts:22\n                        \n                    \n\n\n            \n                \n                        Creates a new meta option for a post.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createPostMetaOptionDto\n                                            \n                                                            CreatePostMetaOptionsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    DTO containing metadata information.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The created meta option.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { CreatePostMetaOptionsDto } from './dtos/create-post-meta-options.dto';\nimport { MetaOptionsService } from './providers/meta-options.service';\n\n/**\n * Controller for managing post metadata options.\n */\n@Controller('meta-options')\nexport class MetaOptionsController {\n  /**\n   * Injects the MetaOptionsService.\n   * @param metaOptionsService The service responsible for metadata operations.\n   */\n  constructor(private readonly metaOptionsService: MetaOptionsService) {}\n\n  /**\n   * Creates a new meta option for a post.\n   * @param createPostMetaOptionDto DTO containing metadata information.\n   * @returns The created meta option.\n   */\n  @Post()\n  public createMetaOption(\n    @Body() createPostMetaOptionDto: CreatePostMetaOptionsDto,\n  ) {\n    return this.metaOptionsService.create(createPostMetaOptionDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MetaOptionsModule.html":{"url":"modules/MetaOptionsModule.html","title":"module - MetaOptionsModule","body":"\n                   \n\n\n\n\n    Modules\n    MetaOptionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/meta-options/meta-options.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Module for managing metadata options related to posts.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MetaOptionsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MetaOptionsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MetaOptionsController } from './meta-options.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { MetaOption } from './meta-option.entity';\nimport { MetaOptionsService } from './providers/meta-options.service';\n\n/**\n * Module for managing metadata options related to posts.\n */\n@Module({\n  /**\n   * Registers controllers for handling metadata-related routes.\n   */\n  controllers: [MetaOptionsController],\n\n  /**\n   * Imports TypeORM module and registers the MetaOption entity.\n   */\n  imports: [TypeOrmModule.forFeature([MetaOption])],\n\n  /**\n   * Provides the MetaOptionsService for handling business logic.\n   */\n  providers: [MetaOptionsService],\n})\nexport class MetaOptionsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MetaOptionsService.html":{"url":"injectables/MetaOptionsService.html","title":"injectable - MetaOptionsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MetaOptionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/providers/meta-options.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for managing MetaOptions.\nProvides methods to create and save meta options.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(metaOptionRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/meta-options/providers/meta-options.service.ts:12\n                            \n                        \n\n                \n                    \n                            Inject the repository for MetaOption entity.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        metaOptionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Repository for interacting with MetaOption entity.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createMetaOptionDto: CreatePostMetaOptionsDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/meta-options/providers/meta-options.service.ts:27\n                        \n                    \n\n\n            \n                \n                        Create a new MetaOption based on the provided data transfer object (DTO).\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createMetaOptionDto\n                                            \n                                                            CreatePostMetaOptionsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Data transfer object containing meta option details.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                A promise that resolves to the saved MetaOption entity.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { MetaOption } from '../meta-option.entity';\nimport { Repository } from 'typeorm';\nimport { CreatePostMetaOptionsDto } from '../dtos/create-post-meta-options.dto';\n\n/**\n * Service for managing MetaOptions.\n * Provides methods to create and save meta options.\n */\n@Injectable()\nexport class MetaOptionsService {\n  /**\n   * Inject the repository for MetaOption entity.\n   * @param metaOptionRepository Repository for interacting with MetaOption entity.\n   */\n  constructor(\n    @InjectRepository(MetaOption)\n    private metaOptionRepository: Repository,\n  ) {}\n\n  /**\n   * Create a new MetaOption based on the provided data transfer object (DTO).\n   * @param createMetaOptionDto Data transfer object containing meta option details.\n   * @returns A promise that resolves to the saved MetaOption entity.\n   */\n  public async create(createMetaOptionDto: CreatePostMetaOptionsDto) {\n    const metaOption = this.metaOptionRepository.create(createMetaOptionDto);\n    return await this.metaOptionRepository.save(metaOption);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchPostDto.html":{"url":"classes/PatchPostDto.html","title":"class - PatchPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dto/patch-post.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for updating an existing post.\nExtends CreatePostDto, making all fields optional except id.\n\n            \n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The ID of the post that needs to be updated', example: 1})@IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/patch-post.dto.ts:19\n                        \n                    \n\n            \n                \n                    The ID of the post to be updated.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsInt, IsNotEmpty } from 'class-validator';\nimport { CreatePostDto } from './create-post.dto';\n\n/**\n * DTO for updating an existing post.\n * Extends `CreatePostDto`, making all fields optional except `id`.\n */\nexport class PatchPostDto extends PartialType(CreatePostDto) {\n  /**\n   * The ID of the post to be updated.\n   */\n  @ApiProperty({\n    description: 'The ID of the post that needs to be updated',\n    example: 1,\n  })\n  @IsInt()\n  @IsNotEmpty()\n  id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/patch-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for updating a user partially.\nExtends CreateUserDto, making all its properties optional.\n\n            \n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\n/**\n * DTO for updating a user partially.\n *\n * Extends `CreateUserDto`, making all its properties optional.\n */\nexport class PatchUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Post.html":{"url":"entities/Post.html","title":"entity - Post","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/post.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a blog post entity.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                author\n                            \n                            \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                postType\n                            \n                            \n                                    \n                                    Optional\n                                publishOn\n                            \n                            \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.posts, {eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:106\n                        \n                    \n\n            \n                \n                    Author of the post (many-to-one relationship with User).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:66\n                        \n                    \n\n            \n                \n                    Main content of the post (large string)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:78\n                        \n                    \n\n            \n                \n                    URL of the featured image.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:26\n                        \n                    \n\n            \n                \n                    Unique identifier for the post.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MetaOption\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, metaOptions => metaOptions.post, {cascade: true, eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:100\n                        \n                    \n\n            \n                \n                    Meta options associated with the post (one-to-one relationship bidirectional).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: PostType, default: undefined, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:43\n                        \n                    \n\n            \n                \n                    Type of the post (e.g., post, page, story, series.).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:84\n                        \n                    \n\n            \n                \n                    Date and time when the post is published.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:72\n                        \n                    \n\n            \n                \n                    JSON schema for structured data.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:49\n                        \n                    \n\n            \n                \n                    URL-friendly identifier for the post.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: PostStatus, default: undefined, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:60\n                        \n                    \n\n            \n                \n                    Status of the post (draft, published, etc.).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Tag[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, tag => tag.posts, {eager: true})@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:91\n                        \n                    \n\n            \n                \n                    Tags associated with the post (many-to-many relationship).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 512, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:32\n                        \n                    \n\n            \n                \n                    Title of the post.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  Entity,\n  JoinColumn,\n  JoinTable,\n  ManyToMany,\n  ManyToOne,\n  OneToOne,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport { PostType } from './enums/post-type.enum';\nimport { PostStatus } from './enums/post-status.enum';\nimport { MetaOption } from 'src/meta-options/meta-option.entity';\nimport { User } from 'src/users/user.entity';\nimport { Tag } from 'src/tags/tag.entity';\n\n/**\n * Represents a blog post entity.\n */\n@Entity()\nexport class Post {\n  /**\n   * Unique identifier for the post.\n   */\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  /**\n   * Title of the post.\n   */\n  @Column({ type: 'varchar', length: 512, nullable: false })\n  title: string;\n\n  /**\n   * Type of the post (e.g., post, page, story, series.).\n   */\n  @Column({\n    type: 'enum',\n    enum: PostType,\n    default: PostType.POST,\n    nullable: false,\n  })\n  postType: PostType;\n\n  /**\n   * URL-friendly identifier for the post.\n   */\n  @Column({ type: 'varchar', length: 256, nullable: false, unique: true })\n  slug: string;\n\n  /**\n   * Status of the post (draft, published, etc.).\n   */\n  @Column({\n    type: 'enum',\n    enum: PostStatus,\n    default: PostStatus.DRAFT,\n    nullable: false,\n  })\n  status: PostStatus;\n\n  /**\n   * Main content of the post (large string)\n   */\n  @Column({ type: 'text', nullable: true })\n  content?: string;\n\n  /**\n   * JSON schema for structured data.\n   */\n  @Column({ type: 'text', nullable: true })\n  schema?: string;\n\n  /**\n   * URL of the featured image.\n   */\n  @Column({ type: 'varchar', length: 1024, nullable: true })\n  featuredImageUrl?: string;\n\n  /**\n   * Date and time when the post is published.\n   */\n  @Column({ type: 'timestamp', nullable: true })\n  publishOn?: Date;\n\n  /**\n   * Tags associated with the post (many-to-many relationship).\n   */\n  @ManyToMany(() => Tag, (tag) => tag.posts, { eager: true })\n  @JoinTable()\n  tags?: Tag[];\n\n  /**\n   * Meta options associated with the post (one-to-one relationship bidirectional).\n   */\n  @OneToOne(() => MetaOption, (metaOptions) => metaOptions.post, {\n    cascade: true,\n    eager: true, // Will fetch posts AND metaOptions when getting posts\n  })\n  metaOptions?: MetaOption;\n\n  /**\n   * Author of the post (many-to-one relationship with User).\n   */\n  @ManyToOne(() => User, (user) => user.posts, { eager: true })\n  author: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n            \n                Description\n            \n            \n                Controller for managing posts.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                createPost\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                delete\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getPosts\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Creates a new blog post'})@ApiResponse({status: 201, description: 'Post created successfully'})@ApiResponse({status: 400, description: 'Invalid request data'})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:61\n                        \n                    \n\n\n            \n                \n                        Creates a new blog post.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data for the new post.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The created post.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Deletes a post by ID'})@ApiQuery({name: 'id', required: true, type: Number, description: 'Post ID to delete'})@ApiResponse({status: 200, description: 'Post deleted successfully'})@ApiResponse({status: 404, description: 'Post not found'})@Delete()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:94\n                        \n                    \n\n\n            \n                \n                        Deletes a post by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the post to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A success message.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                        getPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPosts(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:userId?')@ApiOperation({summary: 'Retrieves all posts for a specific user'})@ApiParam({name: 'userId', required: false, description: 'User ID (optional)'})@ApiResponse({status: 200, description: 'Returns the list of posts'})\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:48\n                        \n                    \n\n\n            \n                \n                        Retrieves all posts for a specific user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user (optional).\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A list of posts.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(patchPostDto: PatchPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Updates an existing blog post'})@ApiResponse({status: 201, description: 'Post updated successfully'})@ApiResponse({status: 404, description: 'Post not found'})@Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:74\n                        \n                    \n\n\n            \n                \n                        Updates an existing blog post.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                patchPostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe updated post data.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The updated post.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Query,\n} from '@nestjs/common';\nimport { PostsService } from './providers/posts.service';\nimport {\n  ApiOperation,\n  ApiResponse,\n  ApiTags,\n  ApiParam,\n  ApiQuery,\n} from '@nestjs/swagger';\nimport { CreatePostDto } from './dto/create-post.dto';\nimport { PatchPostDto } from './dto/patch-post.dto';\n\n/**\n * Controller for managing posts.\n */\n@Controller('posts')\n@ApiTags('Posts')\nexport class PostsController {\n  /**\n   * Creates an instance of PostsController.\n   * @param postsService - The posts service.\n   */\n  constructor(private readonly postsService: PostsService) {}\n\n  /**\n   * Retrieves all posts for a specific user.\n   * @param userId - The ID of the user (optional).\n   * @returns A list of posts.\n   */\n  @Get('/:userId?')\n  @ApiOperation({ summary: 'Retrieves all posts for a specific user' })\n  @ApiParam({\n    name: 'userId',\n    required: false,\n    description: 'User ID (optional)',\n  })\n  @ApiResponse({ status: 200, description: 'Returns the list of posts' })\n  public getPosts(@Param('userId') userId: string) {\n    return this.postsService.findAll(userId);\n  }\n\n  /**\n   * Creates a new blog post.\n   * @param createPostDto - The data for the new post.\n   * @returns The created post.\n   */\n  @ApiOperation({ summary: 'Creates a new blog post' })\n  @ApiResponse({ status: 201, description: 'Post created successfully' })\n  @ApiResponse({ status: 400, description: 'Invalid request data' })\n  @Post()\n  public createPost(@Body() createPostDto: CreatePostDto) {\n    return this.postsService.create(createPostDto);\n  }\n\n  /**\n   * Updates an existing blog post.\n   * @param patchPostDto - The updated post data.\n   * @returns The updated post.\n   */\n  @ApiOperation({ summary: 'Updates an existing blog post' })\n  @ApiResponse({ status: 201, description: 'Post updated successfully' })\n  @ApiResponse({ status: 404, description: 'Post not found' })\n  @Patch()\n  public updatePost(@Body() patchPostDto: PatchPostDto) {\n    return this.postsService.update(patchPostDto);\n  }\n\n  /**\n   * Deletes a post by its ID.\n   * @param id - The ID of the post to delete.\n   * @returns A success message.\n   */\n  @ApiOperation({ summary: 'Deletes a post by ID' })\n  @ApiQuery({\n    name: 'id',\n    required: true,\n    type: Number,\n    description: 'Post ID to delete',\n  })\n  @ApiResponse({ status: 200, description: 'Post deleted successfully' })\n  @ApiResponse({ status: 404, description: 'Post not found' })\n  // This method cascades and removes relevant relationships between posts and tags NOT the actual tags\n  @Delete()\n  public delete(@Query('id', ParseIntPipe) id: number) {\n    return this.postsService.delete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_PostsModule_imports\n\n\n\n\nTagsModule\n\nTagsModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nTagsModule->PostsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            TagsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsController } from './posts.controller';\nimport { PostsService } from './providers/posts.service';\nimport { UsersModule } from 'src/users/users.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Post } from './post.entity';\nimport { MetaOption } from 'src/meta-options/meta-option.entity';\nimport { TagsModule } from 'src/tags/tags.module';\n\n// Import entire module not only a service (view users module exports key)\n@Module({\n  controllers: [PostsController],\n  providers: [PostsService],\n  imports: [\n    UsersModule,\n    TagsModule,\n    TypeOrmModule.forFeature([Post, MetaOption]),\n  ], // Import the post entity, for feature is responsible to create tables corresponding to these entities inside the db\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/providers/posts.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service responsible for handling post-related operations.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, postsRepository: Repository, metaOptionsRepository: Repository, tagsService: TagsService)\n                    \n                \n                        \n                            \n                                Defined in src/posts/providers/posts.service.ts:21\n                            \n                        \n\n                \n                    \n                            Constructor to inject dependencies.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service to handle user-related operations.\n\n                                                        \n                                                \n                                                \n                                                        postsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Repository for managing Post entities.\n\n                                                        \n                                                \n                                                \n                                                        metaOptionsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Repository for managing MetaOption entities.\n\n                                                        \n                                                \n                                                \n                                                        tagsService\n                                                  \n                                                        \n                                                                        TagsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service for handling tag-related operations.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createPostDto: CreatePostDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:64\n                        \n                    \n\n\n            \n                \n                        Creates a new post.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    DTO containing post creation details.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The newly created post.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:177\n                        \n                    \n\n\n            \n                \n                        Deletes a post from the database.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the post to delete.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                An object indicating the deletion status.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:46\n                        \n                    \n\n\n            \n                \n                        Retrieves all posts along with their meta options.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the user requesting the posts.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                A list of posts with related meta options.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(patchPostDto: PatchPostDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:122\n                        \n                    \n\n\n            \n                \n                        Updates an existing post.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                patchPostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    DTO containing fields to update.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The updated post.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Body,\n  Injectable,\n  NotFoundException,\n  RequestTimeoutException,\n} from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users.service';\nimport { CreatePostDto } from '../dto/create-post.dto';\nimport { Repository } from 'typeorm';\nimport { Post } from '../post.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { MetaOption } from 'src/meta-options/meta-option.entity';\nimport { TagsService } from 'src/tags/providers/tags.service';\nimport { PatchPostDto } from '../dto/patch-post.dto';\n\n/**\n * Service responsible for handling post-related operations.\n */\n@Injectable()\nexport class PostsService {\n  /**\n   * Constructor to inject dependencies.\n   * @param usersService Service to handle user-related operations.\n   * @param postsRepository Repository for managing Post entities.\n   * @param metaOptionsRepository Repository for managing MetaOption entities.\n   * @param tagsService Service for handling tag-related operations.\n   */\n  constructor(\n    private readonly usersService: UsersService,\n\n    @InjectRepository(Post)\n    private readonly postsRepository: Repository, // Only add repositories for 1-1 relationships so that it doesnt become crowded\n\n    @InjectRepository(MetaOption)\n    private readonly metaOptionsRepository: Repository,\n\n    private readonly tagsService: TagsService,\n  ) {}\n\n  /**\n   * Retrieves all posts along with their meta options.\n   * @param userId The ID of the user requesting the posts.\n   * @returns A list of posts with related meta options.\n   */\n  public async findAll(userId: string) {\n    return await this.postsRepository.find({\n      relations: { metaOptions: true },\n    });\n\n    // Get meta options along with the posts\n    // return await this.postsRepository.find({\n    //   relations: {\n    //     metaOptions: true,\n    //   },\n    // });\n  }\n\n  /**\n   * Creates a new post.\n   * @param createPostDto DTO containing post creation details.\n   * @returns The newly created post.\n   */\n  public async create(@Body() createPostDto: CreatePostDto) {\n    const author = await this.usersService.findOneById(createPostDto.authorId);\n    const tags = await this.tagsService.findMultipleTags(createPostDto.tags);\n\n    // Use the spread operator to create a shallow copy of createPostDto, meaning a new object is passed to create()\n    const post = this.postsRepository.create({\n      ...createPostDto,\n      author,\n      tags,\n    }); // Only use await for the save method because it returns a promise\n\n    return await this.postsRepository.save(post);\n  }\n\n  /*\n   public async delete(id: number) {\n    // Start a transaction to handle both deletes atomically\n    const queryRunner =\n      this.postsRepository.manager.connection.createQueryRunner();\n    await queryRunner.startTransaction();\n\n    try {\n      // Find the post (with related metaOptions loaded)\n      const post = await this.postsRepository.findOne({\n        where: { id },\n        relations: ['metaOptions'],\n      });\n      if (!post) {\n        throw new Error('Post not found');\n      }\n\n      // Delete the post (cascade will handle the metaOption deletion automatically)\n      await queryRunner.manager.delete(Post, id); // Use delete instead of remove\n\n      // Commit the transaction if everything is successful\n      await queryRunner.commitTransaction();\n\n      // Return a success response\n      return { deleted: true, id };\n    } catch (error) {\n      // If any error occurs, rollback the transaction\n      await queryRunner.rollbackTransaction();\n\n      // Log the error and return a failure response\n      console.error(error);\n      return { deleted: false, message: error.message };\n    } finally {\n      // Release the query runner (important for clean-up)\n      await queryRunner.release();\n    }\n  }\n*/\n\n  /**\n   * Updates an existing post.\n   * @param patchPostDto DTO containing fields to update.\n   * @returns The updated post.\n   */\n  public async update(@Body() patchPostDto: PatchPostDto) {\n    let tags = undefined;\n    let post = undefined;\n\n    try {\n      tags = await this.tagsService.findMultipleTags(patchPostDto.tags);\n    } catch (error) {\n      throw new RequestTimeoutException(\n        'Unable to process your request at the moment. Please try later',\n      );\n    }\n\n    /**\n     * Number of tags need to be equal\n     */\n\n    if (!tags || tags.length !== patchPostDto.tags.length) {\n      throw new BadRequestException('Please check your tag IDs.');\n    }\n    try {\n      post = await this.postsRepository.findOneBy({ id: patchPostDto.id });\n    } catch (error) {\n      throw new RequestTimeoutException(\n        'Unable to process your request at the moment. Please try later',\n      );\n    }\n    if (!post) {\n      throw new NotFoundException(\"This post doesn't exist.\");\n    }\n\n    post.title = patchPostDto.title ?? post.title;\n    post.content = patchPostDto.content ?? post.content;\n    post.status = patchPostDto.status ?? post.status;\n    post.postType = patchPostDto.postType ?? post.postType;\n    post.slug = patchPostDto.slug ?? post.slug;\n    post.featuredImageUrl =\n      patchPostDto.featuredImageUrl ?? post.featuredImageUrl;\n    post.publishOn = patchPostDto.publishOn ?? post.publishOn;\n    post.tags = tags;\n\n    try {\n      await this.postsRepository.save(post);\n    } catch (error) {\n      throw new RequestTimeoutException(\n        'Unable to process your request at the moment. Please try later',\n      );\n    }\n    return post;\n  }\n\n  /**\n   * Deletes a post from the database.\n   * @param id The ID of the post to delete.\n   * @returns An object indicating the deletion status.\n   */\n  public async delete(id: number) {\n    await this.postsRepository.delete(id);\n    return { deleted: true, id };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Tag.html":{"url":"entities/Tag.html","title":"entity - Tag","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Tag\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tag.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity representing a tag.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createDate\n                            \n                            \n                                    \n                                deletedAt\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                featuredImage\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                posts\n                            \n                            \n                                    \n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                updateDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:91\n                        \n                    \n\n            \n                \n                    Timestamp indicating when the tag was created.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:103\n                        \n                    \n\n            \n                \n                    Timestamp indicating when the tag was soft deleted.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:55\n                        \n                    \n\n            \n                \n                    Optional description of the tag.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        featuredImage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:76\n                        \n                    \n\n            \n                \n                    URL of the featured image for the tag.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:21\n                        \n                    \n\n            \n                \n                    Unique identifier for the tag.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:33\n                        \n                    \n\n            \n                \n                    Name of the tag.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, post => post.tags, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:84\n                        \n                    \n\n            \n                \n                    Many-to-many relationship with posts.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:65\n                        \n                    \n\n            \n                \n                    JSON metadata schema for additional tag details.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 512, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:45\n                        \n                    \n\n            \n                \n                    URL-friendly slug for the tag.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:97\n                        \n                    \n\n            \n                \n                    Timestamp indicating when the tag was last updated.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Post } from 'src/posts/post.entity';\nimport {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  ManyToMany,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n/**\n * Entity representing a tag.\n */\n@Entity()\nexport class Tag {\n  /**\n   * Unique identifier for the tag.\n   */\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  /**\n   * Name of the tag.\n   * @example \"Technology\"\n   */\n  @Column({\n    type: 'varchar',\n    length: 256,\n    nullable: false,\n    unique: true,\n  })\n  name: string;\n\n  /**\n   * URL-friendly slug for the tag.\n   * @example \"technology\"\n   */\n  @Column({\n    type: 'varchar',\n    length: 512,\n    nullable: false,\n    unique: true,\n  })\n  slug: string;\n\n  /**\n   * Optional description of the tag.\n   * @example \"Posts related to technology and innovations\"\n   */\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  description: string;\n\n  /**\n   * JSON metadata schema for additional tag details.\n   * @example '{\"color\": \"blue\"}'\n   */\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  schema: string;\n\n  /**\n   * URL of the featured image for the tag.\n   * @example \"https://example.com/images/tag-image.jpg\"\n   */\n  @Column({\n    type: 'varchar',\n    length: 1024,\n    nullable: true,\n  })\n  featuredImage: string;\n\n  /**\n   * Many-to-many relationship with posts.\n   */\n  @ManyToMany(() => Post, (post) => post.tags, {\n    onDelete: 'CASCADE',\n  })\n  posts: Post[];\n\n  // https://orkhan.gitbook.io/typeorm/docs/decorator-reference\n  /**\n   * Timestamp indicating when the tag was created.\n   */\n  @CreateDateColumn()\n  createDate: Date;\n\n  /**\n   * Timestamp indicating when the tag was last updated.\n   */\n  @UpdateDateColumn()\n  updateDate: Date;\n\n  /**\n   * Timestamp indicating when the tag was soft deleted.\n   */\n  @DeleteDateColumn()\n  deletedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TagsController.html":{"url":"controllers/TagsController.html","title":"controller - TagsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TagsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tags.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tags\n            \n\n\n            \n                Description\n            \n            \n                Controller for handling tag-related API requests.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                create\n                            \n                            \n                                    \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    \n                                    Public\n                                    Async\n                                softDelete\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createTagDto: CreateTagDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:29\n                        \n                    \n\n\n            \n                \n                        Creates a new tag.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createTagDto\n                                            \n                                                            CreateTagDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    DTO containing tag data.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The created tag.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete()\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:39\n                        \n                    \n\n\n            \n                \n                        Deletes a tag by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the tag to delete.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                An object indicating whether the deletion was successful.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Async\n                        softDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    softDelete(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('soft-delete')\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:49\n                        \n                    \n\n\n            \n                \n                        Soft deletes a tag by its ID, marking it as deleted without removing it from the database.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the tag to soft delete.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                An object indicating whether the soft deletion was successful.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  ParseIntPipe,\n  Post,\n  Query,\n} from '@nestjs/common';\nimport { TagsService } from './providers/tags.service';\nimport { CreateTagDto } from './dtos/create-tag.dto';\n\n/**\n * Controller for handling tag-related API requests.\n */\n@Controller('tags')\nexport class TagsController {\n  /**\n   * Injects the TagsService.\n   * @param tagsService The service responsible for tag operations.\n   */\n  constructor(private readonly tagsService: TagsService) {}\n\n  /**\n   * Creates a new tag.\n   * @param createTagDto DTO containing tag data.\n   * @returns The created tag.\n   */\n  @Post()\n  public create(@Body() createTagDto: CreateTagDto) {\n    return this.tagsService.create(createTagDto);\n  }\n\n  /**\n   * Deletes a tag by its ID.\n   * @param id The ID of the tag to delete.\n   * @returns An object indicating whether the deletion was successful.\n   */\n  @Delete()\n  public async delete(@Query('id', ParseIntPipe) id: number) {\n    return this.tagsService.delete(id);\n  }\n\n  /**\n   * Soft deletes a tag by its ID, marking it as deleted without removing it from the database.\n   * @param id The ID of the tag to soft delete.\n   * @returns An object indicating whether the soft deletion was successful.\n   */\n  @Delete('soft-delete')\n  public async softDelete(@Query('id', ParseIntPipe) id: number) {\n    // Route is /tags/soft-delete\n    return this.tagsService.softRemove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TagsModule.html":{"url":"modules/TagsModule.html","title":"module - TagsModule","body":"\n                   \n\n\n\n\n    Modules\n    TagsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_exports\n\n\n\ncluster_TagsModule_providers\n\n\n\n\nTagsService \n\nTagsService \n\n\n\nTagsModule\n\nTagsModule\n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tags/tags.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TagsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TagsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TagsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TagsController } from './tags.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Tag } from './tag.entity';\nimport { TagsService } from './providers/tags.service';\n\n@Module({\n  controllers: [TagsController],\n  imports: [TypeOrmModule.forFeature([Tag])],\n  providers: [TagsService],\n  exports: [TagsService],\n})\nexport class TagsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TagsService.html":{"url":"injectables/TagsService.html","title":"injectable - TagsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TagsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/providers/tags.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for handling tag-related operations.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                findMultipleTags\n                            \n                            \n                                    Public\n                                    Async\n                                softRemove\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tagsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/tags/providers/tags.service.ts:13\n                            \n                        \n\n                \n                    \n                            Injects the repository for interacting with the Tag entity.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        tagsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The TypeORM repository for the Tag entity.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createTagDto: CreateTagDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:28\n                        \n                    \n\n\n            \n                \n                        Creates a new tag.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createTagDto\n                                            \n                                                            CreateTagDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Data Transfer Object (DTO) containing tag details.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The created tag.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:53\n                        \n                    \n\n\n            \n                \n                        Deletes a tag by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the tag to delete.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                An object indicating whether the deletion was successful.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findMultipleTags\n                        \n                    \n                \n            \n            \n                \n                        \n                    findMultipleTags(tags: number[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:38\n                        \n                    \n\n\n            \n                \n                        Finds multiple tags based on an array of tag IDs.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tags\n                                            \n                                                        number[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    An array of tag IDs.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                A list of found tags.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        softRemove\n                        \n                    \n                \n            \n            \n                \n                        \n                    softRemove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:74\n                        \n                    \n\n\n            \n                \n                        Soft deletes a tag by its ID, marking it as deleted without removing it from the database.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the tag to soft delete.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                An object indicating whether the soft deletion was successful.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateTagDto } from '../dtos/create-tag.dto';\nimport { In, Repository } from 'typeorm';\nimport { Tag } from '../tag.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n//npx nest generate service tags/providers/tags --flat --no-spec\n\n/**\n * Service for handling tag-related operations.\n */\n@Injectable()\nexport class TagsService {\n  /**\n   * Injects the repository for interacting with the `Tag` entity.\n   * @param tagsRepository The TypeORM repository for the `Tag` entity.\n   */\n  constructor(\n    @InjectRepository(Tag)\n    private readonly tagsRepository: Repository,\n  ) {}\n\n  /**\n   * Creates a new tag.\n   * @param createTagDto Data Transfer Object (DTO) containing tag details.\n   * @returns The created tag.\n   */\n  public async create(createTagDto: CreateTagDto) {\n    const tag = this.tagsRepository.create(createTagDto);\n    return await this.tagsRepository.save(tag);\n  }\n\n  /**\n   * Finds multiple tags based on an array of tag IDs.\n   * @param tags An array of tag IDs.\n   * @returns A list of found tags.\n   */\n  public async findMultipleTags(tags: number[]) {\n    const results = await this.tagsRepository.find({\n      where: {\n        id: In(tags), // Finds all the tags with IDs within this array.\n      },\n    });\n\n    return results;\n  }\n\n  /**\n   * Deletes a tag by its ID.\n   * @param id The ID of the tag to delete.\n   * @returns An object indicating whether the deletion was successful.\n   */\n  public async delete(id: number) {\n    // Check if the tag exists before deleting\n    const tag = await this.tagsRepository.findOne({\n      where: { id },\n    });\n\n    if (!tag) {\n      return { deleted: false, message: 'Tag not found' };\n    }\n\n    // Proceed with deletion\n    await this.tagsRepository.delete(id);\n\n    return { deleted: true, id };\n  }\n\n  /**\n   * Soft deletes a tag by its ID, marking it as deleted without removing it from the database.\n   * @param id The ID of the tag to soft delete.\n   * @returns An object indicating whether the soft deletion was successful.\n   */\n  public async softRemove(id: number) {\n    await this.tagsRepository.softDelete(id);\n    return { deleted: true, id };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a user entity in the database.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                posts\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:46\n                        \n                    \n\n            \n                \n                    The email address of the user.\nMust be unique.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:23\n                        \n                    \n\n            \n                \n                    The first name of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:13\n                        \n                    \n\n            \n                \n                    Unique identifier for the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:34\n                        \n                    \n\n            \n                \n                    The last name of the user.\nThis field is optional.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:56\n                        \n                    \n\n            \n                \n                    The password of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, post => post.author)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:62\n                        \n                    \n\n            \n                \n                    The list of posts authored by the user.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Post } from 'src/posts/post.entity';\nimport { Column, Entity, OneToMany, PrimaryGeneratedColumn } from 'typeorm';\n\n/**\n * Represents a user entity in the database.\n */\n@Entity()\nexport class User {\n  /**\n   * Unique identifier for the user.\n   */\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  /**\n   * The first name of the user.\n   */\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n  })\n  firstName: string;\n\n  /**\n   * The last name of the user.\n   * This field is optional.\n   */\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: true,\n  })\n  lastName: string;\n\n  /**\n   * The email address of the user.\n   * Must be unique.\n   */\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n    unique: true,\n  })\n  email: string;\n\n  /**\n   * The password of the user.\n   */\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n  })\n  password: string;\n\n  /**\n   * The list of posts authored by the user.\n   */\n  @OneToMany(() => Post, (post) => post.author)\n  posts: Post[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n            \n                Description\n            \n            \n                Controller for handling user-related requests.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createManyUsers\n                            \n                            \n                                    \n                                    Public\n                                createUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUserById\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUsers\n                            \n                            \n                                    \n                                    Public\n                                patchUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createManyUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createManyUsers(createManyUsersDto: CreateManyUsersDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('create-many')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:107\n                        \n                    \n\n\n            \n                \n                        Creates multiple users.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createManyUsersDto\n                                            \n                                                            CreateManyUsersDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data to create multiple users.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The created users.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:91\n                        \n                    \n\n\n            \n                \n                        Creates a new user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nData required to create a user.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The created user.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUserById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Fetch a single user by ID'})@ApiQuery({name: 'id', type: 'string', required: true, description: 'The ID of the user'})@ApiResponse({status: 200, description: 'User details retrieved successfully'})@ApiResponse({status: 404, description: 'User not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:49\n                        \n                    \n\n\n            \n                \n                        Retrieves a user by ID from query parameters (e.g., id=5).\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user to fetch.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The user details.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getUserParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id?')@ApiOperation({summary: 'Fetch all registered users with optional pagination'})@ApiResponse({status: 200, description: 'Users retrieved successfully'})@ApiQuery({name: 'limit', type: 'number', required: false, description: 'The number of entries returned per query', example: 10})@ApiQuery({name: 'page', type: 'number', required: false, example: 1})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:77\n                        \n                    \n\n\n            \n                \n                        Retrieves a list of users with pagination.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing filter parameters.\n\n\n                                            \n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nNumber of users per page.\n\n\n                                            \n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nPage number.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A list of users.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        patchUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchUser(patchUserDto: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:117\n                        \n                    \n\n\n            \n                \n                        Updates user information.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nData containing updates for the user.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PatchUserDto\n\n                        \n                            \n                                The updated user.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  Param,\n  Post,\n  Query,\n  ParseIntPipe,\n  DefaultValuePipe,\n  Patch,\n} from '@nestjs/common';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { GetUsersParamDto } from './dtos/get-users-param.dto';\nimport { PatchUserDto } from './dtos/patch-user.dto';\nimport { UsersService } from './providers/users.service';\nimport { ApiOperation, ApiQuery, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { CreateManyUsersDto } from './dtos/create-many-users.dto';\n\n/**\n * Controller for handling user-related requests.\n */\n@Controller('users')\n@ApiTags('Users')\nexport class UsersController {\n  /**\n   * Constructs the UsersController.\n   * @param usersService - The service handling user operations.\n   */\n  constructor(private readonly usersService: UsersService) {}\n\n  /**\n   * Retrieves a user by ID from query parameters (e.g., `id=5`).\n   * @param id - The ID of the user to fetch.\n   * @returns The user details.\n   */\n  @Get()\n  @ApiOperation({ summary: 'Fetch a single user by ID' })\n  @ApiQuery({\n    name: 'id',\n    type: 'string',\n    required: true,\n    description: 'The ID of the user',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'User details retrieved successfully',\n  })\n  @ApiResponse({ status: 404, description: 'User not found' })\n  public getUserById(@Query('id') id: string) {\n    const userId = parseInt(id, 10);\n    if (isNaN(userId)) {\n      return { error: 'Invalid ID format' };\n    }\n    return this.usersService.findOneById(userId);\n  }\n\n  /**\n   * Retrieves a list of users with pagination.\n   * @param getUserParamDto - DTO containing filter parameters.\n   * @param limit - Number of users per page.\n   * @param page - Page number.\n   * @returns A list of users.\n   */\n  @Get('/:id?')\n  @ApiOperation({\n    summary: 'Fetch all registered users with optional pagination',\n  })\n  @ApiResponse({ status: 200, description: 'Users retrieved successfully' })\n  @ApiQuery({\n    name: 'limit',\n    type: 'number',\n    required: false,\n    description: 'The number of entries returned per query',\n    example: 10,\n  })\n  @ApiQuery({ name: 'page', type: 'number', required: false, example: 1 })\n  public getUsers(\n    @Param() getUserParamDto: GetUsersParamDto,\n    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\n  ) {\n    return this.usersService.findAll(getUserParamDto, limit, page);\n  }\n\n  /**\n   * Creates a new user.\n   * @param createUserDto - Data required to create a user.\n   * @returns The created user.\n   */\n  @Post()\n  public createUser(\n    // Without the global validation\n    // @Body(new ValidationPipe()) createUserDto: CreateUserDto,\n\n    // With\n    @Body() createUserDto: CreateUserDto,\n  ) {\n    return this.usersService.createUser(createUserDto);\n  }\n\n  /**\n   * Creates multiple users.\n   * @param createManyUsersDto - The data to create multiple users.\n   * @returns The created users.\n   */\n  @Post('create-many')\n  public createManyUsers(@Body() createManyUsersDto: CreateManyUsersDto) {\n    return this.usersService.createMany(createManyUsersDto);\n  }\n\n  /**\n   * Updates user information.\n   * @param patchUserDto - Data containing updates for the user.\n   * @returns The updated user.\n   */\n  @Patch()\n  public patchUser(@Body() patchUserDto: PatchUserDto) {\n    return patchUserDto;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersCreateManyProvider.html":{"url":"injectables/UsersCreateManyProvider.html","title":"injectable - UsersCreateManyProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersCreateManyProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/users-create-many.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                Service responsible for handling bulk user creation.\nUtilizes a query runner for transaction-based insertion of multiple users.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createMany\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dataSource: DataSource)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/users-create-many.provider.ts:15\n                            \n                        \n\n                \n                    \n                            Constructor for UsersCreateManyProvider.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe TypeORM DataSource instance for database operations.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createMany\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMany(createManyUsersDto: CreateManyUsersDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users-create-many.provider.ts:29\n                        \n                    \n\n\n            \n                \n                        Creates multiple users in a transactional manner.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createManyUsersDto\n                                            \n                                                            CreateManyUsersDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing an array of user objects to be created.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Promise - A list of successfully created users.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ConflictException,\n  Injectable,\n  RequestTimeoutException,\n} from '@nestjs/common';\nimport { User } from '../user.entity';\nimport { DataSource } from 'typeorm';\nimport { CreateManyUsersDto } from '../dtos/create-many-users.dto';\n\n/**\n * Service responsible for handling bulk user creation.\n * Utilizes a query runner for transaction-based insertion of multiple users.\n */\n@Injectable()\nexport class UsersCreateManyProvider {\n  /**\n   * Constructor for UsersCreateManyProvider.\n   * @param dataSource - The TypeORM DataSource instance for database operations.\n   */\n  constructor(private readonly dataSource: DataSource) {}\n\n  /**\n   * Creates multiple users in a transactional manner.\n   * @param createManyUsersDto - DTO containing an array of user objects to be created.\n   * @returns Promise - A list of successfully created users.\n   * @throws {RequestTimeoutException} - If unable to connect to the database.\n   * @throws {ConflictException} - If the transaction fails.\n   */\n  public async createMany(createManyUsersDto: CreateManyUsersDto) {\n    const newUsers: User[] = [];\n    const queryRunner = this.dataSource.createQueryRunner();\n\n    try {\n      // Establish connection and begin transaction\n      await queryRunner.connect();\n\n      // Start transaction\n      await queryRunner.startTransaction();\n    } catch (error) {\n      throw new RequestTimeoutException('Could not connect to the database');\n    }\n\n    try {\n      // Iterate over users and save each one\n      for (const user of createManyUsersDto.users) {\n        const newUser = queryRunner.manager.create(User, user);\n        const result = await queryRunner.manager.save(newUser);\n        newUsers.push(result);\n      }\n\n      // Commit the transaction upon successful insertion\n      await queryRunner.commitTransaction();\n    } catch (error) {\n      // Rollback transaction in case of failure\n      await queryRunner.rollbackTransaction();\n      throw new ConflictException('Could not complete the transaction', {\n        description: String(error),\n      });\n    } finally {\n      try {\n        // Release the query runner connection\n        await queryRunner.release();\n      } catch (error) {\n        throw new RequestTimeoutException('Could not release the connection', {\n          description: String(error),\n        });\n      }\n    }\n\n    return newUsers;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersCreateManyProvider\n\nUsersCreateManyProvider\n\nUsersModule -->\n\nUsersCreateManyProvider->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersCreateManyProvider\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './providers/users.service';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './user.entity';\nimport { ConfigModule } from '@nestjs/config';\nimport { UsersCreateManyProvider } from './providers/users-create-many.provider';\nimport profileConfig from './config/profile.config';\n\n// We can only export providers, never controllers\n@Module({\n  controllers: [UsersController],\n  providers: [UsersService, UsersCreateManyProvider],\n  exports: [UsersService],\n  // imports: [AuthModule], will cause a circular dependency\n  imports: [\n    forwardRef(() => AuthModule),\n    TypeOrmModule.forFeature([User]),\n    ConfigModule.forFeature(profileConfig),\n  ],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for managing users.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createMany\n                            \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    Public\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findOneById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, usersRepository: Repository, profileConfiguration: ConfigType<>, dataSource: DataSource, usersCreateManyProvider: UsersCreateManyProvider)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/users.service.ts:26\n                            \n                        \n\n                \n                    \n                            Constructs the UsersService with necessary dependencies.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nHandles authentication-related operations.\n\n\n                                                        \n                                                \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe repository for managing users in the database.\n\n\n                                                        \n                                                \n                                                \n                                                        profileConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInjected profile configuration.\n\n\n                                                        \n                                                \n                                                \n                                                        dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe database connection source.\n\n\n                                                        \n                                                \n                                                \n                                                        usersCreateManyProvider\n                                                  \n                                                        \n                                                                        UsersCreateManyProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to handle bulk user creation.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createMany\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMany(createManyUsersDto: CreateManyUsersDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:132\n                        \n                    \n\n\n            \n                \n                        Creates multiple users in batch.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createManyUsersDto\n                                            \n                                                            CreateManyUsersDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing multiple user records.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The created users.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:102\n                        \n                    \n\n\n            \n                \n                        Creates a new user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nData for creating the user.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The created user.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(getUserParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:57\n                        \n                    \n\n\n            \n                \n                        Retrieves all users with optional filters.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing filter criteria.\n\n\n                                            \n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe number of users to retrieve.\n\n\n                                            \n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe page number.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                A list of users.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:82\n                        \n                    \n\n\n            \n                \n                        Retrieves a user by ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe unique user ID.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The user details.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  forwardRef,\n  HttpException,\n  HttpStatus,\n  Inject,\n  Injectable,\n  NotFoundException,\n  RequestTimeoutException,\n} from '@nestjs/common';\nimport { GetUsersParamDto } from '../dtos/get-users-param.dto';\nimport { AuthService } from 'src/auth/providers/auth.service';\nimport { DataSource, Repository } from 'typeorm';\nimport { User } from '../user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { CreateUserDto } from '../dtos/create-user.dto';\nimport { ConfigType } from '@nestjs/config';\nimport profileConfig from '../config/profile.config';\nimport { UsersCreateManyProvider } from './users-create-many.provider';\nimport { CreateManyUsersDto } from '../dtos/create-many-users.dto';\n\n/**\n * Service for managing users.\n */\n@Injectable()\nexport class UsersService {\n  /**\n   * Constructs the UsersService with necessary dependencies.\n   * @param authService - Handles authentication-related operations.\n   * @param usersRepository - The repository for managing users in the database.\n   * @param profileConfiguration - Injected profile configuration.\n   * @param dataSource - The database connection source.\n   * @param usersCreateManyProvider - Service to handle bulk user creation.\n   */\n  constructor(\n    @Inject(forwardRef(() => AuthService))\n    private readonly authService: AuthService,\n\n    @InjectRepository(User)\n    private usersRepository: Repository,\n\n    @Inject(profileConfig.KEY)\n    private readonly profileConfiguration: ConfigType,\n\n    private readonly dataSource: DataSource,\n    private readonly usersCreateManyProvider: UsersCreateManyProvider,\n  ) {}\n\n  /**\n   * Retrieves all users with optional filters.\n   * @param getUserParamDto - DTO containing filter criteria.\n   * @param limit - The number of users to retrieve.\n   * @param page - The page number.\n   * @returns A list of users.\n   * @throws {HttpException} If the endpoint is deprecated.\n   */\n  public findAll(\n    getUserParamDto: GetUsersParamDto,\n    limit: number,\n    page: number,\n  ) {\n    throw new HttpException(\n      {\n        status: HttpStatus.MOVED_PERMANENTLY,\n        error: \"This endpoint doesn't exist\",\n        fileName: 'users.service.ts',\n        lineNumber: 71,\n      },\n      HttpStatus.MOVED_PERMANENTLY,\n      {\n        description: 'The endpoint was permanently moved',\n      },\n    );\n  }\n\n  /**\n   * Retrieves a user by ID.\n   * @param id - The unique user ID.\n   * @returns The user details.\n   * @throws {NotFoundException} If the user is not found.\n   */\n  public async findOneById(id: number) {\n    let user;\n    try {\n      user = await this.usersRepository.findOneBy({ id });\n    } catch (error) {\n      throw new RequestTimeoutException('Database connection error');\n    }\n\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n    return user;\n  }\n\n  /**\n   * Creates a new user.\n   * @param createUserDto - Data for creating the user.\n   * @returns The created user.\n   * @throws {BadRequestException} If the user already exists.\n   */\n  public async createUser(createUserDto: CreateUserDto) {\n    let existingUser;\n    try {\n      existingUser = await this.usersRepository.findOne({\n        where: { email: createUserDto.email },\n      });\n    } catch (error) {\n      throw new RequestTimeoutException('Database connection error');\n    }\n\n    if (existingUser) {\n      throw new BadRequestException('User already exists.');\n    }\n\n    let newUser = this.usersRepository.create(createUserDto);\n\n    try {\n      newUser = await this.usersRepository.save(newUser);\n    } catch (error) {\n      throw new RequestTimeoutException('Database connection error');\n    }\n\n    return newUser;\n  }\n\n  /**\n   * Creates multiple users in batch.\n   * @param createManyUsersDto - DTO containing multiple user records.\n   * @returns The created users.\n   */\n  public async createMany(createManyUsersDto: CreateManyUsersDto) {\n    return await this.usersCreateManyProvider.createMany(createManyUsersDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.module.ts\n            \n            variable\n            ENV\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/providers/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/meta-options/dtos/create-post-meta-options.dto.ts\n            \n            class\n            CreatePostMetaOptionsDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/meta-options/meta-option.entity.ts\n            \n            entity\n            MetaOption\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/meta-options/meta-options.controller.ts\n            \n            controller\n            MetaOptionsController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/meta-options/providers/meta-options.service.ts\n            \n            injectable\n            MetaOptionsService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/posts/dto/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                100 %\n                (12/12)\n            \n        \n        \n            \n                \n                src/posts/dto/patch-post.dto.ts\n            \n            class\n            PatchPostDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/posts/post.entity.ts\n            \n            entity\n            Post\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/posts/providers/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/tags/dtos/create-tag.dto.ts\n            \n            class\n            CreateTagDto\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/tags/providers/tags.service.ts\n            \n            injectable\n            TagsService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/tags/tag.entity.ts\n            \n            entity\n            Tag\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/tags/tags.controller.ts\n            \n            controller\n            TagsController\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/users/dtos/create-many-users.dto.ts\n            \n            class\n            CreateManyUsersDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/users/dtos/get-users-param.dto.ts\n            \n            class\n            GetUsersParamDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/users/dtos/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/users/providers/users-create-many.provider.ts\n            \n            injectable\n            UsersCreateManyProvider\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/users/providers/users.service.ts\n            \n            injectable\n            UsersService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/users/user.entity.ts\n            \n            entity\n            User\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                100 %\n                (6/6)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.23\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.2.2\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/mapped-types : ^2.0.5\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.3.0\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            joi : ^17.12.2\n        \n            pg : ^8.11.5\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            PostStatus   (src/.../post-status.enum.ts)\n                        \n                        \n                            PostType   (src/.../post-type.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/posts/enums/post-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PostStatus\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n            \n        \n\n    src/posts/enums/post-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PostType\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                        Bootstrap function for initializing and running the NestJS application.\nThis function sets up the app with global validation pipes and Swagger API documentation.\n\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\nCompodoc Documentation\nScript\nExample :$ npm run docLet me name this as doc.\nTo see the coverage\nExample :$ http://localhost:3001/coverage.htmlIt should be a comma over here.\nNow this script itself a little bit verbose and lengthy, and I'll try to explain all the parts of the\nscript as we go.\nSo first of all, we need to use NPCs and along with Compo Doc in order to generate the Compo Doc documentation.\nSo we use at the rate compo doc, which is the name of the package.\nSo compo doc slash compo doc.\nSo this basically triggers the compo doc package for us.\nAnd then we need to provide it certain configurations.\nThe first one is the path to the pts config file.\nSo hyphen path to the pts config file TTS config file is within the root of the project itself.\nSo we use tsconfig.json.\nSo it's going to pick up this particular config file which is there in the root of our project.\nSo this particular TTS config file over here.\nNow once we have provided the TTS config file, the next flag that we want to add is the s flag.\nNow what this flag does is that it instructs compared to serve generated documentation on a port.\nNow, having said that, I want to have a specific port number as well.\nSo I use hyphen hyphen port.\nAnd let's serve the documentation on port 3001.\nWith that, I also want to enable Compo doc to watch for changes within my code.\nSo whenever I'm writing any new code, it should watch for changes and regenerate the documentation\nwhenever needed.\nFinally, I want to give it a specific directory for generating the documentation so we can use a hyphen\nd flag, which instructs combo doc to generate the documentation within a specific directory, which\nwe can pass as an argument.\nSo here I'm saying within the root of my project, just use the documentation directory to generate\nyour documentation.\nThe details can be seen at localhost:3001\nAlways define both sides of the relationships in many to many relationships i.e tags and posts\nGenerate a service\nExample :$ npx nest generate service tags/providers/tags --flat --no-specGenerate a module\nExample :$ npx nest generate module authGenerate a controller\nExample :$ npx nest generate controller auth --no-specGenerate a provider\nExample :$ npx nest generate pr users/providers/users-create=many.provider --flat --no-specPrettier\nExample :$ npx prettier --write .\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MetaOptionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TagsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_exports\n\n\n\ncluster_TagsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nPostsModule -->\n\nTagsModule->PostsModule\n\n\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nTagsService \n\nTagsService \n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\nUsersCreateManyProvider\n\nUsersCreateManyProvider\n\nUsersModule -->\n\nUsersCreateManyProvider->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        6 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    7 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    8 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ENV   (src/.../app.module.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENV\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.NODE_ENV\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
