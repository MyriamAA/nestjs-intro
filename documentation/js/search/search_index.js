var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.07,1,2.274]],["body/controllers/AppController.html",[0,1.88,1,3.995,2,1.705,3,0.405,4,0.357,5,0.31,6,4.294,7,0.477,8,0.026,9,1.064,10,3.541,11,4.294,12,0.405,13,0.018,14,2.827,15,1.951,16,0.022,17,0.022]],["title/modules/AppModule.html",[18,1.07,19,2.274]],["body/modules/AppModule.html",[1,3.449,2,1.514,3,0.26,4,0.229,5,0.199,7,0.53,8,0.026,9,0.684,10,3.363,11,2.762,12,0.26,13,0.012,16,0.017,17,0.017,18,1.622,19,4.514,20,1.444,21,1.255,22,1.677,23,1.677,24,1.444,25,2.651,26,1.677,27,2.762,28,2.762,29,2.762,30,3.363,31,3.668,32,3.668,33,3.363,34,3.102,35,2.315,36,1.677,37,1.553,38,2.429,39,2.875,40,3.266,41,3.266,42,3.266,43,3.266,44,1.983,45,1.345,46,3.266,47,1.444,48,1.553,49,3.266,50,3.812,51,5.843,52,2.181,53,4.509,54,3.266,55,2.762,56,3.266,57,2.429,58,4.509,59,3.266,60,4.509,61,3.266,62,1.677,63,3.841,64,2.762,65,2.762,66,3.266,67,3.266,68,2.181,69,2.762,70,3.266,71,3.266,72,3.266,73,1.173,74,3.266,75,3.266,76,3.266,77,3.266,78,3.266,79,2.762,80,2.762,81,1.983,82,3.266,83,0.549,84,3.266,85,1.553,86,0.96,87,3.266,88,3.266,89,3.266,90,3.266,91,3.266,92,3.266,93,1.345,94,3.266,95,3.266,96,3.266,97,2.762,98,3.266,99,3.266,100,3.266,101,2.181,102,3.266,103,3.266,104,3.266,105,1.677,106,3.266,107,2.429,108,2.762,109,2.762]],["title/injectables/AppService.html",[10,1.896,110,1.001]],["body/injectables/AppService.html",[3,0.396,4,0.349,5,0.303,7,0.396,8,0.026,9,1.041,10,3.287,12,0.396,13,0.018,16,0.022,17,0.022,110,1.736,111,2.362,112,4.199,113,0.655,114,2.269,115,6.519,116,0.901,117,4.966,118,1.908,119,1.983,120,1.908,121,4.966,122,4.966]],["title/controllers/AuthController.html",[0,1.07,123,2.274]],["body/controllers/AuthController.html",[0,1.837,2,1.641,3,0.389,4,0.343,5,0.298,7,0.466,8,0.026,9,1.024,12,0.389,13,0.018,15,1.877,16,0.022,17,0.022,123,3.905,124,4.131,125,2.967,126,4.654,127,3.213,128,4.131,129,2.967,130,2.967,131,3.634,132,4.885,133,2.509,134,4.131,135,1.641,136,2.72]],["title/modules/AuthModule.html",[18,1.07,30,1.896]],["body/modules/AuthModule.html",[2,1.824,3,0.345,4,0.304,5,0.265,7,0.496,8,0.026,9,0.908,12,0.345,13,0.016,16,0.02,17,0.02,18,1.955,20,1.916,21,1.665,22,2.225,23,2.225,24,1.916,25,3.047,26,3.047,30,3.693,34,3.047,35,2.789,36,2.225,37,2.061,39,3.024,123,3.963,126,3.224,127,3.537,128,3.664,129,2.632,130,2.632,137,3.664,138,3.664,139,3.664,140,4.334,141,3.628,142,4.334,143,3.664,144,3.664,145,3.224,146,3.224]],["title/injectables/AuthService.html",[110,1.001,127,1.749]],["body/injectables/AuthService.html",[3,0.317,4,0.279,5,0.243,7,0.41,8,0.026,9,0.834,12,0.317,13,0.014,15,1.529,16,0.019,17,0.019,62,2.044,73,1.429,81,2.417,83,0.866,86,1.677,101,3.809,110,1.513,111,1.893,113,0.525,114,1.977,116,1.034,118,1.977,119,2.185,120,2.191,127,2.642,129,2.417,130,2.417,131,2.96,133,2.642,134,3.365,135,1.728,136,2.216,141,2.658,145,2.96,146,2.96,147,3.365,148,2.633,149,6.029,150,5.703,151,3.365,152,3.095,153,3.98,154,2.119,155,1.617,156,1.238,157,3.98,158,3.98,159,5.146,160,3.98,161,2.658,162,3.365,163,3.98,164,2.96,165,2.96,166,3.98,167,3.365,168,2.658,169,2.96,170,3.98,171,3.98,172,3.98]],["title/classes/CreateManyUsersDto.html",[13,0.012,173,1.896]],["body/classes/CreateManyUsersDto.html",[3,0.322,4,0.284,5,0.247,7,0.483,8,0.026,12,0.322,13,0.021,16,0.019,17,0.019,73,2.063,83,1.099,86,1.689,113,0.533,116,0.733,173,2.894,174,1.787,175,3.866,176,2.472,177,3.418,178,0.874,179,1.633,180,3.156,181,3.156,182,3.354,183,4.395,184,1.633,185,3.221,186,1.189,187,2.7,188,4.05,189,4.395,190,2.33,191,3.471,192,4.395,193,4.042,194,3.418,195,4.042,196,2.472,197,4.395,198,2.894,199,4.395,200,1.923,201,1.357,202,2.7,203,2.7,204,3.471,205,1.923,206,3.007]],["title/classes/CreatePostDto.html",[13,0.012,207,1.896]],["body/classes/CreatePostDto.html",[3,0.143,4,0.126,5,0.11,7,0.385,8,0.026,12,0.143,13,0.013,16,0.011,17,0.011,47,1.827,73,1.734,83,1.076,93,1.188,113,0.237,116,1.034,119,1.914,156,1.396,174,0.795,178,1.029,179,1.421,180,2.932,184,1.298,186,1.676,187,1.202,188,2.76,191,2.76,192,2.44,194,1.522,197,2.44,198,2.688,199,2.44,200,0.856,203,1.202,204,3.225,205,0.856,206,2.146,207,1.606,208,4.909,209,1.338,210,0.969,211,4.318,212,1.757,213,3.612,214,4.598,215,3.054,216,2.412,217,3.921,218,3.054,219,2.412,220,3.632,221,2.518,222,1.855,223,4.598,224,1.215,225,1.799,226,2.885,227,1.388,228,2.509,229,2.961,230,1.799,231,1.799,232,3.365,233,3.494,234,1.799,235,1.799,236,3.225,237,2.76,238,2.76,239,1.799,240,1.799,241,2.301,242,2.885,243,1.799,244,2.518,245,1.799,246,1.799,247,2.44,248,1.855,249,2.885,250,3.494,251,4.132,252,2.509,253,3.074,254,1.799,255,1.799,256,3.591,257,2.687,258,3.225,259,3.365,260,2.885,261,2.885,262,1.799,263,1.799,264,4.132,265,2.885,266,2.688,267,1.597,268,2.152,269,2.885,270,1.799,271,1.799,272,1.799,273,1.799,274,1.799,275,3.494,276,3.494,277,1.606,278,2.44,279,1.927,280,2.885,281,1.799,282,2.44,283,2.44,284,3.365,285,3.074,286,3.494,287,3.494,288,1.799,289,1.799,290,1.702,291,3.074,292,2.76,293,1.799,294,1.799,295,1.799,296,1.799,297,1.799,298,1.799,299,2.687,300,2.885,301,2.146,302,3.387,303,2.76,304,2.44,305,2.146,306,1.338,307,1.338,308,2.44,309,1.522,310,1.522,311,1.338,312,1.338,313,3.773,314,3.612,315,1.522,316,2.44,317,1.799,318,1.522,319,1.522,320,1.799,321,1.799,322,1.799,323,1.799,324,1.799,325,1.522,326,1.799,327,1.927,328,1.799,329,1.338,330,1.522,331,1.799,332,1.799,333,1.799,334,0.795,335,1.338,336,1.799,337,1.799]],["title/classes/CreatePostMetaOptionsDto.html",[13,0.012,241,1.896]],["body/classes/CreatePostMetaOptionsDto.html",[3,0.356,4,0.313,5,0.273,7,0.356,8,0.026,12,0.356,13,0.02,16,0.021,17,0.021,47,2.779,73,1.602,83,0.751,113,0.589,116,0.809,119,2.111,174,1.972,178,0.751,179,1.738,180,3.36,184,1.738,186,1.312,198,3.08,200,2.122,212,1.618,229,2.632,241,3.08,248,2.841,266,3.08,268,2.632,301,4.115,303,2.98,311,4.115,329,4.473,330,3.773,338,2.445,339,3.773,340,4.462,341,4.462,342,3.695]],["title/classes/CreateTagDto.html",[13,0.012,343,2.068]],["body/classes/CreateTagDto.html",[3,0.219,4,0.193,5,0.168,7,0.318,8,0.026,12,0.219,13,0.014,16,0.015,17,0.015,83,0.921,113,0.363,116,0.993,119,2.099,155,1.852,174,1.217,178,1.087,179,1.255,180,2.426,184,1.255,186,1.61,187,2.668,198,2.617,200,1.309,204,3.14,205,1.309,210,1.341,219,3.14,220,4.11,229,3.221,232,3.497,236,3.658,237,3.445,238,3.445,244,2.224,266,2.872,268,2.453,275,4.361,276,4.361,277,2.224,278,3.378,279,2.668,282,4.361,283,4.361,290,2.788,292,3.445,301,2.971,302,3.445,303,3.445,304,3.378,305,2.047,306,2.047,307,2.047,313,3.837,315,2.327,318,2.327,319,2.327,325,2.327,343,2.426,344,4.83,345,2.327,346,1.9,347,2.971,348,3.975,349,5.158,350,2.078,351,2.236,352,4.984,353,2.752,354,2.752,355,3.975,356,2.752,357,2.752,358,2.752,359,2.752,360,3.975,361,2.752,362,2.752,363,2.224,364,2.752,365,3.994,366,3.994,367,2.752,368,2.752,369,2.327,370,3.378,371,3.378,372,3.378]],["title/classes/CreateUserDto.html",[13,0.012,185,1.749]],["body/classes/CreateUserDto.html",[3,0.313,4,0.276,5,0.24,7,0.313,8,0.026,12,0.313,13,0.018,16,0.019,17,0.019,83,1.009,101,3.785,113,0.518,116,1.088,119,2.208,156,1.227,161,3.785,174,1.736,175,4.625,184,1.603,185,2.62,186,1.764,198,3.34,200,1.868,224,1.5,277,2.84,302,3.408,303,4.007,305,2.922,306,2.922,307,2.922,369,4.314,373,2.922,374,4.792,375,4.792,376,3.928,377,3.928,378,3.928,379,3.928,380,3.928,381,3.928,382,3.928,383,5.999,384,5.102,385,5.102,386,5.102,387,4.314,388,5.102,389,5.102,390,3.869,391,5.102,392,5.102,393,5.102,394,3.928,395,5.102,396,5.999,397,3.928,398,3.928]],["title/classes/GetUsersParamDto.html",[13,0.012,399,2.068]],["body/classes/GetUsersParamDto.html",[3,0.363,4,0.32,5,0.278,7,0.483,8,0.026,12,0.363,13,0.022,16,0.021,17,0.021,83,1.021,86,1.647,113,0.601,116,0.826,156,1.347,174,2.012,178,0.766,182,2.876,184,1.76,186,1.339,200,2.165,203,3.041,205,2.165,224,1.784,227,2.183,229,2.664,232,3.386,299,4.167,302,3.741,313,4.167,399,3.401,400,4.736,401,3.849,402,4.167,403,4.552,404,4.552,405,4.552]],["title/entities/MetaOption.html",[406,1.144,407,1.62]],["body/entities/MetaOption.html",[3,0.257,4,0.227,5,0.197,7,0.357,8,0.026,12,0.257,13,0.012,16,0.017,17,0.017,48,2.864,80,3.784,83,1.013,85,1.537,93,1.843,113,0.426,116,1.056,119,1.503,178,0.544,184,1.406,186,1.711,190,1.72,212,1.708,224,1.316,227,1.724,258,3.702,266,3.352,268,2.636,292,2.989,329,3.819,338,2.661,342,2.989,350,1.978,363,2.492,390,3.366,406,2.022,407,2.993,408,2.732,409,3.329,410,4.475,411,4.341,412,4.341,413,4.341,414,3.231,415,4.123,416,3.366,417,5.542,418,3.429,419,3.231,420,2.717,421,2.158,422,2.989,423,3.231,424,4.475,425,3.784,426,4.475,427,4.475,428,4.475,429,2.732,430,4.475,431,3.784,432,3.231,433,3.231,434,3.329,435,3.086,436,3.429,437,4.341,438,3.231,439,3.329,440,2.492,441,2.403,442,2.989,443,3.784,444,3.784,445,1.242]],["title/controllers/MetaOptionsController.html",[0,1.07,446,2.274]],["body/controllers/MetaOptionsController.html",[0,1.766,2,1.296,3,0.308,4,0.271,5,0.236,7,0.448,8,0.026,9,0.809,12,0.308,13,0.014,14,2.149,15,1.483,16,0.019,17,0.019,47,2.803,48,2.4,83,0.649,113,0.509,114,1.939,116,0.7,118,1.939,120,1.483,125,2.344,135,1.296,148,2.314,154,1.59,155,1.213,156,0.929,178,0.849,179,1.585,186,1.135,190,1.939,210,1.694,212,1.686,241,3.318,248,3.06,267,2.23,268,2.941,312,2.872,334,2.23,338,2.23,446,3.369,447,3.264,448,2.59,449,5.62,450,3.86,451,3.86,452,5.039,453,5.62,454,3.753,455,3.063,456,1.982,457,3.442,458,3.264,459,3.264,460,3.86,461,2.872,462,2.23,463,2.344,464,1.982,465,3.86]],["title/modules/MetaOptionsModule.html",[18,1.07,31,2.068]],["body/modules/MetaOptionsModule.html",[2,1.935,3,0.324,4,0.286,5,0.249,7,0.501,8,0.026,9,0.853,12,0.324,13,0.015,16,0.019,17,0.019,18,2.021,20,1.799,21,1.564,22,2.09,23,2.09,24,1.799,25,2.959,26,2.09,31,3.906,35,2.68,36,2.09,37,1.936,39,2.906,44,2.471,45,1.676,47,2.307,48,1.936,178,0.685,248,2.68,268,2.741,338,1.799,350,2.307,351,2.741,406,1.367,407,2.483,445,1.564,446,3.849,448,2.68,457,3.642,458,3.441,459,3.441,466,3.441,467,3.441,468,4.069,469,4.069,470,2.471,471,5.22,472,2.906,473,4.069,474,4.069,475,3.441,476,4.069,477,4.069]],["title/injectables/MetaOptionsService.html",[110,1.001,457,1.896]],["body/injectables/MetaOptionsService.html",[3,0.273,4,0.24,5,0.209,7,0.473,8,0.026,9,0.717,12,0.273,13,0.012,16,0.017,17,0.017,45,1.409,47,2.708,62,1.757,81,2.826,83,0.783,110,1.369,111,1.627,113,0.451,114,2.182,116,0.844,118,1.788,120,1.315,133,2.39,135,1.563,136,1.905,148,2.178,154,1.916,155,1.462,156,1.12,178,0.89,179,1.462,201,2.057,210,1.563,212,0.88,216,3.109,241,3.161,244,3.161,248,2.39,267,2.057,312,2.545,338,2.338,346,2.701,347,4.223,406,2.057,407,3.111,445,1.315,448,2.39,452,3.935,456,1.757,457,2.591,462,2.057,470,2.077,475,3.935,478,4.473,479,2.893,480,3.462,481,2.945,482,3.421,483,3.874,484,3.421,485,5.29,486,3.935,487,4.654,488,3.421,489,3.109,490,3.935,491,4.654,492,2.39,493,1.905,494,3.462,495,4.654,496,4.654,497,2.285,498,2.893,499,3.421,500,2.077,501,3.421]],["title/classes/PatchPostDto.html",[13,0.012,502,2.068]],["body/classes/PatchPostDto.html",[3,0.333,4,0.293,5,0.255,7,0.465,8,0.026,12,0.333,13,0.019,16,0.02,17,0.02,83,0.702,113,0.551,116,0.757,156,1.276,174,1.845,178,0.892,179,1.667,184,1.667,186,1.227,187,2.787,198,2.953,200,1.985,201,1.401,204,3.543,205,1.985,207,3.247,209,3.104,212,1.666,224,1.56,227,2.257,229,2.523,299,3.946,327,2.787,440,3.416,502,3.221,503,4.485,504,4.485,505,3.946,506,5.189,507,4.485,508,4.485,509,5.305,510,5.305,511,5.305,512,4.173,513,4.173,514,3.529,515,3.104]],["title/classes/PatchUserDto.html",[13,0.012,516,2.274]],["body/classes/PatchUserDto.html",[3,0.379,4,0.334,5,0.29,7,0.458,8,0.026,12,0.379,13,0.017,16,0.021,17,0.021,86,1.692,156,1.384,174,2.103,178,0.8,179,1.808,184,1.808,185,3.176,201,1.597,202,3.177,373,3.538,504,4.865,506,5.434,507,4.865,514,4.022,516,3.842,517,4.022,518,5.753,519,5.753,520,4.022,521,4.022]],["title/entities/Post.html",[212,0.876,406,1.144]],["body/entities/Post.html",[3,0.166,4,0.147,5,0.128,7,0.41,8,0.026,12,0.166,13,0.008,16,0.012,17,0.012,47,1.435,48,0.994,57,3.34,73,2.28,83,1.1,85,0.994,86,1.633,93,2.287,113,0.276,116,1.094,119,2.025,156,1.451,176,2.448,178,0.351,184,1.02,186,1.773,211,2.415,212,1.71,214,4.112,215,3.367,216,3.438,217,4.131,218,3.367,219,3.248,220,2.659,221,2.707,222,2.497,223,4.112,224,0.955,227,1.337,228,2.953,233,2.745,236,2.999,237,2.168,238,2.168,248,1.667,252,1.971,253,2.415,256,2.415,257,2.415,258,2.999,259,3.34,266,1.807,284,3.617,285,2.415,290,2.119,292,2.999,308,2.745,309,1.767,310,1.767,316,4.696,338,0.923,346,1.544,350,1.435,363,2.5,390,3.126,406,1.508,407,2.136,409,2.415,415,2.415,418,2.659,420,2.726,421,3.709,422,4.208,429,1.767,434,3.829,436,2.168,442,3.81,443,1.767,444,2.745,445,0.803,470,1.269,522,1.767,523,2.089,524,3.246,525,5.147,526,2.089,527,3.797,528,2.089,529,3.246,530,3.829,531,3.829,532,2.745,533,2.089,534,2.089,535,3.246,536,2.089,537,3.246,538,2.745,539,2.089,540,2.089,541,2.745,542,2.089,543,3.246,544,2.745,545,2.089,546,2.745,547,2.089,548,3.246,549,1.767,550,3.246,551,2.089,552,2.089,553,2.745,554,2.089,555,3.246,556,2.745,557,3.246,558,2.089,559,2.089,560,2.089,561,2.089,562,1.767,563,1.767]],["title/controllers/PostsController.html",[0,1.07,564,2.274]],["body/controllers/PostsController.html",[0,1.301,2,0.747,3,0.177,4,0.156,5,0.136,7,0.399,8,0.026,9,0.466,12,0.177,13,0.008,14,1.238,15,0.854,16,0.013,17,0.013,73,1.223,83,0.888,86,1.615,93,1.402,113,0.293,114,1.309,116,0.842,118,2.279,119,1.39,120,1.783,125,1.35,135,0.747,148,2.519,154,1.911,155,1.658,156,1.322,178,1.114,186,1.364,190,1.783,191,3.099,196,2.207,205,1.057,207,3.058,210,1.772,211,4.216,212,1.756,221,3.058,222,1.749,224,1.471,227,2.14,277,1.896,334,2.211,335,1.654,346,2.38,350,2.738,402,3.452,435,1.896,440,2.938,448,1.749,455,1.35,462,2.333,502,3.336,505,3.452,515,2.533,564,2.765,565,1.88,566,3.406,567,3.669,568,3.406,569,3.406,570,2.223,571,4.14,572,3.406,573,4.64,574,3.501,575,3.406,576,2.88,577,2.88,578,2.223,579,2.223,580,1.485,581,3.099,582,1.88,583,2.223,584,3.924,585,3.924,586,2.223,587,2.223,588,2.88,589,2.223,590,2.223,591,3.099,592,2.223,593,3.721,594,2.223,595,2.223,596,2.223,597,3.099,598,2.223,599,2.223,600,2.533,601,2.88,602,1.35,603,2.583,604,1.88,605,4.23,606,4.792,607,1.88,608,3.406,609,2.88,610,1.88,611,1.88,612,2.223,613,2.223,614,2.223,615,3.924,616,2.223,617,2.223,618,3.08,619,2.223,620,2.223,621,2.068,622,2.223,623,2.223,624,1.88,625,2.223,626,2.223,627,2.223,628,1.654,629,2.223,630,2.223,631,1.88,632,2.223]],["title/modules/PostsModule.html",[18,1.07,32,2.068]],["body/modules/PostsModule.html",[2,1.721,3,0.315,4,0.278,5,0.241,7,0.535,8,0.026,9,0.828,12,0.315,13,0.014,16,0.019,17,0.019,18,1.958,20,1.748,21,1.519,22,2.03,23,2.03,24,1.748,25,2.919,26,2.631,32,4.077,33,3.554,34,3.278,35,2.631,36,2.03,37,1.88,39,2.853,44,2.401,45,1.628,48,1.88,85,1.88,135,1.328,143,3.343,182,2.03,201,1.328,212,1.319,338,1.748,406,1.328,407,2.437,463,2.401,470,2.401,564,3.797,603,3.554,604,3.343,633,3.343,634,3.343,635,3.953,636,3.953,637,3.953,638,3.343,639,3.953,640,3.953,641,3.953,642,3.343,643,3.953,644,3.953,645,3.953,646,3.953,647,3.953,648,3.953]],["title/injectables/PostsService.html",[110,1.001,603,1.896]],["body/injectables/PostsService.html",[3,0.132,4,0.116,5,0.101,7,0.421,8,0.026,9,0.346,12,0.132,13,0.006,15,1.511,16,0.01,17,0.01,21,1.035,45,0.68,47,1.914,48,0.786,62,2.223,68,1.104,73,1.412,81,1.636,83,0.729,85,1.87,86,1.156,93,0.68,105,1.383,110,0.792,111,0.786,113,0.218,114,1.035,116,0.785,118,2.029,119,1.145,120,2.029,133,2.019,135,1.559,136,2.189,148,2.375,151,1.397,152,2.329,154,1.783,155,1.361,156,1.042,162,1.397,165,1.229,168,1.104,178,0.781,179,1.235,190,1.035,196,1.281,201,1.32,207,2.94,210,1.773,212,1.676,216,2.626,221,1.5,222,2.514,224,1.273,227,1.866,228,1.636,244,1.898,248,2.223,267,1.738,277,0.92,279,2.277,290,1.404,291,1.229,327,1.799,334,1.191,338,0.73,350,2.164,351,2.512,407,1.87,416,1.636,435,1.898,436,1.104,440,1.5,445,0.635,448,2.019,455,1.004,462,2.257,463,1.636,464,2.384,470,1.004,472,2.189,480,1.229,481,3.211,483,3.375,492,1.383,493,2.189,494,1.229,497,1.104,498,1.397,500,3.644,502,2.973,505,2.004,508,2.278,515,2.004,538,2.278,567,3.101,577,2.883,580,2.277,581,2.277,588,1.397,591,1.799,593,2.004,597,1.799,602,1.004,603,1.5,610,1.397,611,1.397,621,1.004,624,1.397,628,1.229,638,1.397,649,1.397,650,2.278,651,3.932,652,3.932,653,3.932,654,2.622,655,1.653,656,3.325,657,1.653,658,1.653,659,2.004,660,2.694,661,1.653,662,2.536,663,2.694,664,1.653,665,2.883,666,2.694,667,1.653,668,1.653,669,1.397,670,1.397,671,2.925,672,1.653,673,1.653,674,1.653,675,1.653,676,1.653,677,1.653,678,2.694,679,3.409,680,1.397,681,1.653,682,1.653,683,1.653,684,1.653,685,1.653,686,1.653,687,1.653,688,1.653,689,1.653,690,2.694,691,2.883,692,1.397,693,1.653,694,1.397,695,1.653,696,1.397,697,3.271,698,1.653,699,1.653,700,1.653,701,3.454,702,1.653,703,1.653,704,1.653,705,1.653,706,1.653,707,1.397,708,1.653,709,1.104,710,1.397,711,2.694,712,2.925,713,3.101,714,1.653,715,1.397,716,1.397,717,1.653,718,1.397,719,1.653,720,1.653,721,1.229,722,1.397,723,1.397,724,1.653,725,1.653,726,1.229,727,1.397,728,1.653,729,1.653,730,2.883,731,3.409,732,3.409,733,2.883,734,3.409,735,1.397,736,1.653,737,1.653,738,1.653,739,1.653,740,1.653,741,1.653,742,1.653,743,1.397,744,1.397,745,2.694,746,1.653,747,2.694,748,1.653,749,2.694,750,1.653,751,2.694,752,1.653,753,2.694,754,1.653,755,2.694,756,1.653,757,2.694,758,1.653,759,1.397,760,1.653]],["title/entities/Tag.html",[290,1.402,406,1.144]],["body/entities/Tag.html",[3,0.201,4,0.177,5,0.154,7,0.298,8,0.026,12,0.201,13,0.009,16,0.014,17,0.014,73,2.198,83,1.087,85,1.198,93,2.035,113,0.332,116,1.11,119,2.055,155,1.659,156,0.9,176,2.351,178,0.931,184,1.176,186,1.8,190,1.438,212,1.424,219,3.527,220,3.527,224,1.1,227,1.499,229,2.911,236,3.301,237,2.499,238,2.499,247,3.164,258,3.696,266,2.083,268,1.78,290,2.76,348,3.775,350,2.446,351,1.198,352,3.775,355,2.129,360,2.129,363,3.081,370,2.129,371,2.129,372,2.129,406,1.66,411,3.775,412,3.775,413,3.775,415,4.117,416,3.361,418,2.982,420,2.272,421,3.527,422,4.088,431,3.164,434,2.783,435,2.083,436,2.499,437,3.775,439,2.783,440,2.083,441,1.873,442,3.696,445,0.968,492,1.921,527,4.179,530,4.117,531,4.117,532,3.164,544,3.164,546,3.164,549,2.129,553,3.164,556,3.164,759,3.164,761,2.129,762,3.742,763,4.465,764,2.518,765,4.465,766,2.518,767,2.783,768,2.518,769,2.518,770,2.518,771,2.518,772,2.518,773,2.518,774,2.518,775,2.518,776,2.518,777,2.518]],["title/controllers/TagsController.html",[0,1.07,778,2.274]],["body/controllers/TagsController.html",[0,1.541,2,0.997,3,0.237,4,0.209,5,0.181,7,0.391,8,0.026,9,0.622,12,0.237,13,0.011,14,1.654,15,1.141,16,0.016,17,0.016,83,0.825,105,2.166,113,0.392,114,1.621,116,0.89,118,2.252,120,1.885,125,1.804,135,0.997,148,2.581,154,2.02,155,1.541,156,1.18,178,0.899,179,1.326,186,1.443,190,1.621,201,1.417,210,1.417,212,1.263,222,1.525,224,1.723,227,2.215,244,2.974,267,1.865,290,2.761,334,1.865,343,3.661,346,2.007,351,2.007,416,3.243,435,2.349,455,1.804,456,1.525,461,2.209,462,2.361,463,1.804,464,1.525,472,2.349,481,3.263,493,2.349,567,4.337,580,1.984,581,3.567,600,3.649,602,1.804,631,2.511,654,2.897,662,3.973,680,2.511,709,3.567,767,4.36,778,2.818,779,2.511,780,3.567,781,3.567,782,4.219,783,2.511,784,2.97,785,2.97,786,4.516,787,2.97,788,4.219,789,2.97,790,3.567,791,3.138,792,3.567,793,2.511,794,2.511,795,2.97,796,2.97,797,2.97,798,2.97,799,2.97,800,2.97,801,2.97]],["title/modules/TagsModule.html",[18,1.07,33,1.896]],["body/modules/TagsModule.html",[2,1.849,3,0.353,4,0.311,5,0.271,7,0.514,8,0.026,9,0.928,12,0.353,13,0.016,16,0.02,17,0.02,18,1.883,20,1.958,21,1.702,22,2.274,23,2.274,24,1.958,25,3.077,26,3.077,33,3.711,35,2.828,36,2.274,37,2.107,39,2.466,44,2.69,45,1.824,290,1.824,654,3.547,778,4.003,793,3.745,802,3.745,803,3.745,804,3.745,805,4.429,806,4.429,807,3.745,808,4.429]],["title/injectables/TagsService.html",[110,1.001,654,1.749]],["body/injectables/TagsService.html",[3,0.19,4,0.168,5,0.146,7,0.411,8,0.026,9,0.5,12,0.19,13,0.009,15,0.918,16,0.018,17,0.013,45,0.983,62,2.221,73,1.291,83,0.869,93,0.983,105,1.847,107,1.776,110,1.057,111,1.136,113,0.315,114,1.382,116,0.937,118,2.227,120,1.984,129,1.45,130,1.45,131,1.776,133,1.847,135,1.452,136,1.329,148,2.56,154,2.126,155,1.622,156,1.242,164,1.776,168,1.595,169,1.776,178,0.913,179,1.13,181,2.184,188,3.449,190,1.382,196,1.71,201,1.208,210,1.208,222,2.891,224,1.743,227,2.167,244,3.021,267,1.59,277,1.329,290,2.805,291,3.841,334,1.59,343,3.295,346,1.71,347,2.675,351,1.71,406,1.616,416,2.923,435,2.875,445,1.662,456,1.226,461,2.675,462,2.282,464,1.847,472,2.002,481,3.461,483,3.519,486,3.041,489,2.402,492,1.847,493,2.68,497,1.595,500,3.135,567,3.624,580,2.402,581,3.215,621,2.627,654,1.847,662,3.841,709,3.215,767,4.036,783,3.041,786,4.07,790,3.041,791,2.675,792,3.041,794,2.019,807,2.019,809,2.019,810,3.596,811,3.596,812,2.388,813,2.388,814,4.325,815,2.388,816,2.388,817,3.596,818,2.388,819,4.325,820,3.596,821,2.388,822,2.019,823,2.388,824,2.388,825,2.388,826,2.388,827,2.388,828,2.019,829,2.388,830,2.388,831,2.388,832,2.388,833,2.388,834,2.388]],["title/entities/User.html",[86,1.001,406,1.144]],["body/entities/User.html",[3,0.253,4,0.223,5,0.194,7,0.352,8,0.026,12,0.253,13,0.011,16,0.016,17,0.016,73,1.975,83,1.084,85,1.51,86,1.98,93,2.466,101,3.862,105,2.27,113,0.419,116,1.086,119,2.104,155,1.728,156,1.063,161,3.862,178,0.534,184,1.389,186,1.761,196,2.103,212,1.541,224,1.3,227,1.708,350,2.556,363,3.334,374,4.301,375,4.301,406,1.847,409,3.288,418,3.397,420,2.684,421,3.673,422,4.185,439,3.288,441,2.361,442,3.862,445,1.22,530,4.661,531,4.661,835,2.684,836,6.265,837,3.174,838,4.42,839,3.174,840,3.738,841,3.174,842,3.174,843,4.42,844,3.174,845,3.174,846,4.42,847,3.174,848,4.42,849,4.42]],["title/controllers/UsersController.html",[0,1.07,850,2.274]],["body/controllers/UsersController.html",[0,1.205,2,0.662,3,0.157,4,0.138,5,0.12,7,0.419,8,0.026,9,0.413,12,0.157,13,0.007,14,1.097,15,0.757,16,0.012,17,0.012,62,1.012,73,1.114,83,0.984,86,1.952,93,1.791,113,0.26,114,1.192,116,0.858,118,2.203,119,1.588,120,1.93,125,1.197,135,0.662,148,2.541,152,2.069,154,2.307,155,1.711,156,1.264,173,2.926,176,1.824,178,1.048,179,0.974,181,2.641,182,3.251,185,2.876,186,1.391,190,1.671,191,3.637,196,2.069,201,1.46,202,2.071,205,0.937,210,1.46,212,0.987,221,2.135,224,1.832,227,2.024,229,2.069,252,3.55,256,2.307,267,1.922,327,2.071,334,1.922,346,2.389,351,1.475,399,2.641,425,1.666,440,1.727,454,2.307,455,1.883,456,1.592,462,2.534,464,1.012,472,2.135,492,2.233,516,3.741,562,4.247,574,1.666,576,1.666,582,1.666,584,3.678,585,2.622,591,2.905,593,1.466,597,2.905,600,2.853,601,3.243,602,2.872,605,3.243,606,3.678,607,1.666,609,3.678,615,2.622,618,2.307,621,1.883,713,1.316,781,2.622,791,1.466,850,2.561,851,1.666,852,3.101,853,3.243,854,3.101,855,3.835,856,3.101,857,1.97,858,3.101,859,1.97,860,1.666,861,1.97,862,1.97,863,1.97,864,3.101,865,1.97,866,4.349,867,1.97,868,3.101,869,1.97,870,4.444,871,1.97,872,3.101,873,1.97,874,1.97,875,3.101,876,3.101,877,4.349,878,1.97,879,1.97,880,3.835,881,3.243,882,2.622,883,1.97,884,1.97,885,1.97,886,1.666,887,1.666,888,1.97,889,1.666,890,1.466,891,1.97,892,1.97,893,1.666,894,1.97,895,1.97,896,3.101,897,1.97,898,1.97,899,1.97,900,1.97,901,1.97,902,1.97,903,1.97,904,1.97,905,1.666,906,1.666,907,1.97,908,1.97,909,1.97,910,1.97,911,1.97,912,1.97]],["title/injectables/UsersCreateManyProvider.html",[110,1.001,913,1.896]],["body/injectables/UsersCreateManyProvider.html",[3,0.226,4,0.199,5,0.173,7,0.416,8,0.026,9,0.593,12,0.226,13,0.01,14,1.576,15,1.088,16,0.015,17,0.015,62,2.843,68,1.89,83,0.686,86,1.789,105,2.683,110,1.198,111,1.346,113,0.373,114,1.566,116,0.739,118,1.566,120,1.088,133,2.452,135,1.369,148,1.967,154,1.678,155,1.281,156,0.98,173,3.211,176,1.346,178,0.932,179,1.281,181,3.173,182,3.052,188,2.722,189,3.446,190,2.008,196,1.939,201,1.604,206,2.105,210,1.604,267,1.802,334,1.802,335,3.032,390,1.719,445,1.835,456,1.453,462,1.802,463,2.475,464,2.093,472,2.269,480,2.105,481,2.659,489,2.722,493,1.576,494,3.032,500,3.502,602,2.9,618,3.032,659,3.032,671,3.032,691,5.144,694,2.393,696,2.393,697,3.19,701,3.553,707,2.393,709,1.89,710,2.393,712,3.553,713,3.19,715,2.393,716,2.393,718,2.393,721,2.105,722,3.446,723,4.039,727,2.393,730,2.393,890,2.105,913,2.909,914,4.039,915,2.393,916,3.446,917,4.076,918,4.776,919,3.446,920,2.83,921,5.239,922,2.83,923,3.446,924,2.83,925,4.076,926,4.076,927,4.076,928,2.105,929,3.446,930,4.076,931,2.83,932,4.076,933,2.83,934,2.83,935,4.039,936,2.83,937,2.83,938,4.076,939,2.83,940,2.393,941,2.83,942,2.393,943,2.83,944,2.83,945,2.83,946,2.83,947,2.83,948,2.83,949,2.83,950,2.83,951,4.076]],["title/modules/UsersModule.html",[18,1.07,34,1.749]],["body/modules/UsersModule.html",[2,1.915,3,0.317,4,0.279,5,0.243,7,0.531,8,0.026,9,0.834,12,0.41,13,0.014,16,0.019,17,0.019,18,1.792,20,1.759,21,1.529,22,2.044,23,2.044,24,1.759,25,3.096,26,2.928,30,3.175,34,3.422,35,2.642,36,2.044,37,1.893,39,2.865,44,2.417,45,1.639,50,3.365,52,2.658,86,1.17,141,3.437,144,3.365,145,2.96,146,2.96,152,3.238,201,1.336,850,3.809,889,3.365,913,3.56,928,2.96,952,3.365,953,3.365,954,3.365,955,3.98,956,3.98,957,3.98,958,3.98,959,3.365,960,3.365,961,3.365,962,3.98,963,3.98,964,3.98]],["title/injectables/UsersService.html",[110,1.001,152,1.62]],["body/injectables/UsersService.html",[3,0.159,4,0.272,5,0.122,7,0.467,8,0.026,9,0.418,12,0.159,13,0.007,15,1.683,16,0.012,17,0.012,21,1.204,45,0.822,52,1.334,81,1.212,83,0.801,86,1.919,105,2.25,110,0.921,111,0.95,113,0.263,114,1.204,116,0.863,118,2.102,120,1.486,127,2.808,133,1.609,135,1.471,136,2.65,141,1.334,148,2.456,152,2.084,154,1.96,155,1.496,156,1.271,161,1.334,167,1.688,169,2.331,173,2.812,176,0.95,178,0.889,179,1.376,180,1.903,181,2.66,182,3.207,185,2.594,190,1.683,196,1.49,201,0.67,202,1.334,210,1.837,221,1.112,224,1.778,227,1.774,252,3.067,267,1.936,334,1.936,346,1.49,351,1.49,363,1.745,399,2.66,445,0.767,448,2.25,456,1.609,462,2.593,464,1.609,481,3.132,483,3.067,492,1.609,493,2.153,497,1.334,500,2.66,591,2.926,621,1.903,650,3.27,656,2.65,659,2.331,669,2.65,670,2.65,671,1.485,697,2.583,701,3.757,712,2.877,713,3.528,743,1.688,744,1.688,853,2.65,860,2.65,870,3.704,881,3.27,882,2.65,886,1.688,887,1.688,890,1.485,893,2.65,913,3.045,916,2.65,919,2.65,921,4.625,923,2.65,928,1.485,929,3.27,935,4.025,942,3.27,959,1.688,960,1.688,961,1.688,965,1.688,966,3.134,967,1.997,968,4.381,969,4.381,970,4.381,971,1.997,972,3.134,973,3.134,974,3.134,975,3.134,976,3.134,977,3.134,978,1.997,979,3.134,980,3.134,981,1.997,982,1.997,983,1.997,984,3.134,985,3.134,986,3.134,987,1.997,988,3.134,989,1.997,990,3.868,991,1.997,992,1.997,993,1.997,994,1.997,995,3.868,996,1.997,997,3.134,998,1.997,999,1.997,1000,1.997,1001,1.997,1002,1.997,1003,1.997,1004,1.997,1005,3.868,1006,1.997,1007,3.134,1008,3.868,1009,1.997,1010,1.997,1011,1.997,1012,1.997,1013,1.997,1014,1.997]],["title/coverage.html",[1015,3.451]],["body/coverage.html",[0,1.933,1,2.316,5,0.212,6,2.932,8,0.026,10,1.93,13,0.023,16,0.017,17,0.017,24,1.533,38,2.579,47,1.533,48,2.234,63,2.579,83,0.583,86,1.019,110,1.85,112,2.932,123,2.316,124,2.932,127,1.78,147,2.932,152,1.649,173,1.93,175,3.494,176,1.649,177,2.932,182,1.78,185,1.78,201,1.164,207,1.93,208,2.932,209,3.494,210,1.164,212,1.209,241,1.93,290,1.428,311,2.579,338,2.524,339,2.932,343,2.105,344,2.932,345,2.932,373,3.494,399,2.105,400,2.932,401,2.932,406,1.917,407,1.649,408,2.932,420,2.105,446,2.316,447,2.932,457,1.93,478,2.932,479,2.932,502,2.105,503,2.932,516,2.316,517,2.932,522,2.932,564,2.316,565,2.932,603,1.93,649,2.932,654,1.78,761,2.932,778,2.316,779,2.932,809,2.932,835,2.932,850,2.316,851,2.932,913,1.93,914,2.932,915,2.932,965,2.932,1015,2.579,1016,2.579,1017,3.467,1018,6.29,1019,5.326,1020,3.467,1021,4.697,1022,3.467,1023,2.932,1024,2.932,1025,6.899,1026,6.151,1027,5.709,1028,4.697,1029,3.467,1030,3.467,1031,5.966,1032,3.467,1033,3.467,1034,3.467,1035,3.467]],["title/dependencies.html",[21,1.573,1036,2.118]],["body/dependencies.html",[8,0.026,9,0.997,13,0.021,16,0.021,17,0.021,21,1.828,45,1.959,52,3.177,200,2.262,203,3.177,205,2.262,268,2.262,445,1.828,520,4.022,521,4.022,1037,4.757,1038,4.757,1039,6.185,1040,4.757,1041,4.757,1042,4.757,1043,4.757,1044,4.757,1045,4.757,1046,4.757,1047,4.757,1048,4.757,1049,4.757,1050,4.757,1051,4.757,1052,4.757,1053,4.757,1054,4.757,1055,4.757,1056,4.757,1057,4.757]],["title/miscellaneous/enumerations.html",[1058,1.585,1059,3.461]],["body/miscellaneous/enumerations.html",[8,0.026,16,0.021,17,0.021,113,0.634,212,1.49,217,4.307,252,3.516,253,4.307,257,4.307,259,4.307,284,4.307,285,4.307,286,4.896,287,4.896,342,4.567,1058,2.676,1059,4.065,1060,5.79,1061,5.79,1062,5.79,1063,5.79]],["title/miscellaneous/functions.html",[1058,1.585,1064,3.461]],["body/miscellaneous/functions.html",[8,0.022,16,0.022,17,0.022,24,2.911,113,0.676,726,3.81,780,4.33,905,4.33,906,4.33,1016,3.81,1023,4.33,1024,5.084,1058,2.851,1064,4.33,1065,5.121,1066,5.121,1067,5.121,1068,4.33,1069,4.33,1070,5.121,1071,5.121,1072,5.121,1073,5.121]],["title/index.html",[113,0.376,563,2.408,1074,2.848]],["body/index.html",[0,1.069,4,0.156,5,0.322,8,0.025,16,0.013,17,0.013,18,1.069,37,2.509,55,1.877,65,4.79,68,1.483,69,1.877,79,1.877,97,3.921,107,3.719,108,1.877,109,1.877,126,1.652,129,3.334,130,3.44,135,1.143,155,1.069,164,2.531,165,1.652,168,3.523,176,1.618,178,0.374,183,1.877,210,0.746,222,1.14,224,0.653,228,1.348,229,2.868,250,1.877,279,3.523,350,0.981,390,1.348,402,3.077,448,1.14,454,1.652,483,1.348,489,1.483,490,1.877,492,1.14,541,3.498,597,1.483,628,2.531,642,1.877,665,1.877,692,1.877,697,1.483,721,1.652,726,1.652,733,2.877,735,3.498,822,1.877,828,3.921,840,2.877,940,2.877,1015,2.531,1016,4.485,1036,2.531,1068,4.79,1069,4.461,1075,2.22,1076,2.22,1077,4.137,1078,3.403,1079,2.22,1080,2.22,1081,2.22,1082,2.22,1083,3.403,1084,2.22,1085,2.22,1086,5.491,1087,2.22,1088,5.808,1089,2.22,1090,2.22,1091,4.137,1092,3.403,1093,2.22,1094,3.403,1095,2.22,1096,4.137,1097,2.22,1098,3.403,1099,2.22,1100,2.22,1101,2.22,1102,2.22,1103,2.22,1104,4.637,1105,3.403,1106,2.22,1107,2.22,1108,2.22,1109,2.22,1110,3.403,1111,4.637,1112,3.403,1113,2.22,1114,3.403,1115,5.275,1116,4.637,1117,2.22,1118,3.403,1119,2.22,1120,2.22,1121,2.22,1122,4.637,1123,2.22,1124,2.22,1125,2.22,1126,2.22,1127,3.403,1128,2.22,1129,2.22,1130,2.22,1131,2.22,1132,3.403,1133,2.22,1134,2.22,1135,2.22,1136,3.403,1137,2.22,1138,2.22,1139,3.921,1140,2.22,1141,2.22,1142,2.22,1143,2.22,1144,2.22,1145,2.22,1146,2.22,1147,2.22,1148,3.403,1149,2.22,1150,2.22,1151,2.22,1152,2.22,1153,2.22,1154,2.22,1155,2.22,1156,2.22,1157,2.22,1158,3.403,1159,2.22,1160,2.22,1161,2.22,1162,2.22,1163,3.403,1164,2.22,1165,2.22,1166,2.22,1167,3.403,1168,3.403,1169,2.22,1170,2.22,1171,2.22,1172,2.22,1173,2.22,1174,2.22,1175,2.22,1176,2.22,1177,2.22,1178,4.637,1179,2.22,1180,2.22,1181,2.22,1182,2.22,1183,2.22,1184,2.22,1185,2.22,1186,1.877,1187,2.22,1188,4.137,1189,2.22,1190,5.808,1191,2.22,1192,2.22,1193,2.22,1194,4.637,1195,3.403,1196,2.22,1197,2.22,1198,2.22,1199,2.22,1200,2.22,1201,2.22,1202,2.22,1203,2.22,1204,2.22,1205,5.491,1206,2.22,1207,2.22,1208,2.22,1209,2.22,1210,2.22,1211,2.22,1212,2.22,1213,2.22,1214,3.403,1215,3.403,1216,5.275,1217,4.637,1218,4.137,1219,4.137,1220,2.22,1221,2.22,1222,2.22,1223,3.403,1224,2.22,1225,4.637,1226,4.637,1227,2.22,1228,3.403,1229,2.22,1230,3.403,1231,2.22,1232,2.22,1233,2.22,1234,2.22,1235,2.22,1236,2.22,1237,3.403,1238,3.403,1239,3.403,1240,3.403,1241,2.22,1242,2.22,1243,2.22,1244,2.22,1245,4.137,1246,2.22,1247,2.22,1248,2.22,1249,2.22,1250,2.22,1251,2.22,1252,2.22,1253,2.22,1254,2.22,1255,2.22,1256,2.22,1257,3.403,1258,2.22,1259,2.22,1260,2.22,1261,2.22,1262,2.22,1263,2.22]],["title/modules.html",[20,2.051]],["body/modules.html",[8,0.022,16,0.022,17,0.022,19,3.354,20,2.22,30,2.796,31,3.049,32,3.049,33,2.796,34,2.578,1139,5.725,1264,6.771,1265,6.771,1266,6.771]],["title/overview.html",[1267,3.923]],["body/overview.html",[2,1.299,8,0.026,10,3.132,16,0.019,17,0.019,18,1.216,19,4.573,20,1.71,21,1.487,22,1.987,23,1.987,24,1.71,25,1.987,26,1.987,27,3.271,28,3.271,29,3.271,30,3.533,31,3.757,32,4.025,33,3.599,34,3.404,35,2.594,36,1.987,37,1.84,85,1.84,111,1.84,127,3.319,137,3.271,138,3.271,139,3.271,152,3.075,174,1.71,387,3.271,457,3.132,466,3.271,467,3.271,603,3.132,633,3.271,634,3.271,654,3.319,802,3.271,803,3.271,804,3.271,913,3.132,952,3.271,953,3.271,954,3.271,1267,3.271,1268,5.052,1269,3.869,1270,3.869]],["title/properties.html",[184,1.286,1036,2.118]],["body/properties.html",[8,0.025,16,0.023,17,0.023,178,0.895,184,1.671,228,3.229,1186,4.497,1271,5.318,1272,5.318,1273,5.318]],["title/miscellaneous/variables.html",[1058,1.585,1274,3.461]],["body/miscellaneous/variables.html",[8,0.024,16,0.023,17,0.023,38,3.956,57,3.956,63,4.571,64,4.497,113,0.702,342,3.552,1058,2.961,1274,4.497,1275,5.318]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":1018,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":1272,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":1048,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":1054,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":1057,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1047,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1019,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1021,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1022,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1033,"title":{},"body":{"coverage.html":{}}}],["03",{"_index":261,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1",{"_index":327,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["1.1.23",{"_index":1038,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":1026,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":896,"title":{},"body":{"controllers/UsersController.html":{}}}],["10.0.0",{"_index":1039,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":1046,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":1025,"title":{},"body":{"coverage.html":{}}}],["1024",{"_index":532,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["10})@apiquery({name",{"_index":878,"title":{},"body":{"controllers/UsersController.html":{}}}],["12/12",{"_index":1029,"title":{},"body":{"coverage.html":{}}}],["1234",{"_index":405,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["1234'})@isoptional()@isint()@type(undefined",{"_index":403,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["16t07:46:32+0000",{"_index":326,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["16t07:46:32+0000'})@isiso8601()@isoptional",{"_index":262,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["17.12.2",{"_index":1050,"title":{},"body":{"dependencies.html":{}}}],["1})@isint()@isnotempty",{"_index":512,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["1})@isnotempty()@isint",{"_index":230,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["2",{"_index":328,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["2.0.5",{"_index":1042,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":1027,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":584,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["201",{"_index":573,"title":{},"body":{"controllers/PostsController.html":{}}}],["2024",{"_index":260,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["256",{"_index":544,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["3.2.2",{"_index":1040,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":1028,"title":{},"body":{"coverage.html":{}}}],["3001",{"_index":1235,"title":{},"body":{"index.html":{}}}],["4",{"_index":1269,"title":{},"body":{"overview.html":{}}}],["4/4",{"_index":1032,"title":{},"body":{"coverage.html":{}}}],["400",{"_index":575,"title":{},"body":{"controllers/PostsController.html":{}}}],["404",{"_index":585,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["5/5",{"_index":1030,"title":{},"body":{"coverage.html":{}}}],["512",{"_index":553,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["6",{"_index":1268,"title":{},"body":{"overview.html":{}}}],["6/6",{"_index":1031,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":1270,"title":{},"body":{"overview.html":{}}}],["7.3.0",{"_index":1045,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":1056,"title":{},"body":{"dependencies.html":{}}}],["71",{"_index":1001,"title":{},"body":{"injectables/UsersService.html":{}}}],["8",{"_index":387,"title":{},"body":{"classes/CreateUserDto.html":{},"overview.html":{}}}],["8.11.5",{"_index":1052,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":276,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["96",{"_index":836,"title":{},"body":{"entities/User.html":{}}}],["actual",{"_index":630,"title":{},"body":{"controllers/PostsController.html":{}}}],["add",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"index.html":{}}}],["additional",{"_index":247,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Tag.html":{}}}],["address",{"_index":838,"title":{},"body":{"entities/User.html":{}}}],["against",{"_index":337,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["allowing",{"_index":1128,"title":{},"body":{"index.html":{}}}],["along",{"_index":665,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{}}}],["already",{"_index":1007,"title":{},"body":{"injectables/UsersService.html":{}}}],["always",{"_index":1253,"title":{},"body":{"index.html":{}}}],["amazing",{"_index":1173,"title":{},"body":{"index.html":{}}}],["api",{"_index":780,"title":{},"body":{"controllers/TagsController.html":{},"miscellaneous/functions.html":{}}}],["apioperation",{"_index":605,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":571,"title":{},"body":{"controllers/PostsController.html":{}}}],["apiparam",{"_index":608,"title":{},"body":{"controllers/PostsController.html":{}}}],["apiproperty",{"_index":204,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({description",{"_index":187,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({enum",{"_index":249,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiproperty({example",{"_index":295,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiproperty({type",{"_index":225,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apipropertyoptional",{"_index":313,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({description",{"_index":232,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({type",{"_index":243,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiquery",{"_index":609,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiresponse",{"_index":606,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":607,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags('posts",{"_index":613,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('users",{"_index":892,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":1071,"title":{},"body":{"miscellaneous/functions.html":{}}}],["app.controller",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appconfig",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":1069,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["applications",{"_index":1083,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":19,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":10,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["argument",{"_index":1249,"title":{},"body":{"index.html":{}}}],["array",{"_index":188,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"injectables/TagsService.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["associated",{"_index":292,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{}}}],["async",{"_index":481,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["atomically",{"_index":693,"title":{},"body":{"injectables/PostsService.html":{}}}],["auth",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"index.html":{}}}],["auth.controller",{"_index":142,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/providers/auth",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{}}}],["authcontroller",{"_index":123,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authentication",{"_index":974,"title":{},"body":{"injectables/UsersService.html":{}}}],["authgenerate",{"_index":1258,"title":{},"body":{"index.html":{}}}],["authmodule",{"_index":30,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":228,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"index.html":{},"properties.html":{}}}],["authored",{"_index":848,"title":{},"body":{"entities/User.html":{}}}],["authorid",{"_index":213,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["authservice",{"_index":127,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["autoloadentities",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["automatically",{"_index":703,"title":{},"body":{"injectables/PostsService.html":{}}}],["available",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{}}}],["avoid",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{}}}],["await",{"_index":500,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["aws",{"_index":1118,"title":{},"body":{"index.html":{}}}],["backers",{"_index":1174,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":669,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["badrequestexception('please",{"_index":739,"title":{},"body":{"injectables/PostsService.html":{}}}],["badrequestexception('user",{"_index":1011,"title":{},"body":{"injectables/UsersService.html":{}}}],["based",{"_index":489,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/TagsService.html":{},"injectables/UsersCreateManyProvider.html":{},"index.html":{}}}],["basically",{"_index":1209,"title":{},"body":{"index.html":{}}}],["batch",{"_index":979,"title":{},"body":{"injectables/UsersService.html":{}}}],["become",{"_index":676,"title":{},"body":{"injectables/PostsService.html":{}}}],["before",{"_index":829,"title":{},"body":{"injectables/TagsService.html":{}}}],["begin",{"_index":936,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["between",{"_index":629,"title":{},"body":{"controllers/PostsController.html":{}}}],["bidirectional",{"_index":537,"title":{},"body":{"entities/Post.html":{}}}],["bit",{"_index":1197,"title":{},"body":{"index.html":{}}}],["blog",{"_index":211,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{}}}],["blue",{"_index":371,"title":{},"body":{"classes/CreateTagDto.html":{},"entities/Tag.html":{}}}],["blue\"}'})@isoptional()@isjson",{"_index":361,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["board",{"_index":1166,"title":{},"body":{"index.html":{}}}],["body",{"_index":455,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["body(new",{"_index":907,"title":{},"body":{"controllers/UsersController.html":{}}}],["boolean",{"_index":158,"title":{},"body":{"injectables/AuthService.html":{}}}],["bootstrap",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["both",{"_index":692,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{}}}],["brief",{"_index":349,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["browse",{"_index":1266,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1264,"title":{},"body":{"modules.html":{}}}],["building",{"_index":1078,"title":{},"body":{"index.html":{}}}],["bulk",{"_index":916,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["business",{"_index":476,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["c:\\users\\mfabouatmeh\\desktop\\codesdar\\more\\postgre\\data",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["cascade",{"_index":436,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{}}}],["cascade'})@joincolumn",{"_index":432,"title":{},"body":{"entities/MetaOption.html":{}}}],["cascades",{"_index":625,"title":{},"body":{"controllers/PostsController.html":{}}}],["case",{"_index":948,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["catch",{"_index":712,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["cause",{"_index":144,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["certain",{"_index":1212,"title":{},"body":{"index.html":{}}}],["changes",{"_index":1237,"title":{},"body":{"index.html":{}}}],["channel",{"_index":1141,"title":{},"body":{"index.html":{}}}],["character",{"_index":393,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["chars",{"_index":388,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["check",{"_index":168,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"index.html":{}}}],["circular",{"_index":145,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{}}}],["class",{"_index":13,"title":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":174,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"overview.html":{}}}],["clean",{"_index":725,"title":{},"body":{"injectables/PostsService.html":{}}}],["clicks",{"_index":1127,"title":{},"body":{"index.html":{}}}],["cloud",{"_index":1113,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":137,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":139,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":138,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule",{"_index":466,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule_providers",{"_index":467,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":633,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":635,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":634,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule",{"_index":802,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_exports",{"_index":803,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_providers",{"_index":804,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":952,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":953,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":954,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cmd",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["code",{"_index":1238,"title":{},"body":{"index.html":{}}}],["color",{"_index":360,"title":{},"body":{"classes/CreateTagDto.html":{},"entities/Tag.html":{}}}],["column",{"_index":442,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["column({type",{"_index":421,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["combo",{"_index":1247,"title":{},"body":{"index.html":{}}}],["come",{"_index":1133,"title":{},"body":{"index.html":{}}}],["comma",{"_index":1193,"title":{},"body":{"index.html":{}}}],["commit",{"_index":707,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["compared",{"_index":1229,"title":{},"body":{"index.html":{}}}],["complete",{"_index":950,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["compo",{"_index":1205,"title":{},"body":{"index.html":{}}}],["compodoc",{"_index":1187,"title":{},"body":{"index.html":{}}}],["compodoc/compodoc",{"_index":1037,"title":{},"body":{"dependencies.html":{}}}],["config",{"_index":1216,"title":{},"body":{"index.html":{}}}],["config/app.config",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["config/database.config",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["config/environment.validation",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["config/profile.config",{"_index":961,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["configmodule",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["configmodule.forfeature(profileconfig",{"_index":964,"title":{},"body":{"modules/UsersModule.html":{}}}],["configmodule.forroot",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.autoloadentities",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.host",{"_index":104,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.name",{"_index":106,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.pass",{"_index":102,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.port",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.synchronize",{"_index":90,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.user",{"_index":100,"title":{},"body":{"modules/AppModule.html":{}}}],["configtype",{"_index":970,"title":{},"body":{"injectables/UsersService.html":{}}}],["configuration",{"_index":977,"title":{},"body":{"injectables/UsersService.html":{}}}],["configurations",{"_index":1213,"title":{},"body":{"index.html":{}}}],["conflictexception",{"_index":927,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["conflictexception('could",{"_index":949,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["connect",{"_index":930,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["connection",{"_index":935,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["console.error(error",{"_index":719,"title":{},"body":{"injectables/PostsService.html":{}}}],["const",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["constructor",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":967,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(datasource",{"_index":920,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["constructor(metaoptionrepository",{"_index":482,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["constructor(private",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["constructor(tagsrepository",{"_index":812,"title":{},"body":{"injectables/TagsService.html":{}}}],["constructor(usersservice",{"_index":151,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["constructs",{"_index":893,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["containing",{"_index":267,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["content",{"_index":214,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["context",{"_index":269,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"index.html":{}}}],["controller('auth",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('meta",{"_index":460,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["controller('posts",{"_index":612,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('tags",{"_index":795,"title":{},"body":{"controllers/TagsController.html":{}}}],["controller('users",{"_index":891,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["copy",{"_index":686,"title":{},"body":{"injectables/PostsService.html":{}}}],["corresponding",{"_index":646,"title":{},"body":{"modules/PostsModule.html":{}}}],["courses",{"_index":1147,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":1015,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":201,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["create(@body",{"_index":680,"title":{},"body":{"injectables/PostsService.html":{},"controllers/TagsController.html":{}}}],["create(createmetaoptiondto",{"_index":487,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["create(createpostdto",{"_index":657,"title":{},"body":{"injectables/PostsService.html":{}}}],["create(createtagdto",{"_index":783,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["create=many.provider",{"_index":1262,"title":{},"body":{"index.html":{}}}],["created",{"_index":190,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["createdate",{"_index":411,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["createdatecolumn",{"_index":413,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["createmany",{"_index":919,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["createmany(createmanyusersdto",{"_index":923,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["createmanyusers",{"_index":852,"title":{},"body":{"controllers/UsersController.html":{}}}],["createmanyusers(@body",{"_index":910,"title":{},"body":{"controllers/UsersController.html":{}}}],["createmanyusers(createmanyusersdto",{"_index":857,"title":{},"body":{"controllers/UsersController.html":{}}}],["createmanyusersdto",{"_index":173,"title":{"classes/CreateManyUsersDto.html":{}},"body":{"classes/CreateManyUsersDto.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createmanyusersdto.users",{"_index":941,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["createmetaoption",{"_index":449,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["createmetaoption(createpostmetaoptiondto",{"_index":450,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["createmetaoptiondto",{"_index":491,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["createpost",{"_index":566,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(@body",{"_index":619,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(createpostdto",{"_index":570,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpostdto",{"_index":207,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["createpostmetaoptiondto",{"_index":453,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["createpostmetaoptionsdto",{"_index":241,"title":{"classes/CreatePostMetaOptionsDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["creates",{"_index":334,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["createtagdto",{"_index":343,"title":{"classes/CreateTagDto.html":{}},"body":{"classes/CreateTagDto.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"coverage.html":{}}}],["createuser",{"_index":853,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createuser(createuserdto",{"_index":860,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createuserdto",{"_index":185,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":1010,"title":{},"body":{"injectables/UsersService.html":{}}}],["creating",{"_index":180,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"injectables/UsersService.html":{}}}],["creation",{"_index":659,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["criteria",{"_index":985,"title":{},"body":{"injectables/UsersService.html":{}}}],["crowded",{"_index":677,"title":{},"body":{"injectables/PostsService.html":{}}}],["d",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["data",{"_index":346,"title":{},"body":{"classes/CreateTagDto.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["data'})@post",{"_index":578,"title":{},"body":{"controllers/PostsController.html":{}}}],["database",{"_index":105,"title":{},"body":{"modules/AppModule.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["databaseconfig",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["datasource",{"_index":921,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["date",{"_index":258,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["db",{"_index":648,"title":{},"body":{"modules/PostsModule.html":{}}}],["declarations",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorator",{"_index":331,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["decorators",{"_index":186,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["deeper",{"_index":1143,"title":{},"body":{"index.html":{}}}],["default",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"entities/Post.html":{},"miscellaneous/variables.html":{}}}],["defaultvaluepipe",{"_index":885,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(1",{"_index":903,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(10",{"_index":901,"title":{},"body":{"controllers/UsersController.html":{}}}],["define",{"_index":1254,"title":{},"body":{"index.html":{}}}],["defined",{"_index":116,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":567,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["delete'})@apiresponse({status",{"_index":583,"title":{},"body":{"controllers/PostsController.html":{}}}],["delete('soft",{"_index":788,"title":{},"body":{"controllers/TagsController.html":{}}}],["delete(@query('id",{"_index":631,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{}}}],["delete(id",{"_index":580,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["deleted",{"_index":435,"title":{},"body":{"entities/MetaOption.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["deletedat",{"_index":763,"title":{},"body":{"entities/Tag.html":{}}}],["deletedatecolumn",{"_index":765,"title":{},"body":{"entities/Tag.html":{}}}],["deletes",{"_index":581,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["deleting",{"_index":830,"title":{},"body":{"injectables/TagsService.html":{}}}],["deletion",{"_index":662,"title":{},"body":{"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["dependencies",{"_index":21,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{},"overview.html":{}}}],["dependency",{"_index":146,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{}}}],["deploy",{"_index":1104,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":1117,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":1110,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":1126,"title":{},"body":{"index.html":{}}}],["deprecated",{"_index":996,"title":{},"body":{"injectables/UsersService.html":{}}}],["description",{"_index":178,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"index.html":{},"properties.html":{}}}],["details",{"_index":492,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["development",{"_index":1090,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":1154,"title":{},"body":{"index.html":{}}}],["directory",{"_index":1245,"title":{},"body":{"index.html":{}}}],["discord",{"_index":1140,"title":{},"body":{"index.html":{}}}],["dive",{"_index":1142,"title":{},"body":{"index.html":{}}}],["doc",{"_index":1190,"title":{},"body":{"index.html":{}}}],["doclet",{"_index":1189,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":1016,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["doesn't",{"_index":743,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["doesnt",{"_index":675,"title":{},"body":{"injectables/PostsService.html":{}}}],["draft",{"_index":285,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["dto",{"_index":179,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["dto/create",{"_index":610,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["dto/patch",{"_index":611,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["dtos/create",{"_index":456,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["dtos/get",{"_index":886,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/patch",{"_index":888,"title":{},"body":{"controllers/UsersController.html":{}}}],["e.g",{"_index":256,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/UsersController.html":{}}}],["e2e",{"_index":1099,"title":{},"body":{"index.html":{}}}],["each",{"_index":206,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["eager",{"_index":525,"title":{},"body":{"entities/Post.html":{}}}],["efficient",{"_index":1079,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":1109,"title":{},"body":{"index.html":{}}}],["email",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["enable",{"_index":1236,"title":{},"body":{"index.html":{}}}],["endpoint",{"_index":995,"title":{},"body":{"injectables/UsersService.html":{}}}],["ensure",{"_index":1107,"title":{},"body":{"index.html":{}}}],["enterprise",{"_index":1157,"title":{},"body":{"index.html":{}}}],["entire",{"_index":640,"title":{},"body":{"modules/PostsModule.html":{}}}],["entities",{"_index":85,"title":{},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"overview.html":{}}}],["entity",{"_index":406,"title":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}},"body":{"entities/MetaOption.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"coverage.html":{}}}],["entries",{"_index":875,"title":{},"body":{"controllers/UsersController.html":{}}}],["enum",{"_index":316,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["enumerations",{"_index":1059,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/post",{"_index":308,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["env",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["env.${env",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["environmentvalidation",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["equal",{"_index":736,"title":{},"body":{"injectables/PostsService.html":{}}}],["error",{"_index":713,"title":{},"body":{"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["error('post",{"_index":702,"title":{},"body":{"injectables/PostsService.html":{}}}],["error.message",{"_index":720,"title":{},"body":{"injectables/PostsService.html":{}}}],["establish",{"_index":934,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["etc",{"_index":548,"title":{},"body":{"entities/Post.html":{}}}],["everything",{"_index":708,"title":{},"body":{"injectables/PostsService.html":{}}}],["example",{"_index":229,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"entities/Tag.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["except",{"_index":509,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["exist",{"_index":744,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["existing",{"_index":505,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["existinguser",{"_index":1008,"title":{},"body":{"injectables/UsersService.html":{}}}],["exists",{"_index":169,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["experience",{"_index":1145,"title":{},"body":{"index.html":{}}}],["explain",{"_index":1201,"title":{},"body":{"index.html":{}}}],["export",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":1044,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":506,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["fails",{"_index":931,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["failure",{"_index":718,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["false",{"_index":93,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["fast",{"_index":1120,"title":{},"body":{"index.html":{}}}],["feature",{"_index":644,"title":{},"body":{"modules/PostsModule.html":{}}}],["featured",{"_index":237,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["featuredimage",{"_index":348,"title":{},"body":{"classes/CreateTagDto.html":{},"entities/Tag.html":{}}}],["featuredimageurl",{"_index":215,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["features",{"_index":1130,"title":{},"body":{"index.html":{}}}],["fetch",{"_index":562,"title":{},"body":{"entities/Post.html":{},"controllers/UsersController.html":{}}}],["few",{"_index":1122,"title":{},"body":{"index.html":{}}}],["field",{"_index":843,"title":{},"body":{"entities/User.html":{}}}],["fields",{"_index":508,"title":{},"body":{"classes/PatchPostDto.html":{},"injectables/PostsService.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{}}}],["filename",{"_index":998,"title":{},"body":{"injectables/UsersService.html":{}}}],["filter",{"_index":882,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["filters",{"_index":984,"title":{},"body":{"injectables/UsersService.html":{}}}],["finally",{"_index":721,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{},"index.html":{}}}],["find",{"_index":698,"title":{},"body":{"injectables/PostsService.html":{}}}],["findall",{"_index":650,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["findall(getuserparamdto",{"_index":982,"title":{},"body":{"injectables/UsersService.html":{}}}],["findall(userid",{"_index":663,"title":{},"body":{"injectables/PostsService.html":{}}}],["findmultipletags",{"_index":810,"title":{},"body":{"injectables/TagsService.html":{}}}],["findmultipletags(tags",{"_index":817,"title":{},"body":{"injectables/TagsService.html":{}}}],["findonebyid",{"_index":966,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyid(id",{"_index":988,"title":{},"body":{"injectables/UsersService.html":{}}}],["finds",{"_index":819,"title":{},"body":{"injectables/TagsService.html":{}}}],["first",{"_index":840,"title":{},"body":{"entities/User.html":{},"index.html":{}}}],["firstname",{"_index":374,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["flag",{"_index":1225,"title":{},"body":{"index.html":{}}}],["flat",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TagsService.html":{},"index.html":{}}}],["focus",{"_index":1129,"title":{},"body":{"index.html":{}}}],["follow",{"_index":1160,"title":{},"body":{"index.html":{}}}],["format",{"_index":425,"title":{},"body":{"entities/MetaOption.html":{},"controllers/UsersController.html":{}}}],["forwardref",{"_index":141,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["found",{"_index":621,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["found'})@delete",{"_index":586,"title":{},"body":{"controllers/PostsController.html":{}}}],["found'})@patch",{"_index":598,"title":{},"body":{"controllers/PostsController.html":{}}}],["framework",{"_index":1077,"title":{},"body":{"index.html":{}}}],["friendly",{"_index":546,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["full",{"_index":1156,"title":{},"body":{"index.html":{}}}],["function",{"_index":1024,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["functions",{"_index":1064,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":1125,"title":{},"body":{"index.html":{}}}],["generate",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/TagsService.html":{},"index.html":{}}}],["generated",{"_index":1231,"title":{},"body":{"index.html":{}}}],["generating",{"_index":1246,"title":{},"body":{"index.html":{}}}],["get('/:id",{"_index":899,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:id?')@apioperation({summary",{"_index":871,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:userid",{"_index":614,"title":{},"body":{"controllers/PostsController.html":{}}}],["get('/:userid?')@apioperation({summary",{"_index":590,"title":{},"body":{"controllers/PostsController.html":{}}}],["get()@apioperation({summary",{"_index":863,"title":{},"body":{"controllers/UsersController.html":{}}}],["gethello",{"_index":115,"title":{},"body":{"injectables/AppService.html":{}}}],["getposts",{"_index":568,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(@param('userid",{"_index":616,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(userid",{"_index":589,"title":{},"body":{"controllers/PostsController.html":{}}}],["getting",{"_index":563,"title":{"index.html":{}},"body":{"entities/Post.html":{}}}],["getuserbyid",{"_index":854,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuserbyid(@query('id",{"_index":894,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuserbyid(id",{"_index":862,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuserparamdto",{"_index":881,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getusers",{"_index":855,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(getuserparamdto",{"_index":869,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusersparamdto",{"_index":399,"title":{"classes/GetUsersParamDto.html":{}},"body":{"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["give",{"_index":1244,"title":{},"body":{"index.html":{}}}],["global",{"_index":905,"title":{},"body":{"controllers/UsersController.html":{},"miscellaneous/functions.html":{}}}],["go",{"_index":1203,"title":{},"body":{"index.html":{}}}],["going",{"_index":1221,"title":{},"body":{"index.html":{}}}],["graph",{"_index":1150,"title":{},"body":{"index.html":{}}}],["grow",{"_index":1170,"title":{},"body":{"index.html":{}}}],["handle",{"_index":656,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["handles",{"_index":973,"title":{},"body":{"injectables/UsersService.html":{}}}],["handling",{"_index":472,"title":{},"body":{"modules/MetaOptionsModule.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["hands",{"_index":1144,"title":{},"body":{"index.html":{}}}],["handy",{"_index":1134,"title":{},"body":{"index.html":{}}}],["having",{"_index":1232,"title":{},"body":{"index.html":{}}}],["hello",{"_index":121,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":1148,"title":{},"body":{"index.html":{}}}],["here",{"_index":1178,"title":{},"body":{"index.html":{}}}],["host",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["http://localhost.com/images/image1.jpg",{"_index":324,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["http://localhost.com/images/image1.jpg'})@isoptional()@minlength(4)@maxlength(1024)@isurl",{"_index":239,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["http://localhost:3001/coverage.htmlit",{"_index":1192,"title":{},"body":{"index.html":{}}}],["httpexception",{"_index":990,"title":{},"body":{"injectables/UsersService.html":{}}}],["https://example.com/images/tag",{"_index":355,"title":{},"body":{"classes/CreateTagDto.html":{},"entities/Tag.html":{}}}],["https://nestjs.com",{"_index":1183,"title":{},"body":{"index.html":{}}}],["https://orkhan.gitbook.io/typeorm/docs/decorator",{"_index":776,"title":{},"body":{"entities/Tag.html":{}}}],["https://schema.org",{"_index":270,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://schema.org\",\\r\\n",{"_index":322,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["httpstatus",{"_index":991,"title":{},"body":{"injectables/UsersService.html":{}}}],["httpstatus.moved_permanently",{"_index":997,"title":{},"body":{"injectables/UsersService.html":{}}}],["hyphen",{"_index":1217,"title":{},"body":{"index.html":{}}}],["i'll",{"_index":1200,"title":{},"body":{"index.html":{}}}],["i'm",{"_index":1240,"title":{},"body":{"index.html":{}}}],["i.e",{"_index":1256,"title":{},"body":{"index.html":{}}}],["id",{"_index":227,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["id'})@apiquery({name",{"_index":582,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["id=5",{"_index":868,"title":{},"body":{"controllers/UsersController.html":{}}}],["identifier",{"_index":420,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"coverage.html":{}}}],["ids",{"_index":291,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["image",{"_index":238,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["image.jpg",{"_index":372,"title":{},"body":{"classes/CreateTagDto.html":{},"entities/Tag.html":{}}}],["image.jpg'})@isoptional()@isurl()@maxlength(1024",{"_index":356,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["import",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["important",{"_index":724,"title":{},"body":{"injectables/PostsService.html":{}}}],["imported",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["imports",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}}}],["in(tags",{"_index":827,"title":{},"body":{"injectables/TagsService.html":{}}}],["include",{"_index":389,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["incoming",{"_index":332,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["index",{"_index":113,"title":{"index.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["indicating",{"_index":416,"title":{},"body":{"entities/MetaOption.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["information",{"_index":454,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["infrastructure",{"_index":1131,"title":{},"body":{"index.html":{}}}],["initializing",{"_index":1066,"title":{},"body":{"miscellaneous/functions.html":{}}}],["inject",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["inject(forwardref",{"_index":167,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["inject(profileconfig.key",{"_index":994,"title":{},"body":{"injectables/UsersService.html":{}}}],["injectable",{"_index":110,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":111,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injected",{"_index":975,"title":{},"body":{"injectables/UsersService.html":{}}}],["injecting",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["injectrepository",{"_index":497,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(metaoption",{"_index":498,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{}}}],["injectrepository(post",{"_index":673,"title":{},"body":{"injectables/PostsService.html":{}}}],["injectrepository(tag",{"_index":823,"title":{},"body":{"injectables/TagsService.html":{}}}],["injectrepository(user",{"_index":993,"title":{},"body":{"injectables/UsersService.html":{}}}],["injects",{"_index":461,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["innovations",{"_index":370,"title":{},"body":{"classes/CreateTagDto.html":{},"entities/Tag.html":{}}}],["innovations'})@isoptional()@isstring",{"_index":353,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["insertion",{"_index":918,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["inside",{"_index":647,"title":{},"body":{"modules/PostsModule.html":{}}}],["install",{"_index":1124,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":1089,"title":{},"body":{"index.html":{}}}],["instance",{"_index":335,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["instead",{"_index":705,"title":{},"body":{"injectables/PostsService.html":{}}}],["instructs",{"_index":1228,"title":{},"body":{"index.html":{}}}],["integer",{"_index":226,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["interact",{"_index":1151,"title":{},"body":{"index.html":{}}}],["interacting",{"_index":486,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/TagsService.html":{}}}],["invalid",{"_index":576,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["isarray",{"_index":197,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["isauth",{"_index":149,"title":{},"body":{"injectables/AuthService.html":{}}}],["isemail",{"_index":395,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isemail()@isnotempty()@maxlength(96",{"_index":376,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":298,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(poststatus",{"_index":320,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttype",{"_index":317,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isglobal",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["isint",{"_index":299,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{}}}],["isiso8601",{"_index":300,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isjson",{"_index":301,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{}}}],["isnan(userid",{"_index":897,"title":{},"body":{"controllers/UsersController.html":{}}}],["isnotempty",{"_index":198,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchPostDto.html":{}}}],["isnotempty()@isjson",{"_index":340,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["isoptional",{"_index":302,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{}}}],["isoptional()@isjson",{"_index":272,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isstring",{"_index":303,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@maxlength(96)@minlength(8)@matches(/^(?=.*[a",{"_index":382,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":378,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isoptional()@minlength(3)@maxlength(96",{"_index":380,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isurl",{"_index":304,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["it's",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["items",{"_index":192,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["iterate",{"_index":939,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["itself",{"_index":1195,"title":{},"body":{"index.html":{}}}],["job",{"_index":1163,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":1165,"title":{},"body":{"index.html":{}}}],["joi",{"_index":1049,"title":{},"body":{"dependencies.html":{}}}],["join",{"_index":1176,"title":{},"body":{"index.html":{}}}],["joincolumn",{"_index":443,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["jointable",{"_index":555,"title":{},"body":{"entities/Post.html":{}}}],["json",{"_index":266,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["kamil",{"_index":1180,"title":{},"body":{"index.html":{}}}],["key",{"_index":642,"title":{},"body":{"modules/PostsModule.html":{},"index.html":{}}}],["large",{"_index":529,"title":{},"body":{"entities/Post.html":{}}}],["last",{"_index":439,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["lastname",{"_index":375,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["later",{"_index":734,"title":{},"body":{"injectables/PostsService.html":{}}}],["learn",{"_index":1137,"title":{},"body":{"index.html":{}}}],["legend",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":531,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["lengthy",{"_index":1199,"title":{},"body":{"index.html":{}}}],["let's",{"_index":1234,"title":{},"body":{"index.html":{}}}],["letter",{"_index":391,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["letters",{"_index":365,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["license",{"_index":1186,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1168,"title":{},"body":{"index.html":{}}}],["limit",{"_index":870,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["linenumber",{"_index":1000,"title":{},"body":{"injectables/UsersService.html":{}}}],["linkedin",{"_index":1162,"title":{},"body":{"index.html":{}}}],["list",{"_index":196,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["little",{"_index":1196,"title":{},"body":{"index.html":{}}}],["load",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["loaded",{"_index":699,"title":{},"body":{"injectables/PostsService.html":{}}}],["localhost:3001",{"_index":1252,"title":{},"body":{"index.html":{}}}],["log",{"_index":717,"title":{},"body":{"injectables/PostsService.html":{}}}],["logic",{"_index":477,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["login",{"_index":150,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(email",{"_index":159,"title":{},"body":{"injectables/AuthService.html":{}}}],["looking",{"_index":1112,"title":{},"body":{"index.html":{}}}],["loop",{"_index":1159,"title":{},"body":{"index.html":{}}}],["lowercase",{"_index":278,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["main",{"_index":233,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["makes",{"_index":79,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["making",{"_index":507,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["managing",{"_index":448,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["manner",{"_index":926,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["manually",{"_index":94,"title":{},"body":{"modules/AppModule.html":{}}}],["many",{"_index":176,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"entities/Post.html":{},"entities/Tag.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{}}}],["many.provider",{"_index":959,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["many.provider.ts",{"_index":915,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{},"coverage.html":{}}}],["many.provider.ts:15",{"_index":922,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["many.provider.ts:29",{"_index":924,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["manytomany",{"_index":556,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["manytomany(undefined",{"_index":549,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["manytoone",{"_index":557,"title":{},"body":{"entities/Post.html":{}}}],["manytoone(undefined",{"_index":523,"title":{},"body":{"entities/Post.html":{}}}],["marking",{"_index":790,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["matches",{"_index":305,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["matches(/^(?=.*[a",{"_index":398,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(/^[a",{"_index":319,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["matching",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["mau",{"_index":1115,"title":{},"body":{"index.html":{}}}],["maxlength",{"_index":306,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["maxlength(1024",{"_index":325,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(256",{"_index":318,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(512",{"_index":315,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(96",{"_index":396,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["meaning",{"_index":687,"title":{},"body":{"injectables/PostsService.html":{}}}],["message",{"_index":277,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["meta",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["metadata",{"_index":268,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"entities/Tag.html":{},"dependencies.html":{}}}],["metaoption",{"_index":407,"title":{"entities/MetaOption.html":{}},"body":{"entities/MetaOption.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["metaoptionrepository",{"_index":485,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["metaoptions",{"_index":216,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"injectables/PostsService.html":{}}}],["metaoptions.post",{"_index":535,"title":{},"body":{"entities/Post.html":{}}}],["metaoptionscontroller",{"_index":446,"title":{"controllers/MetaOptionsController.html":{}},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"coverage.html":{}}}],["metaoptionsmodule",{"_index":31,"title":{"modules/MetaOptionsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules.html":{},"overview.html":{}}}],["metaoptionsrepository",{"_index":653,"title":{},"body":{"injectables/PostsService.html":{}}}],["metaoptionsservice",{"_index":457,"title":{"injectables/MetaOptionsService.html":{}},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{},"overview.html":{}}}],["metavalue",{"_index":329,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"entities/MetaOption.html":{}}}],["method",{"_index":624,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["methods",{"_index":114,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["migrations",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["minimum",{"_index":386,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength",{"_index":307,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":369,"title":{},"body":{"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(4",{"_index":314,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["minlength(8",{"_index":397,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":1058,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1167,"title":{},"body":{"index.html":{}}}],["mode",{"_index":1092,"title":{},"body":{"index.html":{}}}],["module",{"_index":18,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["modules",{"_index":20,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["moment",{"_index":732,"title":{},"body":{"injectables/PostsService.html":{}}}],["more",{"_index":1111,"title":{},"body":{"index.html":{}}}],["moved",{"_index":1003,"title":{},"body":{"injectables/UsersService.html":{}}}],["multiple",{"_index":181,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["mysql",{"_index":428,"title":{},"body":{"entities/MetaOption.html":{}}}],["myśliwiec",{"_index":1181,"title":{},"body":{"index.html":{}}}],["name",{"_index":155,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateTagDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["necessary",{"_index":972,"title":{},"body":{"injectables/UsersService.html":{}}}],["need",{"_index":735,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{}}}],["needed",{"_index":1243,"title":{},"body":{"index.html":{}}}],["needs",{"_index":511,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["nest",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/TagsService.html":{},"index.html":{}}}],["nestframework",{"_index":1185,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":1068,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["nestjs/common",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":1041,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":520,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1043,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":205,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["never",{"_index":962,"title":{},"body":{"modules/UsersModule.html":{}}}],["new",{"_index":210,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{}}}],["newly",{"_index":660,"title":{},"body":{"injectables/PostsService.html":{}}}],["newuser",{"_index":942,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["newusers",{"_index":932,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["newusers.push(result",{"_index":946,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["next",{"_index":1224,"title":{},"body":{"index.html":{}}}],["node.js",{"_index":1076,"title":{},"body":{"index.html":{}}}],["note",{"_index":426,"title":{},"body":{"entities/MetaOption.html":{}}}],["notfoundexception",{"_index":670,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["notfoundexception(\"this",{"_index":742,"title":{},"body":{"injectables/PostsService.html":{}}}],["notfoundexception('user",{"_index":1006,"title":{},"body":{"injectables/UsersService.html":{}}}],["now",{"_index":1194,"title":{},"body":{"index.html":{}}}],["npcs",{"_index":1204,"title":{},"body":{"index.html":{}}}],["npm",{"_index":1088,"title":{},"body":{"index.html":{}}}],["npx",{"_index":107,"title":{},"body":{"modules/AppModule.html":{},"injectables/TagsService.html":{},"index.html":{}}}],["null",{"_index":242,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["nullable",{"_index":422,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["number",{"_index":224,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["object",{"_index":244,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["objects",{"_index":189,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["occurs",{"_index":714,"title":{},"body":{"injectables/PostsService.html":{}}}],["offer",{"_index":1164,"title":{},"body":{"index.html":{}}}],["official",{"_index":1116,"title":{},"body":{"index.html":{}}}],["once",{"_index":183,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"index.html":{}}}],["ondelete",{"_index":431,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["one",{"_index":390,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"injectables/UsersCreateManyProvider.html":{},"index.html":{}}}],["onetomany",{"_index":849,"title":{},"body":{"entities/User.html":{}}}],["onetomany(undefined",{"_index":845,"title":{},"body":{"entities/User.html":{}}}],["onetoone",{"_index":444,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["onetoone(undefined",{"_index":429,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["open",{"_index":1169,"title":{},"body":{"index.html":{}}}],["operations",{"_index":464,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["operator",{"_index":684,"title":{},"body":{"injectables/PostsService.html":{}}}],["option",{"_index":452,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{}}}],["option.entity",{"_index":470,"title":{},"body":{"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["option.entity.ts",{"_index":408,"title":{},"body":{"entities/MetaOption.html":{},"coverage.html":{}}}],["option.entity.ts:21",{"_index":419,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:31",{"_index":423,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:37",{"_index":414,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:43",{"_index":438,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:53",{"_index":433,"title":{},"body":{"entities/MetaOption.html":{}}}],["optional",{"_index":156,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["optional)'})@apiresponse({status",{"_index":594,"title":{},"body":{"controllers/PostsController.html":{}}}],["options",{"_index":248,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"injectables/PostsService.html":{}}}],["options.controller",{"_index":469,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["options.controller.ts",{"_index":447,"title":{},"body":{"controllers/MetaOptionsController.html":{},"coverage.html":{}}}],["options.controller.ts:22",{"_index":451,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["options.dto",{"_index":312,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{}}}],["options.dto.ts",{"_index":339,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["options.dto.ts:14",{"_index":341,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["options.module",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["options.module.ts",{"_index":468,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["options.service",{"_index":459,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{}}}],["options.service.ts",{"_index":479,"title":{},"body":{"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["options.service.ts:12",{"_index":484,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["options.service.ts:27",{"_index":488,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["options/dtos/create",{"_index":311,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["options/meta",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["options/providers/meta",{"_index":478,"title":{},"body":{"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["order",{"_index":1206,"title":{},"body":{"index.html":{}}}],["out",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["over",{"_index":940,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{},"index.html":{}}}],["overview",{"_index":1267,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1036,"title":{"dependencies.html":{},"properties.html":{}},"body":{"index.html":{}}}],["page",{"_index":252,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["pagination",{"_index":880,"title":{},"body":{"controllers/UsersController.html":{}}}],["pagination'})@apiresponse({status",{"_index":873,"title":{},"body":{"controllers/UsersController.html":{}}}],["param",{"_index":462,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["param.dto",{"_index":887,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param.dto.ts",{"_index":401,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["param.dto.ts:13",{"_index":404,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["parameters",{"_index":154,"title":{},"body":{"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["parseint(id",{"_index":895,"title":{},"body":{"controllers/UsersController.html":{}}}],["parseintpipe",{"_index":600,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["part",{"_index":1155,"title":{},"body":{"index.html":{}}}],["partially",{"_index":518,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["partialtype",{"_index":514,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["partialtype(createpostdto",{"_index":510,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["partialtype(createuserdto",{"_index":519,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["particular",{"_index":1223,"title":{},"body":{"index.html":{}}}],["parts",{"_index":1202,"title":{},"body":{"index.html":{}}}],["pass",{"_index":1248,"title":{},"body":{"index.html":{}}}],["passed",{"_index":688,"title":{},"body":{"injectables/PostsService.html":{}}}],["password",{"_index":101,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["patch",{"_index":601,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["patchpostdto",{"_index":502,"title":{"classes/PatchPostDto.html":{}},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["patchpostdto.content",{"_index":748,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.featuredimageurl",{"_index":756,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.id",{"_index":741,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.posttype",{"_index":752,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.publishon",{"_index":758,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.slug",{"_index":754,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.status",{"_index":750,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.tags.length",{"_index":738,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.title",{"_index":746,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchuser",{"_index":856,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(@body",{"_index":912,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(patchuserdto",{"_index":883,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuserdto",{"_index":516,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["path",{"_index":1214,"title":{},"body":{"index.html":{}}}],["per",{"_index":877,"title":{},"body":{"controllers/UsersController.html":{}}}],["perform",{"_index":95,"title":{},"body":{"modules/AppModule.html":{}}}],["permanently",{"_index":1002,"title":{},"body":{"injectables/UsersService.html":{}}}],["person",{"_index":271,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["person\"\\r\\n",{"_index":323,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["pg",{"_index":1051,"title":{},"body":{"dependencies.html":{}}}],["pg_ctl",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["pick",{"_index":1222,"title":{},"body":{"index.html":{}}}],["pipes",{"_index":1072,"title":{},"body":{"miscellaneous/functions.html":{}}}],["platform",{"_index":1114,"title":{},"body":{"index.html":{}}}],["please",{"_index":733,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{}}}],["port",{"_index":97,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["possible",{"_index":250,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["post",{"_index":212,"title":{"entities/Post.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["post'})@apiresponse({status",{"_index":572,"title":{},"body":{"controllers/PostsController.html":{}}}],["post'})@isstring()@isnotempty()@maxlength(256)@minlength(4)@matches(/^[a",{"_index":274,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post'})@isstring()@minlength(4)@maxlength(512)@isnotempty",{"_index":296,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post('create",{"_index":858,"title":{},"body":{"controllers/UsersController.html":{}}}],["post.'})@isstring()@isoptional",{"_index":234,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.author",{"_index":846,"title":{},"body":{"entities/User.html":{}}}],["post.content",{"_index":747,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.dto",{"_index":515,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["post.dto.ts",{"_index":209,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"coverage.html":{}}}],["post.dto.ts:112",{"_index":240,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:123",{"_index":263,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:135",{"_index":294,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:161",{"_index":246,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:174",{"_index":231,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:19",{"_index":513,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["post.dto.ts:37",{"_index":297,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:48",{"_index":255,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:65",{"_index":281,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:76",{"_index":289,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:87",{"_index":235,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:99",{"_index":273,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.entity",{"_index":638,"title":{},"body":{"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["post.featuredimageurl",{"_index":755,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.metaoptions",{"_index":430,"title":{},"body":{"entities/MetaOption.html":{}}}],["post.posttype",{"_index":751,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.publishon",{"_index":757,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.slug",{"_index":753,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.status",{"_index":749,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.tags",{"_index":759,"title":{},"body":{"injectables/PostsService.html":{},"entities/Tag.html":{}}}],["post.title",{"_index":745,"title":{},"body":{"injectables/PostsService.html":{}}}],["postgres",{"_index":84,"title":{},"body":{"modules/AppModule.html":{}}}],["posts",{"_index":350,"title":{},"body":{"classes/CreateTagDto.html":{},"entities/MetaOption.html":{},"modules/MetaOptionsModule.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"index.html":{}}}],["posts.controller",{"_index":637,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts/posts.module",{"_index":42,"title":{},"body":{"modules/AppModule.html":{}}}],["postscontroller",{"_index":564,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":32,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsrepository",{"_index":652,"title":{},"body":{"injectables/PostsService.html":{}}}],["postsservice",{"_index":603,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["poststatus",{"_index":284,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["poststatus.draft",{"_index":561,"title":{},"body":{"entities/Post.html":{}}}],["posttype",{"_index":217,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["posttype.post",{"_index":560,"title":{},"body":{"entities/Post.html":{}}}],["pr",{"_index":1260,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["prettier",{"_index":108,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["primarygeneratedcolumn",{"_index":418,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["private",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["proceed",{"_index":832,"title":{},"body":{"injectables/TagsService.html":{}}}],["process",{"_index":731,"title":{},"body":{"injectables/PostsService.html":{}}}],["process.env.node_env",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["production",{"_index":1094,"title":{},"body":{"index.html":{}}}],["profile",{"_index":976,"title":{},"body":{"injectables/UsersService.html":{}}}],["profileconfig",{"_index":960,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["profileconfiguration",{"_index":969,"title":{},"body":{"injectables/UsersService.html":{}}}],["progressive",{"_index":1075,"title":{},"body":{"index.html":{}}}],["project",{"_index":1086,"title":{},"body":{"index.html":{}}}],["promise",{"_index":494,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["properties",{"_index":184,"title":{"properties.html":{}},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"properties.html":{}}}],["provide",{"_index":1211,"title":{},"body":{"index.html":{}}}],["provided",{"_index":490,"title":{},"body":{"injectables/MetaOptionsService.html":{},"index.html":{}}}],["provider",{"_index":1259,"title":{},"body":{"index.html":{}}}],["providers",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers/auth.service",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["providers/meta",{"_index":458,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{}}}],["providers/posts.service",{"_index":604,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["providers/tags.service",{"_index":793,"title":{},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{}}}],["providers/users",{"_index":958,"title":{},"body":{"modules/UsersModule.html":{}}}],["providers/users.service",{"_index":889,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["provides",{"_index":475,"title":{},"body":{"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{}}}],["pts",{"_index":1215,"title":{},"body":{"index.html":{}}}],["public",{"_index":148,"title":{},"body":{"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["publication",{"_index":264,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["published",{"_index":259,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["published''})@isenum(poststatus)@isnotempty",{"_index":288,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["publishon",{"_index":218,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["query",{"_index":602,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["query('limit",{"_index":900,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('page",{"_index":902,"title":{},"body":{"controllers/UsersController.html":{}}}],["queryrunner",{"_index":694,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["queryrunner.committransaction",{"_index":710,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["queryrunner.connect",{"_index":937,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["queryrunner.manager.create(user",{"_index":943,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["queryrunner.manager.delete(post",{"_index":704,"title":{},"body":{"injectables/PostsService.html":{}}}],["queryrunner.manager.save(newuser",{"_index":945,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["queryrunner.release",{"_index":727,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["queryrunner.rollbacktransaction",{"_index":716,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["queryrunner.starttransaction",{"_index":696,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["questions",{"_index":1138,"title":{},"body":{"index.html":{}}}],["r\\n",{"_index":321,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["rate",{"_index":1207,"title":{},"body":{"index.html":{}}}],["read",{"_index":1177,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["ready",{"_index":1103,"title":{},"body":{"index.html":{}}}],["real",{"_index":1152,"title":{},"body":{"index.html":{}}}],["record",{"_index":417,"title":{},"body":{"entities/MetaOption.html":{}}}],["records",{"_index":980,"title":{},"body":{"injectables/UsersService.html":{}}}],["reference",{"_index":777,"title":{},"body":{"entities/Tag.html":{}}}],["reflect",{"_index":1053,"title":{},"body":{"dependencies.html":{}}}],["regenerate",{"_index":1242,"title":{},"body":{"index.html":{}}}],["registered",{"_index":872,"title":{},"body":{"controllers/UsersController.html":{}}}],["registers",{"_index":471,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["related",{"_index":351,"title":{},"body":{"classes/CreateTagDto.html":{},"modules/MetaOptionsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["relations",{"_index":679,"title":{},"body":{"injectables/PostsService.html":{}}}],["relationship",{"_index":434,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["relationships",{"_index":628,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"index.html":{}}}],["release",{"_index":722,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["relevant",{"_index":627,"title":{},"body":{"controllers/PostsController.html":{}}}],["remove",{"_index":706,"title":{},"body":{"injectables/PostsService.html":{}}}],["removes",{"_index":626,"title":{},"body":{"controllers/PostsController.html":{}}}],["removing",{"_index":792,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["repositories",{"_index":674,"title":{},"body":{"injectables/PostsService.html":{}}}],["repository",{"_index":483,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["representing",{"_index":762,"title":{},"body":{"entities/Tag.html":{}}}],["represents",{"_index":409,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/User.html":{}}}],["req",{"_index":333,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["request",{"_index":577,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["requesting",{"_index":666,"title":{},"body":{"injectables/PostsService.html":{}}}],["requests",{"_index":781,"title":{},"body":{"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["requesttimeoutexception",{"_index":671,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["requesttimeoutexception('could",{"_index":938,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["requesttimeoutexception('database",{"_index":1005,"title":{},"body":{"injectables/UsersService.html":{}}}],["required",{"_index":191,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["requiring",{"_index":1121,"title":{},"body":{"index.html":{}}}],["reset",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resolves",{"_index":495,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["resources",{"_index":1132,"title":{},"body":{"index.html":{}}}],["response",{"_index":711,"title":{},"body":{"injectables/PostsService.html":{}}}],["responsible",{"_index":463,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["result",{"_index":944,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["results",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["retrieve",{"_index":986,"title":{},"body":{"injectables/UsersService.html":{}}}],["retrieved",{"_index":866,"title":{},"body":{"controllers/UsersController.html":{}}}],["retrieves",{"_index":591,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["return",{"_index":120,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["returned",{"_index":876,"title":{},"body":{"controllers/UsersController.html":{}}}],["returns",{"_index":118,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["review",{"_index":287,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["rollback",{"_index":715,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["root",{"_index":1219,"title":{},"body":{"index.html":{}}}],["route",{"_index":799,"title":{},"body":{"controllers/TagsController.html":{}}}],["routes",{"_index":473,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["run",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["runner",{"_index":723,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["running",{"_index":1067,"title":{},"body":{"miscellaneous/functions.html":{}}}],["runs",{"_index":1108,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":1055,"title":{},"body":{"dependencies.html":{}}}],["s",{"_index":1227,"title":{},"body":{"index.html":{}}}],["sample_token",{"_index":172,"title":{},"body":{"injectables/AuthService.html":{}}}],["save",{"_index":480,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["saved",{"_index":496,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["saying",{"_index":1250,"title":{},"body":{"index.html":{}}}],["scalable",{"_index":1080,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":286,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["schema",{"_index":219,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["script",{"_index":1188,"title":{},"body":{"index.html":{}}}],["see",{"_index":1191,"title":{},"body":{"index.html":{}}}],["seen",{"_index":1251,"title":{},"body":{"index.html":{}}}],["separator",{"_index":366,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["serialized",{"_index":265,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["series",{"_index":257,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["series''})@isenum(posttype)@isnotempty",{"_index":254,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["serve",{"_index":1230,"title":{},"body":{"index.html":{}}}],["server",{"_index":1081,"title":{},"body":{"index.html":{}}}],["service",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["set",{"_index":92,"title":{},"body":{"modules/AppModule.html":{}}}],["sets",{"_index":1070,"title":{},"body":{"miscellaneous/functions.html":{}}}],["setting",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["setup",{"_index":1087,"title":{},"body":{"index.html":{}}}],["shallow",{"_index":685,"title":{},"body":{"injectables/PostsService.html":{}}}],["side",{"_index":1082,"title":{},"body":{"index.html":{}}}],["sidebarenabled",{"_index":330,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{}}}],["sides",{"_index":1255,"title":{},"body":{"index.html":{}}}],["simple",{"_index":1123,"title":{},"body":{"index.html":{}}}],["single",{"_index":864,"title":{},"body":{"controllers/UsersController.html":{}}}],["slash",{"_index":1208,"title":{},"body":{"index.html":{}}}],["slug",{"_index":220,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["soft",{"_index":767,"title":{},"body":{"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["softdelete",{"_index":782,"title":{},"body":{"controllers/TagsController.html":{}}}],["softdelete(@query('id",{"_index":798,"title":{},"body":{"controllers/TagsController.html":{}}}],["softdelete(id",{"_index":787,"title":{},"body":{"controllers/TagsController.html":{}}}],["softremove",{"_index":811,"title":{},"body":{"injectables/TagsService.html":{}}}],["softremove(id",{"_index":820,"title":{},"body":{"injectables/TagsService.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["spaces",{"_index":280,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["spec",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/TagsService.html":{}}}],["specgenerate",{"_index":1257,"title":{},"body":{"index.html":{}}}],["special",{"_index":392,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["specific",{"_index":402,"title":{},"body":{"classes/GetUsersParamDto.html":{},"controllers/PostsController.html":{},"index.html":{}}}],["specprettier",{"_index":1263,"title":{},"body":{"index.html":{}}}],["sponsors",{"_index":1172,"title":{},"body":{"index.html":{}}}],["spread",{"_index":683,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/.../app.module.ts",{"_index":1275,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1065,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../post",{"_index":1060,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app.service.ts",{"_index":112,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":117,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.module",{"_index":957,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":140,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/providers/auth.service",{"_index":992,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/auth/providers/auth.service.ts",{"_index":147,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts:12",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:21",{"_index":157,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:5",{"_index":153,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/main.ts",{"_index":1023,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/meta",{"_index":338,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/dto/create",{"_index":208,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["src/posts/dto/patch",{"_index":503,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["src/posts/enums/post",{"_index":1063,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/post.entity",{"_index":441,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["src/posts/post.entity.ts",{"_index":522,"title":{},"body":{"entities/Post.html":{},"coverage.html":{}}}],["src/posts/post.entity.ts:100",{"_index":536,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:106",{"_index":526,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:26",{"_index":534,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:32",{"_index":554,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:43",{"_index":539,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:49",{"_index":545,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:60",{"_index":547,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:66",{"_index":528,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:72",{"_index":542,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:78",{"_index":533,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:84",{"_index":540,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:91",{"_index":552,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/posts.controller.ts",{"_index":565,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:48",{"_index":595,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:61",{"_index":579,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:74",{"_index":599,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:94",{"_index":587,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module.ts",{"_index":636,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/providers/posts.service.ts",{"_index":649,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/providers/posts.service.ts:122",{"_index":668,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:177",{"_index":661,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:21",{"_index":655,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:46",{"_index":664,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:64",{"_index":658,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/tags/dtos/create",{"_index":344,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["src/tags/providers/tags.service",{"_index":672,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/tags/providers/tags.service.ts",{"_index":809,"title":{},"body":{"injectables/TagsService.html":{},"coverage.html":{}}}],["src/tags/providers/tags.service.ts:13",{"_index":813,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:28",{"_index":815,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:38",{"_index":818,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:53",{"_index":816,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:74",{"_index":821,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tag.entity",{"_index":559,"title":{},"body":{"entities/Post.html":{}}}],["src/tags/tag.entity.ts",{"_index":761,"title":{},"body":{"entities/Tag.html":{},"coverage.html":{}}}],["src/tags/tag.entity.ts:103",{"_index":766,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:21",{"_index":770,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:33",{"_index":771,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:45",{"_index":774,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:55",{"_index":768,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:65",{"_index":773,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:76",{"_index":769,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:84",{"_index":772,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:91",{"_index":764,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:97",{"_index":775,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tags.controller.ts",{"_index":779,"title":{},"body":{"controllers/TagsController.html":{},"coverage.html":{}}}],["src/tags/tags.controller.ts:29",{"_index":784,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.controller.ts:39",{"_index":785,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.controller.ts:49",{"_index":789,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.module",{"_index":639,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/tags/tags.module.ts",{"_index":805,"title":{},"body":{"modules/TagsModule.html":{}}}],["src/users/dtos/create",{"_index":175,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dtos/get",{"_index":400,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["src/users/dtos/patch",{"_index":517,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["src/users/providers/users",{"_index":914,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{},"coverage.html":{}}}],["src/users/providers/users.service",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["src/users/providers/users.service.ts",{"_index":965,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/providers/users.service.ts:102",{"_index":981,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:132",{"_index":978,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:26",{"_index":971,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:57",{"_index":983,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:82",{"_index":989,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/user.entity",{"_index":558,"title":{},"body":{"entities/Post.html":{}}}],["src/users/user.entity.ts",{"_index":835,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/user.entity.ts:13",{"_index":841,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:23",{"_index":839,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:34",{"_index":842,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:46",{"_index":837,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:56",{"_index":844,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:62",{"_index":847,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.controller.ts",{"_index":851,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:107",{"_index":859,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:117",{"_index":884,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:49",{"_index":867,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:77",{"_index":879,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:91",{"_index":861,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":143,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostsModule.html":{}}}],["src/users/users.module.ts",{"_index":955,"title":{},"body":{"modules/UsersModule.html":{}}}],["start",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{},"index.html":{}}}],["start:dev",{"_index":1093,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":1095,"title":{},"body":{"index.html":{}}}],["started",{"_index":1074,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1085,"title":{},"body":{"index.html":{}}}],["statements",{"_index":1017,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":221,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["status.enum",{"_index":310,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["status.enum.ts",{"_index":1061,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["stay",{"_index":1158,"title":{},"body":{"index.html":{}}}],["steps",{"_index":1105,"title":{},"body":{"index.html":{}}}],["storage",{"_index":427,"title":{},"body":{"entities/MetaOption.html":{}}}],["stored",{"_index":424,"title":{},"body":{"entities/MetaOption.html":{}}}],["storing",{"_index":410,"title":{},"body":{"entities/MetaOption.html":{}}}],["story",{"_index":253,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["straightforward",{"_index":1119,"title":{},"body":{"index.html":{}}}],["string",{"_index":119,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["string(error",{"_index":951,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["structured",{"_index":543,"title":{},"body":{"entities/Post.html":{}}}],["success",{"_index":588,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["successful",{"_index":709,"title":{},"body":{"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["successfully",{"_index":618,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["successfully'})@apiquery({name",{"_index":874,"title":{},"body":{"controllers/UsersController.html":{}}}],["successfully'})@apiresponse({status",{"_index":574,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["summary",{"_index":615,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["support",{"_index":1139,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":1265,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1073,"title":{},"body":{"miscellaneous/functions.html":{}}}],["synchronize",{"_index":89,"title":{},"body":{"modules/AppModule.html":{}}}],["table",{"_index":1035,"title":{},"body":{"coverage.html":{}}}],["tables",{"_index":645,"title":{},"body":{"modules/PostsModule.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1034,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":290,"title":{"entities/Tag.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"coverage.html":{}}}],["tag.dto",{"_index":794,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["tag.dto.ts",{"_index":345,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["tag.dto.ts:30",{"_index":359,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:48",{"_index":368,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:61",{"_index":354,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:74",{"_index":362,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:88",{"_index":357,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.entity",{"_index":807,"title":{},"body":{"modules/TagsModule.html":{},"injectables/TagsService.html":{}}}],["tag.posts",{"_index":550,"title":{},"body":{"entities/Post.html":{}}}],["tags",{"_index":222,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"index.html":{}}}],["tags.controller",{"_index":806,"title":{},"body":{"modules/TagsModule.html":{}}}],["tags.length",{"_index":737,"title":{},"body":{"injectables/PostsService.html":{}}}],["tags/providers/tags",{"_index":822,"title":{},"body":{"injectables/TagsService.html":{},"index.html":{}}}],["tags/soft",{"_index":800,"title":{},"body":{"controllers/TagsController.html":{}}}],["tags/tags.module",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["tagscontroller",{"_index":778,"title":{"controllers/TagsController.html":{}},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{},"coverage.html":{}}}],["tagsmodule",{"_index":33,"title":{"modules/TagsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules.html":{},"overview.html":{}}}],["tagsrepository",{"_index":814,"title":{},"body":{"injectables/TagsService.html":{}}}],["tagsservice",{"_index":654,"title":{"injectables/TagsService.html":{}},"body":{"injectables/PostsService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"coverage.html":{},"overview.html":{}}}],["take",{"_index":1106,"title":{},"body":{"index.html":{}}}],["technology",{"_index":352,"title":{},"body":{"classes/CreateTagDto.html":{},"entities/Tag.html":{}}}],["technology'})@isstring()@isnotempty()@matches(/^[a",{"_index":364,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["technology'})@isstring()@minlength(3)@isnotempty()@maxlength(256",{"_index":358,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["test",{"_index":1098,"title":{},"body":{"index.html":{}}}],["test:covdeployment",{"_index":1101,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1100,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1096,"title":{},"body":{"index.html":{}}}],["text",{"_index":527,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["thanks",{"_index":1171,"title":{},"body":{"index.html":{}}}],["this.datasource.createqueryrunner",{"_index":933,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["this.metaoptionrepository.create(createmetaoptiondto",{"_index":499,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionrepository.save(metaoption",{"_index":501,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionsservice.create(createpostmetaoptiondto",{"_index":465,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["this.postsrepository.create",{"_index":689,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.delete(id",{"_index":760,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.find",{"_index":678,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.findone",{"_index":700,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.findoneby",{"_index":740,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.manager.connection.createqueryrunner",{"_index":695,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.save(post",{"_index":690,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsservice.create(createpostdto",{"_index":620,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.delete(id",{"_index":632,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.findall(userid",{"_index":617,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.update(patchpostdto",{"_index":623,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.tagsrepository.create(createtagdto",{"_index":824,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.delete(id",{"_index":833,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.find",{"_index":826,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.findone",{"_index":831,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.save(tag",{"_index":825,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.softdelete(id",{"_index":834,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsservice.create(createtagdto",{"_index":796,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.tagsservice.delete(id",{"_index":797,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.tagsservice.findmultipletags(createpostdto.tags",{"_index":682,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.tagsservice.findmultipletags(patchpostdto.tags",{"_index":729,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.tagsservice.softremove(id",{"_index":801,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.userscreatemanyprovider.createmany(createmanyusersdto",{"_index":1014,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.create(createuserdto",{"_index":1012,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findone",{"_index":1009,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findoneby",{"_index":1004,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.save(newuser",{"_index":1013,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.createmany(createmanyusersdto",{"_index":911,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.createuser(createuserdto",{"_index":909,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall(getuserparamdto",{"_index":904,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findonebyid(1234",{"_index":170,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findonebyid(createpostdto.authorid",{"_index":681,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.usersservice.findonebyid(userid",{"_index":898,"title":{},"body":{"controllers/UsersController.html":{}}}],["throw",{"_index":701,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["throws",{"_index":929,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["time",{"_index":541,"title":{},"body":{"entities/Post.html":{},"index.html":{}}}],["timestamp",{"_index":415,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["title",{"_index":223,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["token",{"_index":171,"title":{},"body":{"injectables/AuthService.html":{}}}],["touch",{"_index":1179,"title":{},"body":{"index.html":{}}}],["transaction",{"_index":691,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["transactional",{"_index":925,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["transfer",{"_index":347,"title":{},"body":{"classes/CreateTagDto.html":{},"injectables/MetaOptionsService.html":{},"injectables/TagsService.html":{}}}],["transformer",{"_index":203,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"dependencies.html":{}}}],["triggers",{"_index":1210,"title":{},"body":{"index.html":{}}}],["true",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["true})@jointable",{"_index":551,"title":{},"body":{"entities/Post.html":{}}}],["true})@type(undefined",{"_index":194,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["try",{"_index":697,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["tsconfig.json",{"_index":1220,"title":{},"body":{"index.html":{}}}],["tts",{"_index":1218,"title":{},"body":{"index.html":{}}}],["twitter",{"_index":1184,"title":{},"body":{"index.html":{}}}],["type",{"_index":83,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["type.enum",{"_index":309,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["type.enum.ts",{"_index":1062,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["typeorm",{"_index":445,"title":{},"body":{"entities/MetaOption.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([metaoption",{"_index":474,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["typeormmodule.forfeature([post",{"_index":643,"title":{},"body":{"modules/PostsModule.html":{}}}],["typeormmodule.forfeature([tag",{"_index":808,"title":{},"body":{"modules/TagsModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":963,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":521,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":1084,"title":{},"body":{"index.html":{}}}],["unable",{"_index":730,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["undefined",{"_index":538,"title":{},"body":{"entities/Post.html":{},"injectables/PostsService.html":{}}}],["undefined})@isarray()@isoptional()@isint({each",{"_index":293,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["undefined})@isnotempty()@isarray()@validatenested({each",{"_index":193,"title":{},"body":{"classes/CreateManyUsersDto.html":{}}}],["undefined})@isoptional()@validatenested({each",{"_index":245,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["unique",{"_index":363,"title":{},"body":{"classes/CreateTagDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["unit",{"_index":1097,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":493,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["unlicensed",{"_index":1273,"title":{},"body":{"properties.html":{}}}],["up",{"_index":726,"title":{},"body":{"injectables/PostsService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["update",{"_index":651,"title":{},"body":{"injectables/PostsService.html":{}}}],["update(@body",{"_index":728,"title":{},"body":{"injectables/PostsService.html":{}}}],["update(patchpostdto",{"_index":667,"title":{},"body":{"injectables/PostsService.html":{}}}],["updated",{"_index":440,"title":{},"body":{"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/UsersController.html":{}}}],["updatedate",{"_index":412,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["updatedatecolumn",{"_index":437,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["updatepost",{"_index":569,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(@body",{"_index":622,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(patchpostdto",{"_index":596,"title":{},"body":{"controllers/PostsController.html":{}}}],["updates",{"_index":597,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["updating",{"_index":504,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["upon",{"_index":947,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["url",{"_index":236,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["url\"'})@maxlength(512",{"_index":367,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["urls",{"_index":283,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["use",{"_index":279,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"injectables/PostsService.html":{},"index.html":{}}}],["used",{"_index":282,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["usefactory",{"_index":82,"title":{},"body":{"modules/AppModule.html":{}}}],["user",{"_index":86,"title":{"entities/User.html":{}},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["user'})@apiparam({name",{"_index":592,"title":{},"body":{"controllers/PostsController.html":{}}}],["user'})@apiresponse({status",{"_index":865,"title":{},"body":{"controllers/UsersController.html":{}}}],["user.dto",{"_index":202,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":373,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:15",{"_index":379,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:21",{"_index":381,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:26",{"_index":377,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:35",{"_index":394,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.entity",{"_index":928,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["user.posts",{"_index":524,"title":{},"body":{"entities/Post.html":{}}}],["userid",{"_index":593,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["username",{"_index":99,"title":{},"body":{"modules/AppModule.html":{}}}],["users",{"_index":182,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/GetUsersParamDto.html":{},"modules/PostsModule.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["users.controller",{"_index":956,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.dto",{"_index":890,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["users.dto.ts",{"_index":177,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"coverage.html":{}}}],["users.dto.ts:27",{"_index":195,"title":{},"body":{"classes/CreateManyUsersDto.html":{}}}],["users.service.ts",{"_index":999,"title":{},"body":{"injectables/UsersService.html":{}}}],["users/providers/users",{"_index":1261,"title":{},"body":{"index.html":{}}}],["users/users.module",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":850,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userscreatemanyprovider",{"_index":913,"title":{"injectables/UsersCreateManyProvider.html":{}},"body":{"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["usersmodule",{"_index":34,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":968,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersservice",{"_index":152,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":1153,"title":{},"body":{"index.html":{}}}],["utilizes",{"_index":917,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["validated",{"_index":336,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validatenested",{"_index":199,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["validation",{"_index":906,"title":{},"body":{"controllers/UsersController.html":{},"miscellaneous/functions.html":{}}}],["validationpipe",{"_index":908,"title":{},"body":{"controllers/UsersController.html":{}}}],["validationschema",{"_index":77,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":200,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"dependencies.html":{}}}],["value",{"_index":342,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"entities/MetaOption.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":251,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["varchar",{"_index":530,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["variable",{"_index":1020,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1274,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verbose",{"_index":1198,"title":{},"body":{"index.html":{}}}],["version",{"_index":1271,"title":{},"body":{"properties.html":{}}}],["video",{"_index":1146,"title":{},"body":{"index.html":{}}}],["view",{"_index":641,"title":{},"body":{"modules/PostsModule.html":{}}}],["visit",{"_index":1136,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":1149,"title":{},"body":{"index.html":{}}}],["void",{"_index":987,"title":{},"body":{"injectables/UsersService.html":{}}}],["want",{"_index":1226,"title":{},"body":{"index.html":{}}}],["watch",{"_index":1091,"title":{},"body":{"index.html":{}}}],["website",{"_index":1182,"title":{},"body":{"index.html":{}}}],["well",{"_index":1233,"title":{},"body":{"index.html":{}}}],["whenever",{"_index":1239,"title":{},"body":{"index.html":{}}}],["whether",{"_index":786,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["within",{"_index":828,"title":{},"body":{"injectables/TagsService.html":{},"index.html":{}}}],["without",{"_index":791,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{}}}],["working",{"_index":1135,"title":{},"body":{"index.html":{}}}],["world",{"_index":122,"title":{},"body":{"injectables/AppService.html":{}}}],["write",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["writing",{"_index":1241,"title":{},"body":{"index.html":{}}}],["x",{"_index":1161,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":1175,"title":{},"body":{"index.html":{}}}],["you're",{"_index":1102,"title":{},"body":{"index.html":{}}}],["z0",{"_index":275,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["z\\d@$!%*?&]{8,16",{"_index":385,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*?&])[a",{"_index":384,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["za",{"_index":383,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            MetaOptionsModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            TagsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UsersModule } from './users/users.module';\nimport { PostsModule } from './posts/posts.module';\nimport { AuthModule } from './auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { TagsModule } from './tags/tags.module';\nimport { MetaOptionsModule } from './meta-options/meta-options.module';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport appConfig from './config/app.config'; // Since it's imported as a default\nimport databaseConfig from './config/database.config';\nimport environmentValidation from './config/environment.validation';\n\nconst ENV = process.env.NODE_ENV;\n\n// Run this in cmd pg_ctl start -D \"C:\\users\\mfabouatmeh\\Desktop\\CodesDar\\more\\Postgre\\data\"\n@Module({\n  imports: [\n    UsersModule,\n    PostsModule,\n    AuthModule,\n    ConfigModule.forRoot({\n      isGlobal: true,\n      envFilePath: !ENV ? '.env' : `.env.${ENV}`,\n      load: [appConfig, databaseConfig],\n      validationSchema: environmentValidation,\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule], // Makes ConfigService available\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        type: 'postgres',\n        // entities: [User],\n        autoLoadEntities: configService.get('database.autoLoadEntities'),\n        synchronize: configService.get('database.synchronize'), // If this setting is set to false, we would have to manually perform migrations\n        port: configService.get('database.port'),\n        username: configService.get('database.user'),\n        password: configService.get('database.pass'),\n        host: configService.get('database.host'),\n        database: configService.get('database.name'),\n      }),\n    }),\n    TagsModule,\n    MetaOptionsModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n//npx prettier --write .\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { AuthService } from './providers/auth.service';\n// nest generate controller auth --no-spec\n@Controller('auth')\nexport class AuthController {\n  constructor(\n    // Injecting the auth service\n    private readonly authService: AuthService,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './providers/auth.service';\nimport { UsersModule } from 'src/users/users.module';\n// nest generate module auth\n@Module({\n  controllers: [AuthController],\n  providers: [AuthService],\n  // imports: [UsersModule], will cause a circular dependency\n  imports: [forwardRef(() => UsersModule)],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                isAuth\n                            \n                            \n                                    Public\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/auth.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isAuth\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAuth()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, forwardRef, Inject } from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users.service';\n// nest generate service auth/providers/auth --flat  --no-spec\n@Injectable()\nexport class AuthService {\n  constructor(\n    // Injecting the user service\n    // Add this to avoid circular dependency\n    @Inject(forwardRef(() => UsersService))\n    private readonly usersService: UsersService,\n  ) {}\n  public login(email: string, password: string) {\n    // Check user exists\n\n    const user = this.usersService.findOneById(1234);\n    // Login\n    // Return token\n    return 'SAMPLE_TOKEN';\n  }\n\n  public isAuth() {\n    return true;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateManyUsersDto.html":{"url":"classes/CreateManyUsersDto.html","title":"class - CreateManyUsersDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateManyUsersDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-many-users.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for creating multiple users at once.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreateUserDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Array of user objects to be created.', type: 'array', required: true, items: undefined})@IsNotEmpty()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-many-users.dto.ts:27\n                        \n                    \n\n            \n                \n                    List of users to be created.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, IsNotEmpty, ValidateNested } from 'class-validator';\nimport { CreateUserDto } from './create-user.dto';\nimport { Type } from 'class-transformer';\nimport { ApiProperty } from '@nestjs/swagger';\n\n/**\n * DTO for creating multiple users at once.\n */\nexport class CreateManyUsersDto {\n  /**\n   * List of users to be created.\n   *\n   * @type {CreateUserDto[]}\n   */\n  @ApiProperty({\n    description: 'Array of user objects to be created.',\n    type: 'array',\n    required: true,\n    items: {\n      type: 'User',\n    },\n  })\n  @IsNotEmpty()\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => CreateUserDto)\n  users: CreateUserDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dto/create-post.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for creating a new blog post.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                authorId\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                publishOn\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        authorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'integer', required: true, description: 'The ID of the author creating the post', example: 1})@IsNotEmpty()@IsInt()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:174\n                        \n                    \n\n            \n                \n                    The ID of the author creating the post.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The main content of the post', example: 'This is the content of the blog post.'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:87\n                        \n                    \n\n            \n                \n                    The main content of the post.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The URL of the featured image for the post', example: 'http://localhost.com/images/image1.jpg'})@IsOptional()@MinLength(4)@MaxLength(1024)@IsUrl()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:112\n                        \n                    \n\n            \n                \n                    The URL of the featured image for the post.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreatePostMetaOptionsDto | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'object', required: false, items: undefined})@IsOptional()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:161\n                        \n                    \n\n            \n                \n                    Additional meta options for the post.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: PostType, description: 'Possible values: 'post', 'page', 'story', 'series''})@IsEnum(PostType)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:48\n                        \n                    \n\n            \n                \n                    The type of post (e.g., 'post', 'page', 'story', 'series').\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The date on which the post is published', example: '2024-03-16T07:46:32+0000'})@IsISO8601()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:123\n                        \n                    \n\n            \n                \n                    The publication date of the post.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Serialized JSON object containing metadata', example: '{\n \"@context\": \"https://schema.org\",\n \"@type\": \"Person\"\n }'})@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:99\n                        \n                    \n\n            \n                \n                    JSON metadata for the post.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'A slug for the post (e.g., \"my-blog-post\")', example: 'my-blog-post'})@IsString()@IsNotEmpty()@MaxLength(256)@MinLength(4)@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'A slug should be all lowercase, use only \"-\", and have no spaces. Example: \"my-url\"'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:65\n                        \n                    \n\n            \n                \n                    A slug for the post, used in URLs.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: PostStatus, description: 'Possible values: 'draft', 'scheduled', 'review', 'published''})@IsEnum(PostStatus)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:76\n                        \n                    \n\n            \n                \n                    The publication status of the post (e.g., 'draft', 'scheduled', 'review', 'published').\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Array of tag IDs associated with the post', example: undefined})@IsArray()@IsOptional()@IsInt({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:135\n                        \n                    \n\n            \n                \n                    An array of tag IDs associated with the post.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'This is a title', description: 'The title for the blog post'})@IsString()@MinLength(4)@MaxLength(512)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:37\n                        \n                    \n\n            \n                \n                    The title of the blog post.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsArray,\n  IsEnum,\n  IsInt,\n  IsISO8601,\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MaxLength,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\nimport { PostType } from '../enums/post-type.enum';\nimport { PostStatus } from '../enums/post-status.enum';\nimport { CreatePostMetaOptionsDto } from '../../meta-options/dtos/create-post-meta-options.dto';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\n\n/**\n * DTO for creating a new blog post.\n */\nexport class CreatePostDto {\n  /**\n   * The title of the blog post.\n   */\n  @ApiProperty({\n    example: 'This is a title',\n    description: 'The title for the blog post',\n  })\n  @IsString()\n  @MinLength(4)\n  @MaxLength(512)\n  @IsNotEmpty()\n  title: string;\n\n  /**\n   * The type of post (e.g., 'post', 'page', 'story', 'series').\n   */\n  @ApiProperty({\n    enum: PostType,\n    description: \"Possible values: 'post', 'page', 'story', 'series'\",\n  })\n  @IsEnum(PostType)\n  @IsNotEmpty()\n  postType: PostType;\n\n  /**\n   * A slug for the post, used in URLs.\n   */\n  @ApiProperty({\n    description: 'A slug for the post (e.g., \"my-blog-post\")',\n    example: 'my-blog-post',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(256)\n  @MinLength(4)\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'A slug should be all lowercase, use only \"-\", and have no spaces. Example: \"my-url\"',\n  })\n  slug: string;\n\n  /**\n   * The publication status of the post (e.g., 'draft', 'scheduled', 'review', 'published').\n   */\n  @ApiProperty({\n    enum: PostStatus,\n    description: \"Possible values: 'draft', 'scheduled', 'review', 'published'\",\n  })\n  @IsEnum(PostStatus)\n  @IsNotEmpty()\n  status: PostStatus;\n\n  /**\n   * The main content of the post.\n   */\n  @ApiPropertyOptional({\n    description: 'The main content of the post',\n    example: 'This is the content of the blog post.',\n  })\n  @IsString()\n  @IsOptional()\n  content?: string;\n\n  /**\n   * JSON metadata for the post.\n   */\n  @ApiPropertyOptional({\n    description: 'Serialized JSON object containing metadata',\n    example:\n      '{\\r\\n \"@context\": \"https://schema.org\",\\r\\n \"@type\": \"Person\"\\r\\n }',\n  })\n  @IsOptional()\n  @IsJSON()\n  schema?: string;\n\n  /**\n   * The URL of the featured image for the post.\n   */\n  @ApiPropertyOptional({\n    description: 'The URL of the featured image for the post',\n    example: 'http://localhost.com/images/image1.jpg',\n  })\n  @IsOptional()\n  @MinLength(4)\n  @MaxLength(1024)\n  @IsUrl()\n  featuredImageUrl?: string;\n\n  /**\n   * The publication date of the post.\n   */\n  @ApiPropertyOptional({\n    description: 'The date on which the post is published',\n    example: '2024-03-16T07:46:32+0000',\n  })\n  @IsISO8601()\n  @IsOptional()\n  publishOn?: Date;\n\n  /**\n   * An array of tag IDs associated with the post.\n   */\n  @ApiPropertyOptional({\n    description: 'Array of tag IDs associated with the post',\n    example: [1, 2],\n  })\n  @IsArray()\n  @IsOptional()\n  @IsInt({ each: true })\n  tags?: number[];\n\n  /**\n   * Additional meta options for the post.\n   */\n  @ApiPropertyOptional({\n    type: 'object',\n    required: false,\n    items: {\n      type: 'object',\n      properties: {\n        metavalue: {\n          type: 'json',\n          description: 'A JSON string containing metadata options',\n          example: '{\"sidebarEnabled\": true}',\n        },\n      },\n    },\n  })\n  @IsOptional()\n  @ValidateNested({ each: true })\n  @Type(() => CreatePostMetaOptionsDto)\n  // Type decorator\n  // Matches the incoming req to the dto\n  // Creates an instance of the dto\n  // All the properties are validated against the dto\n  metaOptions?: CreatePostMetaOptionsDto | null;\n\n  /**\n   * The ID of the author creating the post.\n   */\n  @ApiProperty({\n    type: 'integer',\n    required: true,\n    description: 'The ID of the author creating the post',\n    example: 1,\n  })\n  @IsNotEmpty()\n  @IsInt()\n  authorId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostMetaOptionsDto.html":{"url":"classes/CreatePostMetaOptionsDto.html","title":"class - CreatePostMetaOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostMetaOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/dtos/create-post-meta-options.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for creating metadata options for a post.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                metaValue\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/dtos/create-post-meta-options.dto.ts:14\n                        \n                    \n\n            \n                \n                    The meta value as a JSON string.\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsJSON, IsNotEmpty, IsString } from 'class-validator';\n\n/**\n * DTO for creating metadata options for a post.\n */\nexport class CreatePostMetaOptionsDto {\n  /**\n   * The meta value as a JSON string.\n   *\n   * @example '{\"sidebarEnabled\": true}'\n   */\n  @IsNotEmpty()\n  @IsJSON()\n  metaValue: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTagDto.html":{"url":"classes/CreateTagDto.html","title":"class - CreateTagDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTagDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/dtos/create-tag.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object (DTO) for creating a new tag.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                featuredImage\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'A brief description of the tag', example: 'Posts related to technology and innovations'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:61\n                        \n                    \n\n            \n                \n                    A brief description of the tag.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        featuredImage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'URL of the featured image for the tag', example: 'https://example.com/images/tag-image.jpg'})@IsOptional()@IsUrl()@MaxLength(1024)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:88\n                        \n                    \n\n            \n                \n                    URL of the featured image for the tag.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The name of the tag', example: 'Technology'})@IsString()@MinLength(3)@IsNotEmpty()@MaxLength(256)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:30\n                        \n                    \n\n            \n                \n                    The name of the tag.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'JSON metadata associated with the tag', example: '{\"color\": \"blue\"}'})@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:74\n                        \n                    \n\n            \n                \n                    JSON metadata associated with the tag.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'A unique slug for the tag, used in URLs', example: 'technology'})@IsString()@IsNotEmpty()@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'A slug should be all lowercase letters and use only \"-\" as a separator. For example \"my-url\"'})@MaxLength(512)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:48\n                        \n                    \n\n            \n                \n                    The slug for the tag, used in URLs.\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\n/**\n * Data Transfer Object (DTO) for creating a new tag.\n */\nexport class CreateTagDto {\n  /**\n   * The name of the tag.\n   *\n   * @example \"Technology\"\n   */\n  @ApiProperty({\n    description: 'The name of the tag',\n    example: 'Technology',\n  })\n  @IsString()\n  @MinLength(3)\n  @IsNotEmpty()\n  @MaxLength(256)\n  name: string;\n\n  /**\n   * The slug for the tag, used in URLs.\n   *\n   * @example \"technology\"\n   */\n  @ApiProperty({\n    description: 'A unique slug for the tag, used in URLs',\n    example: 'technology',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'A slug should be all lowercase letters and use only \"-\" as a separator. For example \"my-url\"',\n  })\n  @MaxLength(512)\n  slug: string;\n\n  /**\n   * A brief description of the tag.\n   *\n   * @example \"Posts related to technology and innovations\"\n   */\n  @ApiPropertyOptional({\n    description: 'A brief description of the tag',\n    example: 'Posts related to technology and innovations',\n  })\n  @IsOptional()\n  @IsString()\n  description: string;\n\n  /**\n   * JSON metadata associated with the tag.\n   *\n   * @example '{\"color\": \"blue\"}'\n   */\n  @ApiPropertyOptional({\n    description: 'JSON metadata associated with the tag',\n    example: '{\"color\": \"blue\"}',\n  })\n  @IsOptional()\n  @IsJSON()\n  schema: string;\n\n  /**\n   * URL of the featured image for the tag.\n   *\n   * @example \"https://example.com/images/tag-image.jpg\"\n   */\n  @ApiPropertyOptional({\n    description: 'URL of the featured image for the tag',\n    example: 'https://example.com/images/tag-image.jpg',\n  })\n  @IsOptional()\n  @IsUrl()\n  @MaxLength(1024)\n  featuredImage: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MaxLength(96)@MinLength(8)@Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,16}$/, {message: 'Minimum 8 chars, include at least one letter, one number, and one special character.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\nexport class CreateUserDto {\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(96)\n  firstName: string;\n\n  @IsString()\n  @IsOptional()\n  @MinLength(3)\n  @MaxLength(96)\n  lastName?: string;\n\n  @IsEmail()\n  @IsNotEmpty()\n  @MaxLength(96)\n  email: string;\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(96)\n  @MinLength(8)\n  @Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,16}$/, {\n    message:\n      'Minimum 8 chars, include at least one letter, one number, and one special character.',\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersParamDto.html":{"url":"classes/GetUsersParamDto.html","title":"class - GetUsersParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-users-param.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Get user with a specific id', example: '1234'})@IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-users-param.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport { IsInt, IsOptional } from 'class-validator';\n\nexport class GetUsersParamDto {\n  @ApiPropertyOptional({\n    description: 'Get user with a specific id',\n    example: '1234',\n  })\n  @IsOptional()\n  @IsInt()\n  @Type(() => Number)\n  id?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/MetaOption.html":{"url":"entities/MetaOption.html","title":"entity - MetaOption","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  MetaOption\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-option.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the MetaOption entity, storing metadata for posts.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createDate\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                metaValue\n                            \n                            \n                                    \n                                    \n                                post\n                            \n                            \n                                    \n                                updateDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:37\n                        \n                    \n\n            \n                \n                    Timestamp indicating when the record was created.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:21\n                        \n                    \n\n            \n                \n                    Unique identifier for the MetaOption.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'json', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:31\n                        \n                    \n\n            \n                \n                    Metadata value stored in JSON format.\nNote: JSON storage is not available in MySQL.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        post\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, post => post.metaOptions, {onDelete: 'CASCADE'})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:53\n                        \n                    \n\n            \n                \n                    Associated post entity (One-to-One relationship).\nIf the post is deleted, the metaOption is also deleted (CASCADE).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:43\n                        \n                    \n\n            \n                \n                    Timestamp indicating when the record was last updated.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Post } from 'src/posts/post.entity';\nimport {\n  Column,\n  CreateDateColumn,\n  Entity,\n  JoinColumn,\n  OneToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n/**\n * Represents the MetaOption entity, storing metadata for posts.\n */\n@Entity()\nexport class MetaOption {\n  /**\n   * Unique identifier for the MetaOption.\n   */\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  /**\n   * Metadata value stored in JSON format.\n   * Note: JSON storage is not available in MySQL.\n   */\n  @Column({\n    type: 'json',\n    nullable: false,\n  })\n  metaValue: string;\n\n  /**\n   * Timestamp indicating when the record was created.\n   */\n  @CreateDateColumn()\n  createDate: Date;\n\n  /**\n   * Timestamp indicating when the record was last updated.\n   */\n  @UpdateDateColumn()\n  updateDate: Date;\n\n  /**\n   * Associated post entity (One-to-One relationship).\n   * If the post is deleted, the metaOption is also deleted (`CASCADE`).\n   */\n  @OneToOne(() => Post, (post) => post.metaOptions, {\n    onDelete: 'CASCADE',\n  })\n  @JoinColumn()\n  post: Post;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MetaOptionsController.html":{"url":"controllers/MetaOptionsController.html","title":"controller - MetaOptionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MetaOptionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-options.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                meta-options\n            \n\n\n            \n                Description\n            \n            \n                Controller for managing post metadata options.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createMetaOption\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createMetaOption\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMetaOption(createPostMetaOptionDto: CreatePostMetaOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/meta-options/meta-options.controller.ts:22\n                        \n                    \n\n\n            \n                \n                        Creates a new meta option for a post.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createPostMetaOptionDto\n                                            \n                                                            CreatePostMetaOptionsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    DTO containing metadata information.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The created meta option.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { CreatePostMetaOptionsDto } from './dtos/create-post-meta-options.dto';\nimport { MetaOptionsService } from './providers/meta-options.service';\n\n/**\n * Controller for managing post metadata options.\n */\n@Controller('meta-options')\nexport class MetaOptionsController {\n  /**\n   * Injects the MetaOptionsService.\n   * @param metaOptionsService The service responsible for metadata operations.\n   */\n  constructor(private readonly metaOptionsService: MetaOptionsService) {}\n\n  /**\n   * Creates a new meta option for a post.\n   * @param createPostMetaOptionDto DTO containing metadata information.\n   * @returns The created meta option.\n   */\n  @Post()\n  public createMetaOption(\n    @Body() createPostMetaOptionDto: CreatePostMetaOptionsDto,\n  ) {\n    return this.metaOptionsService.create(createPostMetaOptionDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MetaOptionsModule.html":{"url":"modules/MetaOptionsModule.html","title":"module - MetaOptionsModule","body":"\n                   \n\n\n\n\n    Modules\n    MetaOptionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/meta-options/meta-options.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Module for managing metadata options related to posts.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MetaOptionsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MetaOptionsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MetaOptionsController } from './meta-options.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { MetaOption } from './meta-option.entity';\nimport { MetaOptionsService } from './providers/meta-options.service';\n\n/**\n * Module for managing metadata options related to posts.\n */\n@Module({\n  /**\n   * Registers controllers for handling metadata-related routes.\n   */\n  controllers: [MetaOptionsController],\n\n  /**\n   * Imports TypeORM module and registers the MetaOption entity.\n   */\n  imports: [TypeOrmModule.forFeature([MetaOption])],\n\n  /**\n   * Provides the MetaOptionsService for handling business logic.\n   */\n  providers: [MetaOptionsService],\n})\nexport class MetaOptionsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MetaOptionsService.html":{"url":"injectables/MetaOptionsService.html","title":"injectable - MetaOptionsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MetaOptionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/providers/meta-options.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for managing MetaOptions.\nProvides methods to create and save meta options.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(metaOptionRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/meta-options/providers/meta-options.service.ts:12\n                            \n                        \n\n                \n                    \n                            Inject the repository for MetaOption entity.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        metaOptionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Repository for interacting with MetaOption entity.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createMetaOptionDto: CreatePostMetaOptionsDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/meta-options/providers/meta-options.service.ts:27\n                        \n                    \n\n\n            \n                \n                        Create a new MetaOption based on the provided data transfer object (DTO).\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createMetaOptionDto\n                                            \n                                                            CreatePostMetaOptionsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Data transfer object containing meta option details.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                A promise that resolves to the saved MetaOption entity.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { MetaOption } from '../meta-option.entity';\nimport { Repository } from 'typeorm';\nimport { CreatePostMetaOptionsDto } from '../dtos/create-post-meta-options.dto';\n\n/**\n * Service for managing MetaOptions.\n * Provides methods to create and save meta options.\n */\n@Injectable()\nexport class MetaOptionsService {\n  /**\n   * Inject the repository for MetaOption entity.\n   * @param metaOptionRepository Repository for interacting with MetaOption entity.\n   */\n  constructor(\n    @InjectRepository(MetaOption)\n    private metaOptionRepository: Repository,\n  ) {}\n\n  /**\n   * Create a new MetaOption based on the provided data transfer object (DTO).\n   * @param createMetaOptionDto Data transfer object containing meta option details.\n   * @returns A promise that resolves to the saved MetaOption entity.\n   */\n  public async create(createMetaOptionDto: CreatePostMetaOptionsDto) {\n    const metaOption = this.metaOptionRepository.create(createMetaOptionDto);\n    return await this.metaOptionRepository.save(metaOption);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchPostDto.html":{"url":"classes/PatchPostDto.html","title":"class - PatchPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dto/patch-post.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for updating an existing post.\nExtends CreatePostDto, making all fields optional except id.\n\n            \n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The ID of the post that needs to be updated', example: 1})@IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/patch-post.dto.ts:19\n                        \n                    \n\n            \n                \n                    The ID of the post to be updated.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsInt, IsNotEmpty } from 'class-validator';\nimport { CreatePostDto } from './create-post.dto';\n\n/**\n * DTO for updating an existing post.\n * Extends `CreatePostDto`, making all fields optional except `id`.\n */\nexport class PatchPostDto extends PartialType(CreatePostDto) {\n  /**\n   * The ID of the post to be updated.\n   */\n  @ApiProperty({\n    description: 'The ID of the post that needs to be updated',\n    example: 1,\n  })\n  @IsInt()\n  @IsNotEmpty()\n  id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/patch-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for updating a user partially.\nExtends CreateUserDto, making all its properties optional.\n\n            \n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\n/**\n * DTO for updating a user partially.\n *\n * Extends `CreateUserDto`, making all its properties optional.\n */\nexport class PatchUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Post.html":{"url":"entities/Post.html","title":"entity - Post","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/post.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a blog post entity.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                author\n                            \n                            \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                postType\n                            \n                            \n                                    \n                                    Optional\n                                publishOn\n                            \n                            \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.posts, {eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:106\n                        \n                    \n\n            \n                \n                    Author of the post (many-to-one relationship with User).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:66\n                        \n                    \n\n            \n                \n                    Main content of the post (large string)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:78\n                        \n                    \n\n            \n                \n                    URL of the featured image.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:26\n                        \n                    \n\n            \n                \n                    Unique identifier for the post.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MetaOption\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, metaOptions => metaOptions.post, {cascade: true, eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:100\n                        \n                    \n\n            \n                \n                    Meta options associated with the post (one-to-one relationship bidirectional).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: PostType, default: undefined, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:43\n                        \n                    \n\n            \n                \n                    Type of the post (e.g., post, page, story, series.).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:84\n                        \n                    \n\n            \n                \n                    Date and time when the post is published.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:72\n                        \n                    \n\n            \n                \n                    JSON schema for structured data.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:49\n                        \n                    \n\n            \n                \n                    URL-friendly identifier for the post.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: PostStatus, default: undefined, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:60\n                        \n                    \n\n            \n                \n                    Status of the post (draft, published, etc.).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Tag[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, tag => tag.posts, {eager: true})@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:91\n                        \n                    \n\n            \n                \n                    Tags associated with the post (many-to-many relationship).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 512, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:32\n                        \n                    \n\n            \n                \n                    Title of the post.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  Entity,\n  JoinColumn,\n  JoinTable,\n  ManyToMany,\n  ManyToOne,\n  OneToOne,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport { PostType } from './enums/post-type.enum';\nimport { PostStatus } from './enums/post-status.enum';\nimport { MetaOption } from 'src/meta-options/meta-option.entity';\nimport { User } from 'src/users/user.entity';\nimport { Tag } from 'src/tags/tag.entity';\n\n/**\n * Represents a blog post entity.\n */\n@Entity()\nexport class Post {\n  /**\n   * Unique identifier for the post.\n   */\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  /**\n   * Title of the post.\n   */\n  @Column({ type: 'varchar', length: 512, nullable: false })\n  title: string;\n\n  /**\n   * Type of the post (e.g., post, page, story, series.).\n   */\n  @Column({\n    type: 'enum',\n    enum: PostType,\n    default: PostType.POST,\n    nullable: false,\n  })\n  postType: PostType;\n\n  /**\n   * URL-friendly identifier for the post.\n   */\n  @Column({ type: 'varchar', length: 256, nullable: false, unique: true })\n  slug: string;\n\n  /**\n   * Status of the post (draft, published, etc.).\n   */\n  @Column({\n    type: 'enum',\n    enum: PostStatus,\n    default: PostStatus.DRAFT,\n    nullable: false,\n  })\n  status: PostStatus;\n\n  /**\n   * Main content of the post (large string)\n   */\n  @Column({ type: 'text', nullable: true })\n  content?: string;\n\n  /**\n   * JSON schema for structured data.\n   */\n  @Column({ type: 'text', nullable: true })\n  schema?: string;\n\n  /**\n   * URL of the featured image.\n   */\n  @Column({ type: 'varchar', length: 1024, nullable: true })\n  featuredImageUrl?: string;\n\n  /**\n   * Date and time when the post is published.\n   */\n  @Column({ type: 'timestamp', nullable: true })\n  publishOn?: Date;\n\n  /**\n   * Tags associated with the post (many-to-many relationship).\n   */\n  @ManyToMany(() => Tag, (tag) => tag.posts, { eager: true })\n  @JoinTable()\n  tags?: Tag[];\n\n  /**\n   * Meta options associated with the post (one-to-one relationship bidirectional).\n   */\n  @OneToOne(() => MetaOption, (metaOptions) => metaOptions.post, {\n    cascade: true,\n    eager: true, // Will fetch posts AND metaOptions when getting posts\n  })\n  metaOptions?: MetaOption;\n\n  /**\n   * Author of the post (many-to-one relationship with User).\n   */\n  @ManyToOne(() => User, (user) => user.posts, { eager: true })\n  author: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n            \n                Description\n            \n            \n                Controller for managing posts.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                createPost\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                delete\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getPosts\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Creates a new blog post'})@ApiResponse({status: 201, description: 'Post created successfully'})@ApiResponse({status: 400, description: 'Invalid request data'})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:61\n                        \n                    \n\n\n            \n                \n                        Creates a new blog post.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data for the new post.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The created post.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Deletes a post by ID'})@ApiQuery({name: 'id', required: true, type: Number, description: 'Post ID to delete'})@ApiResponse({status: 200, description: 'Post deleted successfully'})@ApiResponse({status: 404, description: 'Post not found'})@Delete()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:94\n                        \n                    \n\n\n            \n                \n                        Deletes a post by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the post to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A success message.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                        getPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPosts(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:userId?')@ApiOperation({summary: 'Retrieves all posts for a specific user'})@ApiParam({name: 'userId', required: false, description: 'User ID (optional)'})@ApiResponse({status: 200, description: 'Returns the list of posts'})\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:48\n                        \n                    \n\n\n            \n                \n                        Retrieves all posts for a specific user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user (optional).\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A list of posts.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(patchPostDto: PatchPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Updates an existing blog post'})@ApiResponse({status: 201, description: 'Post updated successfully'})@ApiResponse({status: 404, description: 'Post not found'})@Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:74\n                        \n                    \n\n\n            \n                \n                        Updates an existing blog post.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                patchPostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe updated post data.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The updated post.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Query,\n} from '@nestjs/common';\nimport { PostsService } from './providers/posts.service';\nimport {\n  ApiOperation,\n  ApiResponse,\n  ApiTags,\n  ApiParam,\n  ApiQuery,\n} from '@nestjs/swagger';\nimport { CreatePostDto } from './dto/create-post.dto';\nimport { PatchPostDto } from './dto/patch-post.dto';\n\n/**\n * Controller for managing posts.\n */\n@Controller('posts')\n@ApiTags('Posts')\nexport class PostsController {\n  /**\n   * Creates an instance of PostsController.\n   * @param postsService - The posts service.\n   */\n  constructor(private readonly postsService: PostsService) {}\n\n  /**\n   * Retrieves all posts for a specific user.\n   * @param userId - The ID of the user (optional).\n   * @returns A list of posts.\n   */\n  @Get('/:userId?')\n  @ApiOperation({ summary: 'Retrieves all posts for a specific user' })\n  @ApiParam({\n    name: 'userId',\n    required: false,\n    description: 'User ID (optional)',\n  })\n  @ApiResponse({ status: 200, description: 'Returns the list of posts' })\n  public getPosts(@Param('userId') userId: string) {\n    return this.postsService.findAll(userId);\n  }\n\n  /**\n   * Creates a new blog post.\n   * @param createPostDto - The data for the new post.\n   * @returns The created post.\n   */\n  @ApiOperation({ summary: 'Creates a new blog post' })\n  @ApiResponse({ status: 201, description: 'Post created successfully' })\n  @ApiResponse({ status: 400, description: 'Invalid request data' })\n  @Post()\n  public createPost(@Body() createPostDto: CreatePostDto) {\n    return this.postsService.create(createPostDto);\n  }\n\n  /**\n   * Updates an existing blog post.\n   * @param patchPostDto - The updated post data.\n   * @returns The updated post.\n   */\n  @ApiOperation({ summary: 'Updates an existing blog post' })\n  @ApiResponse({ status: 201, description: 'Post updated successfully' })\n  @ApiResponse({ status: 404, description: 'Post not found' })\n  @Patch()\n  public updatePost(@Body() patchPostDto: PatchPostDto) {\n    return this.postsService.update(patchPostDto);\n  }\n\n  /**\n   * Deletes a post by its ID.\n   * @param id - The ID of the post to delete.\n   * @returns A success message.\n   */\n  @ApiOperation({ summary: 'Deletes a post by ID' })\n  @ApiQuery({\n    name: 'id',\n    required: true,\n    type: Number,\n    description: 'Post ID to delete',\n  })\n  @ApiResponse({ status: 200, description: 'Post deleted successfully' })\n  @ApiResponse({ status: 404, description: 'Post not found' })\n  // This method cascades and removes relevant relationships between posts and tags NOT the actual tags\n  @Delete()\n  public delete(@Query('id', ParseIntPipe) id: number) {\n    return this.postsService.delete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_PostsModule_imports\n\n\n\n\nTagsModule\n\nTagsModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nTagsModule->PostsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            TagsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsController } from './posts.controller';\nimport { PostsService } from './providers/posts.service';\nimport { UsersModule } from 'src/users/users.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Post } from './post.entity';\nimport { MetaOption } from 'src/meta-options/meta-option.entity';\nimport { TagsModule } from 'src/tags/tags.module';\n\n// Import entire module not only a service (view users module exports key)\n@Module({\n  controllers: [PostsController],\n  providers: [PostsService],\n  imports: [\n    UsersModule,\n    TagsModule,\n    TypeOrmModule.forFeature([Post, MetaOption]),\n  ], // Import the post entity, for feature is responsible to create tables corresponding to these entities inside the db\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/providers/posts.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service responsible for handling post-related operations.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, postsRepository: Repository, metaOptionsRepository: Repository, tagsService: TagsService)\n                    \n                \n                        \n                            \n                                Defined in src/posts/providers/posts.service.ts:21\n                            \n                        \n\n                \n                    \n                            Constructor to inject dependencies.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service to handle user-related operations.\n\n                                                        \n                                                \n                                                \n                                                        postsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Repository for managing Post entities.\n\n                                                        \n                                                \n                                                \n                                                        metaOptionsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Repository for managing MetaOption entities.\n\n                                                        \n                                                \n                                                \n                                                        tagsService\n                                                  \n                                                        \n                                                                        TagsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service for handling tag-related operations.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createPostDto: CreatePostDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:64\n                        \n                    \n\n\n            \n                \n                        Creates a new post.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    DTO containing post creation details.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The newly created post.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:177\n                        \n                    \n\n\n            \n                \n                        Deletes a post from the database.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the post to delete.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                An object indicating the deletion status.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:46\n                        \n                    \n\n\n            \n                \n                        Retrieves all posts along with their meta options.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the user requesting the posts.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                A list of posts with related meta options.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(patchPostDto: PatchPostDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:122\n                        \n                    \n\n\n            \n                \n                        Updates an existing post.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                patchPostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    DTO containing fields to update.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The updated post.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Body,\n  Injectable,\n  NotFoundException,\n  RequestTimeoutException,\n} from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users.service';\nimport { CreatePostDto } from '../dto/create-post.dto';\nimport { Repository } from 'typeorm';\nimport { Post } from '../post.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { MetaOption } from 'src/meta-options/meta-option.entity';\nimport { TagsService } from 'src/tags/providers/tags.service';\nimport { PatchPostDto } from '../dto/patch-post.dto';\n\n/**\n * Service responsible for handling post-related operations.\n */\n@Injectable()\nexport class PostsService {\n  /**\n   * Constructor to inject dependencies.\n   * @param usersService Service to handle user-related operations.\n   * @param postsRepository Repository for managing Post entities.\n   * @param metaOptionsRepository Repository for managing MetaOption entities.\n   * @param tagsService Service for handling tag-related operations.\n   */\n  constructor(\n    private readonly usersService: UsersService,\n\n    @InjectRepository(Post)\n    private readonly postsRepository: Repository, // Only add repositories for 1-1 relationships so that it doesnt become crowded\n\n    @InjectRepository(MetaOption)\n    private readonly metaOptionsRepository: Repository,\n\n    private readonly tagsService: TagsService,\n  ) {}\n\n  /**\n   * Retrieves all posts along with their meta options.\n   * @param userId The ID of the user requesting the posts.\n   * @returns A list of posts with related meta options.\n   */\n  public async findAll(userId: string) {\n    return await this.postsRepository.find({\n      relations: { metaOptions: true },\n    });\n\n    // Get meta options along with the posts\n    // return await this.postsRepository.find({\n    //   relations: {\n    //     metaOptions: true,\n    //   },\n    // });\n  }\n\n  /**\n   * Creates a new post.\n   * @param createPostDto DTO containing post creation details.\n   * @returns The newly created post.\n   */\n  public async create(@Body() createPostDto: CreatePostDto) {\n    const author = await this.usersService.findOneById(createPostDto.authorId);\n    const tags = await this.tagsService.findMultipleTags(createPostDto.tags);\n\n    // Use the spread operator to create a shallow copy of createPostDto, meaning a new object is passed to create()\n    const post = this.postsRepository.create({\n      ...createPostDto,\n      author,\n      tags,\n    }); // Only use await for the save method because it returns a promise\n\n    return await this.postsRepository.save(post);\n  }\n\n  /*\n   public async delete(id: number) {\n    // Start a transaction to handle both deletes atomically\n    const queryRunner =\n      this.postsRepository.manager.connection.createQueryRunner();\n    await queryRunner.startTransaction();\n\n    try {\n      // Find the post (with related metaOptions loaded)\n      const post = await this.postsRepository.findOne({\n        where: { id },\n        relations: ['metaOptions'],\n      });\n      if (!post) {\n        throw new Error('Post not found');\n      }\n\n      // Delete the post (cascade will handle the metaOption deletion automatically)\n      await queryRunner.manager.delete(Post, id); // Use delete instead of remove\n\n      // Commit the transaction if everything is successful\n      await queryRunner.commitTransaction();\n\n      // Return a success response\n      return { deleted: true, id };\n    } catch (error) {\n      // If any error occurs, rollback the transaction\n      await queryRunner.rollbackTransaction();\n\n      // Log the error and return a failure response\n      console.error(error);\n      return { deleted: false, message: error.message };\n    } finally {\n      // Release the query runner (important for clean-up)\n      await queryRunner.release();\n    }\n  }\n*/\n\n  /**\n   * Updates an existing post.\n   * @param patchPostDto DTO containing fields to update.\n   * @returns The updated post.\n   */\n  public async update(@Body() patchPostDto: PatchPostDto) {\n    let tags = undefined;\n    let post = undefined;\n\n    try {\n      tags = await this.tagsService.findMultipleTags(patchPostDto.tags);\n    } catch (error) {\n      throw new RequestTimeoutException(\n        'Unable to process your request at the moment. Please try later',\n      );\n    }\n\n    /**\n     * Number of tags need to be equal\n     */\n\n    if (!tags || tags.length !== patchPostDto.tags.length) {\n      throw new BadRequestException('Please check your tag IDs.');\n    }\n    try {\n      post = await this.postsRepository.findOneBy({ id: patchPostDto.id });\n    } catch (error) {\n      throw new RequestTimeoutException(\n        'Unable to process your request at the moment. Please try later',\n      );\n    }\n    if (!post) {\n      throw new NotFoundException(\"This post doesn't exist.\");\n    }\n\n    post.title = patchPostDto.title ?? post.title;\n    post.content = patchPostDto.content ?? post.content;\n    post.status = patchPostDto.status ?? post.status;\n    post.postType = patchPostDto.postType ?? post.postType;\n    post.slug = patchPostDto.slug ?? post.slug;\n    post.featuredImageUrl =\n      patchPostDto.featuredImageUrl ?? post.featuredImageUrl;\n    post.publishOn = patchPostDto.publishOn ?? post.publishOn;\n    post.tags = tags;\n\n    try {\n      await this.postsRepository.save(post);\n    } catch (error) {\n      throw new RequestTimeoutException(\n        'Unable to process your request at the moment. Please try later',\n      );\n    }\n    return post;\n  }\n\n  /**\n   * Deletes a post from the database.\n   * @param id The ID of the post to delete.\n   * @returns An object indicating the deletion status.\n   */\n  public async delete(id: number) {\n    await this.postsRepository.delete(id);\n    return { deleted: true, id };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Tag.html":{"url":"entities/Tag.html","title":"entity - Tag","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Tag\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tag.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity representing a tag.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createDate\n                            \n                            \n                                    \n                                deletedAt\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                featuredImage\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                posts\n                            \n                            \n                                    \n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                updateDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:91\n                        \n                    \n\n            \n                \n                    Timestamp indicating when the tag was created.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:103\n                        \n                    \n\n            \n                \n                    Timestamp indicating when the tag was soft deleted.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:55\n                        \n                    \n\n            \n                \n                    Optional description of the tag.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        featuredImage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:76\n                        \n                    \n\n            \n                \n                    URL of the featured image for the tag.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:21\n                        \n                    \n\n            \n                \n                    Unique identifier for the tag.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:33\n                        \n                    \n\n            \n                \n                    Name of the tag.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, post => post.tags, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:84\n                        \n                    \n\n            \n                \n                    Many-to-many relationship with posts.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:65\n                        \n                    \n\n            \n                \n                    JSON metadata schema for additional tag details.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 512, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:45\n                        \n                    \n\n            \n                \n                    URL-friendly slug for the tag.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:97\n                        \n                    \n\n            \n                \n                    Timestamp indicating when the tag was last updated.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Post } from 'src/posts/post.entity';\nimport {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  ManyToMany,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n/**\n * Entity representing a tag.\n */\n@Entity()\nexport class Tag {\n  /**\n   * Unique identifier for the tag.\n   */\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  /**\n   * Name of the tag.\n   * @example \"Technology\"\n   */\n  @Column({\n    type: 'varchar',\n    length: 256,\n    nullable: false,\n    unique: true,\n  })\n  name: string;\n\n  /**\n   * URL-friendly slug for the tag.\n   * @example \"technology\"\n   */\n  @Column({\n    type: 'varchar',\n    length: 512,\n    nullable: false,\n    unique: true,\n  })\n  slug: string;\n\n  /**\n   * Optional description of the tag.\n   * @example \"Posts related to technology and innovations\"\n   */\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  description: string;\n\n  /**\n   * JSON metadata schema for additional tag details.\n   * @example '{\"color\": \"blue\"}'\n   */\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  schema: string;\n\n  /**\n   * URL of the featured image for the tag.\n   * @example \"https://example.com/images/tag-image.jpg\"\n   */\n  @Column({\n    type: 'varchar',\n    length: 1024,\n    nullable: true,\n  })\n  featuredImage: string;\n\n  /**\n   * Many-to-many relationship with posts.\n   */\n  @ManyToMany(() => Post, (post) => post.tags, {\n    onDelete: 'CASCADE',\n  })\n  posts: Post[];\n\n  // https://orkhan.gitbook.io/typeorm/docs/decorator-reference\n  /**\n   * Timestamp indicating when the tag was created.\n   */\n  @CreateDateColumn()\n  createDate: Date;\n\n  /**\n   * Timestamp indicating when the tag was last updated.\n   */\n  @UpdateDateColumn()\n  updateDate: Date;\n\n  /**\n   * Timestamp indicating when the tag was soft deleted.\n   */\n  @DeleteDateColumn()\n  deletedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TagsController.html":{"url":"controllers/TagsController.html","title":"controller - TagsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TagsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tags.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tags\n            \n\n\n            \n                Description\n            \n            \n                Controller for handling tag-related API requests.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                create\n                            \n                            \n                                    \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    \n                                    Public\n                                    Async\n                                softDelete\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createTagDto: CreateTagDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:29\n                        \n                    \n\n\n            \n                \n                        Creates a new tag.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createTagDto\n                                            \n                                                            CreateTagDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    DTO containing tag data.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The created tag.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete()\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:39\n                        \n                    \n\n\n            \n                \n                        Deletes a tag by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the tag to delete.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                An object indicating whether the deletion was successful.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Async\n                        softDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    softDelete(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('soft-delete')\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:49\n                        \n                    \n\n\n            \n                \n                        Soft deletes a tag by its ID, marking it as deleted without removing it from the database.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the tag to soft delete.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                An object indicating whether the soft deletion was successful.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  ParseIntPipe,\n  Post,\n  Query,\n} from '@nestjs/common';\nimport { TagsService } from './providers/tags.service';\nimport { CreateTagDto } from './dtos/create-tag.dto';\n\n/**\n * Controller for handling tag-related API requests.\n */\n@Controller('tags')\nexport class TagsController {\n  /**\n   * Injects the TagsService.\n   * @param tagsService The service responsible for tag operations.\n   */\n  constructor(private readonly tagsService: TagsService) {}\n\n  /**\n   * Creates a new tag.\n   * @param createTagDto DTO containing tag data.\n   * @returns The created tag.\n   */\n  @Post()\n  public create(@Body() createTagDto: CreateTagDto) {\n    return this.tagsService.create(createTagDto);\n  }\n\n  /**\n   * Deletes a tag by its ID.\n   * @param id The ID of the tag to delete.\n   * @returns An object indicating whether the deletion was successful.\n   */\n  @Delete()\n  public async delete(@Query('id', ParseIntPipe) id: number) {\n    return this.tagsService.delete(id);\n  }\n\n  /**\n   * Soft deletes a tag by its ID, marking it as deleted without removing it from the database.\n   * @param id The ID of the tag to soft delete.\n   * @returns An object indicating whether the soft deletion was successful.\n   */\n  @Delete('soft-delete')\n  public async softDelete(@Query('id', ParseIntPipe) id: number) {\n    // Route is /tags/soft-delete\n    return this.tagsService.softRemove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TagsModule.html":{"url":"modules/TagsModule.html","title":"module - TagsModule","body":"\n                   \n\n\n\n\n    Modules\n    TagsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_exports\n\n\n\ncluster_TagsModule_providers\n\n\n\n\nTagsService \n\nTagsService \n\n\n\nTagsModule\n\nTagsModule\n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tags/tags.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TagsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TagsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TagsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TagsController } from './tags.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Tag } from './tag.entity';\nimport { TagsService } from './providers/tags.service';\n\n@Module({\n  controllers: [TagsController],\n  imports: [TypeOrmModule.forFeature([Tag])],\n  providers: [TagsService],\n  exports: [TagsService],\n})\nexport class TagsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TagsService.html":{"url":"injectables/TagsService.html","title":"injectable - TagsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TagsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/providers/tags.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for handling tag-related operations.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                findMultipleTags\n                            \n                            \n                                    Public\n                                    Async\n                                softRemove\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tagsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/tags/providers/tags.service.ts:13\n                            \n                        \n\n                \n                    \n                            Injects the repository for interacting with the Tag entity.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        tagsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The TypeORM repository for the Tag entity.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createTagDto: CreateTagDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:28\n                        \n                    \n\n\n            \n                \n                        Creates a new tag.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createTagDto\n                                            \n                                                            CreateTagDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Data Transfer Object (DTO) containing tag details.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The created tag.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:53\n                        \n                    \n\n\n            \n                \n                        Deletes a tag by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the tag to delete.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                An object indicating whether the deletion was successful.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findMultipleTags\n                        \n                    \n                \n            \n            \n                \n                        \n                    findMultipleTags(tags: number[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:38\n                        \n                    \n\n\n            \n                \n                        Finds multiple tags based on an array of tag IDs.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tags\n                                            \n                                                        number[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    An array of tag IDs.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                A list of found tags.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        softRemove\n                        \n                    \n                \n            \n            \n                \n                        \n                    softRemove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:74\n                        \n                    \n\n\n            \n                \n                        Soft deletes a tag by its ID, marking it as deleted without removing it from the database.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the tag to soft delete.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                An object indicating whether the soft deletion was successful.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateTagDto } from '../dtos/create-tag.dto';\nimport { In, Repository } from 'typeorm';\nimport { Tag } from '../tag.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n//npx nest generate service tags/providers/tags --flat --no-spec\n\n/**\n * Service for handling tag-related operations.\n */\n@Injectable()\nexport class TagsService {\n  /**\n   * Injects the repository for interacting with the `Tag` entity.\n   * @param tagsRepository The TypeORM repository for the `Tag` entity.\n   */\n  constructor(\n    @InjectRepository(Tag)\n    private readonly tagsRepository: Repository,\n  ) {}\n\n  /**\n   * Creates a new tag.\n   * @param createTagDto Data Transfer Object (DTO) containing tag details.\n   * @returns The created tag.\n   */\n  public async create(createTagDto: CreateTagDto) {\n    const tag = this.tagsRepository.create(createTagDto);\n    return await this.tagsRepository.save(tag);\n  }\n\n  /**\n   * Finds multiple tags based on an array of tag IDs.\n   * @param tags An array of tag IDs.\n   * @returns A list of found tags.\n   */\n  public async findMultipleTags(tags: number[]) {\n    const results = await this.tagsRepository.find({\n      where: {\n        id: In(tags), // Finds all the tags with IDs within this array.\n      },\n    });\n\n    return results;\n  }\n\n  /**\n   * Deletes a tag by its ID.\n   * @param id The ID of the tag to delete.\n   * @returns An object indicating whether the deletion was successful.\n   */\n  public async delete(id: number) {\n    // Check if the tag exists before deleting\n    const tag = await this.tagsRepository.findOne({\n      where: { id },\n    });\n\n    if (!tag) {\n      return { deleted: false, message: 'Tag not found' };\n    }\n\n    // Proceed with deletion\n    await this.tagsRepository.delete(id);\n\n    return { deleted: true, id };\n  }\n\n  /**\n   * Soft deletes a tag by its ID, marking it as deleted without removing it from the database.\n   * @param id The ID of the tag to soft delete.\n   * @returns An object indicating whether the soft deletion was successful.\n   */\n  public async softRemove(id: number) {\n    await this.tagsRepository.softDelete(id);\n    return { deleted: true, id };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a user entity in the database.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                posts\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:46\n                        \n                    \n\n            \n                \n                    The email address of the user.\nMust be unique.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:23\n                        \n                    \n\n            \n                \n                    The first name of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:13\n                        \n                    \n\n            \n                \n                    Unique identifier for the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:34\n                        \n                    \n\n            \n                \n                    The last name of the user.\nThis field is optional.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:56\n                        \n                    \n\n            \n                \n                    The password of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, post => post.author)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:62\n                        \n                    \n\n            \n                \n                    The list of posts authored by the user.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Post } from 'src/posts/post.entity';\nimport { Column, Entity, OneToMany, PrimaryGeneratedColumn } from 'typeorm';\n\n/**\n * Represents a user entity in the database.\n */\n@Entity()\nexport class User {\n  /**\n   * Unique identifier for the user.\n   */\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  /**\n   * The first name of the user.\n   */\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n  })\n  firstName: string;\n\n  /**\n   * The last name of the user.\n   * This field is optional.\n   */\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: true,\n  })\n  lastName: string;\n\n  /**\n   * The email address of the user.\n   * Must be unique.\n   */\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n    unique: true,\n  })\n  email: string;\n\n  /**\n   * The password of the user.\n   */\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n  })\n  password: string;\n\n  /**\n   * The list of posts authored by the user.\n   */\n  @OneToMany(() => Post, (post) => post.author)\n  posts: Post[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n            \n                Description\n            \n            \n                Controller for handling user-related requests.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createManyUsers\n                            \n                            \n                                    \n                                    Public\n                                createUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUserById\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUsers\n                            \n                            \n                                    \n                                    Public\n                                patchUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createManyUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createManyUsers(createManyUsersDto: CreateManyUsersDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('create-many')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:107\n                        \n                    \n\n\n            \n                \n                        Creates multiple users.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createManyUsersDto\n                                            \n                                                            CreateManyUsersDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data to create multiple users.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The created users.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:91\n                        \n                    \n\n\n            \n                \n                        Creates a new user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nData required to create a user.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The created user.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUserById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Fetch a single user by ID'})@ApiQuery({name: 'id', type: 'string', required: true, description: 'The ID of the user'})@ApiResponse({status: 200, description: 'User details retrieved successfully'})@ApiResponse({status: 404, description: 'User not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:49\n                        \n                    \n\n\n            \n                \n                        Retrieves a user by ID from query parameters (e.g., id=5).\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user to fetch.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The user details.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getUserParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id?')@ApiOperation({summary: 'Fetch all registered users with optional pagination'})@ApiResponse({status: 200, description: 'Users retrieved successfully'})@ApiQuery({name: 'limit', type: 'number', required: false, description: 'The number of entries returned per query', example: 10})@ApiQuery({name: 'page', type: 'number', required: false, example: 1})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:77\n                        \n                    \n\n\n            \n                \n                        Retrieves a list of users with pagination.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing filter parameters.\n\n\n                                            \n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nNumber of users per page.\n\n\n                                            \n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nPage number.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A list of users.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        patchUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchUser(patchUserDto: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:117\n                        \n                    \n\n\n            \n                \n                        Updates user information.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nData containing updates for the user.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PatchUserDto\n\n                        \n                            \n                                The updated user.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  Param,\n  Post,\n  Query,\n  ParseIntPipe,\n  DefaultValuePipe,\n  Patch,\n} from '@nestjs/common';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { GetUsersParamDto } from './dtos/get-users-param.dto';\nimport { PatchUserDto } from './dtos/patch-user.dto';\nimport { UsersService } from './providers/users.service';\nimport { ApiOperation, ApiQuery, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { CreateManyUsersDto } from './dtos/create-many-users.dto';\n\n/**\n * Controller for handling user-related requests.\n */\n@Controller('users')\n@ApiTags('Users')\nexport class UsersController {\n  /**\n   * Constructs the UsersController.\n   * @param usersService - The service handling user operations.\n   */\n  constructor(private readonly usersService: UsersService) {}\n\n  /**\n   * Retrieves a user by ID from query parameters (e.g., `id=5`).\n   * @param id - The ID of the user to fetch.\n   * @returns The user details.\n   */\n  @Get()\n  @ApiOperation({ summary: 'Fetch a single user by ID' })\n  @ApiQuery({\n    name: 'id',\n    type: 'string',\n    required: true,\n    description: 'The ID of the user',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'User details retrieved successfully',\n  })\n  @ApiResponse({ status: 404, description: 'User not found' })\n  public getUserById(@Query('id') id: string) {\n    const userId = parseInt(id, 10);\n    if (isNaN(userId)) {\n      return { error: 'Invalid ID format' };\n    }\n    return this.usersService.findOneById(userId);\n  }\n\n  /**\n   * Retrieves a list of users with pagination.\n   * @param getUserParamDto - DTO containing filter parameters.\n   * @param limit - Number of users per page.\n   * @param page - Page number.\n   * @returns A list of users.\n   */\n  @Get('/:id?')\n  @ApiOperation({\n    summary: 'Fetch all registered users with optional pagination',\n  })\n  @ApiResponse({ status: 200, description: 'Users retrieved successfully' })\n  @ApiQuery({\n    name: 'limit',\n    type: 'number',\n    required: false,\n    description: 'The number of entries returned per query',\n    example: 10,\n  })\n  @ApiQuery({ name: 'page', type: 'number', required: false, example: 1 })\n  public getUsers(\n    @Param() getUserParamDto: GetUsersParamDto,\n    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\n  ) {\n    return this.usersService.findAll(getUserParamDto, limit, page);\n  }\n\n  /**\n   * Creates a new user.\n   * @param createUserDto - Data required to create a user.\n   * @returns The created user.\n   */\n  @Post()\n  public createUser(\n    // Without the global validation\n    // @Body(new ValidationPipe()) createUserDto: CreateUserDto,\n\n    // With\n    @Body() createUserDto: CreateUserDto,\n  ) {\n    return this.usersService.createUser(createUserDto);\n  }\n\n  /**\n   * Creates multiple users.\n   * @param createManyUsersDto - The data to create multiple users.\n   * @returns The created users.\n   */\n  @Post('create-many')\n  public createManyUsers(@Body() createManyUsersDto: CreateManyUsersDto) {\n    return this.usersService.createMany(createManyUsersDto);\n  }\n\n  /**\n   * Updates user information.\n   * @param patchUserDto - Data containing updates for the user.\n   * @returns The updated user.\n   */\n  @Patch()\n  public patchUser(@Body() patchUserDto: PatchUserDto) {\n    return patchUserDto;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersCreateManyProvider.html":{"url":"injectables/UsersCreateManyProvider.html","title":"injectable - UsersCreateManyProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersCreateManyProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/users-create-many.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                Service responsible for handling bulk user creation.\nUtilizes a query runner for transaction-based insertion of multiple users.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createMany\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dataSource: DataSource)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/users-create-many.provider.ts:15\n                            \n                        \n\n                \n                    \n                            Constructor for UsersCreateManyProvider.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe TypeORM DataSource instance for database operations.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createMany\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMany(createManyUsersDto: CreateManyUsersDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users-create-many.provider.ts:29\n                        \n                    \n\n\n            \n                \n                        Creates multiple users in a transactional manner.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createManyUsersDto\n                                            \n                                                            CreateManyUsersDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing an array of user objects to be created.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Promise - A list of successfully created users.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ConflictException,\n  Injectable,\n  RequestTimeoutException,\n} from '@nestjs/common';\nimport { User } from '../user.entity';\nimport { DataSource } from 'typeorm';\nimport { CreateManyUsersDto } from '../dtos/create-many-users.dto';\n\n/**\n * Service responsible for handling bulk user creation.\n * Utilizes a query runner for transaction-based insertion of multiple users.\n */\n@Injectable()\nexport class UsersCreateManyProvider {\n  /**\n   * Constructor for UsersCreateManyProvider.\n   * @param dataSource - The TypeORM DataSource instance for database operations.\n   */\n  constructor(private readonly dataSource: DataSource) {}\n\n  /**\n   * Creates multiple users in a transactional manner.\n   * @param createManyUsersDto - DTO containing an array of user objects to be created.\n   * @returns Promise - A list of successfully created users.\n   * @throws {RequestTimeoutException} - If unable to connect to the database.\n   * @throws {ConflictException} - If the transaction fails.\n   */\n  public async createMany(createManyUsersDto: CreateManyUsersDto) {\n    const newUsers: User[] = [];\n    const queryRunner = this.dataSource.createQueryRunner();\n\n    try {\n      // Establish connection and begin transaction\n      await queryRunner.connect();\n\n      // Start transaction\n      await queryRunner.startTransaction();\n    } catch (error) {\n      throw new RequestTimeoutException('Could not connect to the database');\n    }\n\n    try {\n      // Iterate over users and save each one\n      for (const user of createManyUsersDto.users) {\n        const newUser = queryRunner.manager.create(User, user);\n        const result = await queryRunner.manager.save(newUser);\n        newUsers.push(result);\n      }\n\n      // Commit the transaction upon successful insertion\n      await queryRunner.commitTransaction();\n    } catch (error) {\n      // Rollback transaction in case of failure\n      await queryRunner.rollbackTransaction();\n      throw new ConflictException('Could not complete the transaction', {\n        description: String(error),\n      });\n    } finally {\n      try {\n        // Release the query runner connection\n        await queryRunner.release();\n      } catch (error) {\n        throw new RequestTimeoutException('Could not release the connection', {\n          description: String(error),\n        });\n      }\n    }\n\n    return newUsers;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersCreateManyProvider\n\nUsersCreateManyProvider\n\nUsersModule -->\n\nUsersCreateManyProvider->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersCreateManyProvider\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './providers/users.service';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './user.entity';\nimport { ConfigModule } from '@nestjs/config';\nimport { UsersCreateManyProvider } from './providers/users-create-many.provider';\nimport profileConfig from './config/profile.config';\n\n// We can only export providers, never controllers\n@Module({\n  controllers: [UsersController],\n  providers: [UsersService, UsersCreateManyProvider],\n  exports: [UsersService],\n  // imports: [AuthModule], will cause a circular dependency\n  imports: [\n    forwardRef(() => AuthModule),\n    TypeOrmModule.forFeature([User]),\n    ConfigModule.forFeature(profileConfig),\n  ],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for managing users.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createMany\n                            \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    Public\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findOneById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, usersRepository: Repository, profileConfiguration: ConfigType<>, dataSource: DataSource, usersCreateManyProvider: UsersCreateManyProvider)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/users.service.ts:26\n                            \n                        \n\n                \n                    \n                            Constructs the UsersService with necessary dependencies.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nHandles authentication-related operations.\n\n\n                                                        \n                                                \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe repository for managing users in the database.\n\n\n                                                        \n                                                \n                                                \n                                                        profileConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInjected profile configuration.\n\n\n                                                        \n                                                \n                                                \n                                                        dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe database connection source.\n\n\n                                                        \n                                                \n                                                \n                                                        usersCreateManyProvider\n                                                  \n                                                        \n                                                                        UsersCreateManyProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to handle bulk user creation.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createMany\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMany(createManyUsersDto: CreateManyUsersDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:132\n                        \n                    \n\n\n            \n                \n                        Creates multiple users in batch.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createManyUsersDto\n                                            \n                                                            CreateManyUsersDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing multiple user records.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The created users.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:102\n                        \n                    \n\n\n            \n                \n                        Creates a new user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nData for creating the user.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The created user.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(getUserParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:57\n                        \n                    \n\n\n            \n                \n                        Retrieves all users with optional filters.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing filter criteria.\n\n\n                                            \n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe number of users to retrieve.\n\n\n                                            \n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe page number.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                A list of users.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:82\n                        \n                    \n\n\n            \n                \n                        Retrieves a user by ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe unique user ID.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The user details.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  forwardRef,\n  HttpException,\n  HttpStatus,\n  Inject,\n  Injectable,\n  NotFoundException,\n  RequestTimeoutException,\n} from '@nestjs/common';\nimport { GetUsersParamDto } from '../dtos/get-users-param.dto';\nimport { AuthService } from 'src/auth/providers/auth.service';\nimport { DataSource, Repository } from 'typeorm';\nimport { User } from '../user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { CreateUserDto } from '../dtos/create-user.dto';\nimport { ConfigType } from '@nestjs/config';\nimport profileConfig from '../config/profile.config';\nimport { UsersCreateManyProvider } from './users-create-many.provider';\nimport { CreateManyUsersDto } from '../dtos/create-many-users.dto';\n\n/**\n * Service for managing users.\n */\n@Injectable()\nexport class UsersService {\n  /**\n   * Constructs the UsersService with necessary dependencies.\n   * @param authService - Handles authentication-related operations.\n   * @param usersRepository - The repository for managing users in the database.\n   * @param profileConfiguration - Injected profile configuration.\n   * @param dataSource - The database connection source.\n   * @param usersCreateManyProvider - Service to handle bulk user creation.\n   */\n  constructor(\n    @Inject(forwardRef(() => AuthService))\n    private readonly authService: AuthService,\n\n    @InjectRepository(User)\n    private usersRepository: Repository,\n\n    @Inject(profileConfig.KEY)\n    private readonly profileConfiguration: ConfigType,\n\n    private readonly dataSource: DataSource,\n    private readonly usersCreateManyProvider: UsersCreateManyProvider,\n  ) {}\n\n  /**\n   * Retrieves all users with optional filters.\n   * @param getUserParamDto - DTO containing filter criteria.\n   * @param limit - The number of users to retrieve.\n   * @param page - The page number.\n   * @returns A list of users.\n   * @throws {HttpException} If the endpoint is deprecated.\n   */\n  public findAll(\n    getUserParamDto: GetUsersParamDto,\n    limit: number,\n    page: number,\n  ) {\n    throw new HttpException(\n      {\n        status: HttpStatus.MOVED_PERMANENTLY,\n        error: \"This endpoint doesn't exist\",\n        fileName: 'users.service.ts',\n        lineNumber: 71,\n      },\n      HttpStatus.MOVED_PERMANENTLY,\n      {\n        description: 'The endpoint was permanently moved',\n      },\n    );\n  }\n\n  /**\n   * Retrieves a user by ID.\n   * @param id - The unique user ID.\n   * @returns The user details.\n   * @throws {NotFoundException} If the user is not found.\n   */\n  public async findOneById(id: number) {\n    let user;\n    try {\n      user = await this.usersRepository.findOneBy({ id });\n    } catch (error) {\n      throw new RequestTimeoutException('Database connection error');\n    }\n\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n    return user;\n  }\n\n  /**\n   * Creates a new user.\n   * @param createUserDto - Data for creating the user.\n   * @returns The created user.\n   * @throws {BadRequestException} If the user already exists.\n   */\n  public async createUser(createUserDto: CreateUserDto) {\n    let existingUser;\n    try {\n      existingUser = await this.usersRepository.findOne({\n        where: { email: createUserDto.email },\n      });\n    } catch (error) {\n      throw new RequestTimeoutException('Database connection error');\n    }\n\n    if (existingUser) {\n      throw new BadRequestException('User already exists.');\n    }\n\n    let newUser = this.usersRepository.create(createUserDto);\n\n    try {\n      newUser = await this.usersRepository.save(newUser);\n    } catch (error) {\n      throw new RequestTimeoutException('Database connection error');\n    }\n\n    return newUser;\n  }\n\n  /**\n   * Creates multiple users in batch.\n   * @param createManyUsersDto - DTO containing multiple user records.\n   * @returns The created users.\n   */\n  public async createMany(createManyUsersDto: CreateManyUsersDto) {\n    return await this.usersCreateManyProvider.createMany(createManyUsersDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.module.ts\n            \n            variable\n            ENV\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/providers/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/meta-options/dtos/create-post-meta-options.dto.ts\n            \n            class\n            CreatePostMetaOptionsDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/meta-options/meta-option.entity.ts\n            \n            entity\n            MetaOption\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/meta-options/meta-options.controller.ts\n            \n            controller\n            MetaOptionsController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/meta-options/providers/meta-options.service.ts\n            \n            injectable\n            MetaOptionsService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/posts/dto/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                100 %\n                (12/12)\n            \n        \n        \n            \n                \n                src/posts/dto/patch-post.dto.ts\n            \n            class\n            PatchPostDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/posts/post.entity.ts\n            \n            entity\n            Post\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/posts/providers/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/tags/dtos/create-tag.dto.ts\n            \n            class\n            CreateTagDto\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/tags/providers/tags.service.ts\n            \n            injectable\n            TagsService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/tags/tag.entity.ts\n            \n            entity\n            Tag\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/tags/tags.controller.ts\n            \n            controller\n            TagsController\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/users/dtos/create-many-users.dto.ts\n            \n            class\n            CreateManyUsersDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dtos/get-users-param.dto.ts\n            \n            class\n            GetUsersParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/users/providers/users-create-many.provider.ts\n            \n            injectable\n            UsersCreateManyProvider\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/users/providers/users.service.ts\n            \n            injectable\n            UsersService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/users/user.entity.ts\n            \n            entity\n            User\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                100 %\n                (6/6)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.23\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.2.2\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/mapped-types : ^2.0.5\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.3.0\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            joi : ^17.12.2\n        \n            pg : ^8.11.5\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            PostStatus   (src/.../post-status.enum.ts)\n                        \n                        \n                            PostType   (src/.../post-type.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/posts/enums/post-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PostStatus\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n            \n        \n\n    src/posts/enums/post-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PostType\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                        Bootstrap function for initializing and running the NestJS application.\nThis function sets up the app with global validation pipes and Swagger API documentation.\n\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\nCompodoc Documentation\nScript\nExample :$ npm run docLet me name this as doc.\nTo see the coverage\nExample :$ http://localhost:3001/coverage.htmlIt should be a comma over here.\nNow this script itself a little bit verbose and lengthy, and I'll try to explain all the parts of the\nscript as we go.\nSo first of all, we need to use NPCs and along with Compo Doc in order to generate the Compo Doc documentation.\nSo we use at the rate compo doc, which is the name of the package.\nSo compo doc slash compo doc.\nSo this basically triggers the compo doc package for us.\nAnd then we need to provide it certain configurations.\nThe first one is the path to the pts config file.\nSo hyphen path to the pts config file TTS config file is within the root of the project itself.\nSo we use tsconfig.json.\nSo it's going to pick up this particular config file which is there in the root of our project.\nSo this particular TTS config file over here.\nNow once we have provided the TTS config file, the next flag that we want to add is the s flag.\nNow what this flag does is that it instructs compared to serve generated documentation on a port.\nNow, having said that, I want to have a specific port number as well.\nSo I use hyphen hyphen port.\nAnd let's serve the documentation on port 3001.\nWith that, I also want to enable Compo doc to watch for changes within my code.\nSo whenever I'm writing any new code, it should watch for changes and regenerate the documentation\nwhenever needed.\nFinally, I want to give it a specific directory for generating the documentation so we can use a hyphen\nd flag, which instructs combo doc to generate the documentation within a specific directory, which\nwe can pass as an argument.\nSo here I'm saying within the root of my project, just use the documentation directory to generate\nyour documentation.\nThe details can be seen at localhost:3001\nAlways define both sides of the relationships in many to many relationships i.e tags and posts\nGenerate a service\nExample :$ npx nest generate service tags/providers/tags --flat --no-specGenerate a module\nExample :$ npx nest generate module authGenerate a controller\nExample :$ npx nest generate controller auth --no-specGenerate a provider\nExample :$ npx nest generate pr users/providers/users-create=many.provider --flat --no-specPrettier\nExample :$ npx prettier --write .\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MetaOptionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TagsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_exports\n\n\n\ncluster_TagsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nPostsModule -->\n\nTagsModule->PostsModule\n\n\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nTagsService \n\nTagsService \n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\nUsersCreateManyProvider\n\nUsersCreateManyProvider\n\nUsersModule -->\n\nUsersCreateManyProvider->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        6 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    7 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    8 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ENV   (src/.../app.module.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENV\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.NODE_ENV\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
