var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.001,1,2.274]],["body/controllers/AppController.html",[0,1.766,1,4.157,2,1.324,3,0.314,4,0.277,5,0.241,6,3.334,7,0.392,8,2.261,9,2.433,10,3.805,11,5.115,12,3.106,13,6.007,14,3.736,15,2.142,16,4.63,17,4.157,18,1.935,19,0.476,20,2.038,21,5.08,22,1.085,23,0.026,24,0.663,25,3.943,26,2.847,27,3.805,28,3.416,29,4.325,30,5.115,31,1.965,32,1.836,33,4.325,34,2.433,35,0.408,36,0.826,37,3.334,38,1.015,39,0.314,40,0.014,41,2.633,42,3.943,43,1.623,44,1.515,45,2.394,46,2.394,47,2.633,48,2.195,49,2.195,50,1.515,51,3.943,52,0.019,53,0.019]],["title/modules/AppModule.html",[38,0.876,54,2.068]],["body/modules/AppModule.html",[0,0.769,1,3.362,2,1.533,3,0.208,4,0.184,5,0.16,7,0.26,8,1.701,9,1.244,10,1.945,12,1.588,14,3.229,15,0.878,16,1.945,17,1.747,18,0.769,23,0.026,26,2.541,28,1.747,35,0.51,36,0.548,37,2.211,38,1.493,39,0.208,40,0.009,47,1.747,48,2.142,52,0.014,53,0.014,54,4.021,55,2.209,56,1.005,57,1.343,58,1.343,59,1.156,60,2.585,61,1.343,62,2.211,63,2.211,64,2.211,65,3.229,66,3.522,67,3.522,68,3.229,69,2.978,70,1.976,71,1.343,72,1.244,73,1.945,74,3.396,75,2.803,76,2.987,77,3.254,78,3.396,79,2.772,80,3.254,81,4.536,82,2.669,83,3.86,84,2.615,85,2.615,86,2.615,87,2.615,88,2.336,89,1.077,90,2.615,91,1.156,92,1.244,93,2.615,94,3.86,95,5.611,96,1.747,97,3.848,98,2.615,99,2.615,100,1.945,101,3.254,102,2.862,103,3.848,104,2.615,105,4.565,106,2.615,107,1.747,108,2.211,109,2.211,110,2.211,111,3.254,112,3.86,113,1.077,114,1.754,115,1.588,116,1.701,117,1.456,118,1.343,119,3.396,120,2.211,121,2.211,122,2.211,123,2.211,124,1.747,125,2.211,126,2.211,127,1.588,128,1.175,129,1.639,130,4.565,131,3.848,132,1.747,133,2.211,134,2.211,135,2.615,136,2.615,137,2.615,138,1.945,139,1.747,140,2.615,141,3.254,142,1.588,143,2.615,144,2.615,145,0.939,146,2.615,147,2.615,148,2.615,149,2.615,150,2.615,151,2.615,152,1.945,153,0.939,154,2.615,155,2.615,156,2.615,157,2.211,158,2.211,159,1.588,160,2.615,161,0.44,162,2.615,163,2.171,164,2.615,165,2.615,166,2.615,167,2.615,168,2.615,169,2.615,170,1.077,171,2.615,172,2.615,173,2.615,174,2.211,175,2.615,176,2.615,177,2.615,178,1.747,179,2.615,180,2.615,181,2.615,182,2.615,183,2.615,184,1.156,185,1.244,186,1.945,187,2.336,188,2.211,189,0.822,190,2.211]],["title/injectables/AppService.html",[14,1.896,191,1.001]],["body/injectables/AppService.html",[3,0.344,4,0.304,5,0.264,7,0.43,14,3.565,15,1.452,16,4.86,17,4.364,18,1.921,19,0.522,20,1.948,21,5.256,23,0.026,24,0.727,26,3.02,31,2.084,32,2.232,33,4.586,34,2.956,35,0.344,36,0.906,38,1.112,39,0.344,40,0.016,47,3.623,48,3.02,52,0.02,53,0.02,75,3.02,127,3.294,129,1.948,189,1.704,191,1.595,192,2.056,193,3.655,194,5.424,195,5.256,196,4.323]],["title/controllers/AuthController.html",[0,1.001,197,2.274]],["body/controllers/AuthController.html",[0,1.635,2,1.511,3,0.359,4,0.316,5,0.275,7,0.448,12,3.377,23,0.026,26,3.096,35,0.481,36,0.943,39,0.359,40,0.016,46,2.733,48,2.505,50,1.729,52,0.021,53,0.021,115,2.733,127,3.377,128,1.431,129,2.167,132,4.407,197,4.211,198,3.805,199,2.733,200,4.137,201,4.703,202,4.703,203,4.703,204,3.237,205,3.805,206,3.348,207,3.348,208,3.348,209,1.989,210,4.5,211,4.5,212,4.5,213,4.5,214,2.311,215,3.805,216,2.505]],["title/modules/AuthModule.html",[38,0.876,65,1.896]],["body/modules/AuthModule.html",[2,1.847,3,0.352,4,0.31,5,0.27,23,0.026,35,0.499,36,0.926,38,1.612,39,0.352,40,0.016,52,0.02,53,0.02,55,1.82,56,1.698,57,2.269,58,2.269,59,1.954,60,3.074,61,3.074,65,3.709,69,3.074,70,2.824,71,2.269,72,2.102,76,3.062,115,2.684,197,3.999,204,3.546,205,3.737,217,3.737,218,3.737,219,3.737,220,4.419,221,3.673,222,4.419,223,3.737,224,2.952,225,2.952,226,3.737,227,3.288,228,3.288]],["title/injectables/AuthService.html",[191,1.001,204,1.749]],["body/injectables/AuthService.html",[3,0.219,4,0.193,5,0.168,7,0.468,8,1.766,15,1.342,17,2.669,18,1.838,19,0.332,20,1.435,23,0.026,24,0.791,26,2.872,31,1.983,32,2.052,35,0.318,36,0.577,39,0.219,40,0.017,43,1.936,44,1.807,45,3.133,48,3.05,50,1.058,52,0.015,53,0.015,75,2.872,113,1.645,118,1.414,128,1.766,129,1.689,132,2.669,133,4.831,134,5.286,145,2.052,159,1.672,161,0.672,178,4.276,186,2.049,187,1.672,189,0.865,191,1.175,192,1.31,202,3.379,203,3.379,204,2.934,214,2.052,215,2.329,216,1.533,221,2.669,224,1.839,225,1.839,227,2.049,228,2.049,229,2.329,230,5.714,231,2.353,232,5.159,233,2.329,234,3.012,235,2.754,236,2.972,237,1.535,238,1.175,239,0.961,240,3.977,241,2.754,242,5.159,243,3.996,244,3.141,245,3.379,246,3.379,247,3.996,248,5.159,249,3.996,250,5.159,251,2.225,252,3.996,253,2.754,254,2.972,255,3.996,256,3.996,257,2.872,258,4.703,259,2.856,260,3.996,261,3.446,262,5.159,263,4.362,264,3.379,265,3.996,266,3.996,267,2.329,268,2.754,269,2.049,270,2.329,271,2.754,272,2.754,273,2.329,274,2.049,275,3.996,276,2.754,277,2.329,278,2.329,279,2.426,280,2.754,281,2.754,282,2.754,283,2.754,284,2.754,285,1.839,286,0.81,287,2.754,288,2.049,289,2.754,290,2.329,291,2.754,292,2.754]],["title/classes/CreateManyUsersDto.html",[40,0.012,293,1.896]],["body/classes/CreateManyUsersDto.html",[3,0.33,4,0.291,5,0.253,7,0.525,19,0.5,22,1.139,23,0.026,24,0.697,35,0.488,39,0.33,40,0.021,52,0.02,53,0.02,113,2.704,128,1.495,145,2.086,161,1.105,209,1.831,293,2.939,294,1.831,295,3.927,296,2.511,297,3.502,298,1.452,299,2.939,300,3.205,301,4.464,302,1.659,303,3.245,304,2.766,305,4.087,306,4.464,307,2.351,308,3.526,309,4.464,310,4.141,311,3.502,312,4.141,313,2.511,314,4.464,315,2.939,316,4.464,317,1.97,318,1.391,319,2.766,320,2.766,321,3.526,322,3.081]],["title/classes/CreatePostDto.html",[40,0.012,323,1.896]],["body/classes/CreatePostDto.html",[3,0.152,4,0.134,5,0.117,7,0.616,10,1.422,18,1.705,19,0.231,22,1.595,23,0.026,24,0.975,31,2.419,34,1.44,35,0.395,39,0.152,40,0.014,45,1.16,52,0.011,53,0.011,74,3.181,91,1.89,116,1.662,117,2.093,142,2.283,145,1.78,161,1.086,170,1.246,184,2.06,185,1.788,187,1.838,209,0.845,239,1.419,286,0.89,288,2.252,294,0.845,298,1.282,299,2.76,302,1.343,304,1.276,305,2.856,308,2.856,309,2.56,311,1.616,314,2.56,315,2.76,316,2.56,317,0.909,320,1.276,321,3.311,322,2.252,323,1.685,324,4.987,325,1.422,326,4.387,327,1.765,328,3.759,329,4.69,330,3.178,331,4.007,332,3.178,333,3.705,334,2.595,335,4.69,336,1.257,337,1.911,338,3.027,339,1.436,340,2.596,341,1.911,342,1.911,343,3.467,344,1.911,345,1.911,346,3.311,347,2.856,348,2.856,349,1.911,350,1.911,351,2.381,352,3.027,353,1.911,354,2.595,355,1.911,356,1.911,357,3.027,358,3.616,359,4.276,360,2.596,361,3.181,362,1.911,363,1.911,364,3.688,365,2.796,366,3.311,367,3.467,368,3.027,369,3.027,370,1.911,371,1.911,372,4.276,373,3.027,374,2.76,375,1.662,376,3.027,377,1.911,378,1.911,379,1.911,380,1.911,381,1.911,382,3.616,383,3.616,384,2.56,385,2.022,386,3.027,387,1.911,388,2.56,389,3.467,390,3.181,391,3.616,392,3.616,393,1.911,394,1.911,395,1.761,396,3.181,397,2.856,398,1.911,399,1.911,400,1.911,401,1.911,402,1.911,403,1.911,404,2.796,405,3.027,406,2.252,407,3.469,408,2.856,409,2.56,410,2.252,411,1.422,412,1.422,413,2.56,414,1.616,415,1.616,416,1.422,417,1.422,418,3.864,419,3.759,420,1.616,421,2.56,422,1.911,423,1.616,424,1.616,425,1.911,426,1.911,427,1.911,428,1.911,429,1.911,430,1.616,431,1.911,432,2.022,433,1.911,434,1.422,435,1.616,436,1.911,437,1.911,438,0.845,439,1.911,440,1.911]],["title/classes/CreatePostMetaOptionsDto.html",[40,0.012,351,1.896]],["body/classes/CreatePostMetaOptionsDto.html",[3,0.362,4,0.319,5,0.277,7,0.452,18,1.86,19,0.548,22,1.25,23,0.026,24,0.764,31,2.149,35,0.362,39,0.362,40,0.02,52,0.021,53,0.021,91,2.796,145,1.631,161,0.764,184,2.472,185,2.66,294,2.008,298,1.539,299,3.114,302,1.757,315,3.114,317,2.16,327,1.628,351,3.114,374,3.114,406,4.16,408,3.033,416,4.16,434,4.508,435,3.84,441,2.472,442,3.84,443,4.542,444,4.542,445,3.736]],["title/classes/CreateTagDto.html",[40,0.012,446,2.068]],["body/classes/CreateTagDto.html",[3,0.229,4,0.202,5,0.176,7,0.648,18,1.856,19,0.348,22,1.534,23,0.026,24,0.938,31,2.615,34,1.962,35,0.329,39,0.229,40,0.015,43,1.699,52,0.015,53,0.015,114,1.853,129,1.731,142,2.928,161,0.938,184,2.328,187,3.198,209,1.272,238,1.756,286,1.213,294,1.272,298,1.135,299,2.297,302,1.296,304,2.755,315,2.684,317,1.369,321,3.22,333,4.155,343,3.587,346,3.723,347,3.517,348,3.517,354,2.297,374,2.932,382,4.453,383,4.453,384,3.488,385,2.755,388,4.453,395,2.802,397,3.517,406,3.069,407,3.517,408,3.517,409,3.488,410,2.141,411,2.141,412,2.141,418,3.917,420,2.434,423,2.434,424,2.434,430,2.434,446,2.505,447,4.905,448,2.434,449,3.069,450,4.077,451,5.266,452,5.051,453,2.878,454,2.878,455,4.077,456,2.878,457,2.878,458,2.878,459,2.878,460,4.077,461,2.878,462,2.878,463,2.297,464,2.878,465,4.125,466,4.125,467,2.878,468,2.878,469,2.434,470,3.488,471,3.488,472,3.488]],["title/classes/CreateUserDto.html",[40,0.012,303,1.749]],["body/classes/CreateUserDto.html",[3,0.25,4,0.22,5,0.192,7,0.312,18,1.956,19,0.379,22,1.506,23,0.026,24,0.921,34,2.087,35,0.25,39,0.25,40,0.02,52,0.016,53,0.016,128,1.655,161,0.921,178,4.091,238,1.837,239,1.317,261,4.24,286,1.29,294,1.388,295,4.284,298,1.207,299,2.442,302,1.378,303,2.253,315,3.048,317,1.493,336,1.61,407,2.93,408,3.656,410,2.335,411,2.335,412,2.335,469,3.709,473,2.335,474,4.387,475,3.263,476,4.387,477,4.072,478,3.656,479,4.275,480,4.275,481,3.14,482,3.14,483,4.387,484,3.709,485,5.474,486,3.985,487,3.709,488,5.046,489,6.248,490,3.14,491,3.14,492,4.629,493,5.474,494,3.14,495,3.14,496,3.14,497,5.474,498,4.387,499,4.387,500,4.387,501,4.629,502,4.387,503,5.474,504,3.982,505,5.474,506,5.474,507,5.474,508,3.14,509,4.387,510,4.387,511,5.474,512,3.14,513,3.14]],["title/classes/GetUsersParamDto.html",[40,0.012,514,2.068]],["body/classes/GetUsersParamDto.html",[3,0.332,4,0.293,5,0.255,7,0.527,19,0.503,22,1.147,23,0.026,24,0.701,31,2.357,35,0.464,39,0.332,40,0.024,46,3.218,52,0.02,53,0.02,113,2.182,128,1.713,139,4.097,161,0.981,187,3.218,209,1.842,237,2.037,239,1.475,294,1.842,298,1.458,302,1.665,317,1.982,320,2.783,336,1.714,339,2.257,343,3.1,404,3.943,407,3.54,418,3.943,514,3.218,515,4.482,516,3.524,517,2.951,518,4.167,519,4.167,520,4.482,521,4.482,522,5.3]],["title/entities/MetaOption.html",[523,1.144,524,1.62]],["body/entities/MetaOption.html",[3,0.267,4,0.235,5,0.205,7,0.334,18,1.35,19,0.405,22,1.623,23,0.026,24,0.992,35,0.366,39,0.267,40,0.012,52,0.017,53,0.017,92,2.897,114,1.764,153,1.204,158,3.882,161,1.025,163,1.595,170,1.89,184,2.489,251,3.135,302,1.442,307,1.764,327,1.718,336,1.35,339,1.758,366,3.76,374,3.39,397,3.066,434,3.894,441,2.692,445,3.066,463,2.556,478,3.066,504,3.419,523,2.045,524,3.02,525,2.835,526,3.415,527,4.591,528,4.427,529,4.427,530,4.427,531,3.353,532,4.188,533,5.63,534,3.497,535,3.353,536,2.788,537,2.239,538,3.066,539,3.353,540,4.591,541,3.882,542,4.591,543,4.591,544,4.591,545,2.835,546,4.591,547,3.882,548,3.353,549,3.353,550,3.415,551,3.135,552,3.497,553,4.427,554,3.353,555,2.556,556,2.494,557,3.066,558,3.882,559,3.882]],["title/controllers/MetaOptionsController.html",[0,1.001,560,2.274]],["body/controllers/MetaOptionsController.html",[0,1.674,2,1.332,3,0.316,4,0.279,5,0.242,7,0.511,8,1.753,15,1.332,19,0.479,20,1.844,22,1.091,23,0.026,24,0.667,32,1.844,35,0.454,36,0.831,39,0.316,40,0.014,41,2.649,44,1.973,49,2.208,50,1.524,52,0.019,53,0.019,91,2.824,92,2.442,161,0.667,184,2.757,185,2.864,189,1.246,199,2.409,231,2.344,237,1.524,238,1.166,239,0.954,286,1.51,298,1.413,307,1.973,327,1.696,351,3.352,375,2.27,417,2.95,438,2.27,441,2.27,560,3.429,561,3.354,562,2.636,563,5.693,564,3.966,565,3.966,566,5.091,567,5.693,568,3.819,569,3.118,570,2.037,571,3.472,572,3.354,573,3.354,574,3.966,575,2.037,576,3.966]],["title/modules/MetaOptionsModule.html",[38,0.876,66,2.068]],["body/modules/MetaOptionsModule.html",[2,1.957,3,0.332,4,0.293,5,0.255,7,0.415,9,2.521,23,0.026,35,0.505,36,0.873,38,1.666,39,0.332,40,0.015,47,2.783,48,2.32,52,0.02,53,0.02,55,1.716,56,1.601,57,2.14,58,2.14,59,1.842,60,2.993,61,2.14,66,3.93,70,2.721,71,2.14,72,1.982,76,2.951,88,2.531,89,1.716,91,2.343,92,1.982,114,2.037,127,2.531,129,2.093,153,1.496,184,2.576,185,2.521,201,3.524,441,1.842,523,1.399,524,2.521,560,3.892,562,2.721,571,3.661,572,3.524,573,3.524,577,3.524,578,3.524,579,4.167,580,4.167,581,2.531,582,5.3,583,4.167]],["title/injectables/MetaOptionsService.html",[191,1.001,571,1.896]],["body/injectables/MetaOptionsService.html",[3,0.282,4,0.249,5,0.216,7,0.536,15,1.189,19,0.427,20,2.067,23,0.026,24,0.801,32,1.71,35,0.479,36,0.742,39,0.282,40,0.013,43,2.371,44,1.83,52,0.018,53,0.018,89,1.457,91,2.735,117,2.652,118,1.817,127,2.892,153,1.271,159,2.892,161,0.801,185,2.265,189,1.496,191,1.4,192,1.684,214,2.446,216,1.971,231,2.216,237,1.83,238,1.4,239,1.146,286,1.4,298,1.31,318,2.078,327,0.911,351,3.205,354,3.205,375,2.105,417,2.633,441,2.379,449,4.283,523,2.078,524,3.131,562,2.446,566,4.027,570,1.817,571,2.652,581,2.149,584,4.552,585,2.993,586,3.543,587,2.997,588,3.539,589,3.904,590,3.539,591,5.383,592,4.027,593,4.763,594,3.539,595,3.181,596,4.027,597,4.763,598,2.446,599,1.971,600,3.543,601,4.763,602,4.763,603,2.364,604,2.993,605,3.539,606,2.149,607,3.539]],["title/classes/PatchPostDto.html",[40,0.012,608,2.068]],["body/classes/PatchPostDto.html",[3,0.34,4,0.3,5,0.261,7,0.535,19,0.515,22,1.174,23,0.026,24,0.718,31,2.067,35,0.469,39,0.34,40,0.019,52,0.02,53,0.02,161,0.718,209,1.886,239,1.294,294,1.886,298,1.48,302,1.69,304,2.85,315,2.995,317,2.029,318,1.433,321,3.593,323,3.28,325,3.174,327,1.676,336,1.582,339,2.266,404,4.002,432,2.85,555,3.444,608,3.267,609,4.549,610,4.549,611,4.002,612,5.231,613,4.549,614,4.549,615,5.379,616,5.379,617,5.379,618,4.267,619,4.267,620,3.608,621,3.174]],["title/classes/PatchUserDto.html",[40,0.012,622,2.274]],["body/classes/PatchUserDto.html",[3,0.384,4,0.338,5,0.294,7,0.48,23,0.026,35,0.462,39,0.384,40,0.017,52,0.022,53,0.022,128,1.492,239,1.395,294,2.13,298,1.595,302,1.822,303,3.194,318,1.618,319,3.219,473,3.585,610,4.903,612,5.458,613,4.903,620,4.075,622,3.873,623,4.075,624,5.798,625,5.798,626,4.075,627,4.075]],["title/entities/Post.html",[327,0.876,523,1.144]],["body/entities/Post.html",[3,0.176,4,0.155,5,0.135,7,0.22,18,1.796,19,0.267,22,1.681,23,0.026,24,1.028,35,0.419,39,0.176,40,0.008,43,1.395,52,0.013,53,0.013,74,2.521,91,1.498,92,1.05,100,3.44,114,1.302,116,2.205,117,2.931,128,1.455,142,3.029,145,2.302,153,0.793,161,1.109,163,1.05,170,2.329,185,1.612,239,1.47,296,2.504,302,1.065,326,2.521,327,1.721,329,4.218,330,3.486,331,4.207,332,3.486,333,2.754,334,2.777,335,4.218,336,0.996,339,1.384,340,3.029,346,3.088,347,2.263,348,2.263,360,2.058,361,2.521,364,2.521,365,2.521,366,3.088,367,3.44,374,1.886,389,3.71,390,2.521,395,2.168,397,3.088,413,2.865,414,1.867,415,1.867,421,4.782,441,0.976,463,2.574,486,3.516,504,3.196,523,1.553,524,2.199,526,2.521,532,2.521,534,2.754,536,2.808,537,3.777,538,4.251,545,1.867,550,3.916,552,2.263,557,3.873,558,1.867,559,2.865,581,1.341,628,1.867,629,2.208,630,3.388,631,5.264,632,2.208,633,3.91,634,2.208,635,3.388,636,3.916,637,2.865,638,2.208,639,2.208,640,3.388,641,2.208,642,3.388,643,2.865,644,2.208,645,2.208,646,2.865,647,2.208,648,3.388,649,2.865,650,2.208,651,2.865,652,2.208,653,3.388,654,1.867,655,3.388,656,2.208,657,2.208,658,2.865,659,2.208,660,3.388,661,2.865,662,3.388,663,2.208,664,2.208,665,2.208,666,2.208,667,1.867,668,1.867]],["title/controllers/PostsController.html",[0,1.001,669,2.274]],["body/controllers/PostsController.html",[0,1.258,2,0.787,3,0.187,4,0.165,5,0.143,7,0.664,15,1.602,18,1.258,19,0.283,20,1.274,22,1.312,23,0.026,24,0.802,27,2.638,32,2.159,34,1.687,35,0.408,36,0.491,39,0.187,40,0.008,43,2.109,44,2.071,45,1.424,49,1.305,50,0.901,52,0.013,53,0.013,114,2.407,116,1.568,128,1.44,139,3.185,145,1.274,161,0.907,170,1.46,189,0.737,199,1.424,206,1.744,207,3.81,208,4.286,209,1.036,231,2.55,237,1.833,238,1.584,239,1.346,257,1.975,286,1.584,307,1.833,308,3.185,313,2.269,323,3.116,326,4.286,327,1.764,334,3.116,336,1.506,339,2.16,438,2.264,492,1.983,517,1.305,551,1.975,555,3,562,1.821,569,1.424,608,3.398,611,3.548,621,2.638,669,2.857,670,1.983,671,3.547,672,3.738,673,3.547,674,3.547,675,2.345,676,4.278,677,3.547,678,4.769,679,3.617,680,3.547,681,2.999,682,2.345,683,2.345,684,1.566,685,3.185,686,1.983,687,2.345,688,4.033,689,4.033,690,2.345,691,2.345,692,2.999,693,2.345,694,2.345,695,3.185,696,2.345,697,3.81,698,2.345,699,2.345,700,2.345,701,3.185,702,2.345,703,2.345,704,2.638,705,2.999,706,2.655,707,1.983,708,3.547,709,2.999,710,1.983,711,1.983,712,2.345,713,2.345,714,2.345,715,4.033,716,2.345,717,2.345,718,3.182,719,2.345,720,2.345,721,2.345,722,2.345,723,1.983,724,2.345,725,2.345,726,2.345,727,1.744,728,2.345,729,1.983,730,2.345]],["title/modules/PostsModule.html",[38,0.876,67,2.068]],["body/modules/PostsModule.html",[2,1.749,3,0.323,4,0.285,5,0.248,8,1.793,23,0.026,35,0.537,36,0.85,38,1.616,39,0.323,40,0.015,52,0.019,53,0.019,55,1.67,56,1.559,57,2.083,58,2.083,59,1.793,60,2.955,61,2.675,67,4.094,68,3.578,69,3.3,70,2.675,71,2.083,72,1.929,76,2.9,77,3.43,88,2.463,89,1.67,92,1.929,113,1.67,163,1.929,189,1.274,223,3.43,318,1.362,327,1.341,441,1.793,523,1.362,524,2.478,581,2.463,669,3.843,706,3.578,707,3.43,731,3.43,732,3.43,733,4.056,734,4.056,735,4.056,736,3.43,737,4.056,738,4.056,739,4.056,740,3.43,741,4.056,742,4.056,743,4.056,744,4.056,745,3.43]],["title/injectables/PostsService.html",[191,1.001,706,1.896]],["body/injectables/PostsService.html",[3,0.14,4,0.124,5,0.107,7,0.476,8,1.253,9,1.94,15,1.812,18,1.046,19,0.212,20,1.017,23,0.026,24,0.752,27,2.647,32,1.938,34,0.837,35,0.43,36,0.369,39,0.14,40,0.006,44,2.009,46,2.477,50,1.567,52,0.011,53,0.011,56,1.089,79,1.068,82,1.348,89,0.724,91,1.977,92,0.837,114,1.931,116,2.222,117,2.271,118,2.296,124,1.175,128,1.05,129,1.938,145,1.465,153,0.632,159,1.721,161,0.752,163,1.94,170,0.724,185,2.127,189,1.502,191,0.833,192,0.837,214,2.095,216,2.271,231,2.414,233,1.488,234,2.391,237,1.719,238,1.315,239,1.076,244,1.175,251,1.578,257,0.979,259,2.902,263,1.488,267,1.488,279,1.068,285,3.192,286,1.587,298,1.122,307,1.089,313,1.348,318,1.37,323,3.005,327,1.69,334,1.578,336,1.315,339,1.902,340,1.721,354,1.981,375,1.803,385,2.376,395,1.465,396,1.309,432,1.893,438,1.253,441,0.778,517,0.979,524,1.94,551,1.981,552,1.175,555,1.578,562,2.095,569,1.068,575,2.454,581,1.068,586,1.309,587,3.264,589,3.439,598,1.455,599,2.271,600,1.309,603,1.175,604,1.488,606,3.695,608,3.052,611,2.108,614,2.396,621,2.108,643,2.396,672,3.192,684,2.376,685,2.376,692,1.488,695,1.893,697,2.108,701,1.893,706,1.578,710,1.488,711,1.488,723,1.488,727,1.309,736,1.488,746,1.488,747,2.396,748,4.079,749,4.079,750,4.079,751,2.684,752,1.759,753,1.759,754,1.759,755,2.108,756,2.834,757,1.759,758,2.647,759,2.834,760,1.759,761,3.008,762,2.834,763,1.759,764,1.759,765,1.488,766,1.488,767,3.034,768,1.759,769,1.759,770,1.488,771,1.759,772,1.759,773,1.759,774,1.759,775,2.834,776,3.558,777,1.488,778,1.759,779,1.759,780,1.759,781,1.759,782,1.759,783,1.759,784,1.759,785,1.759,786,1.759,787,2.834,788,3.008,789,1.488,790,1.759,791,1.488,792,1.759,793,1.488,794,3.357,795,1.759,796,1.759,797,1.759,798,1.759,799,1.759,800,1.759,801,1.759,802,1.759,803,1.488,804,1.759,805,1.488,806,2.834,807,3.034,808,1.759,809,1.488,810,1.488,811,1.488,812,1.759,813,1.759,814,1.309,815,1.488,816,1.488,817,1.759,818,1.759,819,1.488,820,1.759,821,1.759,822,3.008,823,3.558,824,3.558,825,3.008,826,3.558,827,1.488,828,1.759,829,1.759,830,1.759,831,1.759,832,1.759,833,1.759,834,1.759,835,1.488,836,1.488,837,2.834,838,1.759,839,2.834,840,1.759,841,2.834,842,1.759,843,2.834,844,1.759,845,2.834,846,1.759,847,2.834,848,1.759,849,2.834,850,1.759,851,1.488,852,1.759]],["title/entities/Tag.html",[395,1.402,523,1.144]],["body/entities/Tag.html",[3,0.211,4,0.186,5,0.161,7,0.56,18,1.821,19,0.319,22,1.704,23,0.026,24,1.042,31,2.379,35,0.309,39,0.211,40,0.01,52,0.014,53,0.014,114,2.164,129,0.949,142,3.272,145,2.223,153,0.949,161,1.096,163,1.257,170,2.084,184,1.714,238,1.584,239,0.933,251,3.136,288,2.885,296,2.407,302,1.218,307,1.49,327,1.449,333,3.599,336,1.14,339,1.542,346,3.379,347,2.59,348,2.59,366,3.762,374,2.159,395,2.776,450,3.884,452,3.884,455,2.235,460,2.235,463,3.136,470,2.235,471,2.235,472,2.235,478,2.59,486,3.762,523,1.699,528,3.884,529,3.884,530,3.884,532,4.189,534,3.068,536,2.355,537,3.599,538,4.136,547,3.279,550,2.885,551,2.159,552,2.59,553,3.884,555,2.159,556,1.966,557,3.762,598,1.991,633,4.279,636,4.189,637,3.279,649,3.279,651,3.279,654,2.235,658,3.279,661,3.279,851,3.279,853,2.235,854,3.878,855,4.593,856,2.643,857,4.593,858,2.643,859,2.885,860,2.643,861,2.643,862,2.643,863,2.643,864,2.643,865,2.643,866,2.643,867,2.643,868,2.643,869,2.643]],["title/controllers/TagsController.html",[0,1.001,870,2.274]],["body/controllers/TagsController.html",[0,1.475,2,1.039,3,0.247,4,0.217,5,0.189,7,0.541,8,1.368,9,2.066,12,2.637,15,1.685,19,0.374,20,1.56,22,1.381,23,0.026,24,0.844,32,2.133,35,0.4,36,0.649,39,0.247,40,0.011,41,2.067,43,1.788,44,2.09,49,1.723,50,1.189,52,0.016,53,0.016,82,2.066,116,1.368,129,1.56,161,0.844,189,0.973,199,1.88,200,3.231,231,2.606,237,1.928,238,1.475,239,1.207,251,3.029,279,3.303,286,1.277,298,1.195,307,1.669,318,1.458,327,1.291,336,1.747,339,2.229,354,3.029,375,1.92,395,2.776,438,1.92,446,3.704,517,1.723,551,2.418,569,1.88,570,1.589,575,1.589,587,3.307,599,2.418,672,4.369,684,2.067,685,3.633,704,3.732,729,2.617,751,2.942,758,4.047,777,2.617,859,4.419,870,2.901,871,2.617,872,4.343,873,2.617,874,3.095,875,3.095,876,4.6,877,3.095,878,4.343,879,3.095,880,3.673,881,3.231,882,3.673,883,2.617,884,2.617,885,3.095,886,3.095,887,3.095,888,3.095,889,3.095,890,3.095,891,3.095]],["title/modules/TagsModule.html",[38,0.876,68,1.896]],["body/modules/TagsModule.html",[2,1.87,3,0.359,4,0.317,5,0.275,23,0.026,35,0.517,36,0.945,38,1.555,39,0.359,40,0.016,52,0.021,53,0.021,55,1.857,56,1.733,57,2.316,58,2.316,59,1.994,60,3.103,61,3.103,68,3.725,70,2.86,71,2.316,72,2.145,76,2.511,88,2.739,89,1.857,395,1.857,751,3.555,870,4.036,883,3.814,892,3.814,893,3.814,894,3.814,895,4.51,896,4.51,897,3.814,898,4.51]],["title/injectables/TagsService.html",[191,1.001,751,1.749]],["body/injectables/TagsService.html",[3,0.2,4,0.176,5,0.153,7,0.55,9,1.776,15,1.772,19,0.303,20,1.341,23,0.026,24,0.888,32,2.112,34,1.195,35,0.42,36,0.526,39,0.2,40,0.009,41,2.494,43,1.538,44,2.027,50,0.965,52,0.018,53,0.014,82,1.776,89,1.034,116,2.531,118,2.289,129,1.341,145,1.341,153,1.601,161,0.888,170,1.034,189,1.401,191,1.098,192,1.195,214,1.918,216,1.399,224,1.678,225,1.678,231,2.588,237,2.027,238,1.551,239,1.269,244,1.678,251,2.748,254,1.869,257,2.482,269,1.869,270,2.124,279,2.998,286,1.098,298,1.028,300,2.268,305,3.524,307,1.435,313,1.776,318,1.254,336,1.767,339,2.185,354,3.078,375,1.651,395,2.819,396,3.925,438,1.651,446,3.358,449,2.778,523,1.658,551,2.937,570,1.29,575,1.918,587,3.499,589,3.572,592,3.158,595,2.494,598,1.918,599,2.748,603,1.678,606,3.204,672,3.693,684,2.494,685,3.297,751,1.918,758,3.925,859,4.113,873,3.158,876,4.174,880,3.158,881,2.778,882,3.158,884,2.124,897,2.124,899,2.124,900,3.735,901,3.735,902,2.512,903,2.512,904,4.458,905,2.512,906,2.512,907,3.735,908,2.512,909,4.458,910,3.735,911,2.512,912,2.124,913,2.124,914,2.512,915,2.512,916,2.512,917,2.512,918,2.512,919,2.124,920,2.512,921,2.512,922,2.512,923,2.512,924,2.512,925,2.512]],["title/entities/User.html",[128,0.876,523,1.144]],["body/entities/User.html",[3,0.263,4,0.232,5,0.201,7,0.328,18,1.859,19,0.398,22,1.667,23,0.026,24,1.019,35,0.362,39,0.263,40,0.012,52,0.017,53,0.017,82,2.159,114,2.253,128,1.742,145,2.007,153,1.184,161,1.093,163,1.568,170,2.495,178,3.915,238,1.644,239,1.092,261,3.915,302,1.426,313,2.159,327,1.559,336,1.334,339,1.743,463,3.373,477,3.376,478,3.031,479,4.388,480,4.388,484,3.837,486,4.223,488,5.347,521,3.837,523,1.877,526,3.376,534,3.466,536,2.756,537,3.734,538,4.223,556,2.452,557,3.915,636,4.704,926,2.788,927,3.297,928,3.297,929,3.297,930,3.297,931,3.297,932,3.297,933,4.538,934,3.297,935,4.538,936,4.538]],["title/controllers/UsersController.html",[0,1.001,937,2.274]],["body/controllers/UsersController.html",[0,1.17,2,0.701,3,0.166,4,0.147,5,0.127,7,0.627,9,1.893,12,1.97,15,1.728,18,1.429,19,0.252,20,1.165,22,1.337,23,0.026,24,0.818,31,1.724,32,2.093,35,0.428,36,0.437,39,0.166,40,0.008,43,2.119,44,2.24,49,1.162,50,0.802,52,0.012,53,0.012,113,2.633,118,1.072,128,1.72,129,1.165,145,1.165,161,0.999,170,1.848,189,0.656,199,1.267,206,1.552,207,2.96,208,3.338,209,0.922,231,2.571,234,2.134,236,1.552,237,2.191,238,1.632,239,1.292,257,1.806,259,1.267,277,2.743,286,1.319,293,2.99,296,1.893,298,0.892,300,2.725,303,2.928,307,1.724,308,3.708,313,2.134,318,1.507,319,2.166,327,1.024,334,2.215,336,1.852,339,2.051,360,3.604,364,2.413,375,1.984,432,2.166,438,1.984,475,1.552,514,2.725,517,2.706,541,1.765,555,1.806,568,2.413,569,1.97,570,1.666,575,1.072,598,2.304,622,3.808,667,4.35,679,1.765,681,1.765,686,1.765,688,3.794,689,2.743,695,2.997,697,1.552,701,2.997,704,2.96,705,3.364,709,3.794,715,2.743,718,2.413,881,1.552,937,2.657,938,1.765,939,3.244,940,3.364,941,3.244,942,3.979,943,3.244,944,2.087,945,3.244,946,2.087,947,1.765,948,2.087,949,2.087,950,2.087,951,3.244,952,2.087,953,4.487,954,2.087,955,3.244,956,2.087,957,4.541,958,2.087,959,3.244,960,2.087,961,2.087,962,3.244,963,4.487,964,2.087,965,2.087,966,3.979,967,3.364,968,2.743,969,2.087,970,2.087,971,2.087,972,1.765,973,1.765,974,2.087,975,1.765,976,1.552,977,2.087,978,2.087,979,2.087,980,2.087,981,3.244,982,2.087,983,2.087,984,2.087,985,2.087,986,2.087,987,2.087,988,2.087,989,2.087,990,1.765,991,2.087,992,2.087,993,2.087,994,2.087,995,2.087,996,2.087]],["title/injectables/UsersCreateManyProvider.html",[191,1.001,997,1.896]],["body/injectables/UsersCreateManyProvider.html",[3,0.236,4,0.208,5,0.181,7,0.56,8,1.858,9,2,15,0.993,19,0.357,20,1.51,23,0.026,24,0.707,32,1.51,35,0.425,36,0.619,39,0.236,40,0.011,44,1.616,45,2.553,49,1.646,50,1.136,52,0.016,53,0.016,82,2.535,113,2.479,118,2.892,124,1.974,128,1.584,152,3.64,153,1.757,161,0.707,189,1.321,190,2.5,191,1.236,192,1.406,214,2.513,231,2.015,237,1.616,238,1.236,239,1.011,259,2.971,274,3.128,278,2.5,279,1.795,285,3.268,286,1.439,293,3.258,296,1.406,298,1.157,300,3.236,305,2.808,306,3.555,307,2.048,313,2,318,1.643,322,2.199,375,1.858,438,1.858,504,1.795,517,2.724,570,1.518,575,2.159,586,2.199,587,2.724,595,2.808,599,1.646,600,3.128,606,3.554,718,3.128,755,3.128,767,3.128,788,5.203,791,2.5,793,2.5,794,3.268,803,2.5,805,2.5,807,3.64,809,2.5,810,2.5,811,2.5,814,2.199,815,3.555,816,4.138,819,2.5,822,2.5,976,2.199,997,2.967,998,4.138,999,2.5,1000,3.555,1001,4.204,1002,4.893,1003,3.555,1004,2.956,1005,5.294,1006,2.956,1007,3.555,1008,2.956,1009,4.204,1010,4.204,1011,4.204,1012,2.199,1013,4.204,1014,2.956,1015,4.204,1016,2.956,1017,2.956,1018,2.956,1019,2.956,1020,4.204,1021,2.956,1022,2.5,1023,2.956,1024,2.5,1025,2.956,1026,2.956,1027,2.956,1028,2.956,1029,2.956,1030,2.956,1031,4.204]],["title/modules/UsersModule.html",[38,0.876,69,1.749]],["body/modules/UsersModule.html",[2,1.938,3,0.325,4,0.287,5,0.249,23,0.026,35,0.533,36,0.855,38,1.485,39,0.417,40,0.015,52,0.019,53,0.019,55,1.681,56,1.568,57,2.096,58,2.096,59,1.804,60,3.125,61,2.963,65,3.213,69,3.438,70,2.685,71,2.096,72,1.941,76,2.912,88,2.478,89,1.681,94,3.451,96,2.726,128,1.05,221,3.493,226,3.451,227,3.036,228,3.036,234,3.25,318,1.371,937,3.855,975,3.451,997,3.584,1012,3.036,1032,3.451,1033,3.451,1034,3.451,1035,4.081,1036,4.081,1037,4.081,1038,4.081,1039,3.451,1040,3.451,1041,3.451,1042,4.081,1043,4.081,1044,4.081]],["title/injectables/UsersService.html",[191,1.001,234,1.62]],["body/injectables/UsersService.html",[3,0.168,4,0.282,5,0.129,7,0.537,15,1.347,19,0.255,20,1.176,23,0.026,24,0.823,26,1.824,29,3.392,32,2.002,35,0.474,36,0.443,39,0.168,40,0.008,43,1.349,44,2.288,46,1.989,50,1.736,52,0.012,53,0.012,56,1.259,80,2.77,82,2.149,89,0.87,96,1.412,102,2.437,113,2.6,128,1.693,129,1.176,132,2.188,152,3.637,153,0.759,159,1.283,161,0.823,189,1.42,191,0.963,192,1.005,204,2.863,214,1.682,216,2.722,221,1.412,231,2.49,234,2.149,236,2.437,237,1.879,238,1.438,239,1.298,254,2.437,257,1.824,259,3.276,261,1.412,273,1.787,274,2.984,285,3.454,286,1.639,293,2.879,296,1.005,298,1.243,299,1.824,300,2.744,303,2.656,307,1.736,313,1.558,318,0.71,319,1.412,334,1.177,336,1.801,339,1.812,360,3.141,375,1.997,438,1.997,463,1.824,514,2.744,520,2.77,562,2.32,570,1.682,575,1.682,587,3.187,589,3.141,598,1.682,599,2.233,603,1.412,606,2.744,695,3.018,747,3.392,755,2.437,765,2.77,766,2.77,767,1.572,794,2.679,807,2.984,835,1.787,836,1.787,940,2.77,947,2.77,957,3.82,967,3.392,968,2.77,972,1.787,973,1.787,976,1.572,997,3.104,1000,2.77,1003,2.77,1005,4.714,1007,2.77,1012,1.572,1024,3.392,1039,1.787,1040,1.787,1041,1.787,1045,1.787,1046,3.276,1047,2.114,1048,4.518,1049,4.518,1050,4.518,1051,2.114,1052,3.276,1053,3.276,1054,2.114,1055,3.276,1056,3.276,1057,2.114,1058,2.114,1059,2.114,1060,3.276,1061,3.276,1062,2.114,1063,3.276,1064,2.114,1065,4.011,1066,2.114,1067,2.114,1068,2.114,1069,2.114,1070,2.114,1071,3.276,1072,2.114,1073,2.114,1074,2.114,1075,2.114,1076,2.114,1077,2.114,1078,2.114,1079,4.011,1080,2.114,1081,3.276,1082,4.011,1083,2.114,1084,2.114,1085,2.114,1086,2.114,1087,2.114,1088,2.114]],["title/coverage.html",[1089,3.451]],["body/coverage.html",[0,1.826,1,2.394,5,0.219,6,3.031,14,1.996,23,0.026,40,0.023,52,0.018,53,0.018,59,1.584,73,2.666,91,1.584,92,2.285,113,1.476,119,2.666,128,0.922,161,0.603,191,1.865,193,3.031,197,2.394,198,3.031,204,1.841,229,3.031,234,1.705,286,1.054,293,1.996,295,3.573,296,1.705,297,3.031,303,1.841,318,1.204,323,1.996,324,3.031,325,3.573,327,1.236,351,1.996,395,1.476,416,2.666,441,2.558,442,3.031,446,2.177,447,3.031,448,3.031,473,3.573,514,2.177,515,3.031,516,3.031,523,1.943,524,1.705,525,3.031,536,2.177,560,2.394,561,3.031,571,1.996,584,3.031,585,3.031,608,2.177,609,3.031,622,2.394,623,3.031,628,3.031,669,2.394,670,3.031,706,1.996,746,3.031,751,1.841,853,3.031,870,2.394,871,3.031,899,3.031,926,3.031,937,2.394,938,3.031,997,1.996,998,3.031,999,3.031,1045,3.031,1089,2.666,1090,2.666,1091,3.584,1092,7.01,1093,6.344,1094,3.584,1095,6.447,1096,4.803,1097,3.031,1098,3.031,1099,4.803,1100,3.584,1101,4.803,1102,6.034,1103,3.584,1104,3.584]],["title/dependencies.html",[56,1.573,1105,2.118]],["body/dependencies.html",[23,0.026,36,1.01,40,0.021,52,0.022,53,0.022,56,1.852,89,1.984,96,3.219,153,1.73,184,2.13,209,2.13,317,2.292,320,3.219,626,4.075,627,4.075,1106,4.819,1107,4.819,1108,6.22,1109,4.819,1110,4.819,1111,4.819,1112,4.819,1113,4.819,1114,4.819,1115,4.819,1116,4.819,1117,4.819,1118,4.819,1119,4.819,1120,4.819,1121,4.819,1122,4.819,1123,4.819,1124,4.819,1125,4.819,1126,4.819]],["title/miscellaneous/enumerations.html",[1127,1.585,1128,3.461]],["body/miscellaneous/enumerations.html",[19,0.588,23,0.026,52,0.022,53,0.022,327,1.501,331,4.339,360,3.542,361,4.339,365,4.339,367,4.339,389,4.339,390,4.339,391,4.932,392,4.932,445,4.577,1127,2.709,1128,4.115,1129,5.833,1130,5.833,1131,5.833,1132,5.833]],["title/miscellaneous/functions.html",[1127,1.585,1133,3.461]],["body/miscellaneous/functions.html",[19,0.623,23,0.022,52,0.022,53,0.022,59,2.917,75,2.872,78,3.838,79,3.133,101,4.362,107,3.446,200,3.838,475,3.838,990,4.362,1090,3.838,1097,4.362,1098,5.106,1127,2.872,1133,4.362,1134,5.159,1135,5.159,1136,5.159,1137,5.159,1138,5.159]],["title/index.html",[19,0.344,668,2.408,1139,2.848]],["body/index.html",[0,1.034,4,0.163,5,0.328,7,0.231,23,0.025,28,2.837,31,2.373,38,0.905,52,0.013,53,0.013,72,2.551,75,2.986,79,1.407,81,1.959,107,3.835,114,0.89,115,1.407,116,1.024,121,4.971,122,1.959,123,1.959,124,2.837,125,2.972,126,1.959,139,2.837,141,1.959,157,1.959,174,4.009,186,3.526,188,1.959,189,1.104,195,1.959,224,3.722,225,3.835,238,1.034,240,1.959,244,3.583,245,1.959,246,1.959,264,1.959,269,2.615,286,0.681,290,4.009,296,1.672,301,1.959,336,0.681,340,1.407,358,1.959,385,3.583,477,2.615,487,4.009,504,1.407,562,1.19,568,1.724,589,1.407,595,1.548,596,1.959,598,1.19,646,3.591,701,1.548,727,2.615,740,1.959,745,1.959,761,1.959,770,1.959,789,1.959,794,1.548,814,1.724,825,2.972,827,3.591,912,4.309,913,1.959,919,4.009,1022,2.972,1089,2.615,1090,4.532,1105,2.615,1140,2.317,1141,2.317,1142,4.247,1143,3.515,1144,2.317,1145,2.317,1146,2.317,1147,2.317,1148,3.515,1149,2.317,1150,2.317,1151,5.573,1152,2.317,1153,5.879,1154,2.317,1155,2.317,1156,4.247,1157,3.515,1158,2.317,1159,3.515,1160,2.317,1161,4.247,1162,2.317,1163,3.515,1164,2.317,1165,2.317,1166,2.317,1167,2.317,1168,2.317,1169,4.741,1170,3.515,1171,2.317,1172,2.317,1173,2.317,1174,2.317,1175,3.515,1176,3.515,1177,2.317,1178,3.515,1179,5.364,1180,4.741,1181,2.317,1182,3.515,1183,2.317,1184,2.317,1185,2.317,1186,4.741,1187,2.317,1188,2.317,1189,2.317,1190,3.515,1191,2.317,1192,2.317,1193,2.317,1194,2.317,1195,3.515,1196,2.317,1197,2.317,1198,2.317,1199,3.515,1200,2.317,1201,2.317,1202,4.009,1203,2.317,1204,2.317,1205,2.317,1206,2.317,1207,2.317,1208,2.317,1209,2.317,1210,2.317,1211,3.515,1212,2.317,1213,2.317,1214,2.317,1215,2.317,1216,2.317,1217,2.317,1218,3.515,1219,2.317,1220,2.317,1221,2.317,1222,2.317,1223,3.515,1224,2.317,1225,2.317,1226,2.317,1227,3.515,1228,3.515,1229,2.317,1230,2.317,1231,2.317,1232,2.317,1233,2.317,1234,2.317,1235,2.317,1236,2.317,1237,2.317,1238,2.317,1239,2.317,1240,2.317,1241,2.317,1242,2.317,1243,2.317,1244,2.317,1245,1.959,1246,2.317,1247,4.247,1248,2.317,1249,5.879,1250,2.317,1251,2.317,1252,2.317,1253,3.515,1254,2.317,1255,2.317,1256,2.317,1257,2.317,1258,2.317,1259,2.317,1260,2.317,1261,2.317,1262,2.317,1263,5.573,1264,2.317,1265,2.317,1266,2.317,1267,2.317,1268,2.317,1269,2.317,1270,3.515,1271,3.515,1272,5.364,1273,4.741,1274,4.247,1275,2.317,1276,2.317,1277,2.317,1278,2.317,1279,3.515,1280,2.317,1281,4.741,1282,4.741,1283,2.317,1284,3.515,1285,2.317,1286,3.515,1287,2.317,1288,2.317,1289,2.317,1290,2.317,1291,2.317,1292,3.515,1293,3.515,1294,3.515,1295,3.515,1296,2.317,1297,2.317,1298,2.317,1299,2.317,1300,4.247,1301,2.317,1302,2.317,1303,2.317,1304,2.317,1305,2.317,1306,2.317,1307,2.317,1308,2.317,1309,2.317,1310,2.317,1311,3.515,1312,2.317,1313,2.317,1314,2.317,1315,2.317,1316,2.317,1317,2.317,1318,2.317,1319,2.317]],["title/modules.html",[55,1.911]],["body/modules.html",[23,0.022,52,0.022,53,0.022,54,3.077,55,2.086,65,2.821,66,3.077,67,3.077,68,2.821,69,2.602,1202,5.737,1320,6.784,1321,6.784,1322,6.784]],["title/overview.html",[1323,3.923]],["body/overview.html",[2,1.335,14,3.173,23,0.026,38,1.023,52,0.019,53,0.019,54,4.172,55,1.637,56,1.527,57,2.041,58,2.041,59,1.757,60,2.041,61,2.041,62,3.361,63,3.361,64,3.361,65,3.559,66,3.789,67,4.046,68,3.622,69,3.421,70,2.64,71,2.041,72,1.89,163,1.89,192,1.89,204,3.34,217,3.361,218,3.361,219,3.361,234,3.094,294,1.757,501,3.361,571,3.173,577,3.361,578,3.361,706,3.173,731,3.361,732,3.361,751,3.34,892,3.361,893,3.361,894,3.361,997,3.173,1032,3.361,1033,3.361,1034,3.361,1323,3.361,1324,5.141,1325,3.974,1326,3.974]],["title/properties.html",[302,1.286,1105,2.118]],["body/properties.html",[7,0.531,23,0.025,52,0.023,53,0.023,302,1.678,340,3.243,1245,4.516,1327,5.341,1328,5.341,1329,5.341]],["title/miscellaneous/variables.html",[138,3.045,1127,1.585]],["body/miscellaneous/variables.html",[8,2.222,19,0.607,23,0.023,28,3.358,38,1.294,52,0.022,53,0.022,54,3.053,55,2.449,73,3.74,75,2.799,78,3.74,79,3.053,82,2.391,83,4.251,100,3.74,102,3.74,107,3.358,108,4.251,109,4.251,110,4.251,111,4.251,112,4.251,113,2.07,114,1.932,115,3.053,116,2.222,117,2.799,119,4.424,120,4.251,138,3.74,445,3.358,1127,2.799,1330,5.028]]],"invertedIndex":[["",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0.0.1",{"_index":1328,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":1117,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":1123,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":1126,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1116,"title":{},"body":{"dependencies.html":{}}}],["03",{"_index":369,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1",{"_index":432,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["1.1.23",{"_index":1107,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":1095,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":981,"title":{},"body":{"controllers/UsersController.html":{}}}],["10.0.0",{"_index":1108,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":1115,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":1092,"title":{},"body":{"coverage.html":{}}}],["1024",{"_index":637,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["10})@apiquery({name",{"_index":964,"title":{},"body":{"controllers/UsersController.html":{}}}],["12/12",{"_index":1100,"title":{},"body":{"coverage.html":{}}}],["1234",{"_index":522,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["1234'})@isoptional()@isint()@type(undefined",{"_index":518,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["16t07:46:32+0000",{"_index":431,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["16t07:46:32+0000'})@isiso8601()@isoptional",{"_index":370,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["17.12.2",{"_index":1119,"title":{},"body":{"dependencies.html":{}}}],["1})@isint()@isnotempty",{"_index":618,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["1})@isnotempty()@isint",{"_index":341,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["2",{"_index":433,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["2.0.5",{"_index":1111,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":1093,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":688,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["201",{"_index":678,"title":{},"body":{"controllers/PostsController.html":{}}}],["2024",{"_index":368,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["256",{"_index":649,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["3",{"_index":493,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["3.2.2",{"_index":1109,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":1099,"title":{},"body":{"coverage.html":{}}}],["3001",{"_index":1290,"title":{},"body":{"index.html":{}}}],["4",{"_index":1325,"title":{},"body":{"overview.html":{}}}],["4/4",{"_index":1096,"title":{},"body":{"coverage.html":{}}}],["400",{"_index":680,"title":{},"body":{"controllers/PostsController.html":{}}}],["404",{"_index":689,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["5/5",{"_index":1101,"title":{},"body":{"coverage.html":{}}}],["512",{"_index":658,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["6",{"_index":1324,"title":{},"body":{"overview.html":{}}}],["6/6",{"_index":1102,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":1326,"title":{},"body":{"overview.html":{}}}],["7.3.0",{"_index":1114,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":1125,"title":{},"body":{"dependencies.html":{}}}],["71",{"_index":1075,"title":{},"body":{"injectables/UsersService.html":{}}}],["8",{"_index":501,"title":{},"body":{"classes/CreateUserDto.html":{},"overview.html":{}}}],["8.11.5",{"_index":1121,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":383,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["96",{"_index":488,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["access",{"_index":42,"title":{},"body":{"controllers/AppController.html":{}}}],["actual",{"_index":728,"title":{},"body":{"controllers/PostsController.html":{}}}],["add",{"_index":770,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{}}}],["added",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{}}}],["additional",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"entities/Tag.html":{}}}],["address",{"_index":484,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["against",{"_index":440,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["allowing",{"_index":1191,"title":{},"body":{"index.html":{}}}],["along",{"_index":761,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{}}}],["already",{"_index":1081,"title":{},"body":{"injectables/UsersService.html":{}}}],["always",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["amazing",{"_index":1233,"title":{},"body":{"index.html":{}}}],["api",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TagsController.html":{},"miscellaneous/functions.html":{}}}],["apioperation",{"_index":207,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":676,"title":{},"body":{"controllers/PostsController.html":{}}}],["apiparam",{"_index":708,"title":{},"body":{"controllers/PostsController.html":{}}}],["apiproperty",{"_index":321,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({description",{"_index":304,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({enum",{"_index":357,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiproperty({example",{"_index":400,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiproperty({type",{"_index":337,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apipropertyoptional",{"_index":418,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({description",{"_index":343,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({type",{"_index":353,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiquery",{"_index":709,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiresponse",{"_index":208,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags('authentication",{"_index":210,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('posts",{"_index":713,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('users",{"_index":978,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":101,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/functions.html":{}}}],["app.controller",{"_index":84,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":37,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appconfig",{"_index":97,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["applications",{"_index":1148,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":54,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["appservice",{"_index":14,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["argument",{"_index":1304,"title":{},"body":{"index.html":{}}}],["array",{"_index":305,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"injectables/TagsService.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["associated",{"_index":397,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{}}}],["async",{"_index":587,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["atomically",{"_index":790,"title":{},"body":{"injectables/PostsService.html":{}}}],["attempting",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{}}}],["auth",{"_index":115,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["auth.controller",{"_index":222,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/providers/auth",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{}}}],["authcontroller",{"_index":197,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticated",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{}}}],["authentication",{"_index":132,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["authgenerate",{"_index":1312,"title":{},"body":{"index.html":{}}}],["authmodule",{"_index":65,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":340,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"index.html":{},"properties.html":{}}}],["authored",{"_index":935,"title":{},"body":{"entities/User.html":{}}}],["authorid",{"_index":328,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["authservice",{"_index":204,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["autoloadentities",{"_index":164,"title":{},"body":{"modules/AppModule.html":{}}}],["automatically",{"_index":799,"title":{},"body":{"injectables/PostsService.html":{}}}],["available",{"_index":158,"title":{},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{}}}],["avoid",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{}}}],["await",{"_index":606,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["aws",{"_index":1182,"title":{},"body":{"index.html":{}}}],["backers",{"_index":1234,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":765,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["badrequestexception('please",{"_index":831,"title":{},"body":{"injectables/PostsService.html":{}}}],["badrequestexception('user",{"_index":1085,"title":{},"body":{"injectables/UsersService.html":{}}}],["based",{"_index":595,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/TagsService.html":{},"injectables/UsersCreateManyProvider.html":{},"index.html":{}}}],["basically",{"_index":1267,"title":{},"body":{"index.html":{}}}],["batch",{"_index":1055,"title":{},"body":{"injectables/UsersService.html":{}}}],["become",{"_index":773,"title":{},"body":{"injectables/PostsService.html":{}}}],["before",{"_index":920,"title":{},"body":{"injectables/TagsService.html":{}}}],["begin",{"_index":1018,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["between",{"_index":492,"title":{},"body":{"classes/CreateUserDto.html":{},"controllers/PostsController.html":{}}}],["bidirectional",{"_index":642,"title":{},"body":{"entities/Post.html":{}}}],["bit",{"_index":1255,"title":{},"body":{"index.html":{}}}],["blog",{"_index":326,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{}}}],["blue",{"_index":471,"title":{},"body":{"classes/CreateTagDto.html":{},"entities/Tag.html":{}}}],["blue\"}'})@isoptional()@isjson",{"_index":461,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["board",{"_index":1226,"title":{},"body":{"index.html":{}}}],["body",{"_index":569,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["body(new",{"_index":991,"title":{},"body":{"controllers/UsersController.html":{}}}],["boolean",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{}}}],["bootstrap",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["bootstrapping",{"_index":108,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["both",{"_index":789,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{}}}],["brief",{"_index":451,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["browse",{"_index":1322,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1320,"title":{},"body":{"modules.html":{}}}],["building",{"_index":1143,"title":{},"body":{"index.html":{}}}],["bulk",{"_index":1000,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["business",{"_index":47,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/MetaOptionsModule.html":{}}}],["c:\\users\\mfabouatmeh\\desktop\\codesdar\\more\\postgre\\data",{"_index":126,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cascade",{"_index":552,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{}}}],["cascade'})@joincolumn",{"_index":548,"title":{},"body":{"entities/MetaOption.html":{}}}],["cascades",{"_index":724,"title":{},"body":{"controllers/PostsController.html":{}}}],["case",{"_index":190,"title":{},"body":{"modules/AppModule.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["catch",{"_index":807,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["cause",{"_index":226,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["certain",{"_index":1269,"title":{},"body":{"index.html":{}}}],["changes",{"_index":1292,"title":{},"body":{"index.html":{}}}],["channel",{"_index":1204,"title":{},"body":{"index.html":{}}}],["character",{"_index":507,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["characters",{"_index":489,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["chars",{"_index":502,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["check",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"index.html":{}}}],["checking",{"_index":203,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["checks",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{}}}],["circular",{"_index":227,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{}}}],["class",{"_index":40,"title":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":294,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"overview.html":{}}}],["clean",{"_index":818,"title":{},"body":{"injectables/PostsService.html":{}}}],["clicks",{"_index":1190,"title":{},"body":{"index.html":{}}}],["client",{"_index":30,"title":{},"body":{"controllers/AppController.html":{}}}],["cloud",{"_index":1177,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":217,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":219,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":218,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule",{"_index":577,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule_providers",{"_index":578,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":731,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":733,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":732,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule",{"_index":892,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_exports",{"_index":893,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_providers",{"_index":894,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1032,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":1033,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":1034,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cmd",{"_index":122,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["code",{"_index":1293,"title":{},"body":{"index.html":{}}}],["color",{"_index":460,"title":{},"body":{"classes/CreateTagDto.html":{},"entities/Tag.html":{}}}],["column",{"_index":557,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["column({type",{"_index":537,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["combo",{"_index":1302,"title":{},"body":{"index.html":{}}}],["come",{"_index":1196,"title":{},"body":{"index.html":{}}}],["comma",{"_index":1252,"title":{},"body":{"index.html":{}}}],["commit",{"_index":803,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["compared",{"_index":1285,"title":{},"body":{"index.html":{}}}],["complete",{"_index":1030,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["compo",{"_index":1263,"title":{},"body":{"index.html":{}}}],["compodoc",{"_index":1246,"title":{},"body":{"index.html":{}}}],["compodoc/compodoc",{"_index":1106,"title":{},"body":{"dependencies.html":{}}}],["config",{"_index":1272,"title":{},"body":{"index.html":{}}}],["config/app.config",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["config/database.config",{"_index":104,"title":{},"body":{"modules/AppModule.html":{}}}],["config/environment.validation",{"_index":106,"title":{},"body":{"modules/AppModule.html":{}}}],["config/profile.config",{"_index":1041,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["configmodule",{"_index":94,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["configmodule.forfeature(profileconfig",{"_index":1044,"title":{},"body":{"modules/UsersModule.html":{}}}],["configmodule.forroot",{"_index":143,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":95,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.autoloadentities",{"_index":165,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.host",{"_index":181,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.name",{"_index":182,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.pass",{"_index":179,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.port",{"_index":175,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.synchronize",{"_index":167,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.user",{"_index":177,"title":{},"body":{"modules/AppModule.html":{}}}],["configtype",{"_index":1050,"title":{},"body":{"injectables/UsersService.html":{}}}],["configuration",{"_index":102,"title":{},"body":{"modules/AppModule.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["configurations",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["configures",{"_index":150,"title":{},"body":{"modules/AppModule.html":{}}}],["conflictexception",{"_index":1011,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["conflictexception('could",{"_index":1029,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["connect",{"_index":1013,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["connection",{"_index":152,"title":{},"body":{"modules/AppModule.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["connections",{"_index":83,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["console.error(error",{"_index":812,"title":{},"body":{"injectables/PostsService.html":{}}}],["const",{"_index":118,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["constructor",{"_index":214,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":1047,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(datasource",{"_index":1004,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["constructor(metaoptionrepository",{"_index":588,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["constructor(private",{"_index":49,"title":{},"body":{"controllers/AppController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["constructor(tagsrepository",{"_index":902,"title":{},"body":{"injectables/TagsService.html":{}}}],["constructor(usersservice",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["constructs",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["containing",{"_index":375,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["contains",{"_index":474,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["content",{"_index":329,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["context",{"_index":376,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"index.html":{}}}],["controller('auth",{"_index":213,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('meta",{"_index":574,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["controller('posts",{"_index":712,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('tags",{"_index":885,"title":{},"body":{"controllers/TagsController.html":{}}}],["controller('users",{"_index":977,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["copy",{"_index":783,"title":{},"body":{"injectables/PostsService.html":{}}}],["corresponding",{"_index":743,"title":{},"body":{"modules/PostsModule.html":{}}}],["courses",{"_index":1210,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":1089,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":318,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["create(@body",{"_index":777,"title":{},"body":{"injectables/PostsService.html":{},"controllers/TagsController.html":{}}}],["create(createmetaoptiondto",{"_index":593,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["create(createpostdto",{"_index":753,"title":{},"body":{"injectables/PostsService.html":{}}}],["create(createtagdto",{"_index":873,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["create=many.provider",{"_index":1316,"title":{},"body":{"index.html":{}}}],["created",{"_index":307,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["createdate",{"_index":528,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["createdatecolumn",{"_index":530,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["createmany",{"_index":1003,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["createmany(createmanyusersdto",{"_index":1007,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["createmanyusers",{"_index":939,"title":{},"body":{"controllers/UsersController.html":{}}}],["createmanyusers(@body",{"_index":994,"title":{},"body":{"controllers/UsersController.html":{}}}],["createmanyusers(createmanyusersdto",{"_index":944,"title":{},"body":{"controllers/UsersController.html":{}}}],["createmanyusersdto",{"_index":293,"title":{"classes/CreateManyUsersDto.html":{}},"body":{"classes/CreateManyUsersDto.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createmanyusersdto.users",{"_index":1023,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["createmetaoption",{"_index":563,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["createmetaoption(createpostmetaoptiondto",{"_index":564,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["createmetaoptiondto",{"_index":597,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["createpost",{"_index":671,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(@body",{"_index":719,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(createpostdto",{"_index":675,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpostdto",{"_index":323,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["createpostmetaoptiondto",{"_index":567,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["createpostmetaoptionsdto",{"_index":351,"title":{"classes/CreatePostMetaOptionsDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["creates",{"_index":438,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["createtagdto",{"_index":446,"title":{"classes/CreateTagDto.html":{}},"body":{"classes/CreateTagDto.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"coverage.html":{}}}],["createuser",{"_index":940,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createuser(createuserdto",{"_index":947,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createuserdto",{"_index":303,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":1084,"title":{},"body":{"injectables/UsersService.html":{}}}],["creating",{"_index":299,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/UsersService.html":{}}}],["creation",{"_index":755,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["criteria",{"_index":1061,"title":{},"body":{"injectables/UsersService.html":{}}}],["crowded",{"_index":774,"title":{},"body":{"injectables/PostsService.html":{}}}],["currently",{"_index":194,"title":{},"body":{"injectables/AppService.html":{}}}],["d",{"_index":125,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["data",{"_index":43,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"classes/CreateTagDto.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["data'})@post",{"_index":682,"title":{},"body":{"controllers/PostsController.html":{}}}],["database",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["databaseconfig",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["datasource",{"_index":1005,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["date",{"_index":366,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["db",{"_index":745,"title":{},"body":{"modules/PostsModule.html":{},"index.html":{}}}],["deals",{"_index":183,"title":{},"body":{"modules/AppModule.html":{}}}],["declarations",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorator",{"_index":436,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["decorators",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["deeper",{"_index":1206,"title":{},"body":{"index.html":{}}}],["default",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"entities/Post.html":{},"miscellaneous/variables.html":{}}}],["defaultvaluepipe",{"_index":971,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(1",{"_index":988,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(10",{"_index":986,"title":{},"body":{"controllers/UsersController.html":{}}}],["define",{"_index":1308,"title":{},"body":{"index.html":{}}}],["defined",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":672,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["delete'})@apiresponse({status",{"_index":687,"title":{},"body":{"controllers/PostsController.html":{}}}],["delete('soft",{"_index":878,"title":{},"body":{"controllers/TagsController.html":{}}}],["delete(@query('id",{"_index":729,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{}}}],["delete(id",{"_index":684,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["deleted",{"_index":551,"title":{},"body":{"entities/MetaOption.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["deletedat",{"_index":855,"title":{},"body":{"entities/Tag.html":{}}}],["deletedatecolumn",{"_index":857,"title":{},"body":{"entities/Tag.html":{}}}],["deletes",{"_index":685,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["deleting",{"_index":921,"title":{},"body":{"injectables/TagsService.html":{}}}],["deletion",{"_index":758,"title":{},"body":{"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["demonstration",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{}}}],["dependencies",{"_index":56,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{},"overview.html":{}}}],["dependency",{"_index":228,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{}}}],["deploy",{"_index":1169,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":1181,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":1175,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":1189,"title":{},"body":{"index.html":{}}}],["deprecated",{"_index":1070,"title":{},"body":{"injectables/UsersService.html":{}}}],["description",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"index.html":{},"properties.html":{}}}],["details",{"_index":598,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["development",{"_index":1155,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":1214,"title":{},"body":{"index.html":{}}}],["directory",{"_index":1300,"title":{},"body":{"index.html":{}}}],["discord",{"_index":1203,"title":{},"body":{"index.html":{}}}],["dive",{"_index":1205,"title":{},"body":{"index.html":{}}}],["doc",{"_index":1249,"title":{},"body":{"index.html":{}}}],["doclet",{"_index":1248,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":1090,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["doesn't",{"_index":835,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["doesnt",{"_index":772,"title":{},"body":{"injectables/PostsService.html":{}}}],["draft",{"_index":390,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["dto",{"_index":298,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["dto/create",{"_index":710,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["dto/patch",{"_index":711,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["dtos/create",{"_index":570,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["dtos/get",{"_index":972,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/patch",{"_index":974,"title":{},"body":{"controllers/UsersController.html":{}}}],["dynamically",{"_index":154,"title":{},"body":{"modules/AppModule.html":{}}}],["e.g",{"_index":364,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/UsersController.html":{}}}],["e2e",{"_index":1164,"title":{},"body":{"index.html":{}}}],["each",{"_index":322,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["eager",{"_index":631,"title":{},"body":{"entities/Post.html":{}}}],["efficient",{"_index":1144,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":1174,"title":{},"body":{"index.html":{}}}],["email",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["empty",{"_index":485,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["enable",{"_index":1291,"title":{},"body":{"index.html":{}}}],["endpoint",{"_index":29,"title":{},"body":{"controllers/AppController.html":{},"injectables/UsersService.html":{}}}],["endpoints",{"_index":212,"title":{},"body":{"controllers/AuthController.html":{}}}],["ensure",{"_index":1172,"title":{},"body":{"index.html":{}}}],["enterprise",{"_index":1217,"title":{},"body":{"index.html":{}}}],["entire",{"_index":738,"title":{},"body":{"modules/PostsModule.html":{}}}],["entities",{"_index":163,"title":{},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"overview.html":{}}}],["entity",{"_index":523,"title":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}},"body":{"entities/MetaOption.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"coverage.html":{}}}],["entries",{"_index":962,"title":{},"body":{"controllers/UsersController.html":{}}}],["enum",{"_index":421,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["enumerations",{"_index":1128,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/post",{"_index":413,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["env",{"_index":119,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["env.${env",{"_index":147,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":146,"title":{},"body":{"modules/AppModule.html":{}}}],["environment",{"_index":137,"title":{},"body":{"modules/AppModule.html":{}}}],["environmentvalidation",{"_index":105,"title":{},"body":{"modules/AppModule.html":{}}}],["equal",{"_index":828,"title":{},"body":{"injectables/PostsService.html":{}}}],["error",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["error('post",{"_index":798,"title":{},"body":{"injectables/PostsService.html":{}}}],["error('user",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{}}}],["error.message",{"_index":813,"title":{},"body":{"injectables/PostsService.html":{}}}],["establish",{"_index":1017,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["etc",{"_index":653,"title":{},"body":{"entities/Post.html":{}}}],["everything",{"_index":804,"title":{},"body":{"injectables/PostsService.html":{}}}],["example",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"entities/Tag.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["except",{"_index":615,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["exist",{"_index":836,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["existing",{"_index":611,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["existinguser",{"_index":1082,"title":{},"body":{"injectables/UsersService.html":{}}}],["exists",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["experience",{"_index":1208,"title":{},"body":{"index.html":{}}}],["explain",{"_index":1259,"title":{},"body":{"index.html":{}}}],["export",{"_index":39,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":1113,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":612,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["fails",{"_index":1014,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["failure",{"_index":811,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["false",{"_index":170,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["fast",{"_index":1184,"title":{},"body":{"index.html":{}}}],["feature",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{}}}],["featured",{"_index":347,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["featuredimage",{"_index":450,"title":{},"body":{"classes/CreateTagDto.html":{},"entities/Tag.html":{}}}],["featuredimageurl",{"_index":330,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["features",{"_index":1193,"title":{},"body":{"index.html":{}}}],["fetch",{"_index":667,"title":{},"body":{"entities/Post.html":{},"controllers/UsersController.html":{}}}],["fetched",{"_index":155,"title":{},"body":{"modules/AppModule.html":{}}}],["few",{"_index":1186,"title":{},"body":{"index.html":{}}}],["field",{"_index":521,"title":{},"body":{"classes/GetUsersParamDto.html":{},"entities/User.html":{}}}],["fields",{"_index":614,"title":{},"body":{"classes/PatchPostDto.html":{},"injectables/PostsService.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{}}}],["filename",{"_index":1072,"title":{},"body":{"injectables/UsersService.html":{}}}],["filter",{"_index":968,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["filters",{"_index":1060,"title":{},"body":{"injectables/UsersService.html":{}}}],["finally",{"_index":814,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{},"index.html":{}}}],["find",{"_index":795,"title":{},"body":{"injectables/PostsService.html":{}}}],["findall",{"_index":747,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["findall(getuserparamdto",{"_index":1058,"title":{},"body":{"injectables/UsersService.html":{}}}],["findall(userid",{"_index":759,"title":{},"body":{"injectables/PostsService.html":{}}}],["finding",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{}}}],["findmultipletags",{"_index":900,"title":{},"body":{"injectables/TagsService.html":{}}}],["findmultipletags(tags",{"_index":907,"title":{},"body":{"injectables/TagsService.html":{}}}],["findonebyid",{"_index":1046,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyid(id",{"_index":1063,"title":{},"body":{"injectables/UsersService.html":{}}}],["finds",{"_index":909,"title":{},"body":{"injectables/TagsService.html":{}}}],["first",{"_index":477,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"index.html":{}}}],["firstname",{"_index":479,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["flag",{"_index":1281,"title":{},"body":{"index.html":{}}}],["flat",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TagsService.html":{},"index.html":{}}}],["focus",{"_index":1192,"title":{},"body":{"index.html":{}}}],["follow",{"_index":1220,"title":{},"body":{"index.html":{}}}],["format",{"_index":541,"title":{},"body":{"entities/MetaOption.html":{},"controllers/UsersController.html":{}}}],["forwardref",{"_index":221,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["found",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["found'})@delete",{"_index":690,"title":{},"body":{"controllers/PostsController.html":{}}}],["found'})@patch",{"_index":702,"title":{},"body":{"controllers/PostsController.html":{}}}],["framework",{"_index":1142,"title":{},"body":{"index.html":{}}}],["friendly",{"_index":651,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["full",{"_index":1216,"title":{},"body":{"index.html":{}}}],["function",{"_index":1098,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["functionality",{"_index":130,"title":{},"body":{"modules/AppModule.html":{}}}],["functions",{"_index":1133,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":1188,"title":{},"body":{"index.html":{}}}],["generate",{"_index":225,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/TagsService.html":{},"index.html":{}}}],["generated",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["generates",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{}}}],["generating",{"_index":1301,"title":{},"body":{"index.html":{}}}],["generation",{"_index":135,"title":{},"body":{"modules/AppModule.html":{}}}],["get('/:id",{"_index":984,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:id?')@apioperation({summary",{"_index":958,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:userid",{"_index":714,"title":{},"body":{"controllers/PostsController.html":{}}}],["get('/:userid?')@apioperation({summary",{"_index":694,"title":{},"body":{"controllers/PostsController.html":{}}}],["get()@apioperation({summary",{"_index":950,"title":{},"body":{"controllers/UsersController.html":{}}}],["gethello",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getposts",{"_index":673,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(@param('userid",{"_index":716,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(userid",{"_index":693,"title":{},"body":{"controllers/PostsController.html":{}}}],["getting",{"_index":668,"title":{"index.html":{}},"body":{"entities/Post.html":{}}}],["getuserbyid",{"_index":941,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuserbyid(@query('id",{"_index":979,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuserbyid(id",{"_index":949,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuserparamdto",{"_index":967,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getusers",{"_index":942,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(getuserparamdto",{"_index":956,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusersparamdto",{"_index":514,"title":{"classes/GetUsersParamDto.html":{}},"body":{"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["give",{"_index":1299,"title":{},"body":{"index.html":{}}}],["global",{"_index":990,"title":{},"body":{"controllers/UsersController.html":{},"miscellaneous/functions.html":{}}}],["go",{"_index":1261,"title":{},"body":{"index.html":{}}}],["going",{"_index":1277,"title":{},"body":{"index.html":{}}}],["graph",{"_index":1213,"title":{},"body":{"index.html":{}}}],["greeting",{"_index":33,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["grow",{"_index":1230,"title":{},"body":{"index.html":{}}}],["handle",{"_index":46,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/GetUsersParamDto.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["handles",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["handling",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["hands",{"_index":1207,"title":{},"body":{"index.html":{}}}],["handy",{"_index":1197,"title":{},"body":{"index.html":{}}}],["having",{"_index":1287,"title":{},"body":{"index.html":{}}}],["hello",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{}}}],["help",{"_index":1211,"title":{},"body":{"index.html":{}}}],["here",{"_index":186,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"index.html":{}}}],["host",{"_index":180,"title":{},"body":{"modules/AppModule.html":{}}}],["http",{"_index":11,"title":{},"body":{"controllers/AppController.html":{}}}],["http://localhost.com/images/image1.jpg",{"_index":429,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["http://localhost.com/images/image1.jpg'})@isoptional()@minlength(4)@maxlength(1024)@isurl",{"_index":349,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["http://localhost:3001/coverage.htmlit",{"_index":1251,"title":{},"body":{"index.html":{}}}],["httpexception",{"_index":1065,"title":{},"body":{"injectables/UsersService.html":{}}}],["https://example.com/images/tag",{"_index":455,"title":{},"body":{"classes/CreateTagDto.html":{},"entities/Tag.html":{}}}],["https://nestjs.com",{"_index":1242,"title":{},"body":{"index.html":{}}}],["https://orkhan.gitbook.io/typeorm/docs/decorator",{"_index":868,"title":{},"body":{"entities/Tag.html":{}}}],["https://schema.org",{"_index":377,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://schema.org\",\\r\\n",{"_index":427,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["httpstatus",{"_index":1066,"title":{},"body":{"injectables/UsersService.html":{}}}],["httpstatus.moved_permanently",{"_index":1071,"title":{},"body":{"injectables/UsersService.html":{}}}],["hyphen",{"_index":1273,"title":{},"body":{"index.html":{}}}],["i'll",{"_index":1258,"title":{},"body":{"index.html":{}}}],["i'm",{"_index":1295,"title":{},"body":{"index.html":{}}}],["i.e",{"_index":1310,"title":{},"body":{"index.html":{}}}],["id",{"_index":339,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["id'})@apiquery({name",{"_index":686,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["id=5",{"_index":955,"title":{},"body":{"controllers/UsersController.html":{}}}],["identifier",{"_index":536,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"coverage.html":{}}}],["ids",{"_index":396,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["image",{"_index":348,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["image.jpg",{"_index":472,"title":{},"body":{"classes/CreateTagDto.html":{},"entities/Tag.html":{}}}],["image.jpg'})@isoptional()@isurl()@maxlength(1024",{"_index":456,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["import",{"_index":35,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["important",{"_index":817,"title":{},"body":{"injectables/PostsService.html":{}}}],["importing",{"_index":99,"title":{},"body":{"modules/AppModule.html":{}}}],["imports",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}}}],["in(tags",{"_index":918,"title":{},"body":{"injectables/TagsService.html":{}}}],["include",{"_index":503,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["includes",{"_index":110,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["incoming",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/CreatePostDto.html":{}}}],["incorrect",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{}}}],["index",{"_index":19,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["indicating",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{},"entities/MetaOption.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["information",{"_index":568,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["infrastructure",{"_index":1194,"title":{},"body":{"index.html":{}}}],["initializing",{"_index":1135,"title":{},"body":{"miscellaneous/functions.html":{}}}],["inject",{"_index":159,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["inject(forwardref",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["inject(profileconfig.key",{"_index":1069,"title":{},"body":{"injectables/UsersService.html":{}}}],["injectable",{"_index":191,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":192,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injected",{"_index":1052,"title":{},"body":{"injectables/UsersService.html":{}}}],["injecting",{"_index":215,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["injectrepository",{"_index":603,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(metaoption",{"_index":604,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{}}}],["injectrepository(post",{"_index":769,"title":{},"body":{"injectables/PostsService.html":{}}}],["injectrepository(tag",{"_index":914,"title":{},"body":{"injectables/TagsService.html":{}}}],["injectrepository(user",{"_index":1068,"title":{},"body":{"injectables/UsersService.html":{}}}],["injects",{"_index":41,"title":{},"body":{"controllers/AppController.html":{},"controllers/MetaOptionsController.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["innovations",{"_index":470,"title":{},"body":{"classes/CreateTagDto.html":{},"entities/Tag.html":{}}}],["innovations'})@isoptional()@isstring",{"_index":453,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["insertion",{"_index":1002,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["inside",{"_index":744,"title":{},"body":{"modules/PostsModule.html":{}}}],["install",{"_index":1187,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":1154,"title":{},"body":{"index.html":{}}}],["instance",{"_index":45,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["instead",{"_index":801,"title":{},"body":{"injectables/PostsService.html":{}}}],["instructs",{"_index":1284,"title":{},"body":{"index.html":{}}}],["integer",{"_index":338,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["interact",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["interacting",{"_index":592,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/TagsService.html":{}}}],["invalid",{"_index":681,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["isarray",{"_index":314,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["isauth",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{}}}],["isemail",{"_index":510,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isemail()@isnotempty()@maxlength(96",{"_index":481,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":403,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(poststatus",{"_index":425,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttype",{"_index":422,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isglobal",{"_index":144,"title":{},"body":{"modules/AppModule.html":{}}}],["isint",{"_index":404,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{}}}],["isiso8601",{"_index":405,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isjson",{"_index":406,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{}}}],["isnan(userid",{"_index":982,"title":{},"body":{"controllers/UsersController.html":{}}}],["isnotempty",{"_index":315,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchPostDto.html":{}}}],["isnotempty()@isjson",{"_index":443,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["isoptional",{"_index":407,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{}}}],["isoptional()@isjson",{"_index":379,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isstring",{"_index":408,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@maxlength(96)@minlength(8)@matches(/^(?=.*[a",{"_index":496,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":490,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isoptional()@minlength(3)@maxlength(96",{"_index":494,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["issues",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{}}}],["isurl",{"_index":409,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["it's",{"_index":1276,"title":{},"body":{"index.html":{}}}],["items",{"_index":309,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["iterate",{"_index":1021,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["itself",{"_index":1253,"title":{},"body":{"index.html":{}}}],["job",{"_index":1223,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":1225,"title":{},"body":{"index.html":{}}}],["joi",{"_index":1118,"title":{},"body":{"dependencies.html":{}}}],["join",{"_index":1236,"title":{},"body":{"index.html":{}}}],["joincolumn",{"_index":558,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["jointable",{"_index":660,"title":{},"body":{"entities/Post.html":{}}}],["json",{"_index":374,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["jwt",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{}}}],["kamil",{"_index":1239,"title":{},"body":{"index.html":{}}}],["key",{"_index":740,"title":{},"body":{"modules/PostsModule.html":{},"index.html":{}}}],["large",{"_index":635,"title":{},"body":{"entities/Post.html":{}}}],["last",{"_index":478,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/MetaOption.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["lastname",{"_index":480,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["later",{"_index":826,"title":{},"body":{"injectables/PostsService.html":{}}}],["learn",{"_index":1200,"title":{},"body":{"index.html":{}}}],["legend",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":486,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["lengthy",{"_index":1257,"title":{},"body":{"index.html":{}}}],["let's",{"_index":1289,"title":{},"body":{"index.html":{}}}],["letter",{"_index":505,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["letters",{"_index":465,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["license",{"_index":1245,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1228,"title":{},"body":{"index.html":{}}}],["limit",{"_index":957,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["linenumber",{"_index":1074,"title":{},"body":{"injectables/UsersService.html":{}}}],["linkedin",{"_index":1222,"title":{},"body":{"index.html":{}}}],["list",{"_index":313,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["little",{"_index":1254,"title":{},"body":{"index.html":{}}}],["load",{"_index":148,"title":{},"body":{"modules/AppModule.html":{}}}],["loaded",{"_index":796,"title":{},"body":{"injectables/PostsService.html":{}}}],["loads",{"_index":136,"title":{},"body":{"modules/AppModule.html":{}}}],["localhost:3001",{"_index":1307,"title":{},"body":{"index.html":{}}}],["log",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["logged",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{}}}],["logging",{"_index":202,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logic",{"_index":48,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"modules/MetaOptionsModule.html":{}}}],["login",{"_index":133,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{}}}],["login(email",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{}}}],["long",{"_index":509,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["looking",{"_index":1176,"title":{},"body":{"index.html":{}}}],["loop",{"_index":1219,"title":{},"body":{"index.html":{}}}],["lowercase",{"_index":384,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["main",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["makes",{"_index":157,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["making",{"_index":613,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["management",{"_index":131,"title":{},"body":{"modules/AppModule.html":{}}}],["managing",{"_index":562,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["manner",{"_index":1010,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["manually",{"_index":171,"title":{},"body":{"modules/AppModule.html":{}}}],["many",{"_index":296,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"entities/Post.html":{},"entities/Tag.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{}}}],["many.provider",{"_index":1039,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["many.provider.ts",{"_index":999,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{},"coverage.html":{}}}],["many.provider.ts:15",{"_index":1006,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["many.provider.ts:29",{"_index":1008,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["manytomany",{"_index":661,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["manytomany(undefined",{"_index":654,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["manytoone",{"_index":662,"title":{},"body":{"entities/Post.html":{}}}],["manytoone(undefined",{"_index":629,"title":{},"body":{"entities/Post.html":{}}}],["marking",{"_index":880,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["matches",{"_index":410,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["matches(/^(?=.*[a",{"_index":513,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(/^[a",{"_index":424,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["matching",{"_index":53,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["mau",{"_index":1179,"title":{},"body":{"index.html":{}}}],["maxlength",{"_index":411,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["maxlength(1024",{"_index":430,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(256",{"_index":423,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(512",{"_index":420,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(96",{"_index":511,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["meaning",{"_index":784,"title":{},"body":{"injectables/PostsService.html":{}}}],["message",{"_index":34,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["meta",{"_index":91,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["metadata",{"_index":184,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"entities/Tag.html":{},"dependencies.html":{}}}],["metaoption",{"_index":524,"title":{"entities/MetaOption.html":{}},"body":{"entities/MetaOption.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["metaoptionrepository",{"_index":591,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["metaoptions",{"_index":117,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"miscellaneous/variables.html":{}}}],["metaoptions.post",{"_index":640,"title":{},"body":{"entities/Post.html":{}}}],["metaoptionscontroller",{"_index":560,"title":{"controllers/MetaOptionsController.html":{}},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"coverage.html":{}}}],["metaoptionsmodule",{"_index":66,"title":{"modules/MetaOptionsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules.html":{},"overview.html":{}}}],["metaoptionsrepository",{"_index":750,"title":{},"body":{"injectables/PostsService.html":{}}}],["metaoptionsservice",{"_index":571,"title":{"injectables/MetaOptionsService.html":{}},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{},"overview.html":{}}}],["metavalue",{"_index":434,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"entities/MetaOption.html":{}}}],["method",{"_index":723,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["methods",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["migrations",{"_index":173,"title":{},"body":{"modules/AppModule.html":{}}}],["minimum",{"_index":500,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength",{"_index":412,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":469,"title":{},"body":{"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(4",{"_index":419,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["minlength(8",{"_index":512,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":1127,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1227,"title":{},"body":{"index.html":{}}}],["mock",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{}}}],["mocked",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{}}}],["mode",{"_index":1157,"title":{},"body":{"index.html":{}}}],["module",{"_index":38,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["modules",{"_index":55,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["moment",{"_index":824,"title":{},"body":{"injectables/PostsService.html":{}}}],["more",{"_index":487,"title":{},"body":{"classes/CreateUserDto.html":{},"index.html":{}}}],["moved",{"_index":1077,"title":{},"body":{"injectables/UsersService.html":{}}}],["multiple",{"_index":300,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["mysql",{"_index":544,"title":{},"body":{"entities/MetaOption.html":{}}}],["myśliwiec",{"_index":1240,"title":{},"body":{"index.html":{}}}],["name",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["necessary",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"injectables/UsersService.html":{}}}],["need",{"_index":827,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{}}}],["needed",{"_index":1298,"title":{},"body":{"index.html":{}}}],["needs",{"_index":617,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["nest",{"_index":224,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/TagsService.html":{},"index.html":{}}}],["nestframework",{"_index":1244,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":107,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["nestjs/common",{"_index":36,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":96,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":1110,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":626,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1112,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":209,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["never",{"_index":1042,"title":{},"body":{"modules/UsersModule.html":{}}}],["new",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{}}}],["newly",{"_index":756,"title":{},"body":{"injectables/PostsService.html":{}}}],["newuser",{"_index":1024,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["newusers",{"_index":1015,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["newusers.push(result",{"_index":1028,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["next",{"_index":1280,"title":{},"body":{"index.html":{}}}],["node.js",{"_index":1141,"title":{},"body":{"index.html":{}}}],["note",{"_index":542,"title":{},"body":{"entities/MetaOption.html":{}}}],["notfoundexception",{"_index":766,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["notfoundexception(\"this",{"_index":834,"title":{},"body":{"injectables/PostsService.html":{}}}],["notfoundexception('user",{"_index":1080,"title":{},"body":{"injectables/UsersService.html":{}}}],["now",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["npcs",{"_index":1262,"title":{},"body":{"index.html":{}}}],["npm",{"_index":1153,"title":{},"body":{"index.html":{}}}],["npx",{"_index":912,"title":{},"body":{"injectables/TagsService.html":{},"index.html":{}}}],["null",{"_index":352,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["nullable",{"_index":538,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["number",{"_index":336,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["object",{"_index":354,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["objects",{"_index":306,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["occurs",{"_index":808,"title":{},"body":{"injectables/PostsService.html":{}}}],["offer",{"_index":1224,"title":{},"body":{"index.html":{}}}],["official",{"_index":1180,"title":{},"body":{"index.html":{}}}],["once",{"_index":301,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"index.html":{}}}],["ondelete",{"_index":547,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["one",{"_index":504,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"injectables/UsersCreateManyProvider.html":{},"index.html":{}}}],["onetomany",{"_index":936,"title":{},"body":{"entities/User.html":{}}}],["onetomany(undefined",{"_index":932,"title":{},"body":{"entities/User.html":{}}}],["onetoone",{"_index":559,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["onetoone(undefined",{"_index":545,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["open",{"_index":1229,"title":{},"body":{"index.html":{}}}],["operations",{"_index":575,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["operator",{"_index":781,"title":{},"body":{"injectables/PostsService.html":{}}}],["option",{"_index":566,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{}}}],["option.entity",{"_index":581,"title":{},"body":{"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["option.entity.ts",{"_index":525,"title":{},"body":{"entities/MetaOption.html":{},"coverage.html":{}}}],["option.entity.ts:21",{"_index":535,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:31",{"_index":539,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:37",{"_index":531,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:43",{"_index":554,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:53",{"_index":549,"title":{},"body":{"entities/MetaOption.html":{}}}],["optional",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["optional)'})@apiresponse({status",{"_index":698,"title":{},"body":{"controllers/PostsController.html":{}}}],["options",{"_index":185,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"injectables/PostsService.html":{}}}],["options.controller",{"_index":580,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["options.controller.ts",{"_index":561,"title":{},"body":{"controllers/MetaOptionsController.html":{},"coverage.html":{}}}],["options.controller.ts:22",{"_index":565,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["options.dto",{"_index":417,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{}}}],["options.dto.ts",{"_index":442,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["options.dto.ts:14",{"_index":444,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["options.module",{"_index":93,"title":{},"body":{"modules/AppModule.html":{}}}],["options.module.ts",{"_index":579,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["options.service",{"_index":573,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{}}}],["options.service.ts",{"_index":585,"title":{},"body":{"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["options.service.ts:12",{"_index":590,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["options.service.ts:27",{"_index":594,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["options/dtos/create",{"_index":416,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["options/meta",{"_index":92,"title":{},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["options/providers/meta",{"_index":584,"title":{},"body":{"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["order",{"_index":1264,"title":{},"body":{"index.html":{}}}],["organizing",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["out",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["over",{"_index":1022,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{},"index.html":{}}}],["overview",{"_index":1323,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1105,"title":{"dependencies.html":{},"properties.html":{}},"body":{"index.html":{}}}],["page",{"_index":360,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["pagination",{"_index":966,"title":{},"body":{"controllers/UsersController.html":{}}}],["pagination'})@apiresponse({status",{"_index":960,"title":{},"body":{"controllers/UsersController.html":{}}}],["param",{"_index":44,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["param.dto",{"_index":973,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param.dto.ts",{"_index":516,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["param.dto.ts:23",{"_index":519,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["parameters",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{},"classes/GetUsersParamDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["parseint(id",{"_index":980,"title":{},"body":{"controllers/UsersController.html":{}}}],["parseintpipe",{"_index":704,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["part",{"_index":1215,"title":{},"body":{"index.html":{}}}],["partially",{"_index":624,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["partialtype",{"_index":620,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["partialtype(createpostdto",{"_index":616,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["partialtype(createuserdto",{"_index":625,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["particular",{"_index":1279,"title":{},"body":{"index.html":{}}}],["parts",{"_index":1260,"title":{},"body":{"index.html":{}}}],["pass",{"_index":1303,"title":{},"body":{"index.html":{}}}],["passed",{"_index":785,"title":{},"body":{"injectables/PostsService.html":{}}}],["password",{"_index":178,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["patch",{"_index":705,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["patchpostdto",{"_index":608,"title":{"classes/PatchPostDto.html":{}},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["patchpostdto.content",{"_index":840,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.featuredimageurl",{"_index":848,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.id",{"_index":833,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.posttype",{"_index":844,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.publishon",{"_index":850,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.slug",{"_index":846,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.status",{"_index":842,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.tags.length",{"_index":830,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.title",{"_index":838,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchuser",{"_index":943,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(@body",{"_index":996,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(patchuserdto",{"_index":969,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuserdto",{"_index":622,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["path",{"_index":1270,"title":{},"body":{"index.html":{}}}],["per",{"_index":963,"title":{},"body":{"controllers/UsersController.html":{}}}],["perform",{"_index":172,"title":{},"body":{"modules/AppModule.html":{}}}],["permanently",{"_index":1076,"title":{},"body":{"injectables/UsersService.html":{}}}],["person",{"_index":378,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["person\"\\r\\n",{"_index":428,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["pg",{"_index":1120,"title":{},"body":{"dependencies.html":{}}}],["pg_ctl",{"_index":123,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["pick",{"_index":1278,"title":{},"body":{"index.html":{}}}],["pipes",{"_index":1137,"title":{},"body":{"miscellaneous/functions.html":{}}}],["platform",{"_index":1178,"title":{},"body":{"index.html":{}}}],["please",{"_index":825,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{}}}],["port",{"_index":174,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["possible",{"_index":358,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["post",{"_index":327,"title":{"entities/Post.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["post'})@apiresponse({status",{"_index":677,"title":{},"body":{"controllers/PostsController.html":{}}}],["post'})@isstring()@isnotempty()@maxlength(256)@minlength(4)@matches(/^[a",{"_index":381,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post'})@isstring()@minlength(4)@maxlength(512)@isnotempty",{"_index":401,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post('create",{"_index":945,"title":{},"body":{"controllers/UsersController.html":{}}}],["post.'})@isstring()@isoptional",{"_index":344,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.author",{"_index":933,"title":{},"body":{"entities/User.html":{}}}],["post.content",{"_index":839,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.dto",{"_index":621,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["post.dto.ts",{"_index":325,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"coverage.html":{}}}],["post.dto.ts:112",{"_index":350,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:123",{"_index":371,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:135",{"_index":399,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:161",{"_index":356,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:174",{"_index":342,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:19",{"_index":619,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["post.dto.ts:37",{"_index":402,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:48",{"_index":363,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:65",{"_index":387,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:76",{"_index":394,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:87",{"_index":345,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:99",{"_index":380,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.entity",{"_index":736,"title":{},"body":{"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["post.featuredimageurl",{"_index":847,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.metaoptions",{"_index":546,"title":{},"body":{"entities/MetaOption.html":{}}}],["post.posttype",{"_index":843,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.publishon",{"_index":849,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.slug",{"_index":845,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.status",{"_index":841,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.tags",{"_index":851,"title":{},"body":{"injectables/PostsService.html":{},"entities/Tag.html":{}}}],["post.title",{"_index":837,"title":{},"body":{"injectables/PostsService.html":{}}}],["postgres",{"_index":162,"title":{},"body":{"modules/AppModule.html":{}}}],["postgresql",{"_index":151,"title":{},"body":{"modules/AppModule.html":{}}}],["posts",{"_index":114,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateTagDto.html":{},"entities/MetaOption.html":{},"modules/MetaOptionsModule.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["posts.controller",{"_index":735,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts/posts.module",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["postscontroller",{"_index":669,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":67,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsrepository",{"_index":749,"title":{},"body":{"injectables/PostsService.html":{}}}],["postsservice",{"_index":706,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["poststatus",{"_index":389,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["poststatus.draft",{"_index":666,"title":{},"body":{"entities/Post.html":{}}}],["posttype",{"_index":331,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["posttype.post",{"_index":665,"title":{},"body":{"entities/Post.html":{}}}],["pr",{"_index":1314,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":199,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["prettier",{"_index":1318,"title":{},"body":{"index.html":{}}}],["primarygeneratedcolumn",{"_index":534,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["private",{"_index":216,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["proceed",{"_index":923,"title":{},"body":{"injectables/TagsService.html":{}}}],["process",{"_index":823,"title":{},"body":{"injectables/PostsService.html":{}}}],["process.env.node_env",{"_index":120,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["production",{"_index":1159,"title":{},"body":{"index.html":{}}}],["profile",{"_index":1053,"title":{},"body":{"injectables/UsersService.html":{}}}],["profileconfig",{"_index":1040,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["profileconfiguration",{"_index":1049,"title":{},"body":{"injectables/UsersService.html":{}}}],["progressive",{"_index":1140,"title":{},"body":{"index.html":{}}}],["project",{"_index":1151,"title":{},"body":{"index.html":{}}}],["promise",{"_index":600,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["properties",{"_index":302,"title":{"properties.html":{}},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"properties.html":{}}}],["provide",{"_index":188,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["provided",{"_index":596,"title":{},"body":{"injectables/MetaOptionsService.html":{},"index.html":{}}}],["provider",{"_index":1313,"title":{},"body":{"index.html":{}}}],["providers",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers/auth.service",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["providers/meta",{"_index":572,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{}}}],["providers/posts.service",{"_index":707,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["providers/tags.service",{"_index":883,"title":{},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{}}}],["providers/users",{"_index":1038,"title":{},"body":{"modules/UsersModule.html":{}}}],["providers/users.service",{"_index":975,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["provides",{"_index":127,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{}}}],["pts",{"_index":1271,"title":{},"body":{"index.html":{}}}],["public",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["publication",{"_index":372,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["published",{"_index":367,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["published''})@isenum(poststatus)@isnotempty",{"_index":393,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["publishon",{"_index":332,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["query",{"_index":517,"title":{},"body":{"classes/GetUsersParamDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["query('limit",{"_index":985,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('page",{"_index":987,"title":{},"body":{"controllers/UsersController.html":{}}}],["queryrunner",{"_index":791,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["queryrunner.committransaction",{"_index":805,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["queryrunner.connect",{"_index":1019,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["queryrunner.manager.create(user",{"_index":1025,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["queryrunner.manager.delete(post",{"_index":800,"title":{},"body":{"injectables/PostsService.html":{}}}],["queryrunner.manager.save(newuser",{"_index":1027,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["queryrunner.release",{"_index":819,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["queryrunner.rollbacktransaction",{"_index":810,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["queryrunner.starttransaction",{"_index":793,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["questions",{"_index":1201,"title":{},"body":{"index.html":{}}}],["r\\n",{"_index":426,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["rate",{"_index":1265,"title":{},"body":{"index.html":{}}}],["read",{"_index":1237,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":50,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["ready",{"_index":1168,"title":{},"body":{"index.html":{}}}],["real",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["record",{"_index":533,"title":{},"body":{"entities/MetaOption.html":{}}}],["records",{"_index":1056,"title":{},"body":{"injectables/UsersService.html":{}}}],["reference",{"_index":869,"title":{},"body":{"entities/Tag.html":{}}}],["reflect",{"_index":1122,"title":{},"body":{"dependencies.html":{}}}],["regenerate",{"_index":1297,"title":{},"body":{"index.html":{}}}],["registered",{"_index":959,"title":{},"body":{"controllers/UsersController.html":{}}}],["registers",{"_index":582,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["related",{"_index":129,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateTagDto.html":{},"modules/MetaOptionsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["relations",{"_index":776,"title":{},"body":{"injectables/PostsService.html":{}}}],["relationship",{"_index":550,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["relationships",{"_index":727,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"index.html":{}}}],["release",{"_index":815,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["relevant",{"_index":726,"title":{},"body":{"controllers/PostsController.html":{}}}],["remove",{"_index":802,"title":{},"body":{"injectables/PostsService.html":{}}}],["removes",{"_index":725,"title":{},"body":{"controllers/PostsController.html":{}}}],["removing",{"_index":882,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["repositories",{"_index":771,"title":{},"body":{"injectables/PostsService.html":{}}}],["repository",{"_index":589,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["representing",{"_index":854,"title":{},"body":{"entities/Tag.html":{}}}],["represents",{"_index":526,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/User.html":{}}}],["req",{"_index":437,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["request",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["requesting",{"_index":762,"title":{},"body":{"injectables/PostsService.html":{}}}],["requests",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["requesttimeoutexception",{"_index":767,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["requesttimeoutexception('could",{"_index":1020,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["requesttimeoutexception('database",{"_index":1079,"title":{},"body":{"injectables/UsersService.html":{}}}],["required",{"_index":308,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["requiring",{"_index":1185,"title":{},"body":{"index.html":{}}}],["reset",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resolves",{"_index":601,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["resources",{"_index":1195,"title":{},"body":{"index.html":{}}}],["response",{"_index":806,"title":{},"body":{"injectables/PostsService.html":{}}}],["responsible",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/UsersCreateManyProvider.html":{},"miscellaneous/variables.html":{}}}],["result",{"_index":1026,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["results",{"_index":52,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["retrieve",{"_index":520,"title":{},"body":{"classes/GetUsersParamDto.html":{},"injectables/UsersService.html":{}}}],["retrieved",{"_index":953,"title":{},"body":{"controllers/UsersController.html":{}}}],["retrieves",{"_index":695,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["return",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["returned",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["returning",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{}}}],["returns",{"_index":32,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["review",{"_index":392,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["rollback",{"_index":809,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["root",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["route",{"_index":889,"title":{},"body":{"controllers/TagsController.html":{}}}],["routes",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{},"modules/MetaOptionsModule.html":{}}}],["rules",{"_index":476,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["run",{"_index":121,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["runner",{"_index":816,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["running",{"_index":1136,"title":{},"body":{"miscellaneous/functions.html":{}}}],["runs",{"_index":1173,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":1124,"title":{},"body":{"dependencies.html":{}}}],["s",{"_index":1283,"title":{},"body":{"index.html":{}}}],["sample",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{}}}],["sample_token",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{}}}],["save",{"_index":586,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["saved",{"_index":602,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["saying",{"_index":1305,"title":{},"body":{"index.html":{}}}],["scalable",{"_index":1145,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":391,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["schema",{"_index":142,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["script",{"_index":1247,"title":{},"body":{"index.html":{}}}],["see",{"_index":1250,"title":{},"body":{"index.html":{}}}],["seen",{"_index":1306,"title":{},"body":{"index.html":{}}}],["separator",{"_index":466,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["serialized",{"_index":373,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["series",{"_index":365,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["series''})@isenum(posttype)@isnotempty",{"_index":362,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["serve",{"_index":1286,"title":{},"body":{"index.html":{}}}],["server",{"_index":1146,"title":{},"body":{"index.html":{}}}],["service",{"_index":189,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["session",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{}}}],["set",{"_index":169,"title":{},"body":{"modules/AppModule.html":{}}}],["sets",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["setting",{"_index":168,"title":{},"body":{"modules/AppModule.html":{}}}],["setup",{"_index":1152,"title":{},"body":{"index.html":{}}}],["shallow",{"_index":782,"title":{},"body":{"injectables/PostsService.html":{}}}],["side",{"_index":1147,"title":{},"body":{"index.html":{}}}],["sidebarenabled",{"_index":435,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{}}}],["sides",{"_index":1309,"title":{},"body":{"index.html":{}}}],["simple",{"_index":195,"title":{},"body":{"injectables/AppService.html":{},"index.html":{}}}],["simplified",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{}}}],["simulate",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{}}}],["single",{"_index":951,"title":{},"body":{"controllers/UsersController.html":{}}}],["slash",{"_index":1266,"title":{},"body":{"index.html":{}}}],["slug",{"_index":333,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["soft",{"_index":859,"title":{},"body":{"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["softdelete",{"_index":872,"title":{},"body":{"controllers/TagsController.html":{}}}],["softdelete(@query('id",{"_index":888,"title":{},"body":{"controllers/TagsController.html":{}}}],["softdelete(id",{"_index":877,"title":{},"body":{"controllers/TagsController.html":{}}}],["softremove",{"_index":901,"title":{},"body":{"injectables/TagsService.html":{}}}],["softremove(id",{"_index":910,"title":{},"body":{"injectables/TagsService.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["spaces",{"_index":386,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["spec",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TagsService.html":{}}}],["specgenerate",{"_index":1311,"title":{},"body":{"index.html":{}}}],["special",{"_index":506,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["specific",{"_index":139,"title":{},"body":{"modules/AppModule.html":{},"classes/GetUsersParamDto.html":{},"controllers/PostsController.html":{},"index.html":{}}}],["specprettier",{"_index":1317,"title":{},"body":{"index.html":{}}}],["sponsors",{"_index":1232,"title":{},"body":{"index.html":{}}}],["spread",{"_index":780,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/.../app.module.ts",{"_index":1330,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1134,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../post",{"_index":1129,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:27",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app.service.ts",{"_index":193,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:17",{"_index":196,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.module",{"_index":1037,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":220,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/providers/auth.service",{"_index":1067,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/auth/providers/auth.service.ts",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts:10",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:33",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:54",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/main.ts",{"_index":1097,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/meta",{"_index":441,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/dto/create",{"_index":324,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["src/posts/dto/patch",{"_index":609,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["src/posts/enums/post",{"_index":1132,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/post.entity",{"_index":556,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["src/posts/post.entity.ts",{"_index":628,"title":{},"body":{"entities/Post.html":{},"coverage.html":{}}}],["src/posts/post.entity.ts:100",{"_index":641,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:106",{"_index":632,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:26",{"_index":639,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:32",{"_index":659,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:43",{"_index":644,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:49",{"_index":650,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:60",{"_index":652,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:66",{"_index":634,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:72",{"_index":647,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:78",{"_index":638,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:84",{"_index":645,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:91",{"_index":657,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/posts.controller.ts",{"_index":670,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:48",{"_index":699,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:61",{"_index":683,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:74",{"_index":703,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:94",{"_index":691,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module.ts",{"_index":734,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/providers/posts.service.ts",{"_index":746,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/providers/posts.service.ts:122",{"_index":764,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:177",{"_index":757,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:21",{"_index":752,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:46",{"_index":760,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:64",{"_index":754,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/tags/dtos/create",{"_index":447,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["src/tags/providers/tags.service",{"_index":768,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/tags/providers/tags.service.ts",{"_index":899,"title":{},"body":{"injectables/TagsService.html":{},"coverage.html":{}}}],["src/tags/providers/tags.service.ts:13",{"_index":903,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:28",{"_index":905,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:38",{"_index":908,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:53",{"_index":906,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:74",{"_index":911,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tag.entity",{"_index":664,"title":{},"body":{"entities/Post.html":{}}}],["src/tags/tag.entity.ts",{"_index":853,"title":{},"body":{"entities/Tag.html":{},"coverage.html":{}}}],["src/tags/tag.entity.ts:103",{"_index":858,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:21",{"_index":862,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:33",{"_index":863,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:45",{"_index":866,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:55",{"_index":860,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:65",{"_index":865,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:76",{"_index":861,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:84",{"_index":864,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:91",{"_index":856,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:97",{"_index":867,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tags.controller.ts",{"_index":871,"title":{},"body":{"controllers/TagsController.html":{},"coverage.html":{}}}],["src/tags/tags.controller.ts:29",{"_index":874,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.controller.ts:39",{"_index":875,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.controller.ts:49",{"_index":879,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.module",{"_index":737,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/tags/tags.module.ts",{"_index":895,"title":{},"body":{"modules/TagsModule.html":{}}}],["src/users/dtos/create",{"_index":295,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dtos/get",{"_index":515,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["src/users/dtos/patch",{"_index":623,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["src/users/providers/users",{"_index":998,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{},"coverage.html":{}}}],["src/users/providers/users.service",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["src/users/providers/users.service.ts",{"_index":1045,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/providers/users.service.ts:102",{"_index":1057,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:132",{"_index":1054,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:26",{"_index":1051,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:57",{"_index":1059,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:82",{"_index":1064,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/user.entity",{"_index":663,"title":{},"body":{"entities/Post.html":{}}}],["src/users/user.entity.ts",{"_index":926,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/user.entity.ts:13",{"_index":929,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:23",{"_index":928,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:34",{"_index":930,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:46",{"_index":927,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:56",{"_index":931,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:62",{"_index":934,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.controller.ts",{"_index":938,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:107",{"_index":946,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:117",{"_index":970,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:49",{"_index":954,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:77",{"_index":965,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:91",{"_index":948,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":223,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostsModule.html":{}}}],["src/users/users.module.ts",{"_index":1035,"title":{},"body":{"modules/UsersModule.html":{}}}],["start",{"_index":124,"title":{},"body":{"modules/AppModule.html":{},"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{},"index.html":{}}}],["start:dev",{"_index":1158,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":1160,"title":{},"body":{"index.html":{}}}],["started",{"_index":1139,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1150,"title":{},"body":{"index.html":{}}}],["statements",{"_index":1091,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":334,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["status.enum",{"_index":415,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["status.enum.ts",{"_index":1130,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["stay",{"_index":1218,"title":{},"body":{"index.html":{}}}],["steps",{"_index":1170,"title":{},"body":{"index.html":{}}}],["storage",{"_index":543,"title":{},"body":{"entities/MetaOption.html":{}}}],["stored",{"_index":540,"title":{},"body":{"entities/MetaOption.html":{}}}],["storing",{"_index":527,"title":{},"body":{"entities/MetaOption.html":{}}}],["story",{"_index":361,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["straightforward",{"_index":1183,"title":{},"body":{"index.html":{}}}],["string",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["string(error",{"_index":1031,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["structured",{"_index":648,"title":{},"body":{"entities/Post.html":{}}}],["success",{"_index":692,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["successful",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["successfully",{"_index":718,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["successfully'})@apiquery({name",{"_index":961,"title":{},"body":{"controllers/UsersController.html":{}}}],["successfully'})@apiresponse({status",{"_index":679,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["such",{"_index":112,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["summary",{"_index":715,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["support",{"_index":1202,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":1321,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1138,"title":{},"body":{"miscellaneous/functions.html":{}}}],["synchronize",{"_index":166,"title":{},"body":{"modules/AppModule.html":{}}}],["table",{"_index":1104,"title":{},"body":{"coverage.html":{}}}],["tables",{"_index":742,"title":{},"body":{"modules/PostsModule.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1103,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":395,"title":{"entities/Tag.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"coverage.html":{}}}],["tag.dto",{"_index":884,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["tag.dto.ts",{"_index":448,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["tag.dto.ts:30",{"_index":459,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:48",{"_index":468,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:61",{"_index":454,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:74",{"_index":462,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:88",{"_index":457,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.entity",{"_index":897,"title":{},"body":{"modules/TagsModule.html":{},"injectables/TagsService.html":{}}}],["tag.posts",{"_index":655,"title":{},"body":{"entities/Post.html":{}}}],["tagging",{"_index":211,"title":{},"body":{"controllers/AuthController.html":{}}}],["tags",{"_index":116,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["tags.controller",{"_index":896,"title":{},"body":{"modules/TagsModule.html":{}}}],["tags.length",{"_index":829,"title":{},"body":{"injectables/PostsService.html":{}}}],["tags/providers/tags",{"_index":913,"title":{},"body":{"injectables/TagsService.html":{},"index.html":{}}}],["tags/soft",{"_index":890,"title":{},"body":{"controllers/TagsController.html":{}}}],["tags/tags.module",{"_index":90,"title":{},"body":{"modules/AppModule.html":{}}}],["tagscontroller",{"_index":870,"title":{"controllers/TagsController.html":{}},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{},"coverage.html":{}}}],["tagsmodule",{"_index":68,"title":{"modules/TagsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules.html":{},"overview.html":{}}}],["tagsrepository",{"_index":904,"title":{},"body":{"injectables/TagsService.html":{}}}],["tagsservice",{"_index":751,"title":{"injectables/TagsService.html":{}},"body":{"injectables/PostsService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"coverage.html":{},"overview.html":{}}}],["take",{"_index":1171,"title":{},"body":{"index.html":{}}}],["technology",{"_index":452,"title":{},"body":{"classes/CreateTagDto.html":{},"entities/Tag.html":{}}}],["technology'})@isstring()@isnotempty()@matches(/^[a",{"_index":464,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["technology'})@isstring()@minlength(3)@isnotempty()@maxlength(256",{"_index":458,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["test",{"_index":1163,"title":{},"body":{"index.html":{}}}],["test:covdeployment",{"_index":1166,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1165,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1161,"title":{},"body":{"index.html":{}}}],["text",{"_index":633,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["thanks",{"_index":1231,"title":{},"body":{"index.html":{}}}],["this.appservice.gethello",{"_index":51,"title":{},"body":{"controllers/AppController.html":{}}}],["this.datasource.createqueryrunner",{"_index":1016,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["this.metaoptionrepository.create(createmetaoptiondto",{"_index":605,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionrepository.save(metaoption",{"_index":607,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionsservice.create(createpostmetaoptiondto",{"_index":576,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["this.postsrepository.create",{"_index":786,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.delete(id",{"_index":852,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.find",{"_index":775,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.findone",{"_index":797,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.findoneby",{"_index":832,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.manager.connection.createqueryrunner",{"_index":792,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.save(post",{"_index":787,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsservice.create(createpostdto",{"_index":720,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.delete(id",{"_index":730,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.findall(userid",{"_index":717,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.update(patchpostdto",{"_index":722,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.tagsrepository.create(createtagdto",{"_index":915,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.delete(id",{"_index":924,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.find",{"_index":917,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.findone",{"_index":922,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.save(tag",{"_index":916,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.softdelete(id",{"_index":925,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsservice.create(createtagdto",{"_index":886,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.tagsservice.delete(id",{"_index":887,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.tagsservice.findmultipletags(createpostdto.tags",{"_index":779,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.tagsservice.findmultipletags(patchpostdto.tags",{"_index":821,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.tagsservice.softremove(id",{"_index":891,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.userscreatemanyprovider.createmany(createmanyusersdto",{"_index":1088,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.create(createuserdto",{"_index":1086,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findone",{"_index":1083,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findoneby",{"_index":1078,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.save(newuser",{"_index":1087,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.createmany(createmanyusersdto",{"_index":995,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.createuser(createuserdto",{"_index":993,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall(getuserparamdto",{"_index":989,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findonebyid(1234",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findonebyid(createpostdto.authorid",{"_index":778,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.usersservice.findonebyid(userid",{"_index":983,"title":{},"body":{"controllers/UsersController.html":{}}}],["throw",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["thrown",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{}}}],["throws",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["time",{"_index":646,"title":{},"body":{"entities/Post.html":{},"index.html":{}}}],["timestamp",{"_index":532,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["title",{"_index":335,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["token",{"_index":134,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{}}}],["touch",{"_index":1238,"title":{},"body":{"index.html":{}}}],["transaction",{"_index":788,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["transactional",{"_index":1009,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["transfer",{"_index":449,"title":{},"body":{"classes/CreateTagDto.html":{},"injectables/MetaOptionsService.html":{},"injectables/TagsService.html":{}}}],["transformer",{"_index":320,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"dependencies.html":{}}}],["triggers",{"_index":1268,"title":{},"body":{"index.html":{}}}],["true",{"_index":145,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["true})@jointable",{"_index":656,"title":{},"body":{"entities/Post.html":{}}}],["true})@type(undefined",{"_index":311,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["try",{"_index":794,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["tsconfig.json",{"_index":1275,"title":{},"body":{"index.html":{}}}],["tts",{"_index":1274,"title":{},"body":{"index.html":{}}}],["twitter",{"_index":1243,"title":{},"body":{"index.html":{}}}],["type",{"_index":161,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["type.enum",{"_index":414,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["type.enum.ts",{"_index":1131,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["typeorm",{"_index":153,"title":{},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":88,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([metaoption",{"_index":583,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["typeormmodule.forfeature([post",{"_index":741,"title":{},"body":{"modules/PostsModule.html":{}}}],["typeormmodule.forfeature([tag",{"_index":898,"title":{},"body":{"modules/TagsModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":1043,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":627,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":1149,"title":{},"body":{"index.html":{}}}],["typically",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{}}}],["unable",{"_index":822,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["undefined",{"_index":643,"title":{},"body":{"entities/Post.html":{},"injectables/PostsService.html":{}}}],["undefined})@isarray()@isoptional()@isint({each",{"_index":398,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["undefined})@isnotempty()@isarray()@validatenested({each",{"_index":310,"title":{},"body":{"classes/CreateManyUsersDto.html":{}}}],["undefined})@isoptional()@validatenested({each",{"_index":355,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["unique",{"_index":463,"title":{},"body":{"classes/CreateTagDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["unit",{"_index":1162,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":599,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["unlicensed",{"_index":1329,"title":{},"body":{"properties.html":{}}}],["up",{"_index":79,"title":{},"body":{"modules/AppModule.html":{},"injectables/PostsService.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["update",{"_index":748,"title":{},"body":{"injectables/PostsService.html":{}}}],["update(@body",{"_index":820,"title":{},"body":{"injectables/PostsService.html":{}}}],["update(patchpostdto",{"_index":763,"title":{},"body":{"injectables/PostsService.html":{}}}],["updated",{"_index":555,"title":{},"body":{"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/UsersController.html":{}}}],["updatedate",{"_index":529,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["updatedatecolumn",{"_index":553,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["updatepost",{"_index":674,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(@body",{"_index":721,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(patchpostdto",{"_index":700,"title":{},"body":{"controllers/PostsController.html":{}}}],["updates",{"_index":701,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["updating",{"_index":610,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["upon",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["url",{"_index":346,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["url\"'})@maxlength(512",{"_index":467,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["urls",{"_index":388,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["use",{"_index":385,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"injectables/PostsService.html":{},"index.html":{}}}],["used",{"_index":187,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{}}}],["usefactory",{"_index":160,"title":{},"body":{"modules/AppModule.html":{}}}],["user",{"_index":128,"title":{"entities/User.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["user'})@apiparam({name",{"_index":696,"title":{},"body":{"controllers/PostsController.html":{}}}],["user'})@apiresponse({status",{"_index":952,"title":{},"body":{"controllers/UsersController.html":{}}}],["user.dto",{"_index":319,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":473,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:25",{"_index":491,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:35",{"_index":495,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:45",{"_index":482,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:59",{"_index":508,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.entity",{"_index":1012,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["user.posts",{"_index":630,"title":{},"body":{"entities/Post.html":{}}}],["userid",{"_index":697,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["username",{"_index":176,"title":{},"body":{"modules/AppModule.html":{}}}],["users",{"_index":113,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/GetUsersParamDto.html":{},"modules/PostsModule.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["users.controller",{"_index":1036,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.dto",{"_index":976,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["users.dto.ts",{"_index":297,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"coverage.html":{}}}],["users.dto.ts:27",{"_index":312,"title":{},"body":{"classes/CreateManyUsersDto.html":{}}}],["users.service.ts",{"_index":1073,"title":{},"body":{"injectables/UsersService.html":{}}}],["users/providers/users",{"_index":1315,"title":{},"body":{"index.html":{}}}],["users/users.module",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":937,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userscreatemanyprovider",{"_index":997,"title":{"injectables/UsersCreateManyProvider.html":{}},"body":{"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["usersmodule",{"_index":69,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":1048,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersservice",{"_index":234,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["uses",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["using",{"_index":141,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["utilizes",{"_index":1001,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["valid",{"_index":483,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["validated",{"_index":439,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validatenested",{"_index":316,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["validates",{"_index":140,"title":{},"body":{"modules/AppModule.html":{}}}],["validation",{"_index":475,"title":{},"body":{"classes/CreateUserDto.html":{},"controllers/UsersController.html":{},"miscellaneous/functions.html":{}}}],["validationpipe",{"_index":992,"title":{},"body":{"controllers/UsersController.html":{}}}],["validationschema",{"_index":149,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":317,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"dependencies.html":{}}}],["value",{"_index":445,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"entities/MetaOption.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":359,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["varchar",{"_index":636,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["variable",{"_index":1094,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":138,"title":{"miscellaneous/variables.html":{}},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["various",{"_index":111,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["verbose",{"_index":1256,"title":{},"body":{"index.html":{}}}],["verifies",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{}}}],["verify",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{}}}],["version",{"_index":1327,"title":{},"body":{"properties.html":{}}}],["video",{"_index":1209,"title":{},"body":{"index.html":{}}}],["view",{"_index":739,"title":{},"body":{"modules/PostsModule.html":{}}}],["visit",{"_index":1199,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":1212,"title":{},"body":{"index.html":{}}}],["void",{"_index":1062,"title":{},"body":{"injectables/UsersService.html":{}}}],["want",{"_index":1282,"title":{},"body":{"index.html":{}}}],["watch",{"_index":1156,"title":{},"body":{"index.html":{}}}],["website",{"_index":1241,"title":{},"body":{"index.html":{}}}],["well",{"_index":1288,"title":{},"body":{"index.html":{}}}],["whenever",{"_index":1294,"title":{},"body":{"index.html":{}}}],["whether",{"_index":876,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["within",{"_index":919,"title":{},"body":{"injectables/TagsService.html":{},"index.html":{}}}],["without",{"_index":881,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{}}}],["working",{"_index":1198,"title":{},"body":{"index.html":{}}}],["world",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{}}}],["write",{"_index":1319,"title":{},"body":{"index.html":{}}}],["writing",{"_index":1296,"title":{},"body":{"index.html":{}}}],["x",{"_index":1221,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":1235,"title":{},"body":{"index.html":{}}}],["you're",{"_index":1167,"title":{},"body":{"index.html":{}}}],["z0",{"_index":382,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["z\\d@$!%*?&]{8,16",{"_index":499,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*?&])[a",{"_index":498,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["za",{"_index":497,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                AppController is the controller responsible for handling incoming HTTP requests.\nIt uses AppService to return the \"Hello World!\" string.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:27\n                        \n                    \n\n\n            \n                \n                        Handles the GET request for the root endpoint ('/').\nIt uses the AppService to get the 'Hello World!' string and return it to the client.\nExample :\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                string - The greeting message.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n/**\n * AppController is the controller responsible for handling incoming HTTP requests.\n * It uses AppService to return the \"Hello World!\" string.\n *\n * @module AppController\n */\n@Controller()\nexport class AppController {\n  /**\n   * Injects the AppService to access its methods and return data.\n   *\n   * @param appService - Instance of AppService to handle the business logic.\n   */\n  constructor(private readonly appService: AppService) {}\n\n  /**\n   * Handles the GET request for the root endpoint ('/').\n   * It uses the AppService to get the 'Hello World!' string and return it to the client.\n   *\n   * @returns string - The greeting message.\n   * @example 'Hello World!'\n   */\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            The main module of the application, which imports other feature modules\nand sets up necessary configurations and database connections.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            MetaOptionsModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            TagsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UsersModule } from './users/users.module';\nimport { PostsModule } from './posts/posts.module';\nimport { AuthModule } from './auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { TagsModule } from './tags/tags.module';\nimport { MetaOptionsModule } from './meta-options/meta-options.module';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport appConfig from './config/app.config'; // Importing the default app configuration\nimport databaseConfig from './config/database.config';\nimport environmentValidation from './config/environment.validation';\n\n/**\n * The AppModule is the root module of the NestJS application.\n * It is responsible for bootstrapping and organizing all the other modules.\n * It includes various modules such as Users, Posts, Auth, Tags, and MetaOptions.\n * It also sets up configuration and database connections.\n */\nconst ENV = process.env.NODE_ENV;\n\n// Run this in cmd pg_ctl start -D \"C:\\users\\mfabouatmeh\\Desktop\\CodesDar\\more\\Postgre\\data\"\n\n/**\n * The main module of the application, which imports other feature modules\n * and sets up necessary configurations and database connections.\n *\n * @module AppModule\n */\n@Module({\n  imports: [\n    /**\n     * UsersModule: Provides user-related functionality such as user management.\n     */\n    UsersModule,\n\n    /**\n     * PostsModule: Handles all functionality related to posts.\n     */\n    PostsModule,\n\n    /**\n     * AuthModule: Handles authentication logic, such as login and token generation.\n     */\n    AuthModule,\n\n    /**\n     * ConfigModule: Loads environment variables and application-specific configurations.\n     * It also validates the configurations using environmentValidation schema.\n     */\n    ConfigModule.forRoot({\n      isGlobal: true,\n      envFilePath: !ENV ? '.env' : `.env.${ENV}`,\n      load: [appConfig, databaseConfig],\n      validationSchema: environmentValidation,\n    }),\n\n    /**\n     * TypeOrmModule: Configures PostgreSQL database connection using TypeORM.\n     * Database configurations are dynamically fetched from ConfigService.\n     */\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule], // Makes ConfigService available\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        type: 'postgres',\n        // entities: [User],\n        autoLoadEntities: configService.get('database.autoLoadEntities'),\n        synchronize: configService.get('database.synchronize'), // If this setting is set to false, we would have to manually perform migrations\n        port: configService.get('database.port'),\n        username: configService.get('database.user'),\n        password: configService.get('database.pass'),\n        host: configService.get('database.host'),\n        database: configService.get('database.name'),\n      }),\n    }),\n\n    /**\n     * TagsModule: Handles the management of tags for posts or other entities.\n     */\n    TagsModule,\n\n    /**\n     * MetaOptionsModule: Deals with metadata options for various entities in the app.\n     */\n    MetaOptionsModule,\n  ],\n\n  /**\n   * The controllers that are responsible for handling incoming requests.\n   * Here, the main controller is AppController.\n   */\n  controllers: [AppController],\n\n  /**\n   * The providers that are used to provide business logic and service-related functionality.\n   * In this case, AppService is used to return the 'Hello World' string.\n   */\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n            \n                Description\n            \n            \n                AppService is a service that handles business logic related to the application.\nCurrently, it provides a simple 'Hello World' message.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:17\n                        \n                    \n\n\n            \n                \n                        Returns a 'Hello World!' string.\nExample :\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                string - A simple greeting message.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n/**\n * AppService is a service that handles business logic related to the application.\n * Currently, it provides a simple 'Hello World' message.\n *\n * @module AppService\n */\n@Injectable()\nexport class AppService {\n  /**\n   * Returns a 'Hello World!' string.\n   *\n   * @returns string - A simple greeting message.\n   * @example 'Hello World!'\n   */\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n            \n                Description\n            \n            \n                AuthController handles authentication-related API requests.\nIt provides routes for logging in and checking user authentication.\n\n            \n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { AuthService } from './providers/auth.service';\nimport { ApiTags, ApiOperation, ApiResponse } from '@nestjs/swagger';\n\n/**\n * AuthController handles authentication-related API requests.\n * It provides routes for logging in and checking user authentication.\n */\n@ApiTags('Authentication') // Tagging the controller for authentication-related endpoints.\n@Controller('auth')\nexport class AuthController {\n  constructor(\n    // Injecting the AuthService to handle authentication logic.\n    private readonly authService: AuthService,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './providers/auth.service';\nimport { UsersModule } from 'src/users/users.module';\n// nest generate module auth\n@Module({\n  controllers: [AuthController],\n  providers: [AuthService],\n  // imports: [UsersModule], will cause a circular dependency\n  imports: [forwardRef(() => UsersModule)],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                AuthService class handles the authentication logic of the application.\nIt is responsible for logging users in and checking if a user is authenticated.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                isAuth\n                            \n                            \n                                    Public\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/auth.service.ts:10\n                            \n                        \n\n                \n                    \n                            Constructs an instance of the AuthService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The UsersService instance to interact with user-related data.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isAuth\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAuth()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:54\n                        \n                    \n\n\n            \n                \n                        Checks if a user is authenticated.\nThis is a simplified check that always returns true.\nIn a real-world application, this would verify a JWT token or session.\nExample :\n\n                        \n                            Returns :         boolean\n\n                        \n                            \n                                boolean true indicating the user is authenticated.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:33\n                        \n                    \n\n\n            \n                \n                        Handles the login logic for a user.\nIt checks if the user exists, verifies the password, and generates a token for the user.\nIf the user is not found or the password is incorrect, an error is thrown.\nExample :\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The email of the user attempting to log in.\n\n                                            \n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The password of the user attempting to log in.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                string A token generated for the logged-in user (typically a JWT token).\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, forwardRef, Inject } from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users.service';\n// nest generate service auth/providers/auth --flat  --no-spec\n\n/**\n * AuthService class handles the authentication logic of the application.\n * It is responsible for logging users in and checking if a user is authenticated.\n */\n@Injectable()\nexport class AuthService {\n  /**\n   * Constructs an instance of the AuthService.\n   * @param usersService The UsersService instance to interact with user-related data.\n   */\n  constructor(\n    // Injecting the UsersService to interact with user-related data.\n    // forwardRef is used to avoid circular dependency issues.\n    @Inject(forwardRef(() => UsersService))\n    private readonly usersService: UsersService,\n  ) {}\n\n  /**\n   * Handles the login logic for a user.\n   * It checks if the user exists, verifies the password, and generates a token for the user.\n   * If the user is not found or the password is incorrect, an error is thrown.\n   *\n   * @param email The email of the user attempting to log in.\n   * @param password The password of the user attempting to log in.\n   * @returns string A token generated for the logged-in user (typically a JWT token).\n   * @throws Error If the user is not found or the password is incorrect.\n   * @example 'SAMPLE_TOKEN' - A sample token string returned upon successful login.\n   */\n  public login(email: string, password: string) {\n    // Simulate user finding logic (mocked for demonstration)\n    const user = this.usersService.findOneById(1234);\n\n    if (!user) {\n      throw new Error('User not found');\n    }\n\n    // Additional password check can be added here\n    // For now, returning a mock token for successful login\n    return 'SAMPLE_TOKEN';\n  }\n\n  /**\n   * Checks if a user is authenticated.\n   * This is a simplified check that always returns `true`.\n   * In a real-world application, this would verify a JWT token or session.\n   *\n   * @returns boolean `true` indicating the user is authenticated.\n   * @example true\n   */\n  public isAuth(): boolean {\n    return true;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateManyUsersDto.html":{"url":"classes/CreateManyUsersDto.html","title":"class - CreateManyUsersDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateManyUsersDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-many-users.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for creating multiple users at once.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreateUserDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Array of user objects to be created.', type: 'array', required: true, items: undefined})@IsNotEmpty()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-many-users.dto.ts:27\n                        \n                    \n\n            \n                \n                    List of users to be created.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, IsNotEmpty, ValidateNested } from 'class-validator';\nimport { CreateUserDto } from './create-user.dto';\nimport { Type } from 'class-transformer';\nimport { ApiProperty } from '@nestjs/swagger';\n\n/**\n * DTO for creating multiple users at once.\n */\nexport class CreateManyUsersDto {\n  /**\n   * List of users to be created.\n   *\n   * @type {CreateUserDto[]}\n   */\n  @ApiProperty({\n    description: 'Array of user objects to be created.',\n    type: 'array',\n    required: true,\n    items: {\n      type: 'User',\n    },\n  })\n  @IsNotEmpty()\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => CreateUserDto)\n  users: CreateUserDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dto/create-post.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for creating a new blog post.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                authorId\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                publishOn\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        authorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'integer', required: true, description: 'The ID of the author creating the post', example: 1})@IsNotEmpty()@IsInt()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:174\n                        \n                    \n\n            \n                \n                    The ID of the author creating the post.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The main content of the post', example: 'This is the content of the blog post.'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:87\n                        \n                    \n\n            \n                \n                    The main content of the post.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The URL of the featured image for the post', example: 'http://localhost.com/images/image1.jpg'})@IsOptional()@MinLength(4)@MaxLength(1024)@IsUrl()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:112\n                        \n                    \n\n            \n                \n                    The URL of the featured image for the post.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreatePostMetaOptionsDto | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'object', required: false, items: undefined})@IsOptional()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:161\n                        \n                    \n\n            \n                \n                    Additional meta options for the post.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: PostType, description: 'Possible values: 'post', 'page', 'story', 'series''})@IsEnum(PostType)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:48\n                        \n                    \n\n            \n                \n                    The type of post (e.g., 'post', 'page', 'story', 'series').\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The date on which the post is published', example: '2024-03-16T07:46:32+0000'})@IsISO8601()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:123\n                        \n                    \n\n            \n                \n                    The publication date of the post.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Serialized JSON object containing metadata', example: '{\n \"@context\": \"https://schema.org\",\n \"@type\": \"Person\"\n }'})@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:99\n                        \n                    \n\n            \n                \n                    JSON metadata for the post.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'A slug for the post (e.g., \"my-blog-post\")', example: 'my-blog-post'})@IsString()@IsNotEmpty()@MaxLength(256)@MinLength(4)@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'A slug should be all lowercase, use only \"-\", and have no spaces. Example: \"my-url\"'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:65\n                        \n                    \n\n            \n                \n                    A slug for the post, used in URLs.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: PostStatus, description: 'Possible values: 'draft', 'scheduled', 'review', 'published''})@IsEnum(PostStatus)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:76\n                        \n                    \n\n            \n                \n                    The publication status of the post (e.g., 'draft', 'scheduled', 'review', 'published').\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Array of tag IDs associated with the post', example: undefined})@IsArray()@IsOptional()@IsInt({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:135\n                        \n                    \n\n            \n                \n                    An array of tag IDs associated with the post.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'This is a title', description: 'The title for the blog post'})@IsString()@MinLength(4)@MaxLength(512)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:37\n                        \n                    \n\n            \n                \n                    The title of the blog post.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsArray,\n  IsEnum,\n  IsInt,\n  IsISO8601,\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MaxLength,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\nimport { PostType } from '../enums/post-type.enum';\nimport { PostStatus } from '../enums/post-status.enum';\nimport { CreatePostMetaOptionsDto } from '../../meta-options/dtos/create-post-meta-options.dto';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\n\n/**\n * DTO for creating a new blog post.\n */\nexport class CreatePostDto {\n  /**\n   * The title of the blog post.\n   */\n  @ApiProperty({\n    example: 'This is a title',\n    description: 'The title for the blog post',\n  })\n  @IsString()\n  @MinLength(4)\n  @MaxLength(512)\n  @IsNotEmpty()\n  title: string;\n\n  /**\n   * The type of post (e.g., 'post', 'page', 'story', 'series').\n   */\n  @ApiProperty({\n    enum: PostType,\n    description: \"Possible values: 'post', 'page', 'story', 'series'\",\n  })\n  @IsEnum(PostType)\n  @IsNotEmpty()\n  postType: PostType;\n\n  /**\n   * A slug for the post, used in URLs.\n   */\n  @ApiProperty({\n    description: 'A slug for the post (e.g., \"my-blog-post\")',\n    example: 'my-blog-post',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(256)\n  @MinLength(4)\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'A slug should be all lowercase, use only \"-\", and have no spaces. Example: \"my-url\"',\n  })\n  slug: string;\n\n  /**\n   * The publication status of the post (e.g., 'draft', 'scheduled', 'review', 'published').\n   */\n  @ApiProperty({\n    enum: PostStatus,\n    description: \"Possible values: 'draft', 'scheduled', 'review', 'published'\",\n  })\n  @IsEnum(PostStatus)\n  @IsNotEmpty()\n  status: PostStatus;\n\n  /**\n   * The main content of the post.\n   */\n  @ApiPropertyOptional({\n    description: 'The main content of the post',\n    example: 'This is the content of the blog post.',\n  })\n  @IsString()\n  @IsOptional()\n  content?: string;\n\n  /**\n   * JSON metadata for the post.\n   */\n  @ApiPropertyOptional({\n    description: 'Serialized JSON object containing metadata',\n    example:\n      '{\\r\\n \"@context\": \"https://schema.org\",\\r\\n \"@type\": \"Person\"\\r\\n }',\n  })\n  @IsOptional()\n  @IsJSON()\n  schema?: string;\n\n  /**\n   * The URL of the featured image for the post.\n   */\n  @ApiPropertyOptional({\n    description: 'The URL of the featured image for the post',\n    example: 'http://localhost.com/images/image1.jpg',\n  })\n  @IsOptional()\n  @MinLength(4)\n  @MaxLength(1024)\n  @IsUrl()\n  featuredImageUrl?: string;\n\n  /**\n   * The publication date of the post.\n   */\n  @ApiPropertyOptional({\n    description: 'The date on which the post is published',\n    example: '2024-03-16T07:46:32+0000',\n  })\n  @IsISO8601()\n  @IsOptional()\n  publishOn?: Date;\n\n  /**\n   * An array of tag IDs associated with the post.\n   */\n  @ApiPropertyOptional({\n    description: 'Array of tag IDs associated with the post',\n    example: [1, 2],\n  })\n  @IsArray()\n  @IsOptional()\n  @IsInt({ each: true })\n  tags?: number[];\n\n  /**\n   * Additional meta options for the post.\n   */\n  @ApiPropertyOptional({\n    type: 'object',\n    required: false,\n    items: {\n      type: 'object',\n      properties: {\n        metavalue: {\n          type: 'json',\n          description: 'A JSON string containing metadata options',\n          example: '{\"sidebarEnabled\": true}',\n        },\n      },\n    },\n  })\n  @IsOptional()\n  @ValidateNested({ each: true })\n  @Type(() => CreatePostMetaOptionsDto)\n  // Type decorator\n  // Matches the incoming req to the dto\n  // Creates an instance of the dto\n  // All the properties are validated against the dto\n  metaOptions?: CreatePostMetaOptionsDto | null;\n\n  /**\n   * The ID of the author creating the post.\n   */\n  @ApiProperty({\n    type: 'integer',\n    required: true,\n    description: 'The ID of the author creating the post',\n    example: 1,\n  })\n  @IsNotEmpty()\n  @IsInt()\n  authorId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostMetaOptionsDto.html":{"url":"classes/CreatePostMetaOptionsDto.html","title":"class - CreatePostMetaOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostMetaOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/dtos/create-post-meta-options.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for creating metadata options for a post.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                metaValue\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/dtos/create-post-meta-options.dto.ts:14\n                        \n                    \n\n            \n                \n                    The meta value as a JSON string.\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsJSON, IsNotEmpty, IsString } from 'class-validator';\n\n/**\n * DTO for creating metadata options for a post.\n */\nexport class CreatePostMetaOptionsDto {\n  /**\n   * The meta value as a JSON string.\n   *\n   * @example '{\"sidebarEnabled\": true}'\n   */\n  @IsNotEmpty()\n  @IsJSON()\n  metaValue: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTagDto.html":{"url":"classes/CreateTagDto.html","title":"class - CreateTagDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTagDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/dtos/create-tag.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object (DTO) for creating a new tag.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                featuredImage\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'A brief description of the tag', example: 'Posts related to technology and innovations'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:61\n                        \n                    \n\n            \n                \n                    A brief description of the tag.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        featuredImage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'URL of the featured image for the tag', example: 'https://example.com/images/tag-image.jpg'})@IsOptional()@IsUrl()@MaxLength(1024)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:88\n                        \n                    \n\n            \n                \n                    URL of the featured image for the tag.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The name of the tag', example: 'Technology'})@IsString()@MinLength(3)@IsNotEmpty()@MaxLength(256)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:30\n                        \n                    \n\n            \n                \n                    The name of the tag.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'JSON metadata associated with the tag', example: '{\"color\": \"blue\"}'})@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:74\n                        \n                    \n\n            \n                \n                    JSON metadata associated with the tag.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'A unique slug for the tag, used in URLs', example: 'technology'})@IsString()@IsNotEmpty()@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'A slug should be all lowercase letters and use only \"-\" as a separator. For example \"my-url\"'})@MaxLength(512)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:48\n                        \n                    \n\n            \n                \n                    The slug for the tag, used in URLs.\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\n/**\n * Data Transfer Object (DTO) for creating a new tag.\n */\nexport class CreateTagDto {\n  /**\n   * The name of the tag.\n   *\n   * @example \"Technology\"\n   */\n  @ApiProperty({\n    description: 'The name of the tag',\n    example: 'Technology',\n  })\n  @IsString()\n  @MinLength(3)\n  @IsNotEmpty()\n  @MaxLength(256)\n  name: string;\n\n  /**\n   * The slug for the tag, used in URLs.\n   *\n   * @example \"technology\"\n   */\n  @ApiProperty({\n    description: 'A unique slug for the tag, used in URLs',\n    example: 'technology',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'A slug should be all lowercase letters and use only \"-\" as a separator. For example \"my-url\"',\n  })\n  @MaxLength(512)\n  slug: string;\n\n  /**\n   * A brief description of the tag.\n   *\n   * @example \"Posts related to technology and innovations\"\n   */\n  @ApiPropertyOptional({\n    description: 'A brief description of the tag',\n    example: 'Posts related to technology and innovations',\n  })\n  @IsOptional()\n  @IsString()\n  description: string;\n\n  /**\n   * JSON metadata associated with the tag.\n   *\n   * @example '{\"color\": \"blue\"}'\n   */\n  @ApiPropertyOptional({\n    description: 'JSON metadata associated with the tag',\n    example: '{\"color\": \"blue\"}',\n  })\n  @IsOptional()\n  @IsJSON()\n  schema: string;\n\n  /**\n   * URL of the featured image for the tag.\n   *\n   * @example \"https://example.com/images/tag-image.jpg\"\n   */\n  @ApiPropertyOptional({\n    description: 'URL of the featured image for the tag',\n    example: 'https://example.com/images/tag-image.jpg',\n  })\n  @IsOptional()\n  @IsUrl()\n  @MaxLength(1024)\n  featuredImage: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO class for creating a new user.\nContains validation rules for the first name, last name, email, and password.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:45\n                        \n                    \n\n            \n                \n                    The email of the user.\nShould be a valid email address and cannot be empty.\nThe length should be no more than 96 characters.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:25\n                        \n                    \n\n            \n                \n                    The first name of the user.\nShould be a string and cannot be empty.\nThe length should be between 3 and 96 characters.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:35\n                        \n                    \n\n            \n                \n                    The last name of the user (optional).\nShould be a string with a length between 3 and 96 characters.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MaxLength(96)@MinLength(8)@Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,16}$/, {message: 'Minimum 8 chars, include at least one letter, one number, and one special character.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:59\n                        \n                    \n\n            \n                \n                    The password of the user.\nMust be a string, at least 8 characters long, and include at least one letter, one number, and one special character.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\n/**\n * DTO class for creating a new user.\n * Contains validation rules for the first name, last name, email, and password.\n */\nexport class CreateUserDto {\n  /**\n   * The first name of the user.\n   * Should be a string and cannot be empty.\n   * The length should be between 3 and 96 characters.\n   */\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(96)\n  firstName: string;\n\n  /**\n   * The last name of the user (optional).\n   * Should be a string with a length between 3 and 96 characters.\n   */\n  @IsString()\n  @IsOptional()\n  @MinLength(3)\n  @MaxLength(96)\n  lastName?: string;\n\n  /**\n   * The email of the user.\n   * Should be a valid email address and cannot be empty.\n   * The length should be no more than 96 characters.\n   */\n  @IsEmail()\n  @IsNotEmpty()\n  @MaxLength(96)\n  email: string;\n\n  /**\n   * The password of the user.\n   * Must be a string, at least 8 characters long, and include at least one letter, one number, and one special character.\n   */\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(96)\n  @MinLength(8)\n  @Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,16}$/, {\n    message:\n      'Minimum 8 chars, include at least one letter, one number, and one special character.',\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersParamDto.html":{"url":"classes/GetUsersParamDto.html","title":"class - GetUsersParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-users-param.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO class to handle user query parameters.\nThis class will be used to get a user by their specific ID.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Get user with a specific id', example: '1234'})@IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-users-param.dto.ts:23\n                        \n                    \n\n            \n                \n                    The ID of the user to retrieve.\nThis is an optional field.\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport { IsInt, IsOptional } from 'class-validator';\n\n/**\n * DTO class to handle user query parameters.\n * This class will be used to get a user by their specific ID.\n */\nexport class GetUsersParamDto {\n  /**\n   * The ID of the user to retrieve.\n   * This is an optional field.\n   *\n   * @example '1234'\n   */\n  @ApiPropertyOptional({\n    description: 'Get user with a specific id',\n    example: '1234',\n  })\n  @IsOptional()\n  @IsInt()\n  @Type(() => Number)\n  id?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/MetaOption.html":{"url":"entities/MetaOption.html","title":"entity - MetaOption","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  MetaOption\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-option.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the MetaOption entity, storing metadata for posts.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createDate\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                metaValue\n                            \n                            \n                                    \n                                    \n                                post\n                            \n                            \n                                    \n                                updateDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:37\n                        \n                    \n\n            \n                \n                    Timestamp indicating when the record was created.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:21\n                        \n                    \n\n            \n                \n                    Unique identifier for the MetaOption.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'json', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:31\n                        \n                    \n\n            \n                \n                    Metadata value stored in JSON format.\nNote: JSON storage is not available in MySQL.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        post\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, post => post.metaOptions, {onDelete: 'CASCADE'})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:53\n                        \n                    \n\n            \n                \n                    Associated post entity (One-to-One relationship).\nIf the post is deleted, the metaOption is also deleted (CASCADE).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:43\n                        \n                    \n\n            \n                \n                    Timestamp indicating when the record was last updated.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Post } from 'src/posts/post.entity';\nimport {\n  Column,\n  CreateDateColumn,\n  Entity,\n  JoinColumn,\n  OneToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n/**\n * Represents the MetaOption entity, storing metadata for posts.\n */\n@Entity()\nexport class MetaOption {\n  /**\n   * Unique identifier for the MetaOption.\n   */\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  /**\n   * Metadata value stored in JSON format.\n   * Note: JSON storage is not available in MySQL.\n   */\n  @Column({\n    type: 'json',\n    nullable: false,\n  })\n  metaValue: string;\n\n  /**\n   * Timestamp indicating when the record was created.\n   */\n  @CreateDateColumn()\n  createDate: Date;\n\n  /**\n   * Timestamp indicating when the record was last updated.\n   */\n  @UpdateDateColumn()\n  updateDate: Date;\n\n  /**\n   * Associated post entity (One-to-One relationship).\n   * If the post is deleted, the metaOption is also deleted (`CASCADE`).\n   */\n  @OneToOne(() => Post, (post) => post.metaOptions, {\n    onDelete: 'CASCADE',\n  })\n  @JoinColumn()\n  post: Post;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MetaOptionsController.html":{"url":"controllers/MetaOptionsController.html","title":"controller - MetaOptionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MetaOptionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-options.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                meta-options\n            \n\n\n            \n                Description\n            \n            \n                Controller for managing post metadata options.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createMetaOption\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createMetaOption\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMetaOption(createPostMetaOptionDto: CreatePostMetaOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/meta-options/meta-options.controller.ts:22\n                        \n                    \n\n\n            \n                \n                        Creates a new meta option for a post.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createPostMetaOptionDto\n                                            \n                                                            CreatePostMetaOptionsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    DTO containing metadata information.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The created meta option.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { CreatePostMetaOptionsDto } from './dtos/create-post-meta-options.dto';\nimport { MetaOptionsService } from './providers/meta-options.service';\n\n/**\n * Controller for managing post metadata options.\n */\n@Controller('meta-options')\nexport class MetaOptionsController {\n  /**\n   * Injects the MetaOptionsService.\n   * @param metaOptionsService The service responsible for metadata operations.\n   */\n  constructor(private readonly metaOptionsService: MetaOptionsService) {}\n\n  /**\n   * Creates a new meta option for a post.\n   * @param createPostMetaOptionDto DTO containing metadata information.\n   * @returns The created meta option.\n   */\n  @Post()\n  public createMetaOption(\n    @Body() createPostMetaOptionDto: CreatePostMetaOptionsDto,\n  ) {\n    return this.metaOptionsService.create(createPostMetaOptionDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MetaOptionsModule.html":{"url":"modules/MetaOptionsModule.html","title":"module - MetaOptionsModule","body":"\n                   \n\n\n\n\n    Modules\n    MetaOptionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/meta-options/meta-options.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Module for managing metadata options related to posts.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MetaOptionsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MetaOptionsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MetaOptionsController } from './meta-options.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { MetaOption } from './meta-option.entity';\nimport { MetaOptionsService } from './providers/meta-options.service';\n\n/**\n * Module for managing metadata options related to posts.\n */\n@Module({\n  /**\n   * Registers controllers for handling metadata-related routes.\n   */\n  controllers: [MetaOptionsController],\n\n  /**\n   * Imports TypeORM module and registers the MetaOption entity.\n   */\n  imports: [TypeOrmModule.forFeature([MetaOption])],\n\n  /**\n   * Provides the MetaOptionsService for handling business logic.\n   */\n  providers: [MetaOptionsService],\n})\nexport class MetaOptionsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MetaOptionsService.html":{"url":"injectables/MetaOptionsService.html","title":"injectable - MetaOptionsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MetaOptionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/providers/meta-options.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for managing MetaOptions.\nProvides methods to create and save meta options.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(metaOptionRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/meta-options/providers/meta-options.service.ts:12\n                            \n                        \n\n                \n                    \n                            Inject the repository for MetaOption entity.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        metaOptionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Repository for interacting with MetaOption entity.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createMetaOptionDto: CreatePostMetaOptionsDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/meta-options/providers/meta-options.service.ts:27\n                        \n                    \n\n\n            \n                \n                        Create a new MetaOption based on the provided data transfer object (DTO).\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createMetaOptionDto\n                                            \n                                                            CreatePostMetaOptionsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Data transfer object containing meta option details.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                A promise that resolves to the saved MetaOption entity.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { MetaOption } from '../meta-option.entity';\nimport { Repository } from 'typeorm';\nimport { CreatePostMetaOptionsDto } from '../dtos/create-post-meta-options.dto';\n\n/**\n * Service for managing MetaOptions.\n * Provides methods to create and save meta options.\n */\n@Injectable()\nexport class MetaOptionsService {\n  /**\n   * Inject the repository for MetaOption entity.\n   * @param metaOptionRepository Repository for interacting with MetaOption entity.\n   */\n  constructor(\n    @InjectRepository(MetaOption)\n    private metaOptionRepository: Repository,\n  ) {}\n\n  /**\n   * Create a new MetaOption based on the provided data transfer object (DTO).\n   * @param createMetaOptionDto Data transfer object containing meta option details.\n   * @returns A promise that resolves to the saved MetaOption entity.\n   */\n  public async create(createMetaOptionDto: CreatePostMetaOptionsDto) {\n    const metaOption = this.metaOptionRepository.create(createMetaOptionDto);\n    return await this.metaOptionRepository.save(metaOption);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchPostDto.html":{"url":"classes/PatchPostDto.html","title":"class - PatchPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dto/patch-post.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for updating an existing post.\nExtends CreatePostDto, making all fields optional except id.\n\n            \n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The ID of the post that needs to be updated', example: 1})@IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/patch-post.dto.ts:19\n                        \n                    \n\n            \n                \n                    The ID of the post to be updated.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsInt, IsNotEmpty } from 'class-validator';\nimport { CreatePostDto } from './create-post.dto';\n\n/**\n * DTO for updating an existing post.\n * Extends `CreatePostDto`, making all fields optional except `id`.\n */\nexport class PatchPostDto extends PartialType(CreatePostDto) {\n  /**\n   * The ID of the post to be updated.\n   */\n  @ApiProperty({\n    description: 'The ID of the post that needs to be updated',\n    example: 1,\n  })\n  @IsInt()\n  @IsNotEmpty()\n  id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/patch-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for updating a user partially.\nExtends CreateUserDto, making all its properties optional.\n\n            \n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\n/**\n * DTO for updating a user partially.\n *\n * Extends `CreateUserDto`, making all its properties optional.\n */\nexport class PatchUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Post.html":{"url":"entities/Post.html","title":"entity - Post","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/post.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a blog post entity.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                author\n                            \n                            \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                postType\n                            \n                            \n                                    \n                                    Optional\n                                publishOn\n                            \n                            \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.posts, {eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:106\n                        \n                    \n\n            \n                \n                    Author of the post (many-to-one relationship with User).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:66\n                        \n                    \n\n            \n                \n                    Main content of the post (large string)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:78\n                        \n                    \n\n            \n                \n                    URL of the featured image.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:26\n                        \n                    \n\n            \n                \n                    Unique identifier for the post.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MetaOption\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, metaOptions => metaOptions.post, {cascade: true, eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:100\n                        \n                    \n\n            \n                \n                    Meta options associated with the post (one-to-one relationship bidirectional).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: PostType, default: undefined, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:43\n                        \n                    \n\n            \n                \n                    Type of the post (e.g., post, page, story, series.).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:84\n                        \n                    \n\n            \n                \n                    Date and time when the post is published.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:72\n                        \n                    \n\n            \n                \n                    JSON schema for structured data.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:49\n                        \n                    \n\n            \n                \n                    URL-friendly identifier for the post.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: PostStatus, default: undefined, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:60\n                        \n                    \n\n            \n                \n                    Status of the post (draft, published, etc.).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Tag[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, tag => tag.posts, {eager: true})@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:91\n                        \n                    \n\n            \n                \n                    Tags associated with the post (many-to-many relationship).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 512, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:32\n                        \n                    \n\n            \n                \n                    Title of the post.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  Entity,\n  JoinColumn,\n  JoinTable,\n  ManyToMany,\n  ManyToOne,\n  OneToOne,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport { PostType } from './enums/post-type.enum';\nimport { PostStatus } from './enums/post-status.enum';\nimport { MetaOption } from 'src/meta-options/meta-option.entity';\nimport { User } from 'src/users/user.entity';\nimport { Tag } from 'src/tags/tag.entity';\n\n/**\n * Represents a blog post entity.\n */\n@Entity()\nexport class Post {\n  /**\n   * Unique identifier for the post.\n   */\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  /**\n   * Title of the post.\n   */\n  @Column({ type: 'varchar', length: 512, nullable: false })\n  title: string;\n\n  /**\n   * Type of the post (e.g., post, page, story, series.).\n   */\n  @Column({\n    type: 'enum',\n    enum: PostType,\n    default: PostType.POST,\n    nullable: false,\n  })\n  postType: PostType;\n\n  /**\n   * URL-friendly identifier for the post.\n   */\n  @Column({ type: 'varchar', length: 256, nullable: false, unique: true })\n  slug: string;\n\n  /**\n   * Status of the post (draft, published, etc.).\n   */\n  @Column({\n    type: 'enum',\n    enum: PostStatus,\n    default: PostStatus.DRAFT,\n    nullable: false,\n  })\n  status: PostStatus;\n\n  /**\n   * Main content of the post (large string)\n   */\n  @Column({ type: 'text', nullable: true })\n  content?: string;\n\n  /**\n   * JSON schema for structured data.\n   */\n  @Column({ type: 'text', nullable: true })\n  schema?: string;\n\n  /**\n   * URL of the featured image.\n   */\n  @Column({ type: 'varchar', length: 1024, nullable: true })\n  featuredImageUrl?: string;\n\n  /**\n   * Date and time when the post is published.\n   */\n  @Column({ type: 'timestamp', nullable: true })\n  publishOn?: Date;\n\n  /**\n   * Tags associated with the post (many-to-many relationship).\n   */\n  @ManyToMany(() => Tag, (tag) => tag.posts, { eager: true })\n  @JoinTable()\n  tags?: Tag[];\n\n  /**\n   * Meta options associated with the post (one-to-one relationship bidirectional).\n   */\n  @OneToOne(() => MetaOption, (metaOptions) => metaOptions.post, {\n    cascade: true,\n    eager: true, // Will fetch posts AND metaOptions when getting posts\n  })\n  metaOptions?: MetaOption;\n\n  /**\n   * Author of the post (many-to-one relationship with User).\n   */\n  @ManyToOne(() => User, (user) => user.posts, { eager: true })\n  author: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n            \n                Description\n            \n            \n                Controller for managing posts.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                createPost\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                delete\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getPosts\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Creates a new blog post'})@ApiResponse({status: 201, description: 'Post created successfully'})@ApiResponse({status: 400, description: 'Invalid request data'})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:61\n                        \n                    \n\n\n            \n                \n                        Creates a new blog post.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data for the new post.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The created post.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Deletes a post by ID'})@ApiQuery({name: 'id', required: true, type: Number, description: 'Post ID to delete'})@ApiResponse({status: 200, description: 'Post deleted successfully'})@ApiResponse({status: 404, description: 'Post not found'})@Delete()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:94\n                        \n                    \n\n\n            \n                \n                        Deletes a post by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the post to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A success message.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                        getPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPosts(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:userId?')@ApiOperation({summary: 'Retrieves all posts for a specific user'})@ApiParam({name: 'userId', required: false, description: 'User ID (optional)'})@ApiResponse({status: 200, description: 'Returns the list of posts'})\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:48\n                        \n                    \n\n\n            \n                \n                        Retrieves all posts for a specific user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user (optional).\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A list of posts.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(patchPostDto: PatchPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Updates an existing blog post'})@ApiResponse({status: 201, description: 'Post updated successfully'})@ApiResponse({status: 404, description: 'Post not found'})@Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:74\n                        \n                    \n\n\n            \n                \n                        Updates an existing blog post.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                patchPostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe updated post data.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The updated post.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Query,\n} from '@nestjs/common';\nimport { PostsService } from './providers/posts.service';\nimport {\n  ApiOperation,\n  ApiResponse,\n  ApiTags,\n  ApiParam,\n  ApiQuery,\n} from '@nestjs/swagger';\nimport { CreatePostDto } from './dto/create-post.dto';\nimport { PatchPostDto } from './dto/patch-post.dto';\n\n/**\n * Controller for managing posts.\n */\n@Controller('posts')\n@ApiTags('Posts')\nexport class PostsController {\n  /**\n   * Creates an instance of PostsController.\n   * @param postsService - The posts service.\n   */\n  constructor(private readonly postsService: PostsService) {}\n\n  /**\n   * Retrieves all posts for a specific user.\n   * @param userId - The ID of the user (optional).\n   * @returns A list of posts.\n   */\n  @Get('/:userId?')\n  @ApiOperation({ summary: 'Retrieves all posts for a specific user' })\n  @ApiParam({\n    name: 'userId',\n    required: false,\n    description: 'User ID (optional)',\n  })\n  @ApiResponse({ status: 200, description: 'Returns the list of posts' })\n  public getPosts(@Param('userId') userId: string) {\n    return this.postsService.findAll(userId);\n  }\n\n  /**\n   * Creates a new blog post.\n   * @param createPostDto - The data for the new post.\n   * @returns The created post.\n   */\n  @ApiOperation({ summary: 'Creates a new blog post' })\n  @ApiResponse({ status: 201, description: 'Post created successfully' })\n  @ApiResponse({ status: 400, description: 'Invalid request data' })\n  @Post()\n  public createPost(@Body() createPostDto: CreatePostDto) {\n    return this.postsService.create(createPostDto);\n  }\n\n  /**\n   * Updates an existing blog post.\n   * @param patchPostDto - The updated post data.\n   * @returns The updated post.\n   */\n  @ApiOperation({ summary: 'Updates an existing blog post' })\n  @ApiResponse({ status: 201, description: 'Post updated successfully' })\n  @ApiResponse({ status: 404, description: 'Post not found' })\n  @Patch()\n  public updatePost(@Body() patchPostDto: PatchPostDto) {\n    return this.postsService.update(patchPostDto);\n  }\n\n  /**\n   * Deletes a post by its ID.\n   * @param id - The ID of the post to delete.\n   * @returns A success message.\n   */\n  @ApiOperation({ summary: 'Deletes a post by ID' })\n  @ApiQuery({\n    name: 'id',\n    required: true,\n    type: Number,\n    description: 'Post ID to delete',\n  })\n  @ApiResponse({ status: 200, description: 'Post deleted successfully' })\n  @ApiResponse({ status: 404, description: 'Post not found' })\n  // This method cascades and removes relevant relationships between posts and tags NOT the actual tags\n  @Delete()\n  public delete(@Query('id', ParseIntPipe) id: number) {\n    return this.postsService.delete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_PostsModule_imports\n\n\n\n\nTagsModule\n\nTagsModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nTagsModule->PostsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            TagsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsController } from './posts.controller';\nimport { PostsService } from './providers/posts.service';\nimport { UsersModule } from 'src/users/users.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Post } from './post.entity';\nimport { MetaOption } from 'src/meta-options/meta-option.entity';\nimport { TagsModule } from 'src/tags/tags.module';\n\n// Import entire module not only a service (view users module exports key)\n@Module({\n  controllers: [PostsController],\n  providers: [PostsService],\n  imports: [\n    UsersModule,\n    TagsModule,\n    TypeOrmModule.forFeature([Post, MetaOption]),\n  ], // Import the post entity, for feature is responsible to create tables corresponding to these entities inside the db\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/providers/posts.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service responsible for handling post-related operations.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, postsRepository: Repository, metaOptionsRepository: Repository, tagsService: TagsService)\n                    \n                \n                        \n                            \n                                Defined in src/posts/providers/posts.service.ts:21\n                            \n                        \n\n                \n                    \n                            Constructor to inject dependencies.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service to handle user-related operations.\n\n                                                        \n                                                \n                                                \n                                                        postsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Repository for managing Post entities.\n\n                                                        \n                                                \n                                                \n                                                        metaOptionsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Repository for managing MetaOption entities.\n\n                                                        \n                                                \n                                                \n                                                        tagsService\n                                                  \n                                                        \n                                                                        TagsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service for handling tag-related operations.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createPostDto: CreatePostDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:64\n                        \n                    \n\n\n            \n                \n                        Creates a new post.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    DTO containing post creation details.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The newly created post.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:177\n                        \n                    \n\n\n            \n                \n                        Deletes a post from the database.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the post to delete.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                An object indicating the deletion status.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:46\n                        \n                    \n\n\n            \n                \n                        Retrieves all posts along with their meta options.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the user requesting the posts.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                A list of posts with related meta options.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(patchPostDto: PatchPostDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:122\n                        \n                    \n\n\n            \n                \n                        Updates an existing post.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                patchPostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    DTO containing fields to update.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The updated post.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Body,\n  Injectable,\n  NotFoundException,\n  RequestTimeoutException,\n} from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users.service';\nimport { CreatePostDto } from '../dto/create-post.dto';\nimport { Repository } from 'typeorm';\nimport { Post } from '../post.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { MetaOption } from 'src/meta-options/meta-option.entity';\nimport { TagsService } from 'src/tags/providers/tags.service';\nimport { PatchPostDto } from '../dto/patch-post.dto';\n\n/**\n * Service responsible for handling post-related operations.\n */\n@Injectable()\nexport class PostsService {\n  /**\n   * Constructor to inject dependencies.\n   * @param usersService Service to handle user-related operations.\n   * @param postsRepository Repository for managing Post entities.\n   * @param metaOptionsRepository Repository for managing MetaOption entities.\n   * @param tagsService Service for handling tag-related operations.\n   */\n  constructor(\n    private readonly usersService: UsersService,\n\n    @InjectRepository(Post)\n    private readonly postsRepository: Repository, // Only add repositories for 1-1 relationships so that it doesnt become crowded\n\n    @InjectRepository(MetaOption)\n    private readonly metaOptionsRepository: Repository,\n\n    private readonly tagsService: TagsService,\n  ) {}\n\n  /**\n   * Retrieves all posts along with their meta options.\n   * @param userId The ID of the user requesting the posts.\n   * @returns A list of posts with related meta options.\n   */\n  public async findAll(userId: string) {\n    return await this.postsRepository.find({\n      relations: { metaOptions: true },\n    });\n\n    // Get meta options along with the posts\n    // return await this.postsRepository.find({\n    //   relations: {\n    //     metaOptions: true,\n    //   },\n    // });\n  }\n\n  /**\n   * Creates a new post.\n   * @param createPostDto DTO containing post creation details.\n   * @returns The newly created post.\n   */\n  public async create(@Body() createPostDto: CreatePostDto) {\n    const author = await this.usersService.findOneById(createPostDto.authorId);\n    const tags = await this.tagsService.findMultipleTags(createPostDto.tags);\n\n    // Use the spread operator to create a shallow copy of createPostDto, meaning a new object is passed to create()\n    const post = this.postsRepository.create({\n      ...createPostDto,\n      author,\n      tags,\n    }); // Only use await for the save method because it returns a promise\n\n    return await this.postsRepository.save(post);\n  }\n\n  /*\n   public async delete(id: number) {\n    // Start a transaction to handle both deletes atomically\n    const queryRunner =\n      this.postsRepository.manager.connection.createQueryRunner();\n    await queryRunner.startTransaction();\n\n    try {\n      // Find the post (with related metaOptions loaded)\n      const post = await this.postsRepository.findOne({\n        where: { id },\n        relations: ['metaOptions'],\n      });\n      if (!post) {\n        throw new Error('Post not found');\n      }\n\n      // Delete the post (cascade will handle the metaOption deletion automatically)\n      await queryRunner.manager.delete(Post, id); // Use delete instead of remove\n\n      // Commit the transaction if everything is successful\n      await queryRunner.commitTransaction();\n\n      // Return a success response\n      return { deleted: true, id };\n    } catch (error) {\n      // If any error occurs, rollback the transaction\n      await queryRunner.rollbackTransaction();\n\n      // Log the error and return a failure response\n      console.error(error);\n      return { deleted: false, message: error.message };\n    } finally {\n      // Release the query runner (important for clean-up)\n      await queryRunner.release();\n    }\n  }\n*/\n\n  /**\n   * Updates an existing post.\n   * @param patchPostDto DTO containing fields to update.\n   * @returns The updated post.\n   */\n  public async update(@Body() patchPostDto: PatchPostDto) {\n    let tags = undefined;\n    let post = undefined;\n\n    try {\n      tags = await this.tagsService.findMultipleTags(patchPostDto.tags);\n    } catch (error) {\n      throw new RequestTimeoutException(\n        'Unable to process your request at the moment. Please try later',\n      );\n    }\n\n    /**\n     * Number of tags need to be equal\n     */\n\n    if (!tags || tags.length !== patchPostDto.tags.length) {\n      throw new BadRequestException('Please check your tag IDs.');\n    }\n    try {\n      post = await this.postsRepository.findOneBy({ id: patchPostDto.id });\n    } catch (error) {\n      throw new RequestTimeoutException(\n        'Unable to process your request at the moment. Please try later',\n      );\n    }\n    if (!post) {\n      throw new NotFoundException(\"This post doesn't exist.\");\n    }\n\n    post.title = patchPostDto.title ?? post.title;\n    post.content = patchPostDto.content ?? post.content;\n    post.status = patchPostDto.status ?? post.status;\n    post.postType = patchPostDto.postType ?? post.postType;\n    post.slug = patchPostDto.slug ?? post.slug;\n    post.featuredImageUrl =\n      patchPostDto.featuredImageUrl ?? post.featuredImageUrl;\n    post.publishOn = patchPostDto.publishOn ?? post.publishOn;\n    post.tags = tags;\n\n    try {\n      await this.postsRepository.save(post);\n    } catch (error) {\n      throw new RequestTimeoutException(\n        'Unable to process your request at the moment. Please try later',\n      );\n    }\n    return post;\n  }\n\n  /**\n   * Deletes a post from the database.\n   * @param id The ID of the post to delete.\n   * @returns An object indicating the deletion status.\n   */\n  public async delete(id: number) {\n    await this.postsRepository.delete(id);\n    return { deleted: true, id };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Tag.html":{"url":"entities/Tag.html","title":"entity - Tag","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Tag\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tag.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity representing a tag.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createDate\n                            \n                            \n                                    \n                                deletedAt\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                featuredImage\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                posts\n                            \n                            \n                                    \n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                updateDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:91\n                        \n                    \n\n            \n                \n                    Timestamp indicating when the tag was created.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:103\n                        \n                    \n\n            \n                \n                    Timestamp indicating when the tag was soft deleted.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:55\n                        \n                    \n\n            \n                \n                    Optional description of the tag.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        featuredImage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:76\n                        \n                    \n\n            \n                \n                    URL of the featured image for the tag.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:21\n                        \n                    \n\n            \n                \n                    Unique identifier for the tag.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:33\n                        \n                    \n\n            \n                \n                    Name of the tag.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, post => post.tags, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:84\n                        \n                    \n\n            \n                \n                    Many-to-many relationship with posts.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:65\n                        \n                    \n\n            \n                \n                    JSON metadata schema for additional tag details.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 512, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:45\n                        \n                    \n\n            \n                \n                    URL-friendly slug for the tag.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:97\n                        \n                    \n\n            \n                \n                    Timestamp indicating when the tag was last updated.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Post } from 'src/posts/post.entity';\nimport {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  ManyToMany,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n/**\n * Entity representing a tag.\n */\n@Entity()\nexport class Tag {\n  /**\n   * Unique identifier for the tag.\n   */\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  /**\n   * Name of the tag.\n   * @example \"Technology\"\n   */\n  @Column({\n    type: 'varchar',\n    length: 256,\n    nullable: false,\n    unique: true,\n  })\n  name: string;\n\n  /**\n   * URL-friendly slug for the tag.\n   * @example \"technology\"\n   */\n  @Column({\n    type: 'varchar',\n    length: 512,\n    nullable: false,\n    unique: true,\n  })\n  slug: string;\n\n  /**\n   * Optional description of the tag.\n   * @example \"Posts related to technology and innovations\"\n   */\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  description: string;\n\n  /**\n   * JSON metadata schema for additional tag details.\n   * @example '{\"color\": \"blue\"}'\n   */\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  schema: string;\n\n  /**\n   * URL of the featured image for the tag.\n   * @example \"https://example.com/images/tag-image.jpg\"\n   */\n  @Column({\n    type: 'varchar',\n    length: 1024,\n    nullable: true,\n  })\n  featuredImage: string;\n\n  /**\n   * Many-to-many relationship with posts.\n   */\n  @ManyToMany(() => Post, (post) => post.tags, {\n    onDelete: 'CASCADE',\n  })\n  posts: Post[];\n\n  // https://orkhan.gitbook.io/typeorm/docs/decorator-reference\n  /**\n   * Timestamp indicating when the tag was created.\n   */\n  @CreateDateColumn()\n  createDate: Date;\n\n  /**\n   * Timestamp indicating when the tag was last updated.\n   */\n  @UpdateDateColumn()\n  updateDate: Date;\n\n  /**\n   * Timestamp indicating when the tag was soft deleted.\n   */\n  @DeleteDateColumn()\n  deletedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TagsController.html":{"url":"controllers/TagsController.html","title":"controller - TagsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TagsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tags.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tags\n            \n\n\n            \n                Description\n            \n            \n                Controller for handling tag-related API requests.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                create\n                            \n                            \n                                    \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    \n                                    Public\n                                    Async\n                                softDelete\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createTagDto: CreateTagDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:29\n                        \n                    \n\n\n            \n                \n                        Creates a new tag.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createTagDto\n                                            \n                                                            CreateTagDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    DTO containing tag data.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The created tag.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete()\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:39\n                        \n                    \n\n\n            \n                \n                        Deletes a tag by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the tag to delete.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                An object indicating whether the deletion was successful.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Async\n                        softDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    softDelete(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('soft-delete')\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:49\n                        \n                    \n\n\n            \n                \n                        Soft deletes a tag by its ID, marking it as deleted without removing it from the database.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the tag to soft delete.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                An object indicating whether the soft deletion was successful.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  ParseIntPipe,\n  Post,\n  Query,\n} from '@nestjs/common';\nimport { TagsService } from './providers/tags.service';\nimport { CreateTagDto } from './dtos/create-tag.dto';\n\n/**\n * Controller for handling tag-related API requests.\n */\n@Controller('tags')\nexport class TagsController {\n  /**\n   * Injects the TagsService.\n   * @param tagsService The service responsible for tag operations.\n   */\n  constructor(private readonly tagsService: TagsService) {}\n\n  /**\n   * Creates a new tag.\n   * @param createTagDto DTO containing tag data.\n   * @returns The created tag.\n   */\n  @Post()\n  public create(@Body() createTagDto: CreateTagDto) {\n    return this.tagsService.create(createTagDto);\n  }\n\n  /**\n   * Deletes a tag by its ID.\n   * @param id The ID of the tag to delete.\n   * @returns An object indicating whether the deletion was successful.\n   */\n  @Delete()\n  public async delete(@Query('id', ParseIntPipe) id: number) {\n    return this.tagsService.delete(id);\n  }\n\n  /**\n   * Soft deletes a tag by its ID, marking it as deleted without removing it from the database.\n   * @param id The ID of the tag to soft delete.\n   * @returns An object indicating whether the soft deletion was successful.\n   */\n  @Delete('soft-delete')\n  public async softDelete(@Query('id', ParseIntPipe) id: number) {\n    // Route is /tags/soft-delete\n    return this.tagsService.softRemove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TagsModule.html":{"url":"modules/TagsModule.html","title":"module - TagsModule","body":"\n                   \n\n\n\n\n    Modules\n    TagsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_exports\n\n\n\ncluster_TagsModule_providers\n\n\n\n\nTagsService \n\nTagsService \n\n\n\nTagsModule\n\nTagsModule\n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tags/tags.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TagsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TagsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TagsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TagsController } from './tags.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Tag } from './tag.entity';\nimport { TagsService } from './providers/tags.service';\n\n@Module({\n  controllers: [TagsController],\n  imports: [TypeOrmModule.forFeature([Tag])],\n  providers: [TagsService],\n  exports: [TagsService],\n})\nexport class TagsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TagsService.html":{"url":"injectables/TagsService.html","title":"injectable - TagsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TagsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/providers/tags.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for handling tag-related operations.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                findMultipleTags\n                            \n                            \n                                    Public\n                                    Async\n                                softRemove\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tagsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/tags/providers/tags.service.ts:13\n                            \n                        \n\n                \n                    \n                            Injects the repository for interacting with the Tag entity.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        tagsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The TypeORM repository for the Tag entity.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createTagDto: CreateTagDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:28\n                        \n                    \n\n\n            \n                \n                        Creates a new tag.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createTagDto\n                                            \n                                                            CreateTagDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Data Transfer Object (DTO) containing tag details.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The created tag.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:53\n                        \n                    \n\n\n            \n                \n                        Deletes a tag by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the tag to delete.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                An object indicating whether the deletion was successful.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findMultipleTags\n                        \n                    \n                \n            \n            \n                \n                        \n                    findMultipleTags(tags: number[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:38\n                        \n                    \n\n\n            \n                \n                        Finds multiple tags based on an array of tag IDs.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tags\n                                            \n                                                        number[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    An array of tag IDs.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                A list of found tags.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        softRemove\n                        \n                    \n                \n            \n            \n                \n                        \n                    softRemove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:74\n                        \n                    \n\n\n            \n                \n                        Soft deletes a tag by its ID, marking it as deleted without removing it from the database.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the tag to soft delete.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                An object indicating whether the soft deletion was successful.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateTagDto } from '../dtos/create-tag.dto';\nimport { In, Repository } from 'typeorm';\nimport { Tag } from '../tag.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n//npx nest generate service tags/providers/tags --flat --no-spec\n\n/**\n * Service for handling tag-related operations.\n */\n@Injectable()\nexport class TagsService {\n  /**\n   * Injects the repository for interacting with the `Tag` entity.\n   * @param tagsRepository The TypeORM repository for the `Tag` entity.\n   */\n  constructor(\n    @InjectRepository(Tag)\n    private readonly tagsRepository: Repository,\n  ) {}\n\n  /**\n   * Creates a new tag.\n   * @param createTagDto Data Transfer Object (DTO) containing tag details.\n   * @returns The created tag.\n   */\n  public async create(createTagDto: CreateTagDto) {\n    const tag = this.tagsRepository.create(createTagDto);\n    return await this.tagsRepository.save(tag);\n  }\n\n  /**\n   * Finds multiple tags based on an array of tag IDs.\n   * @param tags An array of tag IDs.\n   * @returns A list of found tags.\n   */\n  public async findMultipleTags(tags: number[]) {\n    const results = await this.tagsRepository.find({\n      where: {\n        id: In(tags), // Finds all the tags with IDs within this array.\n      },\n    });\n\n    return results;\n  }\n\n  /**\n   * Deletes a tag by its ID.\n   * @param id The ID of the tag to delete.\n   * @returns An object indicating whether the deletion was successful.\n   */\n  public async delete(id: number) {\n    // Check if the tag exists before deleting\n    const tag = await this.tagsRepository.findOne({\n      where: { id },\n    });\n\n    if (!tag) {\n      return { deleted: false, message: 'Tag not found' };\n    }\n\n    // Proceed with deletion\n    await this.tagsRepository.delete(id);\n\n    return { deleted: true, id };\n  }\n\n  /**\n   * Soft deletes a tag by its ID, marking it as deleted without removing it from the database.\n   * @param id The ID of the tag to soft delete.\n   * @returns An object indicating whether the soft deletion was successful.\n   */\n  public async softRemove(id: number) {\n    await this.tagsRepository.softDelete(id);\n    return { deleted: true, id };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a user entity in the database.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                posts\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:46\n                        \n                    \n\n            \n                \n                    The email address of the user.\nMust be unique.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:23\n                        \n                    \n\n            \n                \n                    The first name of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:13\n                        \n                    \n\n            \n                \n                    Unique identifier for the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:34\n                        \n                    \n\n            \n                \n                    The last name of the user.\nThis field is optional.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:56\n                        \n                    \n\n            \n                \n                    The password of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, post => post.author)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:62\n                        \n                    \n\n            \n                \n                    The list of posts authored by the user.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Post } from 'src/posts/post.entity';\nimport { Column, Entity, OneToMany, PrimaryGeneratedColumn } from 'typeorm';\n\n/**\n * Represents a user entity in the database.\n */\n@Entity()\nexport class User {\n  /**\n   * Unique identifier for the user.\n   */\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  /**\n   * The first name of the user.\n   */\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n  })\n  firstName: string;\n\n  /**\n   * The last name of the user.\n   * This field is optional.\n   */\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: true,\n  })\n  lastName: string;\n\n  /**\n   * The email address of the user.\n   * Must be unique.\n   */\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n    unique: true,\n  })\n  email: string;\n\n  /**\n   * The password of the user.\n   */\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n  })\n  password: string;\n\n  /**\n   * The list of posts authored by the user.\n   */\n  @OneToMany(() => Post, (post) => post.author)\n  posts: Post[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n            \n                Description\n            \n            \n                Controller for handling user-related requests.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createManyUsers\n                            \n                            \n                                    \n                                    Public\n                                createUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUserById\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUsers\n                            \n                            \n                                    \n                                    Public\n                                patchUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createManyUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createManyUsers(createManyUsersDto: CreateManyUsersDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('create-many')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:107\n                        \n                    \n\n\n            \n                \n                        Creates multiple users.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createManyUsersDto\n                                            \n                                                            CreateManyUsersDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data to create multiple users.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The created users.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:91\n                        \n                    \n\n\n            \n                \n                        Creates a new user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nData required to create a user.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The created user.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUserById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Fetch a single user by ID'})@ApiQuery({name: 'id', type: 'string', required: true, description: 'The ID of the user'})@ApiResponse({status: 200, description: 'User details retrieved successfully'})@ApiResponse({status: 404, description: 'User not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:49\n                        \n                    \n\n\n            \n                \n                        Retrieves a user by ID from query parameters (e.g., id=5).\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user to fetch.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The user details.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getUserParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id?')@ApiOperation({summary: 'Fetch all registered users with optional pagination'})@ApiResponse({status: 200, description: 'Users retrieved successfully'})@ApiQuery({name: 'limit', type: 'number', required: false, description: 'The number of entries returned per query', example: 10})@ApiQuery({name: 'page', type: 'number', required: false, example: 1})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:77\n                        \n                    \n\n\n            \n                \n                        Retrieves a list of users with pagination.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing filter parameters.\n\n\n                                            \n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nNumber of users per page.\n\n\n                                            \n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nPage number.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A list of users.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        patchUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchUser(patchUserDto: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:117\n                        \n                    \n\n\n            \n                \n                        Updates user information.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nData containing updates for the user.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PatchUserDto\n\n                        \n                            \n                                The updated user.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  Param,\n  Post,\n  Query,\n  ParseIntPipe,\n  DefaultValuePipe,\n  Patch,\n} from '@nestjs/common';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { GetUsersParamDto } from './dtos/get-users-param.dto';\nimport { PatchUserDto } from './dtos/patch-user.dto';\nimport { UsersService } from './providers/users.service';\nimport { ApiOperation, ApiQuery, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { CreateManyUsersDto } from './dtos/create-many-users.dto';\n\n/**\n * Controller for handling user-related requests.\n */\n@Controller('users')\n@ApiTags('Users')\nexport class UsersController {\n  /**\n   * Constructs the UsersController.\n   * @param usersService - The service handling user operations.\n   */\n  constructor(private readonly usersService: UsersService) {}\n\n  /**\n   * Retrieves a user by ID from query parameters (e.g., `id=5`).\n   * @param id - The ID of the user to fetch.\n   * @returns The user details.\n   */\n  @Get()\n  @ApiOperation({ summary: 'Fetch a single user by ID' })\n  @ApiQuery({\n    name: 'id',\n    type: 'string',\n    required: true,\n    description: 'The ID of the user',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'User details retrieved successfully',\n  })\n  @ApiResponse({ status: 404, description: 'User not found' })\n  public getUserById(@Query('id') id: string) {\n    const userId = parseInt(id, 10);\n    if (isNaN(userId)) {\n      return { error: 'Invalid ID format' };\n    }\n    return this.usersService.findOneById(userId);\n  }\n\n  /**\n   * Retrieves a list of users with pagination.\n   * @param getUserParamDto - DTO containing filter parameters.\n   * @param limit - Number of users per page.\n   * @param page - Page number.\n   * @returns A list of users.\n   */\n  @Get('/:id?')\n  @ApiOperation({\n    summary: 'Fetch all registered users with optional pagination',\n  })\n  @ApiResponse({ status: 200, description: 'Users retrieved successfully' })\n  @ApiQuery({\n    name: 'limit',\n    type: 'number',\n    required: false,\n    description: 'The number of entries returned per query',\n    example: 10,\n  })\n  @ApiQuery({ name: 'page', type: 'number', required: false, example: 1 })\n  public getUsers(\n    @Param() getUserParamDto: GetUsersParamDto,\n    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\n  ) {\n    return this.usersService.findAll(getUserParamDto, limit, page);\n  }\n\n  /**\n   * Creates a new user.\n   * @param createUserDto - Data required to create a user.\n   * @returns The created user.\n   */\n  @Post()\n  public createUser(\n    // Without the global validation\n    // @Body(new ValidationPipe()) createUserDto: CreateUserDto,\n\n    // With\n    @Body() createUserDto: CreateUserDto,\n  ) {\n    return this.usersService.createUser(createUserDto);\n  }\n\n  /**\n   * Creates multiple users.\n   * @param createManyUsersDto - The data to create multiple users.\n   * @returns The created users.\n   */\n  @Post('create-many')\n  public createManyUsers(@Body() createManyUsersDto: CreateManyUsersDto) {\n    return this.usersService.createMany(createManyUsersDto);\n  }\n\n  /**\n   * Updates user information.\n   * @param patchUserDto - Data containing updates for the user.\n   * @returns The updated user.\n   */\n  @Patch()\n  public patchUser(@Body() patchUserDto: PatchUserDto) {\n    return patchUserDto;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersCreateManyProvider.html":{"url":"injectables/UsersCreateManyProvider.html","title":"injectable - UsersCreateManyProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersCreateManyProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/users-create-many.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                Service responsible for handling bulk user creation.\nUtilizes a query runner for transaction-based insertion of multiple users.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createMany\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dataSource: DataSource)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/users-create-many.provider.ts:15\n                            \n                        \n\n                \n                    \n                            Constructor for UsersCreateManyProvider.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe TypeORM DataSource instance for database operations.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createMany\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMany(createManyUsersDto: CreateManyUsersDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users-create-many.provider.ts:29\n                        \n                    \n\n\n            \n                \n                        Creates multiple users in a transactional manner.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createManyUsersDto\n                                            \n                                                            CreateManyUsersDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing an array of user objects to be created.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Promise - A list of successfully created users.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ConflictException,\n  Injectable,\n  RequestTimeoutException,\n} from '@nestjs/common';\nimport { User } from '../user.entity';\nimport { DataSource } from 'typeorm';\nimport { CreateManyUsersDto } from '../dtos/create-many-users.dto';\n\n/**\n * Service responsible for handling bulk user creation.\n * Utilizes a query runner for transaction-based insertion of multiple users.\n */\n@Injectable()\nexport class UsersCreateManyProvider {\n  /**\n   * Constructor for UsersCreateManyProvider.\n   * @param dataSource - The TypeORM DataSource instance for database operations.\n   */\n  constructor(private readonly dataSource: DataSource) {}\n\n  /**\n   * Creates multiple users in a transactional manner.\n   * @param createManyUsersDto - DTO containing an array of user objects to be created.\n   * @returns Promise - A list of successfully created users.\n   * @throws {RequestTimeoutException} - If unable to connect to the database.\n   * @throws {ConflictException} - If the transaction fails.\n   */\n  public async createMany(createManyUsersDto: CreateManyUsersDto) {\n    const newUsers: User[] = [];\n    const queryRunner = this.dataSource.createQueryRunner();\n\n    try {\n      // Establish connection and begin transaction\n      await queryRunner.connect();\n\n      // Start transaction\n      await queryRunner.startTransaction();\n    } catch (error) {\n      throw new RequestTimeoutException('Could not connect to the database');\n    }\n\n    try {\n      // Iterate over users and save each one\n      for (const user of createManyUsersDto.users) {\n        const newUser = queryRunner.manager.create(User, user);\n        const result = await queryRunner.manager.save(newUser);\n        newUsers.push(result);\n      }\n\n      // Commit the transaction upon successful insertion\n      await queryRunner.commitTransaction();\n    } catch (error) {\n      // Rollback transaction in case of failure\n      await queryRunner.rollbackTransaction();\n      throw new ConflictException('Could not complete the transaction', {\n        description: String(error),\n      });\n    } finally {\n      try {\n        // Release the query runner connection\n        await queryRunner.release();\n      } catch (error) {\n        throw new RequestTimeoutException('Could not release the connection', {\n          description: String(error),\n        });\n      }\n    }\n\n    return newUsers;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersCreateManyProvider\n\nUsersCreateManyProvider\n\nUsersModule -->\n\nUsersCreateManyProvider->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersCreateManyProvider\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './providers/users.service';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './user.entity';\nimport { ConfigModule } from '@nestjs/config';\nimport { UsersCreateManyProvider } from './providers/users-create-many.provider';\nimport profileConfig from './config/profile.config';\n\n// We can only export providers, never controllers\n@Module({\n  controllers: [UsersController],\n  providers: [UsersService, UsersCreateManyProvider],\n  exports: [UsersService],\n  // imports: [AuthModule], will cause a circular dependency\n  imports: [\n    forwardRef(() => AuthModule),\n    TypeOrmModule.forFeature([User]),\n    ConfigModule.forFeature(profileConfig),\n  ],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for managing users.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createMany\n                            \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    Public\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findOneById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, usersRepository: Repository, profileConfiguration: ConfigType<>, dataSource: DataSource, usersCreateManyProvider: UsersCreateManyProvider)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/users.service.ts:26\n                            \n                        \n\n                \n                    \n                            Constructs the UsersService with necessary dependencies.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nHandles authentication-related operations.\n\n\n                                                        \n                                                \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe repository for managing users in the database.\n\n\n                                                        \n                                                \n                                                \n                                                        profileConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInjected profile configuration.\n\n\n                                                        \n                                                \n                                                \n                                                        dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe database connection source.\n\n\n                                                        \n                                                \n                                                \n                                                        usersCreateManyProvider\n                                                  \n                                                        \n                                                                        UsersCreateManyProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to handle bulk user creation.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createMany\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMany(createManyUsersDto: CreateManyUsersDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:132\n                        \n                    \n\n\n            \n                \n                        Creates multiple users in batch.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createManyUsersDto\n                                            \n                                                            CreateManyUsersDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing multiple user records.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The created users.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:102\n                        \n                    \n\n\n            \n                \n                        Creates a new user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nData for creating the user.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The created user.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(getUserParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:57\n                        \n                    \n\n\n            \n                \n                        Retrieves all users with optional filters.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing filter criteria.\n\n\n                                            \n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe number of users to retrieve.\n\n\n                                            \n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe page number.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                A list of users.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:82\n                        \n                    \n\n\n            \n                \n                        Retrieves a user by ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe unique user ID.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The user details.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  forwardRef,\n  HttpException,\n  HttpStatus,\n  Inject,\n  Injectable,\n  NotFoundException,\n  RequestTimeoutException,\n} from '@nestjs/common';\nimport { GetUsersParamDto } from '../dtos/get-users-param.dto';\nimport { AuthService } from 'src/auth/providers/auth.service';\nimport { DataSource, Repository } from 'typeorm';\nimport { User } from '../user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { CreateUserDto } from '../dtos/create-user.dto';\nimport { ConfigType } from '@nestjs/config';\nimport profileConfig from '../config/profile.config';\nimport { UsersCreateManyProvider } from './users-create-many.provider';\nimport { CreateManyUsersDto } from '../dtos/create-many-users.dto';\n\n/**\n * Service for managing users.\n */\n@Injectable()\nexport class UsersService {\n  /**\n   * Constructs the UsersService with necessary dependencies.\n   * @param authService - Handles authentication-related operations.\n   * @param usersRepository - The repository for managing users in the database.\n   * @param profileConfiguration - Injected profile configuration.\n   * @param dataSource - The database connection source.\n   * @param usersCreateManyProvider - Service to handle bulk user creation.\n   */\n  constructor(\n    @Inject(forwardRef(() => AuthService))\n    private readonly authService: AuthService,\n\n    @InjectRepository(User)\n    private usersRepository: Repository,\n\n    @Inject(profileConfig.KEY)\n    private readonly profileConfiguration: ConfigType,\n\n    private readonly dataSource: DataSource,\n    private readonly usersCreateManyProvider: UsersCreateManyProvider,\n  ) {}\n\n  /**\n   * Retrieves all users with optional filters.\n   * @param getUserParamDto - DTO containing filter criteria.\n   * @param limit - The number of users to retrieve.\n   * @param page - The page number.\n   * @returns A list of users.\n   * @throws {HttpException} If the endpoint is deprecated.\n   */\n  public findAll(\n    getUserParamDto: GetUsersParamDto,\n    limit: number,\n    page: number,\n  ) {\n    throw new HttpException(\n      {\n        status: HttpStatus.MOVED_PERMANENTLY,\n        error: \"This endpoint doesn't exist\",\n        fileName: 'users.service.ts',\n        lineNumber: 71,\n      },\n      HttpStatus.MOVED_PERMANENTLY,\n      {\n        description: 'The endpoint was permanently moved',\n      },\n    );\n  }\n\n  /**\n   * Retrieves a user by ID.\n   * @param id - The unique user ID.\n   * @returns The user details.\n   * @throws {NotFoundException} If the user is not found.\n   */\n  public async findOneById(id: number) {\n    let user;\n    try {\n      user = await this.usersRepository.findOneBy({ id });\n    } catch (error) {\n      throw new RequestTimeoutException('Database connection error');\n    }\n\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n    return user;\n  }\n\n  /**\n   * Creates a new user.\n   * @param createUserDto - Data for creating the user.\n   * @returns The created user.\n   * @throws {BadRequestException} If the user already exists.\n   */\n  public async createUser(createUserDto: CreateUserDto) {\n    let existingUser;\n    try {\n      existingUser = await this.usersRepository.findOne({\n        where: { email: createUserDto.email },\n      });\n    } catch (error) {\n      throw new RequestTimeoutException('Database connection error');\n    }\n\n    if (existingUser) {\n      throw new BadRequestException('User already exists.');\n    }\n\n    let newUser = this.usersRepository.create(createUserDto);\n\n    try {\n      newUser = await this.usersRepository.save(newUser);\n    } catch (error) {\n      throw new RequestTimeoutException('Database connection error');\n    }\n\n    return newUser;\n  }\n\n  /**\n   * Creates multiple users in batch.\n   * @param createManyUsersDto - DTO containing multiple user records.\n   * @returns The created users.\n   */\n  public async createMany(createManyUsersDto: CreateManyUsersDto) {\n    return await this.usersCreateManyProvider.createMany(createManyUsersDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/app.module.ts\n            \n            variable\n            ENV\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/providers/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/meta-options/dtos/create-post-meta-options.dto.ts\n            \n            class\n            CreatePostMetaOptionsDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/meta-options/meta-option.entity.ts\n            \n            entity\n            MetaOption\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/meta-options/meta-options.controller.ts\n            \n            controller\n            MetaOptionsController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/meta-options/providers/meta-options.service.ts\n            \n            injectable\n            MetaOptionsService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/posts/dto/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                100 %\n                (12/12)\n            \n        \n        \n            \n                \n                src/posts/dto/patch-post.dto.ts\n            \n            class\n            PatchPostDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/posts/post.entity.ts\n            \n            entity\n            Post\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/posts/providers/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/tags/dtos/create-tag.dto.ts\n            \n            class\n            CreateTagDto\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/tags/providers/tags.service.ts\n            \n            injectable\n            TagsService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/tags/tag.entity.ts\n            \n            entity\n            Tag\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/tags/tags.controller.ts\n            \n            controller\n            TagsController\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/users/dtos/create-many-users.dto.ts\n            \n            class\n            CreateManyUsersDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/users/dtos/get-users-param.dto.ts\n            \n            class\n            GetUsersParamDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/users/dtos/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/users/providers/users-create-many.provider.ts\n            \n            injectable\n            UsersCreateManyProvider\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/users/providers/users.service.ts\n            \n            injectable\n            UsersService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/users/user.entity.ts\n            \n            entity\n            User\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                100 %\n                (6/6)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.23\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.2.2\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/mapped-types : ^2.0.5\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.3.0\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            joi : ^17.12.2\n        \n            pg : ^8.11.5\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            PostStatus   (src/.../post-status.enum.ts)\n                        \n                        \n                            PostType   (src/.../post-type.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/posts/enums/post-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PostStatus\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n            \n        \n\n    src/posts/enums/post-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PostType\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                        Bootstrap function for initializing and running the NestJS application.\nThis function sets up the app with global validation pipes and Swagger API documentation.\n\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\nCompodoc Documentation\nScript\nExample :$ npm run docLet me name this as doc.\nTo see the coverage\nExample :$ http://localhost:3001/coverage.htmlIt should be a comma over here.\nNow this script itself a little bit verbose and lengthy, and I'll try to explain all the parts of the\nscript as we go.\nSo first of all, we need to use NPCs and along with Compo Doc in order to generate the Compo Doc documentation.\nSo we use at the rate compo doc, which is the name of the package.\nSo compo doc slash compo doc.\nSo this basically triggers the compo doc package for us.\nAnd then we need to provide it certain configurations.\nThe first one is the path to the pts config file.\nSo hyphen path to the pts config file TTS config file is within the root of the project itself.\nSo we use tsconfig.json.\nSo it's going to pick up this particular config file which is there in the root of our project.\nSo this particular TTS config file over here.\nNow once we have provided the TTS config file, the next flag that we want to add is the s flag.\nNow what this flag does is that it instructs compared to serve generated documentation on a port.\nNow, having said that, I want to have a specific port number as well.\nSo I use hyphen hyphen port.\nAnd let's serve the documentation on port 3001.\nWith that, I also want to enable Compo doc to watch for changes within my code.\nSo whenever I'm writing any new code, it should watch for changes and regenerate the documentation\nwhenever needed.\nFinally, I want to give it a specific directory for generating the documentation so we can use a hyphen\nd flag, which instructs combo doc to generate the documentation within a specific directory, which\nwe can pass as an argument.\nSo here I'm saying within the root of my project, just use the documentation directory to generate\nyour documentation.\nThe details can be seen at localhost:3001\nAlways define both sides of the relationships in many to many relationships i.e tags and posts\nGenerate a service\nExample :$ npx nest generate service tags/providers/tags --flat --no-specGenerate a module\nExample :$ npx nest generate module authGenerate a controller\nExample :$ npx nest generate controller auth --no-specGenerate a provider\nExample :$ npx nest generate pr users/providers/users-create=many.provider --flat --no-specPrettier\nExample :$ npx prettier --write .Start the db\nRun this in cmd\nExample :$ pg_ctl start -D \"C:\\users\\mfabouatmeh\\Desktop\\CodesDar\\more\\Postgre\\data\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MetaOptionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TagsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_exports\n\n\n\ncluster_TagsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nPostsModule -->\n\nTagsModule->PostsModule\n\n\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nTagsService \n\nTagsService \n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\nUsersCreateManyProvider\n\nUsersCreateManyProvider\n\nUsersModule -->\n\nUsersCreateManyProvider->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        6 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    7 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    8 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ENV   (src/.../app.module.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENV\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.NODE_ENV\n                    \n                \n\n            \n                \n                    The AppModule is the root module of the NestJS application.\nIt is responsible for bootstrapping and organizing all the other modules.\nIt includes various modules such as Users, Posts, Auth, Tags, and MetaOptions.\nIt also sets up configuration and database connections.\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
