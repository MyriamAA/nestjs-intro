var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.094,1,2.226]],["body/controllers/AppController.html",[0,1.895,1,3.858,2,1.596,3,0.42,4,0.37,5,0.321,6,4.132,7,0.499,8,0.027,9,1.042,10,3.415,11,4.132,12,0.42,13,0.019,14,3.626,15,1.974,16,0.023,17,0.023]],["title/modules/AppModule.html",[18,1.094,19,2.226]],["body/modules/AppModule.html",[1,3.232,2,1.369,3,0.255,4,0.224,5,0.195,7,0.55,8,0.028,9,0.633,10,3.192,11,2.508,12,0.255,13,0.012,16,0.017,17,0.017,18,1.588,19,4.366,20,1.289,21,1.115,22,1.505,23,1.505,24,1.289,25,2.468,26,1.505,27,2.508,28,2.508,29,2.508,30,3.192,31,3.49,32,3.49,33,3.192,34,2.937,35,2.127,36,1.505,37,1.391,38,2.201,39,2.682,40,2.975,41,2.975,42,2.975,43,2.975,44,1.788,45,1.198,46,2.975,47,1.289,48,1.391,49,2.975,50,3.545,51,4.715,52,1.972,53,4.204,54,2.975,55,2.508,56,2.975,57,2.201,58,4.204,59,2.975,60,1.636,61,3.608,62,2.508,63,2.508,64,2.975,65,2.975,66,2.201,67,2.508,68,2.975,69,2.975,70,2.975,71,1.198,72,2.975,73,2.975,74,2.975,75,2.975,76,2.508,77,2.975,78,1.505,79,2.975,80,0.544,81,2.975,82,1.391,83,0.969,84,2.975,85,2.975,86,2.975,87,2.975,88,2.975,89,2.975,90,1.198,91,2.975,92,2.508,93,2.975,94,2.508,95,2.975,96,2.975,97,2.975,98,1.972,99,2.975,100,2.975,101,2.975,102,2.201,103,2.975,104,2.508,105,2.975,106,2.975]],["title/injectables/AppService.html",[10,1.847,107,1.094]],["body/injectables/AppService.html",[3,0.409,4,0.36,5,0.313,7,0.409,8,0.027,9,1.015,10,3.151,12,0.409,13,0.019,16,0.023,17,0.023,107,1.865,108,2.414,109,4.023,110,0.681,111,2.307,112,6.368,113,0.942,114,4.771,115,1.922,116,1.865,117,1.922,118,4.771,119,4.771]],["title/controllers/AuthController.html",[0,1.094,120,2.226]],["body/controllers/AuthController.html",[0,1.844,2,1.524,3,0.401,4,0.353,5,0.307,7,0.485,8,0.027,9,0.996,12,0.401,13,0.019,15,1.885,16,0.022,17,0.022,120,3.753,121,3.946,122,2.813,123,5.134,124,3.081,125,3.946,126,2.813,127,2.813,128,3.462,129,4.679,130,2.188,131,3.101,132,2.028,133,2.188]],["title/modules/AuthModule.html",[18,1.094,30,1.847]],["body/modules/AuthModule.html",[2,1.689,3,0.348,4,0.307,5,0.266,7,0.516,8,0.027,9,0.865,12,0.348,13,0.016,16,0.021,17,0.021,18,1.96,20,1.762,21,1.523,22,2.057,23,2.057,24,1.762,25,2.891,26,2.891,30,3.554,34,2.891,35,2.625,36,2.057,37,1.9,39,2.853,120,3.787,123,3.427,124,3.41,125,3.427,126,2.443,127,2.443,134,3.427,135,3.427,136,3.427,137,4.064,138,3.438,139,4.064,140,3.427,141,3.427,142,2.694,143,3.007]],["title/injectables/AuthService.html",[107,1.094,124,1.7]],["body/injectables/AuthService.html",[3,0.316,4,0.278,5,0.241,7,0.417,8,0.027,9,0.784,12,0.316,13,0.015,15,1.483,16,0.019,17,0.019,60,2.026,71,1.483,78,1.864,80,0.889,83,1.774,98,3.612,107,1.584,108,1.864,110,0.526,111,1.96,113,1.076,115,1.96,116,2.056,117,2.195,124,2.462,126,2.214,127,2.214,128,2.725,130,2.275,131,2.441,132,2.109,133,1.722,138,2.441,142,2.441,143,2.725,144,3.106,145,2.684,146,5.797,147,5.449,148,3.106,149,2.953,150,3.683,151,2.109,152,1.699,153,1.478,154,3.683,155,3.683,156,4.866,157,3.683,158,2.441,159,3.106,160,3.683,161,3.106,162,2.214,163,3.683,164,3.106,165,2.214,166,3.106,167,3.683,168,3.683,169,3.683]],["title/classes/CreatePostDto.html",[13,0.013,170,1.847]],["body/classes/CreatePostDto.html",[3,0.132,4,0.116,5,0.101,7,0.382,8,0.027,12,0.132,13,0.013,16,0.01,17,0.01,47,1.624,71,1.794,80,1.124,90,1.021,110,0.22,113,1.062,116,1.752,153,1.669,170,1.394,171,0.72,172,4.633,173,1.14,174,1.9,175,2.096,176,3.296,177,1.186,178,4.066,179,1.633,180,1.308,181,3.232,182,4.299,183,2.725,184,2.391,185,3.641,186,2.725,187,2.142,188,3.379,189,2.49,190,1.635,191,4.299,192,1.061,193,1.634,194,1.54,195,2.536,196,2.772,197,1.308,198,2.252,199,3.015,200,1.54,201,1.54,202,3.492,203,3.159,204,1.54,205,1.54,206,3.296,207,3.159,208,3.159,209,1.54,210,1.54,211,2.06,212,2.536,213,1.54,214,3.064,215,2.536,216,1.54,217,1.54,218,1.54,219,2.536,220,1.943,221,2.536,222,3.159,223,3.746,224,2.252,225,2.772,226,1.54,227,1.54,228,3.756,229,2.391,230,2.953,231,3.064,232,2.536,233,2.536,234,1.54,235,1.54,236,3.746,237,2.536,238,2.953,239,2.391,240,3.064,241,2.536,242,1.54,243,1.54,244,1.54,245,1.54,246,1.299,247,1.54,248,3.159,249,3.159,250,1.394,251,2.536,252,1.681,253,2.138,254,1.54,255,2.536,256,2.536,257,3.064,258,2.772,259,3.159,260,3.159,261,1.54,262,1.54,263,2.772,264,1.624,265,3.159,266,3.159,267,1.54,268,1.54,269,1.54,270,1.54,271,1.54,272,2.536,273,1.54,274,2.391,275,2.536,276,1.876,277,2.678,278,3.121,279,2.483,280,2.138,281,1.876,282,1.14,283,1.14,284,2.536,285,0.779,286,2.138,287,1.299,288,1.299,289,1.14,290,1.14,291,3.296,292,3.485,293,0.779,294,1.14,295,3.232,296,1.299,297,2.138,298,1.54,299,1.299,300,1.299,301,1.54,302,1.54,303,1.54,304,1.54,305,1.54,306,1.299,307,1.54,308,1.681,309,1.54,310,2.536,311,1.14,312,1.299,313,1.54,314,1.54,315,1.54,316,1.021,317,1.299,318,1.54,319,1.54]],["title/classes/CreatePostMetaOptionsDto.html",[13,0.013,211,1.847]],["body/classes/CreatePostMetaOptionsDto.html",[3,0.36,4,0.317,5,0.276,7,0.36,8,0.027,12,0.36,13,0.021,16,0.021,17,0.021,47,2.642,71,1.694,80,0.769,110,0.6,113,0.83,116,1.984,171,1.966,174,1.369,175,2.682,176,3.922,179,1.499,180,1.851,193,1.277,199,2.682,211,2.915,220,3.187,238,3.513,240,3.922,276,3.922,277,3.187,279,2.787,285,2.128,289,3.922,311,4.295,312,3.546,320,2.298,321,3.546,322,4.205,323,4.205,324,3.922]],["title/classes/CreateTagDto.html",[13,0.013,325,2.019]],["body/classes/CreateTagDto.html",[3,0.296,4,0.261,5,0.227,7,0.4,8,0.027,12,0.296,13,0.018,16,0.018,17,0.018,80,1.078,110,0.493,113,1.165,116,2.107,152,1.843,171,1.616,174,1.718,180,1.628,187,3.498,188,3.911,193,1.792,199,2.36,206,2.557,248,4.764,249,4.764,250,2.564,253,3.932,276,3.45,277,3.173,278,3.745,279,3.745,280,3.932,281,2.557,282,2.557,283,2.557,285,1.749,291,3.905,292,4.181,293,1.749,296,2.914,299,2.914,300,2.914,306,2.914,325,2.803,326,5.126,327,2.914,328,4.45,329,3.455,330,3.455,331,3.455,332,3.455,333,3.455,334,3.455,335,3.455,336,3.455,337,3.455,338,4.663,339,4.663,340,3.932,341,3.45,342,3.455,343,3.455,344,2.914]],["title/classes/CreateUserDto.html",[13,0.013,345,1.847]],["body/classes/CreateUserDto.html",[3,0.311,4,0.274,5,0.238,7,0.311,8,0.027,12,0.311,13,0.019,16,0.019,17,0.019,80,1.053,98,3.585,110,0.518,113,1.137,116,2.08,153,1.463,158,3.585,171,1.696,180,1.682,192,1.364,193,1.75,250,2.649,277,3.464,278,3.193,279,3.819,281,2.684,282,2.684,283,2.684,285,1.836,344,4.062,345,2.649,346,5.057,347,2.684,348,4.002,349,4.561,350,3.628,351,3.628,352,3.628,353,3.628,354,3.628,355,3.628,356,3.628,357,5.762,358,4.818,359,4.818,360,4.818,361,4.818,362,4.818,363,4.818,364,4.562,365,4.818,366,4.818,367,4.818,368,3.628,369,4.818,370,5.762,371,3.628,372,3.628]],["title/classes/GetUsersParamDto.html",[13,0.013,373,2.019]],["body/classes/GetUsersParamDto.html",[3,0.369,4,0.325,5,0.282,7,0.503,8,0.027,12,0.369,13,0.023,16,0.021,17,0.021,80,1.072,83,1.752,110,0.614,113,0.85,153,1.634,171,2.013,174,1.402,180,1.879,192,1.662,193,1.307,197,2.209,199,2.722,202,3.63,274,3.98,278,3.565,285,2.178,292,3.98,293,2.178,294,3.185,373,3.234,374,4.536,375,3.234,376,3.63,377,3.98,378,4.305,379,4.305,380,4.305]],["title/entities/MetaOption.html",[381,1.353,382,1.571]],["body/entities/MetaOption.html",[3,0.306,4,0.269,5,0.234,7,0.408,8,0.027,12,0.306,13,0.014,16,0.019,17,0.019,48,2.869,80,1.121,82,1.667,90,1.918,110,0.509,113,1.177,116,1.551,179,1.585,180,1.663,192,1.349,193,1.811,197,1.873,230,3.793,238,3.554,311,3.968,320,2.659,341,2.638,381,1.918,382,2.227,383,3.007,384,4.521,385,4.521,386,4.521,387,3.566,388,3.554,389,3.566,390,2.363,391,3.156,392,3.566,393,3.007,394,4.762,395,4.016,396,3.566,397,3.566,398,4.521,399,3.566,400,2.638,401,3.156,402,4.016,403,4.016,404,1.546,405,3.566,406,3.566,407,3.566,408,3.566,409,2.363]],["title/controllers/MetaOptionsController.html",[0,1.094,410,2.226]],["body/controllers/MetaOptionsController.html",[0,1.354,2,1.354,3,0.356,4,0.314,5,0.273,7,0.495,8,0.027,9,0.884,12,0.356,13,0.016,14,3.076,15,1.674,16,0.021,17,0.021,47,2.281,48,2.461,80,0.76,110,0.593,111,2.119,113,0.821,115,1.674,117,1.674,122,2.499,145,2.503,151,1.802,152,1.452,153,1.262,179,1.493,193,1.262,211,3.338,220,3.164,290,3.076,320,2.281,410,3.488,411,3.505,412,5.774,413,4.157,414,4.157,415,5.262,416,3.164,417,2.286,418,3.175,419,3.505,420,3.505,421,4.157,422,4.157]],["title/modules/MetaOptionsModule.html",[18,1.094,31,2.019]],["body/modules/MetaOptionsModule.html",[2,1.735,3,0.363,4,0.32,5,0.278,7,0.54,8,0.027,9,0.903,12,0.363,13,0.017,16,0.021,17,0.021,18,1.898,20,1.839,21,1.59,22,2.147,23,2.147,24,1.839,25,2.949,26,2.147,31,3.865,35,2.697,36,2.147,37,1.984,39,2.333,44,2.55,45,1.709,47,2.31,48,1.984,320,1.839,382,1.984,410,3.863,418,3.535,419,3.577,420,3.577,423,3.577,424,3.577,425,4.242,426,4.242,427,2.55,428,4.242]],["title/injectables/MetaOptionsService.html",[107,1.094,418,1.847]],["body/injectables/MetaOptionsService.html",[3,0.331,4,0.291,5,0.253,7,0.524,8,0.027,9,0.821,12,0.331,13,0.015,16,0.02,17,0.02,45,1.554,47,2.175,60,2.122,78,1.953,80,0.917,107,1.634,108,1.953,110,0.551,111,2.021,113,0.99,115,1.554,117,1.554,130,2.346,133,1.805,145,2.416,151,2.175,152,1.752,153,1.524,179,0.949,211,3.246,290,2.856,320,2.416,382,2.346,404,1.673,417,2.122,418,2.759,427,2.32,429,4.701,430,3.254,431,3.352,432,2.346,433,3.859,434,3.549,435,3.859,436,5.017,437,5.017,438,3.859,439,3.859,440,2.32,441,2.558,442,3.254,443,3.254,444,3.859,445,2.558,446,3.859]],["title/classes/PatchPostDto.html",[13,0.013,447,2.019]],["body/classes/PatchPostDto.html",[3,0.333,4,0.294,5,0.255,7,0.48,8,0.027,12,0.333,13,0.02,16,0.02,17,0.02,80,0.711,110,0.555,113,0.768,153,1.532,170,3.078,171,1.819,173,2.878,174,1.642,175,2.552,179,1.546,180,1.761,192,1.428,193,1.181,197,2.289,199,2.552,246,3.28,274,3.732,277,3.032,285,1.969,291,3.732,293,1.969,308,2.578,432,1.819,447,3.032,448,4.253,449,5.043,450,3.732,451,4.992,452,5.043,453,4.253,454,5.043,455,5.043,456,5.043,457,4.381,458,3.89,459,3.89,460,3.28,461,2.878]],["title/classes/PatchUserDto.html",[13,0.013,462,2.226]],["body/classes/PatchUserDto.html",[3,0.41,4,0.361,5,0.314,7,0.492,8,0.027,12,0.41,13,0.019,16,0.023,17,0.023,83,1.559,171,2.239,175,2.422,345,2.633,347,3.542,432,2.684,451,4.84,460,4.037,462,3.805,463,4.037,464,5.74,465,4.037,466,4.037,467,3.542,468,4.787,469,4.787,470,4.037]],["title/entities/Post.html",[179,0.826,381,1.353]],["body/entities/Post.html",[3,0.155,4,0.136,5,0.118,7,0.411,8,0.028,12,0.155,13,0.007,16,0.011,17,0.011,47,1.251,48,0.845,57,3.044,71,2.458,80,1.154,82,0.845,83,1.702,90,2.106,110,0.258,113,1.134,116,1.871,153,1.745,174,0.588,178,2.135,179,1.582,180,1.008,182,3.793,183,3.038,184,3.548,185,3.868,186,3.038,187,2.981,188,2.388,189,2.704,190,2.276,191,3.793,192,0.817,193,1.745,197,1.258,198,2.704,203,2.433,206,3.044,207,2.433,208,2.433,220,1.735,224,1.735,225,2.135,228,2.433,229,2.135,230,2.727,231,3.044,238,1.912,257,3.328,258,2.135,264,2.079,266,3.469,286,2.433,287,1.523,288,1.523,297,4.408,320,0.783,364,3.548,381,1.657,382,1.924,388,2.388,390,3.465,391,4.007,393,1.523,401,3.573,402,1.523,403,2.433,404,0.783,409,1.912,427,1.086,471,1.523,472,2.885,473,1.806,474,2.885,475,4.795,476,1.806,477,3.548,478,4.795,479,3.469,480,1.806,481,2.885,482,3.548,483,3.548,484,2.433,485,1.806,486,1.806,487,2.727,488,3.044,489,2.885,490,1.806,491,2.885,492,2.885,493,1.806,494,2.433,495,1.806,496,2.433,497,1.806,498,2.885,499,2.433,500,2.433,501,1.806,502,2.885,503,1.806,504,2.885,505,1.523,506,2.885,507,1.806,508,1.806,509,2.433,510,1.806,511,2.885,512,2.433,513,2.885,514,1.806,515,1.806,516,1.806,517,1.806,518,1.806,519,1.587,520,1.523]],["title/controllers/PostsController.html",[0,1.094,521,2.226]],["body/controllers/PostsController.html",[0,1.226,2,0.629,3,0.165,4,0.146,5,0.127,7,0.398,8,0.027,9,0.411,12,0.165,13,0.008,14,1.429,15,0.778,16,0.012,17,0.012,71,1.225,80,0.902,83,1.682,90,1.225,110,0.276,111,1.225,113,0.843,115,2.271,116,1.226,117,1.72,122,1.161,132,0.837,145,2.534,151,1.852,152,1.724,153,1.569,170,2.841,174,2.088,177,2.308,178,3.961,179,1.633,189,3.106,190,1.54,192,1.316,193,1.297,196,3.161,197,2.14,250,1.673,293,0.977,316,3.08,317,1.628,377,3.161,416,1.161,447,3.106,450,3.161,457,3.653,461,2.251,499,3.919,519,3.262,521,2.495,522,1.628,523,2.017,524,3.042,525,3.106,526,3.042,527,3.042,528,1.931,529,3.765,530,3.042,531,4.272,532,3.602,533,3.765,534,3.042,535,3.042,536,3.042,537,1.931,538,1.931,539,1.28,540,3.602,541,1.931,542,1.931,543,3.602,544,2.251,545,4.272,546,1.931,547,1.931,548,2.565,549,1.931,550,1.931,551,3.161,552,1.931,553,3.919,554,1.931,555,2.831,556,1.931,557,1.931,558,3.161,559,1.931,560,1.931,561,3.272,562,2.251,563,2.565,564,1.28,565,2.349,566,1.628,567,3.919,568,4.514,569,1.628,570,3.042,571,2.565,572,1.628,573,1.628,574,1.931,575,1.931,576,1.931,577,3.602,578,1.931,579,1.931,580,3.174,581,1.931,582,1.931,583,2.251,584,1.931,585,1.931,586,1.628,587,1.931,588,1.931,589,1.931,590,1.429,591,1.931,592,1.931,593,1.628,594,1.931]],["title/modules/PostsModule.html",[18,1.094,32,2.019]],["body/modules/PostsModule.html",[2,1.576,3,0.313,4,0.276,5,0.24,7,0.56,8,0.027,9,0.778,12,0.313,13,0.014,16,0.019,17,0.019,18,1.958,20,1.584,21,1.37,22,1.85,23,1.85,24,1.584,25,2.747,26,2.45,32,3.932,33,3.398,34,3.126,35,2.45,36,1.85,37,1.709,39,2.663,44,2.198,45,1.472,48,1.709,82,1.709,132,1.584,140,3.082,179,1.191,320,1.584,375,2.198,381,1.472,382,2.264,427,2.198,432,1.709,521,3.598,565,3.398,566,3.082,595,3.082,596,3.655,597,3.082,598,3.655,599,3.655,600,3.082,601,3.655,602,3.655,603,3.655,604,3.082,605,3.655,606,3.655,607,3.082,608,3.655,609,3.655,610,3.655,611,3.082]],["title/injectables/PostsService.html",[107,1.094,565,1.847]],["body/injectables/PostsService.html",[3,0.131,4,0.116,5,0.1,7,0.436,8,0.028,9,0.326,12,0.131,13,0.006,15,1.504,16,0.01,17,0.01,21,0.946,45,0.617,47,1.79,48,0.716,60,2.584,66,1.134,71,1.504,78,1.277,80,0.755,82,1.746,83,1.216,90,0.617,102,1.868,107,0.822,108,0.775,110,0.219,111,1.017,113,0.815,115,2.049,116,1.048,117,2.049,130,1.746,132,1.926,133,1.746,145,2.422,148,1.292,149,2.197,151,1.79,152,1.442,153,1.254,159,1.292,162,0.921,170,2.798,174,1.447,175,1.889,177,1.931,179,1.544,184,2.763,189,1.518,190,1.889,192,1.057,197,1.876,198,1.518,214,2.382,220,2.483,239,2.763,250,0.843,252,2.134,264,1.094,308,1.673,316,1.673,320,0.664,382,1.746,404,0.664,409,1.015,416,0.921,427,0.921,431,3.359,432,1.746,434,3.229,440,2.245,441,1.015,442,3.149,443,1.292,445,3.863,447,2.825,450,1.868,453,2.129,457,1.868,461,1.868,519,2.584,523,2.475,525,2.672,532,2.129,539,2.134,540,2.715,544,2.382,548,1.292,551,1.868,553,2.129,555,1.673,558,1.868,561,3.254,564,1.015,565,1.388,572,1.292,573,1.292,583,1.868,586,1.292,590,1.134,600,1.292,607,2.129,612,1.292,613,3.149,614,4.29,615,3.747,616,2.129,617,3.734,618,3.734,619,2.485,620,1.532,621,3.149,622,1.532,623,1.532,624,2.525,625,1.868,626,2.525,627,1.532,628,2.525,629,2.715,630,2.525,631,1.532,632,2.715,633,2.525,634,1.532,635,1.532,636,1.532,637,1.532,638,1.532,639,1.532,640,1.532,641,1.532,642,2.525,643,3.22,644,1.292,645,1.532,646,1.532,647,1.532,648,1.292,649,1.532,650,1.532,651,1.532,652,1.532,653,1.532,654,1.532,655,1.532,656,2.525,657,3.22,658,1.292,659,1.532,660,1.532,661,1.532,662,1.532,663,1.292,664,1.532,665,1.532,666,1.532,667,2.525,668,2.525,669,1.532,670,1.532,671,1.532,672,1.292,673,1.532,674,1.532,675,1.532,676,1.532,677,2.129,678,1.532,679,3.22,680,1.532,681,1.532,682,1.532,683,1.532,684,1.532,685,1.532,686,1.532,687,1.292,688,1.532,689,1.532,690,1.532,691,1.532,692,1.292,693,1.532,694,1.532,695,1.532,696,1.532,697,1.532,698,2.525,699,1.532,700,2.525,701,1.532,702,2.525,703,1.532,704,2.525,705,1.532,706,2.525,707,1.532,708,2.525,709,1.532,710,2.525,711,1.532,712,1.292,713,1.532]],["title/entities/Tag.html",[264,1.456,381,1.353]],["body/entities/Tag.html",[3,0.242,4,0.213,5,0.185,7,0.347,8,0.027,12,0.242,13,0.011,16,0.016,17,0.016,71,2.502,80,1.188,82,1.321,90,2.085,110,0.403,113,1.226,116,2.023,152,1.655,162,1.698,174,1.543,179,1.403,180,1.415,187,3.141,188,3.141,192,1.148,193,1.887,197,1.655,230,3.782,264,1.756,328,3.996,381,1.632,384,3.996,385,3.996,386,3.996,388,3.141,390,3.633,391,4.118,395,3.417,398,3.996,400,2.09,401,3.895,404,1.224,409,2.686,479,4.365,482,4.222,483,4.222,484,3.417,487,3.431,500,3.417,505,2.381,509,3.417,512,3.417,519,2.606,525,1.698,712,3.417,714,2.381,715,4.739,716,2.824,717,4.739,718,2.824,719,2.824,720,2.824,721,2.824,722,2.824,723,2.824,724,2.824,725,2.824,726,2.824,727,2.824,728,2.824,729,2.824,730,2.824,731,2.381]],["title/controllers/TagsController.html",[0,1.094,732,2.226]],["body/controllers/TagsController.html",[0,1.12,2,1.12,3,0.295,4,0.259,5,0.225,7,0.451,8,0.027,9,0.732,12,0.295,13,0.014,15,1.385,16,0.018,17,0.018,78,1.74,80,0.962,110,0.491,111,1.872,113,1.039,115,2.12,117,2.12,122,2.068,130,1.608,132,1.491,133,1.608,145,2.773,151,2.282,152,1.839,153,1.599,179,1.295,190,1.74,192,1.719,193,1.599,197,1.969,264,1.491,325,3.65,416,2.068,417,1.891,431,3.65,432,2.173,440,2.794,525,3.795,539,2.279,562,3.896,564,2.279,593,2.9,619,2.664,644,2.9,732,3.081,733,2.9,734,4.648,735,2.9,736,3.439,737,3.439,738,3.439,739,4.648,740,3.439,741,2.9,742,2.9,743,3.439,744,3.439,745,3.439,746,3.439,747,3.439,748,3.439]],["title/modules/TagsModule.html",[18,1.094,33,1.847]],["body/modules/TagsModule.html",[2,1.717,3,0.357,4,0.315,5,0.273,7,0.537,8,0.027,9,0.887,12,0.357,13,0.017,16,0.021,17,0.021,18,1.883,20,1.807,21,1.563,22,2.11,23,2.11,24,1.807,25,2.926,26,2.926,33,3.575,35,2.668,36,2.11,37,1.95,39,2.293,44,2.507,45,1.679,264,1.807,619,3.422,732,3.832,741,3.516,749,3.516,750,3.516,751,3.516,752,4.169,753,4.169,754,3.516,755,4.169]],["title/injectables/TagsService.html",[107,1.094,619,1.7]],["body/injectables/TagsService.html",[3,0.234,4,0.206,5,0.179,7,0.463,8,0.028,9,0.581,12,0.234,13,0.011,15,1.099,16,0.02,17,0.016,45,1.099,60,2.556,71,1.592,78,1.381,80,0.989,90,1.099,104,2.301,107,1.287,108,1.381,110,0.389,111,1.592,113,1.068,115,2.052,117,2.178,126,1.641,127,1.641,128,2.019,130,1.848,132,1.183,133,1.276,145,2.736,151,2.344,152,1.889,153,1.642,161,2.301,165,1.641,166,2.301,176,2.925,177,1.848,190,2.578,192,1.719,197,1.969,250,1.501,263,2.019,264,2.444,265,2.301,316,1.809,325,3.252,404,1.183,417,1.501,431,3.795,432,1.848,434,3.063,440,3.063,441,1.809,445,3.585,494,2.301,525,2.794,539,2.62,544,3.439,583,2.019,611,2.301,619,2,629,2.301,672,2.301,731,2.301,735,3.333,742,2.301,754,2.301,756,2.301,757,3.953,758,3.953,759,2.729,760,2.729,761,4.648,762,2.729,763,2.729,764,3.953,765,2.729,766,3.953,767,2.729,768,2.729,769,2.729,770,2.729,771,2.729,772,2.729,773,2.729,774,2.729,775,2.301,776,2.729,777,2.729,778,2.729,779,2.729,780,2.729,781,2.729]],["title/entities/User.html",[83,1.094,381,1.353]],["body/entities/User.html",[3,0.275,4,0.242,5,0.21,7,0.379,8,0.027,12,0.275,13,0.013,16,0.018,17,0.018,71,2.205,80,1.166,82,1.498,83,1.652,90,2.393,98,3.364,110,0.457,113,1.173,116,2.021,158,3.364,165,1.926,175,1.621,179,1.462,180,1.547,192,1.254,193,1.805,197,1.772,348,3.755,349,4.279,381,1.784,388,3.364,390,3.629,391,4.115,400,2.371,401,3.939,404,1.92,477,2.371,482,4.593,483,4.593,487,2.935,519,3.011,782,2.702,783,6.208,784,3.204,785,3.204,786,3.204,787,3.204,788,3.204,789,3.204,790,4.429,791,3.204,792,4.429,793,3.204,794,3.204,795,3.204,796,2.702,797,3.204,798,3.204,799,2.702,800,3.204]],["title/controllers/UsersController.html",[0,1.094,801,2.226]],["body/controllers/UsersController.html",[0,0.818,2,0.818,3,0.215,4,0.19,5,0.165,7,0.469,8,0.027,9,0.534,12,0.215,13,0.01,15,1.012,16,0.015,17,0.015,80,1.036,83,0.818,90,1.973,110,0.358,111,1.498,113,0.875,115,1.784,117,2.106,122,1.51,130,1.175,131,1.665,132,1.089,133,1.175,145,2.576,149,2.072,151,2.123,152,1.826,153,1.487,162,1.51,174,1.783,177,1.739,179,1.09,189,1.51,192,1.793,193,1.345,196,3.624,199,2.478,224,3.499,252,1.665,293,1.271,308,2.466,341,1.859,345,3.2,373,2.945,375,3.292,416,2.237,417,1.381,462,3.857,467,2.753,543,3.137,555,2.466,561,2.466,562,3.278,563,3.736,564,3.246,567,3.137,568,3.137,569,2.118,571,3.736,577,2.118,580,3.137,648,2.118,677,2.118,801,2.466,802,2.118,803,4.43,804,4.43,805,3.72,806,2.512,807,2.512,808,2.512,809,4.617,810,2.512,811,3.72,812,3.72,813,2.512,814,3.72,815,3.137,816,2.512,817,3.72,818,3.72,819,3.72,820,2.512,821,3.72,822,3.137,823,4.43,824,2.512,825,3.137,826,2.512,827,2.512,828,2.512,829,2.512,830,2.118,831,2.512,832,2.512,833,2.512,834,2.512,835,2.512,836,3.72,837,2.118,838,2.118,839,2.512,840,2.118,841,2.512,842,2.512,843,2.512,844,2.512,845,2.118,846,2.512,847,2.512,848,2.512,849,2.512,850,2.512,851,2.512,852,2.512,853,2.512,854,2.512,855,2.512,856,2.512,857,2.512]],["title/modules/UsersModule.html",[18,1.094,34,1.7]],["body/modules/UsersModule.html",[2,1.808,3,0.328,4,0.289,5,0.251,7,0.554,8,0.027,9,0.815,12,0.428,13,0.015,16,0.02,17,0.02,18,1.808,20,1.66,21,1.435,22,1.937,23,1.937,24,1.66,25,2.978,26,2.81,30,3.054,34,3.225,35,2.526,36,1.937,37,1.79,39,2.745,44,2.302,45,1.542,50,3.228,52,2.538,83,1.247,138,3.308,141,3.228,142,2.538,143,2.833,149,3.125,801,3.681,840,3.228,858,3.228,859,3.228,860,3.228,861,3.829,862,3.829,863,3.829,864,3.228,865,3.228,866,3.228,867,3.829,868,3.829,869,3.829]],["title/injectables/UsersService.html",[107,1.094,149,1.571]],["body/injectables/UsersService.html",[3,0.17,4,0.149,5,0.13,7,0.476,8,0.028,9,0.421,12,0.17,13,0.008,15,1.542,16,0.012,17,0.012,21,1.87,45,0.798,51,3.653,52,1.313,60,1.089,78,1.571,80,0.792,83,1.966,92,2.618,102,2.297,107,1.011,108,1.002,110,0.283,111,1.25,113,0.855,115,1.895,116,1.011,117,1.895,124,2.93,130,1.452,131,2.057,132,2.163,133,2.026,138,1.313,142,2.057,145,2.407,149,2.026,151,1.878,152,1.513,153,1.316,158,3.118,164,1.67,165,1.191,174,1.411,175,1.571,177,1.452,192,1.759,197,1.743,214,2.297,224,3,239,3.693,263,2.832,340,2.618,345,2.587,348,2.832,373,2.828,375,3.338,404,0.859,417,1.089,431,3,432,0.926,434,2.605,440,1.866,441,1.313,445,2.537,467,1.466,487,3.118,488,2.297,523,2.057,551,3.206,555,2.057,561,3.118,613,2.618,614,4.208,615,4.208,616,3.227,621,3.227,625,3.206,809,3.653,825,3.227,837,1.67,838,1.67,864,1.67,865,2.618,866,1.67,870,1.67,871,3.653,872,3.104,873,3.104,874,4.332,875,3.104,876,3.104,877,3.104,878,3.104,879,3.104,880,1.981,881,4.332,882,3.827,883,4.332,884,1.981,885,3.104,886,3.104,887,3.104,888,1.981,889,1.981,890,1.981,891,3.104,892,3.104,893,3.104,894,3.104,895,3.104,896,3.104,897,3.104,898,1.981,899,3.104,900,3.104,901,1.981,902,1.981,903,1.981,904,1.67,905,1.67,906,1.981,907,1.981,908,1.981,909,1.981,910,1.981,911,1.981,912,1.981,913,1.981,914,1.981,915,1.981,916,3.827,917,1.981,918,1.981]],["title/coverage.html",[919,3.384]],["body/coverage.html",[0,1.946,1,2.162,5,0.214,6,2.75,8,0.027,10,1.794,13,0.024,16,0.018,17,0.018,24,1.414,38,2.413,47,1.414,48,2.096,61,2.413,80,0.596,83,1.062,107,1.946,109,2.75,120,2.162,121,2.75,124,1.65,144,2.75,149,1.525,170,1.794,172,2.75,173,3.317,177,1.525,179,1.103,211,1.794,264,1.414,289,2.413,320,2.391,321,2.75,325,1.961,326,2.75,327,2.75,345,1.794,346,2.75,347,3.317,373,1.961,374,2.75,375,1.961,376,2.75,381,2.222,382,1.525,383,2.75,410,2.162,411,2.75,418,1.794,429,2.75,430,2.75,447,1.961,448,2.75,462,2.162,463,2.75,471,2.75,488,2.413,521,2.162,522,2.75,565,1.794,612,2.75,619,1.65,714,2.75,732,2.162,733,2.75,756,2.75,782,2.75,801,2.162,802,2.75,870,2.75,871,2.75,919,2.413,920,2.75,921,3.262,922,6.696,923,6.234,924,3.262,925,5.123,926,5.123,927,2.75,928,3.262,929,5.975,930,4.483,931,3.262,932,3.262,933,3.262,934,3.262,935,3.262,936,3.262,937,3.262,938,3.262,939,3.262,940,3.262,941,3.262,942,3.262]],["title/dependencies.html",[21,1.513,943,2.079]],["body/dependencies.html",[8,0.027,9,0.974,13,0.022,16,0.022,17,0.022,21,1.715,45,1.843,52,3.033,240,3.386,285,2.316,293,2.316,294,3.386,404,1.984,465,3.859,466,3.859,944,4.576,945,4.576,946,6.03,947,4.576,948,4.576,949,4.576,950,4.576,951,4.576,952,4.576,953,4.576,954,4.576,955,4.576,956,4.576,957,4.576,958,4.576,959,4.576,960,4.576,961,4.576,962,4.576]],["title/miscellaneous/enumerations.html",[963,1.545,964,3.404]],["body/miscellaneous/enumerations.html",[8,0.027,16,0.022,17,0.022,110,0.655,179,1.377,185,4.141,224,3.365,225,4.141,229,4.141,231,4.141,257,4.141,258,4.141,259,4.719,260,4.719,324,4.956,963,2.525,964,3.871,965,5.597,966,5.597,967,5.597,968,5.597]],["title/miscellaneous/functions.html",[963,1.545,969,3.404]],["body/miscellaneous/functions.html",[8,0.024,16,0.024,17,0.024,24,2.767,110,0.747,927,4.415,963,2.879,969,4.415,970,5.236]],["title/index.html",[110,0.401,520,2.369,971,2.81]],["body/index.html",[4,0.155,5,0.332,8,0.025,16,0.013,17,0.013,37,2.367,55,1.729,63,4.607,66,1.518,67,1.729,76,1.729,94,3.722,126,2.353,127,2.353,152,1.114,162,1.233,165,3.044,174,0.668,177,0.959,190,1.038,192,0.581,198,1.233,199,2.562,222,1.729,252,3.356,364,1.518,377,2.896,434,1.233,470,2.689,477,2.36,496,3.3,519,1.128,523,1.359,558,1.518,590,2.36,604,1.729,625,1.518,632,1.729,658,1.729,663,1.729,687,1.729,692,1.729,775,3.722,796,1.729,799,1.729,815,1.729,822,3.722,830,1.729,845,4.269,904,2.689,905,4.269,919,2.36,920,4.927,943,2.36,972,2.051,973,2.051,974,3.913,975,3.189,976,2.051,977,2.051,978,2.051,979,2.051,980,3.189,981,2.051,982,5.284,983,2.051,984,5.612,985,2.051,986,2.051,987,3.913,988,3.189,989,2.051,990,3.189,991,2.051,992,3.913,993,2.051,994,2.051,995,2.051,996,2.051,997,2.051,998,2.051,999,4.414,1000,5.464,1001,3.189,1002,2.051,1003,2.051,1004,2.051,1005,2.051,1006,3.189,1007,4.414,1008,2.051,1009,3.189,1010,2.051,1011,3.189,1012,5.063,1013,4.414,1014,2.051,1015,3.189,1016,2.051,1017,2.051,1018,2.051,1019,4.414,1020,2.051,1021,2.051,1022,2.051,1023,2.051,1024,3.189,1025,2.051,1026,2.051,1027,2.051,1028,2.051,1029,3.189,1030,2.051,1031,2.051,1032,2.051,1033,3.189,1034,2.051,1035,2.051,1036,3.722,1037,3.189,1038,2.051,1039,2.051,1040,2.051,1041,2.051,1042,2.051,1043,2.051,1044,2.051,1045,2.051,1046,3.189,1047,2.051,1048,2.051,1049,2.051,1050,2.051,1051,2.051,1052,3.913,1053,2.051,1054,2.051,1055,2.051,1056,3.189,1057,2.051,1058,2.051,1059,2.051,1060,2.051,1061,3.189,1062,2.051,1063,2.051,1064,2.051,1065,3.189,1066,3.189,1067,2.051,1068,2.051,1069,2.051,1070,2.051,1071,2.051,1072,2.051,1073,2.051,1074,2.051,1075,2.051,1076,4.414,1077,2.051,1078,2.051,1079,2.051,1080,2.051,1081,2.051,1082,2.051,1083,1.729,1084,2.051,1085,3.913,1086,2.051,1087,5.612,1088,2.051,1089,2.051,1090,2.051,1091,3.189,1092,4.414,1093,3.189,1094,2.051,1095,2.051,1096,2.051,1097,2.051,1098,2.051,1099,2.051,1100,2.051,1101,2.051,1102,3.189,1103,2.051,1104,5.284,1105,2.051,1106,2.051,1107,2.051,1108,2.051,1109,2.051,1110,2.051,1111,2.051,1112,2.051,1113,3.189,1114,3.189,1115,4.414,1116,3.913,1117,3.913,1118,2.051,1119,2.051,1120,2.051,1121,3.189,1122,2.051,1123,2.051,1124,2.051,1125,4.414,1126,2.051,1127,3.189,1128,2.051,1129,3.189,1130,2.051,1131,2.051,1132,2.051,1133,2.051,1134,2.051,1135,2.051,1136,3.189,1137,3.189,1138,3.189,1139,2.051,1140,2.051,1141,2.051,1142,2.051,1143,3.913,1144,2.051,1145,2.051,1146,2.051,1147,2.051,1148,2.051,1149,2.051,1150,2.051,1151,2.051,1152,2.051,1153,2.051,1154,2.051]],["title/modules.html",[20,1.983]],["body/modules.html",[8,0.023,16,0.023,17,0.023,19,3.205,20,2.096,30,2.659,31,2.907,32,2.907,33,2.659,34,2.447,1036,5.594,1155,6.634,1156,6.634,1157,6.634]],["title/overview.html",[1158,3.857]],["body/overview.html",[2,1.178,8,0.027,10,2.971,16,0.019,17,0.019,18,1.178,19,4.44,20,1.569,21,1.356,22,1.831,23,1.831,24,1.569,25,1.831,26,1.831,27,3.052,28,3.052,29,3.052,30,3.388,31,3.603,32,3.886,33,3.458,34,3.181,35,2.434,36,1.831,37,1.692,82,1.692,108,1.831,124,3.181,134,3.052,135,3.052,136,3.052,149,2.94,171,1.692,418,2.971,423,3.052,424,3.052,565,2.971,595,3.052,597,3.052,619,3.181,749,3.052,750,3.052,751,3.052,858,3.052,859,3.052,860,3.052,1158,3.052,1159,5.402,1160,3.619,1161,3.619]],["title/properties.html",[180,1.41,943,2.079]],["body/properties.html",[8,0.027,16,0.024,17,0.024,174,1.687,180,1.809,198,3.114,1083,4.368,1162,5.18,1163,5.18,1164,5.18]],["title/miscellaneous/variables.html",[963,1.545,1165,3.404]],["body/miscellaneous/variables.html",[8,0.025,16,0.024,17,0.024,38,3.833,57,3.833,61,4.45,62,4.368,110,0.739,324,3.833,963,2.848,1165,4.368,1166,5.18]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":922,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":1163,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":955,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":959,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":962,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":954,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":923,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":925,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":931,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":926,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":939,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":936,"title":{},"body":{"coverage.html":{}}}],["03",{"_index":233,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1",{"_index":308,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["1.1.23",{"_index":945,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":933,"title":{},"body":{"coverage.html":{}}}],["1/6",{"_index":938,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":847,"title":{},"body":{"controllers/UsersController.html":{}}}],["10.0.0",{"_index":946,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":953,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":929,"title":{},"body":{"coverage.html":{}}}],["1024",{"_index":484,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["10})@apiquery({name",{"_index":820,"title":{},"body":{"controllers/UsersController.html":{}}}],["12/12",{"_index":932,"title":{},"body":{"coverage.html":{}}}],["1234",{"_index":380,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["1234'})@isoptional()@isint()@type(undefined",{"_index":378,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["16",{"_index":937,"title":{},"body":{"coverage.html":{}}}],["16t07:46:32+0000",{"_index":307,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["16t07:46:32+0000'})@isiso8601()@isoptional",{"_index":234,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1})@isint()@isnotempty",{"_index":458,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["1})@isnotempty()@isint",{"_index":200,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["2",{"_index":309,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["2.0.5",{"_index":949,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":930,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":543,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["201",{"_index":531,"title":{},"body":{"controllers/PostsController.html":{}}}],["2024",{"_index":232,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["256",{"_index":500,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["3.2.2",{"_index":947,"title":{},"body":{"dependencies.html":{}}}],["3001",{"_index":1134,"title":{},"body":{"index.html":{}}}],["4",{"_index":1160,"title":{},"body":{"overview.html":{}}}],["4/5",{"_index":941,"title":{},"body":{"coverage.html":{}}}],["400",{"_index":534,"title":{},"body":{"controllers/PostsController.html":{}}}],["404",{"_index":545,"title":{},"body":{"controllers/PostsController.html":{}}}],["5/5",{"_index":934,"title":{},"body":{"coverage.html":{}}}],["512",{"_index":509,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["6",{"_index":1159,"title":{},"body":{"overview.html":{}}}],["6/6",{"_index":935,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":1161,"title":{},"body":{"overview.html":{}}}],["7.3.0",{"_index":952,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":961,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":361,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["8.11.5",{"_index":957,"title":{},"body":{"dependencies.html":{}}}],["80",{"_index":940,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":249,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["96",{"_index":783,"title":{},"body":{"entities/User.html":{}}}],["actual",{"_index":592,"title":{},"body":{"controllers/PostsController.html":{}}}],["add",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["additional",{"_index":219,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["against",{"_index":319,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["alice",{"_index":909,"title":{},"body":{"injectables/UsersService.html":{}}}],["alice@doe.com",{"_index":910,"title":{},"body":{"injectables/UsersService.html":{}}}],["allowing",{"_index":1025,"title":{},"body":{"index.html":{}}}],["along",{"_index":632,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{}}}],["always",{"_index":1151,"title":{},"body":{"index.html":{}}}],["amazing",{"_index":1071,"title":{},"body":{"index.html":{}}}],["api",{"_index":823,"title":{},"body":{"controllers/UsersController.html":{}}}],["apioperation",{"_index":567,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":529,"title":{},"body":{"controllers/PostsController.html":{}}}],["apiparam",{"_index":570,"title":{},"body":{"controllers/PostsController.html":{}}}],["apiproperty",{"_index":291,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty()@isstring()@isnotempty()@matches(/^[a",{"_index":337,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apiproperty()@isstring()@minlength(3)@isnotempty()@maxlength(256",{"_index":333,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apiproperty({description",{"_index":246,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({enum",{"_index":221,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiproperty({example",{"_index":269,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiproperty({type",{"_index":194,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apipropertyoptional",{"_index":292,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional()@isoptional()@isjson",{"_index":335,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apipropertyoptional()@isoptional()@isstring",{"_index":329,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apipropertyoptional()@isoptional()@isurl()@maxlength(1024",{"_index":331,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apipropertyoptional({description",{"_index":202,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({type",{"_index":213,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiquery",{"_index":571,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiresponse",{"_index":568,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":569,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags('posts",{"_index":575,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('users",{"_index":843,"title":{},"body":{"controllers/UsersController.html":{}}}],["app.controller",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appconfig",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":845,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["application'})@apiresponse({status",{"_index":813,"title":{},"body":{"controllers/UsersController.html":{}}}],["applications",{"_index":980,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":19,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":10,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["argument",{"_index":1147,"title":{},"body":{"index.html":{}}}],["array",{"_index":263,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["associated",{"_index":266,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["async",{"_index":431,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["atomically",{"_index":659,"title":{},"body":{"injectables/PostsService.html":{}}}],["auth",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth.controller",{"_index":139,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/providers/auth",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{}}}],["authcontroller",{"_index":120,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authentication",{"_index":874,"title":{},"body":{"injectables/UsersService.html":{}}}],["authmodule",{"_index":30,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":198,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"index.html":{},"properties.html":{}}}],["authorid",{"_index":181,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["authservice",{"_index":124,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["autoloadentities",{"_index":84,"title":{},"body":{"modules/AppModule.html":{}}}],["automatically",{"_index":669,"title":{},"body":{"injectables/PostsService.html":{}}}],["available",{"_index":77,"title":{},"body":{"modules/AppModule.html":{}}}],["avoid",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{}}}],["avoided",{"_index":877,"title":{},"body":{"injectables/UsersService.html":{}}}],["await",{"_index":445,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["aws",{"_index":1015,"title":{},"body":{"index.html":{}}}],["backers",{"_index":1072,"title":{},"body":{"index.html":{}}}],["based",{"_index":815,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["basic",{"_index":896,"title":{},"body":{"injectables/UsersService.html":{}}}],["basically",{"_index":1108,"title":{},"body":{"index.html":{}}}],["become",{"_index":640,"title":{},"body":{"injectables/PostsService.html":{}}}],["before",{"_index":776,"title":{},"body":{"injectables/TagsService.html":{}}}],["between",{"_index":591,"title":{},"body":{"controllers/PostsController.html":{}}}],["bidirectional",{"_index":491,"title":{},"body":{"entities/Post.html":{}}}],["bit",{"_index":1095,"title":{},"body":{"index.html":{}}}],["blog",{"_index":178,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{}}}],["board",{"_index":1064,"title":{},"body":{"index.html":{}}}],["body",{"_index":416,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["body(new",{"_index":855,"title":{},"body":{"controllers/UsersController.html":{}}}],["boolean",{"_index":155,"title":{},"body":{"injectables/AuthService.html":{}}}],["bootstrap",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["both",{"_index":658,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{}}}],["browse",{"_index":1157,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1155,"title":{},"body":{"modules.html":{}}}],["building",{"_index":975,"title":{},"body":{"index.html":{}}}],["c:\\users\\mfabouatmeh\\desktop\\codesdar\\more\\postgre\\data",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["cascade",{"_index":409,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{}}}],["cascade'})@joincolumn",{"_index":396,"title":{},"body":{"entities/MetaOption.html":{}}}],["cascades",{"_index":587,"title":{},"body":{"controllers/PostsController.html":{}}}],["catch",{"_index":678,"title":{},"body":{"injectables/PostsService.html":{}}}],["cause",{"_index":141,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["certain",{"_index":1111,"title":{},"body":{"index.html":{}}}],["changes",{"_index":1136,"title":{},"body":{"index.html":{}}}],["channel",{"_index":1039,"title":{},"body":{"index.html":{}}}],["character",{"_index":367,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["chars",{"_index":362,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["check",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["checks",{"_index":875,"title":{},"body":{"injectables/UsersService.html":{}}}],["circular",{"_index":142,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["class",{"_index":13,"title":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":171,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"overview.html":{}}}],["clean",{"_index":691,"title":{},"body":{"injectables/PostsService.html":{}}}],["clicks",{"_index":1024,"title":{},"body":{"index.html":{}}}],["cloud",{"_index":1010,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":134,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":135,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":136,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule",{"_index":423,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule_providers",{"_index":424,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":595,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":596,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":597,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule",{"_index":749,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_exports",{"_index":750,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_providers",{"_index":751,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":858,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":860,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":859,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cmd",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["code",{"_index":470,"title":{},"body":{"classes/PatchUserDto.html":{},"index.html":{}}}],["column",{"_index":401,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["column({type",{"_index":390,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["combo",{"_index":1145,"title":{},"body":{"index.html":{}}}],["come",{"_index":1030,"title":{},"body":{"index.html":{}}}],["comma",{"_index":1090,"title":{},"body":{"index.html":{}}}],["commit",{"_index":673,"title":{},"body":{"injectables/PostsService.html":{}}}],["compared",{"_index":1128,"title":{},"body":{"index.html":{}}}],["compo",{"_index":1104,"title":{},"body":{"index.html":{}}}],["compodoc",{"_index":1084,"title":{},"body":{"index.html":{}}}],["compodoc/compodoc",{"_index":944,"title":{},"body":{"dependencies.html":{}}}],["config",{"_index":905,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["config/app.config",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["config/database.config",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["config/profile.config",{"_index":866,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["configmodule",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["configmodule.forfeature(profileconfig",{"_index":869,"title":{},"body":{"modules/UsersModule.html":{}}}],["configmodule.forroot",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"injectables/UsersService.html":{}}}],["configservice.get('database.autoloadentities",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.host",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.name",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.pass",{"_index":99,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.port",{"_index":95,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.synchronize",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.user",{"_index":97,"title":{},"body":{"modules/AppModule.html":{}}}],["configtype",{"_index":883,"title":{},"body":{"injectables/UsersService.html":{}}}],["configurations",{"_index":1112,"title":{},"body":{"index.html":{}}}],["console.error(error",{"_index":685,"title":{},"body":{"injectables/PostsService.html":{}}}],["console.log(this.profileconfiguration",{"_index":906,"title":{},"body":{"injectables/UsersService.html":{}}}],["const",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":880,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(metaoptionrepository",{"_index":433,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["constructor(private",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{}}}],["constructor(tagsrepository",{"_index":759,"title":{},"body":{"injectables/TagsService.html":{}}}],["constructor(usersservice",{"_index":148,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["constructs",{"_index":885,"title":{},"body":{"injectables/UsersService.html":{}}}],["containing",{"_index":239,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["content",{"_index":182,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["context",{"_index":241,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('meta",{"_index":421,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["controller('posts",{"_index":574,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('tags",{"_index":743,"title":{},"body":{"controllers/TagsController.html":{}}}],["controller('users",{"_index":842,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["copy",{"_index":650,"title":{},"body":{"injectables/PostsService.html":{}}}],["corresponding",{"_index":609,"title":{},"body":{"modules/PostsModule.html":{}}}],["courses",{"_index":1045,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":919,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":432,"title":{},"body":{"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["create(@body",{"_index":644,"title":{},"body":{"injectables/PostsService.html":{},"controllers/TagsController.html":{}}}],["create(createmetaoptiondto",{"_index":437,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["create(createpostdto",{"_index":622,"title":{},"body":{"injectables/PostsService.html":{}}}],["create(createtagdto",{"_index":735,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["created",{"_index":532,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["createdate",{"_index":384,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["createdatecolumn",{"_index":386,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["createmetaoption",{"_index":412,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["createmetaoption(createpostmetaoptiondto",{"_index":413,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["createmetaoptiondto",{"_index":439,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["createpost",{"_index":524,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(@body",{"_index":581,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(createpostdto",{"_index":528,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpostdto",{"_index":170,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["createpostmetaoptiondto",{"_index":415,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["createpostmetaoptionsdto",{"_index":211,"title":{"classes/CreatePostMetaOptionsDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["creates",{"_index":316,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["createtagdto",{"_index":325,"title":{"classes/CreateTagDto.html":{}},"body":{"classes/CreateTagDto.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"coverage.html":{}}}],["createuser",{"_index":878,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuser(createuserdto",{"_index":887,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto",{"_index":345,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":914,"title":{},"body":{"injectables/UsersService.html":{}}}],["createusers",{"_index":803,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusers(createuserdto",{"_index":806,"title":{},"body":{"controllers/UsersController.html":{}}}],["creating",{"_index":176,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/TagsService.html":{}}}],["creation",{"_index":624,"title":{},"body":{"injectables/PostsService.html":{}}}],["crowded",{"_index":641,"title":{},"body":{"injectables/PostsService.html":{}}}],["crud",{"_index":873,"title":{},"body":{"injectables/UsersService.html":{}}}],["d",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["data",{"_index":499,"title":{},"body":{"entities/Post.html":{},"controllers/PostsController.html":{}}}],["data'})@post",{"_index":537,"title":{},"body":{"controllers/PostsController.html":{}}}],["database",{"_index":102,"title":{},"body":{"modules/AppModule.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["databaseconfig",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["date",{"_index":230,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["db",{"_index":611,"title":{},"body":{"modules/PostsModule.html":{},"injectables/TagsService.html":{}}}],["declarations",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorartor",{"_index":729,"title":{},"body":{"entities/Tag.html":{}}}],["decorator",{"_index":313,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["decorators",{"_index":193,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["deeper",{"_index":1041,"title":{},"body":{"index.html":{}}}],["default",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"entities/Post.html":{},"miscellaneous/variables.html":{}}}],["defaultvaluepipe",{"_index":835,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(1",{"_index":851,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(10",{"_index":849,"title":{},"body":{"controllers/UsersController.html":{}}}],["define",{"_index":1152,"title":{},"body":{"index.html":{}}}],["defined",{"_index":113,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":525,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["delete'})@apiresponse({status",{"_index":542,"title":{},"body":{"controllers/PostsController.html":{}}}],["delete('soft",{"_index":739,"title":{},"body":{"controllers/TagsController.html":{}}}],["delete(@query('id",{"_index":593,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{}}}],["delete(id",{"_index":539,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["deleted",{"_index":544,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["deletedat",{"_index":715,"title":{},"body":{"entities/Tag.html":{}}}],["deletedatecolumn",{"_index":717,"title":{},"body":{"entities/Tag.html":{}}}],["deletes",{"_index":540,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["deleting",{"_index":777,"title":{},"body":{"injectables/TagsService.html":{}}}],["deletion",{"_index":629,"title":{},"body":{"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["dependencies",{"_index":21,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{},"overview.html":{}}}],["dependency",{"_index":143,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{}}}],["deploy",{"_index":999,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":1014,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":1006,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":1023,"title":{},"body":{"index.html":{}}}],["description",{"_index":174,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"properties.html":{}}}],["details",{"_index":625,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["development",{"_index":986,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":1051,"title":{},"body":{"index.html":{}}}],["differ",{"_index":794,"title":{},"body":{"entities/User.html":{}}}],["directory",{"_index":1143,"title":{},"body":{"index.html":{}}}],["disable",{"_index":829,"title":{},"body":{"controllers/UsersController.html":{}}}],["discord",{"_index":1038,"title":{},"body":{"index.html":{}}}],["dive",{"_index":1040,"title":{},"body":{"index.html":{}}}],["doc",{"_index":1087,"title":{},"body":{"index.html":{}}}],["doclet",{"_index":1086,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":920,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["doesnt",{"_index":639,"title":{},"body":{"injectables/PostsService.html":{}}}],["draft",{"_index":258,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["dto",{"_index":175,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["dto/create",{"_index":572,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["dto/patch",{"_index":573,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["dtos/create",{"_index":417,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/get",{"_index":837,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/patch",{"_index":839,"title":{},"body":{"controllers/UsersController.html":{}}}],["e.g",{"_index":228,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["e2e",{"_index":994,"title":{},"body":{"index.html":{}}}],["each",{"_index":310,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["eager",{"_index":475,"title":{},"body":{"entities/Post.html":{}}}],["efficient",{"_index":976,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":1005,"title":{},"body":{"index.html":{}}}],["email",{"_index":158,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["enable",{"_index":1135,"title":{},"body":{"index.html":{}}}],["enables",{"_index":730,"title":{},"body":{"entities/Tag.html":{}}}],["ensure",{"_index":1003,"title":{},"body":{"index.html":{}}}],["ensuring",{"_index":876,"title":{},"body":{"injectables/UsersService.html":{}}}],["enterprise",{"_index":1055,"title":{},"body":{"index.html":{}}}],["entire",{"_index":602,"title":{},"body":{"modules/PostsModule.html":{}}}],["entities",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"overview.html":{}}}],["entity",{"_index":381,"title":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"entities/Tag.html":{},"entities/User.html":{},"coverage.html":{}}}],["entries",{"_index":817,"title":{},"body":{"controllers/UsersController.html":{}}}],["enum",{"_index":297,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["enumerations",{"_index":964,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/post",{"_index":286,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["env",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["env.${env",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["error",{"_index":679,"title":{},"body":{"injectables/PostsService.html":{}}}],["error('post",{"_index":668,"title":{},"body":{"injectables/PostsService.html":{}}}],["error.message",{"_index":686,"title":{},"body":{"injectables/PostsService.html":{}}}],["eslint",{"_index":828,"title":{},"body":{"controllers/UsersController.html":{}}}],["eslint/no",{"_index":831,"title":{},"body":{"controllers/UsersController.html":{}}}],["etc",{"_index":504,"title":{},"body":{"entities/Post.html":{}}}],["everything",{"_index":674,"title":{},"body":{"injectables/PostsService.html":{}}}],["example",{"_index":199,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["except",{"_index":454,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["exception",{"_index":915,"title":{},"body":{"injectables/UsersService.html":{}}}],["existing",{"_index":450,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["existinguser",{"_index":912,"title":{},"body":{"injectables/UsersService.html":{}}}],["exists",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TagsService.html":{}}}],["experience",{"_index":1043,"title":{},"body":{"index.html":{}}}],["explain",{"_index":1099,"title":{},"body":{"index.html":{}}}],["export",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":951,"title":{},"body":{"dependencies.html":{}}}],["extend",{"_index":468,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["extends",{"_index":451,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["failure",{"_index":684,"title":{},"body":{"injectables/PostsService.html":{}}}],["false",{"_index":90,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["fast",{"_index":1017,"title":{},"body":{"index.html":{}}}],["feature",{"_index":606,"title":{},"body":{"modules/PostsModule.html":{}}}],["featured",{"_index":207,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["featuredimage",{"_index":328,"title":{},"body":{"classes/CreateTagDto.html":{},"entities/Tag.html":{}}}],["featuredimageurl",{"_index":183,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["features",{"_index":1027,"title":{},"body":{"index.html":{}}}],["fetch",{"_index":518,"title":{},"body":{"entities/Post.html":{}}}],["fetched",{"_index":814,"title":{},"body":{"controllers/UsersController.html":{}}}],["fetches",{"_index":811,"title":{},"body":{"controllers/UsersController.html":{}}}],["few",{"_index":1019,"title":{},"body":{"index.html":{}}}],["fields",{"_index":453,"title":{},"body":{"classes/PatchPostDto.html":{},"injectables/PostsService.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{}}}],["filters",{"_index":891,"title":{},"body":{"injectables/UsersService.html":{}}}],["finally",{"_index":687,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{}}}],["find",{"_index":664,"title":{},"body":{"injectables/PostsService.html":{}}}],["findall",{"_index":616,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["findall(getuserparamdto",{"_index":889,"title":{},"body":{"injectables/UsersService.html":{}}}],["findall(userid",{"_index":630,"title":{},"body":{"injectables/PostsService.html":{}}}],["findmultipletags",{"_index":757,"title":{},"body":{"injectables/TagsService.html":{}}}],["findmultipletags(tags",{"_index":764,"title":{},"body":{"injectables/TagsService.html":{}}}],["findonebyid",{"_index":879,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyid(id",{"_index":897,"title":{},"body":{"injectables/UsersService.html":{}}}],["finds",{"_index":774,"title":{},"body":{"injectables/TagsService.html":{}}}],["first",{"_index":1102,"title":{},"body":{"index.html":{}}}],["firstname",{"_index":348,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["flag",{"_index":1125,"title":{},"body":{"index.html":{}}}],["flat",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TagsService.html":{}}}],["focus",{"_index":1026,"title":{},"body":{"index.html":{}}}],["follow",{"_index":1058,"title":{},"body":{"index.html":{}}}],["forwardref",{"_index":138,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["found",{"_index":583,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["found'})@delete",{"_index":546,"title":{},"body":{"controllers/PostsController.html":{}}}],["found'})@patch",{"_index":559,"title":{},"body":{"controllers/PostsController.html":{}}}],["framework",{"_index":974,"title":{},"body":{"index.html":{}}}],["friendly",{"_index":502,"title":{},"body":{"entities/Post.html":{}}}],["full",{"_index":1054,"title":{},"body":{"index.html":{}}}],["function",{"_index":928,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":969,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":1022,"title":{},"body":{"index.html":{}}}],["generate",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/TagsService.html":{},"index.html":{}}}],["generated",{"_index":1130,"title":{},"body":{"index.html":{}}}],["generating",{"_index":1144,"title":{},"body":{"index.html":{}}}],["get('/:id",{"_index":844,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:id?')@apioperation({summary",{"_index":810,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:userid",{"_index":576,"title":{},"body":{"controllers/PostsController.html":{}}}],["get('/:userid?')@apioperation({summary",{"_index":550,"title":{},"body":{"controllers/PostsController.html":{}}}],["gethello",{"_index":112,"title":{},"body":{"injectables/AppService.html":{}}}],["getposts",{"_index":526,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(@param('userid",{"_index":578,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(userid",{"_index":549,"title":{},"body":{"controllers/PostsController.html":{}}}],["getting",{"_index":520,"title":{"index.html":{}},"body":{"entities/Post.html":{}}}],["getuserparamdto",{"_index":825,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getusers",{"_index":804,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(getuserparamdto",{"_index":808,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusersparamdto",{"_index":373,"title":{"classes/GetUsersParamDto.html":{}},"body":{"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["give",{"_index":1142,"title":{},"body":{"index.html":{}}}],["global",{"_index":853,"title":{},"body":{"controllers/UsersController.html":{}}}],["go",{"_index":1101,"title":{},"body":{"index.html":{}}}],["going",{"_index":1119,"title":{},"body":{"index.html":{}}}],["graph",{"_index":1048,"title":{},"body":{"index.html":{}}}],["grow",{"_index":1068,"title":{},"body":{"index.html":{}}}],["handle",{"_index":621,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["handling",{"_index":613,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["hands",{"_index":1042,"title":{},"body":{"index.html":{}}}],["handy",{"_index":1031,"title":{},"body":{"index.html":{}}}],["having",{"_index":1131,"title":{},"body":{"index.html":{}}}],["headers",{"_index":834,"title":{},"body":{"controllers/UsersController.html":{}}}],["hello",{"_index":118,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":1046,"title":{},"body":{"index.html":{}}}],["here",{"_index":1076,"title":{},"body":{"index.html":{}}}],["host",{"_index":100,"title":{},"body":{"modules/AppModule.html":{}}}],["http://localhost.com/images/image1.jpg",{"_index":305,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["http://localhost.com/images/image1.jpg'})@isoptional()@minlength(4)@maxlength(1024)@isurl",{"_index":209,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["http://localhost:3001/coverage.htmlit",{"_index":1089,"title":{},"body":{"index.html":{}}}],["https://nestjs.com",{"_index":1080,"title":{},"body":{"index.html":{}}}],["https://orkhan.gitbook.io/typeorm/docs/decorator",{"_index":727,"title":{},"body":{"entities/Tag.html":{}}}],["https://schema.org",{"_index":242,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://schema.org\",\\r\\n",{"_index":303,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["hyphen",{"_index":1115,"title":{},"body":{"index.html":{}}}],["i'll",{"_index":1098,"title":{},"body":{"index.html":{}}}],["i'm",{"_index":1138,"title":{},"body":{"index.html":{}}}],["i.e",{"_index":1154,"title":{},"body":{"index.html":{}}}],["id",{"_index":197,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["id'})@apiquery({name",{"_index":541,"title":{},"body":{"controllers/PostsController.html":{}}}],["identifier",{"_index":488,"title":{},"body":{"entities/Post.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["ids",{"_index":265,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/TagsService.html":{}}}],["image",{"_index":208,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["import",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["important",{"_index":690,"title":{},"body":{"injectables/PostsService.html":{}}}],["imported",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["imports",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}}}],["in(tags",{"_index":773,"title":{},"body":{"injectables/TagsService.html":{}}}],["include",{"_index":363,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["incoming",{"_index":314,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["index",{"_index":110,"title":{"index.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["indicating",{"_index":628,"title":{},"body":{"injectables/PostsService.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["information",{"_index":1008,"title":{},"body":{"index.html":{}}}],["infrastructure",{"_index":1028,"title":{},"body":{"index.html":{}}}],["inject",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["inject(forwardref",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["inject(profileconfig.key",{"_index":903,"title":{},"body":{"injectables/UsersService.html":{}}}],["injectable",{"_index":107,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":108,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injecting",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["injectrepository",{"_index":441,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(metaoption",{"_index":443,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{}}}],["injectrepository(post",{"_index":637,"title":{},"body":{"injectables/PostsService.html":{}}}],["injectrepository(tag",{"_index":769,"title":{},"body":{"injectables/TagsService.html":{}}}],["injectrepository(user",{"_index":902,"title":{},"body":{"injectables/UsersService.html":{}}}],["inside",{"_index":610,"title":{},"body":{"modules/PostsModule.html":{}}}],["install",{"_index":1021,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":985,"title":{},"body":{"index.html":{}}}],["instance",{"_index":317,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{}}}],["instead",{"_index":671,"title":{},"body":{"injectables/PostsService.html":{}}}],["instructs",{"_index":1127,"title":{},"body":{"index.html":{}}}],["integer",{"_index":195,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["interact",{"_index":1049,"title":{},"body":{"index.html":{}}}],["interacts",{"_index":872,"title":{},"body":{"injectables/UsersService.html":{}}}],["invalid",{"_index":535,"title":{},"body":{"controllers/PostsController.html":{}}}],["isarray",{"_index":272,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isauth",{"_index":146,"title":{},"body":{"injectables/AuthService.html":{}}}],["isemail",{"_index":369,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isemail()@isnotempty()@maxlength(96",{"_index":350,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":273,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(poststatus",{"_index":301,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttype",{"_index":298,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isglobal",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["isint",{"_index":274,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{}}}],["isiso8601",{"_index":275,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isjson",{"_index":276,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{}}}],["isnotempty",{"_index":277,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchPostDto.html":{}}}],["isnotempty()@isjson",{"_index":322,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["isoptional",{"_index":278,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{}}}],["isoptional()@isjson",{"_index":244,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isstring",{"_index":279,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@maxlength(96)@minlength(8)@matches(/^(?=.*[a",{"_index":356,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":352,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isoptional()@minlength(3)@maxlength(96",{"_index":354,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isurl",{"_index":280,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["it's",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["items",{"_index":215,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["itself",{"_index":1093,"title":{},"body":{"index.html":{}}}],["job",{"_index":1061,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":1063,"title":{},"body":{"index.html":{}}}],["john",{"_index":907,"title":{},"body":{"injectables/UsersService.html":{}}}],["john@doe.com",{"_index":908,"title":{},"body":{"injectables/UsersService.html":{}}}],["join",{"_index":1074,"title":{},"body":{"index.html":{}}}],["joincolumn",{"_index":402,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["jointable",{"_index":511,"title":{},"body":{"entities/Post.html":{}}}],["json",{"_index":238,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{}}}],["kamil",{"_index":1078,"title":{},"body":{"index.html":{}}}],["key",{"_index":604,"title":{},"body":{"modules/PostsModule.html":{},"index.html":{}}}],["large",{"_index":481,"title":{},"body":{"entities/Post.html":{}}}],["lastname",{"_index":349,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["learn",{"_index":1034,"title":{},"body":{"index.html":{}}}],["legend",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":483,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["lengthy",{"_index":1097,"title":{},"body":{"index.html":{}}}],["let's",{"_index":1133,"title":{},"body":{"index.html":{}}}],["letter",{"_index":365,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["letters",{"_index":339,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["license",{"_index":1083,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1066,"title":{},"body":{"index.html":{}}}],["limit",{"_index":809,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["linkedin",{"_index":1060,"title":{},"body":{"index.html":{}}}],["list",{"_index":555,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["little",{"_index":1094,"title":{},"body":{"index.html":{}}}],["load",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["loaded",{"_index":665,"title":{},"body":{"injectables/PostsService.html":{}}}],["localhost:3001",{"_index":1150,"title":{},"body":{"index.html":{}}}],["log",{"_index":683,"title":{},"body":{"injectables/PostsService.html":{}}}],["login",{"_index":147,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(email",{"_index":156,"title":{},"body":{"injectables/AuthService.html":{}}}],["looking",{"_index":1009,"title":{},"body":{"index.html":{}}}],["loop",{"_index":1057,"title":{},"body":{"index.html":{}}}],["lowercase",{"_index":251,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["main",{"_index":203,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["make",{"_index":841,"title":{},"body":{"controllers/UsersController.html":{}}}],["makes",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["making",{"_index":452,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["managing",{"_index":523,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["manually",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["many",{"_index":477,"title":{},"body":{"entities/Post.html":{},"entities/User.html":{},"index.html":{}}}],["manytomany",{"_index":512,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["manytomany(undefined",{"_index":505,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["manytoone",{"_index":513,"title":{},"body":{"entities/Post.html":{}}}],["manytoone(undefined",{"_index":473,"title":{},"body":{"entities/Post.html":{}}}],["match",{"_index":800,"title":{},"body":{"entities/User.html":{}}}],["matches",{"_index":281,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["matches(/^(?=.*[a",{"_index":372,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(/^[a",{"_index":300,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["matching",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["mau",{"_index":1012,"title":{},"body":{"index.html":{}}}],["maximum",{"_index":893,"title":{},"body":{"injectables/UsersService.html":{}}}],["maxlength",{"_index":282,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["maxlength(1024",{"_index":306,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(256",{"_index":299,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(512",{"_index":296,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(96",{"_index":370,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["meaning",{"_index":651,"title":{},"body":{"injectables/PostsService.html":{}}}],["message",{"_index":250,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["meta",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["metadata",{"_index":240,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"dependencies.html":{}}}],["metaoption",{"_index":382,"title":{"entities/MetaOption.html":{}},"body":{"entities/MetaOption.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["metaoptionrepository",{"_index":436,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["metaoptions",{"_index":184,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{}}}],["metaoptions.post",{"_index":489,"title":{},"body":{"entities/Post.html":{}}}],["metaoptionscontroller",{"_index":410,"title":{"controllers/MetaOptionsController.html":{}},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"coverage.html":{}}}],["metaoptionsmodule",{"_index":31,"title":{"modules/MetaOptionsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules.html":{},"overview.html":{}}}],["metaoptionsrepository",{"_index":442,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{}}}],["metaoptionsservice",{"_index":418,"title":{"injectables/MetaOptionsService.html":{}},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{},"overview.html":{}}}],["metavalue",{"_index":311,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"entities/MetaOption.html":{}}}],["method",{"_index":586,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["methods",{"_index":111,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["migrations",{"_index":93,"title":{},"body":{"modules/AppModule.html":{}}}],["minimum",{"_index":360,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength",{"_index":283,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":344,"title":{},"body":{"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(4",{"_index":295,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["minlength(8",{"_index":371,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":963,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1065,"title":{},"body":{"index.html":{}}}],["mode",{"_index":988,"title":{},"body":{"index.html":{}}}],["module",{"_index":18,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":20,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":1007,"title":{},"body":{"index.html":{}}}],["multiple",{"_index":846,"title":{},"body":{"controllers/UsersController.html":{}}}],["mysql",{"_index":408,"title":{},"body":{"entities/MetaOption.html":{}}}],["myśliwiec",{"_index":1079,"title":{},"body":{"index.html":{}}}],["name",{"_index":152,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateTagDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["necessary",{"_index":886,"title":{},"body":{"injectables/UsersService.html":{}}}],["need",{"_index":1052,"title":{},"body":{"index.html":{}}}],["needed",{"_index":1141,"title":{},"body":{"index.html":{}}}],["needing",{"_index":405,"title":{},"body":{"entities/MetaOption.html":{}}}],["needs",{"_index":456,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["nest",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/TagsService.html":{},"index.html":{}}}],["nestframework",{"_index":1082,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":1000,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":948,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":465,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":950,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":293,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["never",{"_index":867,"title":{},"body":{"modules/UsersModule.html":{}}}],["new",{"_index":177,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{}}}],["newly",{"_index":626,"title":{},"body":{"injectables/PostsService.html":{}}}],["newuser",{"_index":916,"title":{},"body":{"injectables/UsersService.html":{}}}],["next",{"_index":1124,"title":{},"body":{"index.html":{}}}],["node.js",{"_index":973,"title":{},"body":{"index.html":{}}}],["now",{"_index":1092,"title":{},"body":{"index.html":{}}}],["npcs",{"_index":1103,"title":{},"body":{"index.html":{}}}],["npm",{"_index":984,"title":{},"body":{"index.html":{}}}],["npx",{"_index":104,"title":{},"body":{"modules/AppModule.html":{},"injectables/TagsService.html":{}}}],["null",{"_index":212,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["nullable",{"_index":391,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["number",{"_index":192,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["object",{"_index":214,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["object(unavailable",{"_index":407,"title":{},"body":{"entities/MetaOption.html":{}}}],["objects",{"_index":895,"title":{},"body":{"injectables/UsersService.html":{}}}],["occurs",{"_index":680,"title":{},"body":{"injectables/PostsService.html":{}}}],["offer",{"_index":1062,"title":{},"body":{"index.html":{}}}],["official",{"_index":1013,"title":{},"body":{"index.html":{}}}],["once",{"_index":1122,"title":{},"body":{"index.html":{}}}],["ondelete",{"_index":395,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["one",{"_index":364,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/Post.html":{},"index.html":{}}}],["onetomany",{"_index":792,"title":{},"body":{"entities/User.html":{}}}],["onetomany(undefined",{"_index":789,"title":{},"body":{"entities/User.html":{}}}],["onetoone",{"_index":403,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["onetoone(undefined",{"_index":393,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["open",{"_index":1067,"title":{},"body":{"index.html":{}}}],["operations",{"_index":615,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["operator",{"_index":648,"title":{},"body":{"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["option.entity",{"_index":427,"title":{},"body":{"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["option.entity.ts",{"_index":383,"title":{},"body":{"entities/MetaOption.html":{},"coverage.html":{}}}],["option.entity.ts:15",{"_index":389,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:21",{"_index":392,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:23",{"_index":387,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:25",{"_index":399,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:31",{"_index":397,"title":{},"body":{"entities/MetaOption.html":{}}}],["optional",{"_index":153,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["optional)'})@apiresponse({status",{"_index":554,"title":{},"body":{"controllers/PostsController.html":{}}}],["options",{"_index":220,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"controllers/MetaOptionsController.html":{},"entities/Post.html":{},"injectables/PostsService.html":{}}}],["options.controller",{"_index":426,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["options.controller.ts",{"_index":411,"title":{},"body":{"controllers/MetaOptionsController.html":{},"coverage.html":{}}}],["options.controller.ts:9",{"_index":414,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["options.dto",{"_index":290,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{}}}],["options.dto.ts",{"_index":321,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["options.dto.ts:14",{"_index":323,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["options.module",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["options.module.ts",{"_index":425,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["options.service",{"_index":420,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{}}}],["options.service.ts",{"_index":430,"title":{},"body":{"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["options.service.ts:17",{"_index":438,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["options.service.ts:8",{"_index":435,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["options/dtos/create",{"_index":289,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["options/meta",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["options/providers/meta",{"_index":429,"title":{},"body":{"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["order",{"_index":1105,"title":{},"body":{"index.html":{}}}],["out",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["over",{"_index":1091,"title":{},"body":{"index.html":{}}}],["overview",{"_index":1158,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":943,"title":{"dependencies.html":{},"properties.html":{}},"body":{"index.html":{}}}],["page",{"_index":224,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["pagination",{"_index":894,"title":{},"body":{"injectables/UsersService.html":{}}}],["param",{"_index":561,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param.dto",{"_index":838,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param.dto.ts",{"_index":376,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["param.dto.ts:13",{"_index":379,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["parameters",{"_index":151,"title":{},"body":{"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["parseintpipe",{"_index":562,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["part",{"_index":1053,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":460,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["partialtype(createpostdto",{"_index":455,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["partialtype(createuserdto",{"_index":464,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["particular",{"_index":1121,"title":{},"body":{"index.html":{}}}],["parts",{"_index":1100,"title":{},"body":{"index.html":{}}}],["pass",{"_index":1146,"title":{},"body":{"index.html":{}}}],["passed",{"_index":652,"title":{},"body":{"injectables/PostsService.html":{}}}],["password",{"_index":98,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["patch",{"_index":563,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["patchpostdto",{"_index":447,"title":{"classes/PatchPostDto.html":{}},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["patchpostdto.content",{"_index":701,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.featuredimageurl",{"_index":709,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.id",{"_index":697,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.posttype",{"_index":705,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.publishon",{"_index":711,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.slug",{"_index":707,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.status",{"_index":703,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.title",{"_index":699,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchuser",{"_index":805,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(@body",{"_index":857,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(patchuserdto",{"_index":826,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuserdto",{"_index":462,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["path",{"_index":1113,"title":{},"body":{"index.html":{}}}],["per",{"_index":819,"title":{},"body":{"controllers/UsersController.html":{}}}],["perform",{"_index":92,"title":{},"body":{"modules/AppModule.html":{},"injectables/UsersService.html":{}}}],["person",{"_index":243,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["person\"\\r\\n",{"_index":304,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["pg",{"_index":956,"title":{},"body":{"dependencies.html":{}}}],["pg_ctl",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["pick",{"_index":1120,"title":{},"body":{"index.html":{}}}],["platform",{"_index":1011,"title":{},"body":{"index.html":{}}}],["please",{"_index":1037,"title":{},"body":{"index.html":{}}}],["port",{"_index":94,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["position",{"_index":821,"title":{},"body":{"controllers/UsersController.html":{}}}],["possible",{"_index":222,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["post",{"_index":179,"title":{"entities/Post.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["post'})@apiresponse({status",{"_index":530,"title":{},"body":{"controllers/PostsController.html":{}}}],["post'})@isstring()@isnotempty()@maxlength(256)@minlength(4)@matches(/^[a",{"_index":247,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post'})@isstring()@minlength(4)@maxlength(512)@isnotempty",{"_index":270,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.'})@isstring()@isoptional",{"_index":204,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.author",{"_index":790,"title":{},"body":{"entities/User.html":{}}}],["post.content",{"_index":700,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.dto",{"_index":461,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["post.dto.ts",{"_index":173,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"coverage.html":{}}}],["post.dto.ts:112",{"_index":210,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:123",{"_index":235,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:135",{"_index":268,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:161",{"_index":218,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:174",{"_index":201,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:19",{"_index":459,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["post.dto.ts:37",{"_index":271,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:48",{"_index":227,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:65",{"_index":254,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:76",{"_index":262,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:87",{"_index":205,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:99",{"_index":245,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.entity",{"_index":600,"title":{},"body":{"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["post.featuredimageurl",{"_index":708,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.metaoptions",{"_index":394,"title":{},"body":{"entities/MetaOption.html":{}}}],["post.posttype",{"_index":704,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.publishon",{"_index":710,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.slug",{"_index":706,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.status",{"_index":702,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.tags",{"_index":712,"title":{},"body":{"injectables/PostsService.html":{},"entities/Tag.html":{}}}],["post.title",{"_index":698,"title":{},"body":{"injectables/PostsService.html":{}}}],["postgres",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["postgresql",{"_index":798,"title":{},"body":{"entities/User.html":{}}}],["posts",{"_index":519,"title":{},"body":{"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"index.html":{}}}],["posts.controller",{"_index":599,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts/posts.module",{"_index":42,"title":{},"body":{"modules/AppModule.html":{}}}],["postscontroller",{"_index":521,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":32,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsrepository",{"_index":618,"title":{},"body":{"injectables/PostsService.html":{}}}],["postsservice",{"_index":565,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["poststatus",{"_index":257,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["poststatus.draft",{"_index":517,"title":{},"body":{"entities/Post.html":{}}}],["posttype",{"_index":185,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["posttype.post",{"_index":516,"title":{},"body":{"entities/Post.html":{}}}],["prefix",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["prettier",{"_index":105,"title":{},"body":{"modules/AppModule.html":{}}}],["primarygeneratedcolumn",{"_index":388,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["private",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["proceed",{"_index":779,"title":{},"body":{"injectables/TagsService.html":{}}}],["process.env.node_env",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["production",{"_index":990,"title":{},"body":{"index.html":{}}}],["profileconfig",{"_index":865,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["profileconfiguration",{"_index":882,"title":{},"body":{"injectables/UsersService.html":{}}}],["progressive",{"_index":972,"title":{},"body":{"index.html":{}}}],["project",{"_index":982,"title":{},"body":{"index.html":{}}}],["promise",{"_index":655,"title":{},"body":{"injectables/PostsService.html":{}}}],["properties",{"_index":180,"title":{"properties.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"properties.html":{}}}],["provide",{"_index":1110,"title":{},"body":{"index.html":{}}}],["provided",{"_index":1123,"title":{},"body":{"index.html":{}}}],["providers",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers/auth.service",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["providers/meta",{"_index":419,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{}}}],["providers/posts.service",{"_index":566,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["providers/tags.service",{"_index":741,"title":{},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{}}}],["providers/users.service",{"_index":840,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["pts",{"_index":1114,"title":{},"body":{"index.html":{}}}],["public",{"_index":145,"title":{},"body":{"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["publication",{"_index":236,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["published",{"_index":231,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["published''})@isenum(poststatus)@isnotempty",{"_index":261,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["publishon",{"_index":186,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["query",{"_index":564,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["query'})@apiquery({name",{"_index":816,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('limit",{"_index":848,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('page",{"_index":850,"title":{},"body":{"controllers/UsersController.html":{}}}],["queryrunner",{"_index":660,"title":{},"body":{"injectables/PostsService.html":{}}}],["queryrunner.committransaction",{"_index":676,"title":{},"body":{"injectables/PostsService.html":{}}}],["queryrunner.manager.delete(post",{"_index":670,"title":{},"body":{"injectables/PostsService.html":{}}}],["queryrunner.release",{"_index":693,"title":{},"body":{"injectables/PostsService.html":{}}}],["queryrunner.rollbacktransaction",{"_index":682,"title":{},"body":{"injectables/PostsService.html":{}}}],["queryrunner.starttransaction",{"_index":662,"title":{},"body":{"injectables/PostsService.html":{}}}],["questions",{"_index":1035,"title":{},"body":{"index.html":{}}}],["r\\n",{"_index":302,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["rate",{"_index":1106,"title":{},"body":{"index.html":{}}}],["read",{"_index":1075,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["ready",{"_index":998,"title":{},"body":{"index.html":{}}}],["real",{"_index":1050,"title":{},"body":{"index.html":{}}}],["reference",{"_index":728,"title":{},"body":{"entities/Tag.html":{}}}],["reflect",{"_index":958,"title":{},"body":{"dependencies.html":{}}}],["regenerate",{"_index":1140,"title":{},"body":{"index.html":{}}}],["registered",{"_index":812,"title":{},"body":{"controllers/UsersController.html":{}}}],["related",{"_index":614,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["relations",{"_index":643,"title":{},"body":{"injectables/PostsService.html":{}}}],["relationship",{"_index":478,"title":{},"body":{"entities/Post.html":{}}}],["relationships",{"_index":590,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"index.html":{}}}],["release",{"_index":688,"title":{},"body":{"injectables/PostsService.html":{}}}],["relevant",{"_index":589,"title":{},"body":{"controllers/PostsController.html":{}}}],["remove",{"_index":672,"title":{},"body":{"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["removes",{"_index":588,"title":{},"body":{"controllers/PostsController.html":{}}}],["repeat",{"_index":469,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["repositories",{"_index":638,"title":{},"body":{"injectables/PostsService.html":{}}}],["repository",{"_index":434,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["represents",{"_index":472,"title":{},"body":{"entities/Post.html":{}}}],["req",{"_index":315,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["request",{"_index":536,"title":{},"body":{"controllers/PostsController.html":{}}}],["requesting",{"_index":633,"title":{},"body":{"injectables/PostsService.html":{}}}],["required",{"_index":196,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["requiring",{"_index":1018,"title":{},"body":{"index.html":{}}}],["reset",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resources",{"_index":1029,"title":{},"body":{"index.html":{}}}],["response",{"_index":677,"title":{},"body":{"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["responsible",{"_index":607,"title":{},"body":{"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["results",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["retrieval",{"_index":892,"title":{},"body":{"injectables/UsersService.html":{}}}],["retrieve",{"_index":900,"title":{},"body":{"injectables/UsersService.html":{}}}],["retrieves",{"_index":551,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["return",{"_index":117,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returned",{"_index":818,"title":{},"body":{"controllers/UsersController.html":{}}}],["returns",{"_index":115,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["review",{"_index":260,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["rollback",{"_index":681,"title":{},"body":{"injectables/PostsService.html":{}}}],["root",{"_index":1117,"title":{},"body":{"index.html":{}}}],["run",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["runner",{"_index":689,"title":{},"body":{"injectables/PostsService.html":{}}}],["runs",{"_index":1004,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":960,"title":{},"body":{"dependencies.html":{}}}],["s",{"_index":1126,"title":{},"body":{"index.html":{}}}],["sample_token",{"_index":169,"title":{},"body":{"injectables/AuthService.html":{}}}],["save",{"_index":654,"title":{},"body":{"injectables/PostsService.html":{}}}],["saying",{"_index":1148,"title":{},"body":{"index.html":{}}}],["scalable",{"_index":977,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":259,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["schema",{"_index":187,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["script",{"_index":1085,"title":{},"body":{"index.html":{}}}],["see",{"_index":1088,"title":{},"body":{"index.html":{}}}],["seen",{"_index":1149,"title":{},"body":{"index.html":{}}}],["serialize",{"_index":406,"title":{},"body":{"entities/MetaOption.html":{}}}],["serialized",{"_index":237,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["series",{"_index":229,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["series''})@isenum(posttype)@isnotempty",{"_index":226,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["serve",{"_index":1129,"title":{},"body":{"index.html":{}}}],["server",{"_index":978,"title":{},"body":{"index.html":{}}}],["service",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["set",{"_index":89,"title":{},"body":{"modules/AppModule.html":{}}}],["setting",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["setup",{"_index":983,"title":{},"body":{"index.html":{}}}],["shallow",{"_index":649,"title":{},"body":{"injectables/PostsService.html":{}}}],["side",{"_index":979,"title":{},"body":{"index.html":{}}}],["sidebarenabled",{"_index":312,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{}}}],["sides",{"_index":1153,"title":{},"body":{"index.html":{}}}],["simple",{"_index":1020,"title":{},"body":{"index.html":{}}}],["single",{"_index":899,"title":{},"body":{"injectables/UsersService.html":{}}}],["slash",{"_index":1107,"title":{},"body":{"index.html":{}}}],["slug",{"_index":188,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["small",{"_index":338,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["soft",{"_index":731,"title":{},"body":{"entities/Tag.html":{},"injectables/TagsService.html":{}}}],["softdelete",{"_index":734,"title":{},"body":{"controllers/TagsController.html":{}}}],["softdelete(@query('id",{"_index":747,"title":{},"body":{"controllers/TagsController.html":{}}}],["softdelete(id",{"_index":738,"title":{},"body":{"controllers/TagsController.html":{}}}],["softremove",{"_index":758,"title":{},"body":{"injectables/TagsService.html":{}}}],["softremove(id",{"_index":766,"title":{},"body":{"injectables/TagsService.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["spaces",{"_index":253,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["spec",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/TagsService.html":{}}}],["special",{"_index":366,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["specific",{"_index":377,"title":{},"body":{"classes/GetUsersParamDto.html":{},"controllers/PostsController.html":{},"index.html":{}}}],["sponsors",{"_index":1070,"title":{},"body":{"index.html":{}}}],["spread",{"_index":647,"title":{},"body":{"injectables/PostsService.html":{}}}],["sql",{"_index":797,"title":{},"body":{"entities/User.html":{}}}],["src/.../app.module.ts",{"_index":1166,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":970,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../post",{"_index":965,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app.service.ts",{"_index":109,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":114,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.module",{"_index":863,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":137,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/providers/auth.service",{"_index":901,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/auth/providers/auth.service.ts",{"_index":144,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts:12",{"_index":157,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:21",{"_index":154,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:5",{"_index":150,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/main.ts",{"_index":927,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/meta",{"_index":320,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/dto/create",{"_index":172,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["src/posts/dto/patch",{"_index":448,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["src/posts/enums/post",{"_index":968,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/post.entity",{"_index":400,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["src/posts/post.entity.ts",{"_index":471,"title":{},"body":{"entities/Post.html":{},"coverage.html":{}}}],["src/posts/post.entity.ts:100",{"_index":490,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:106",{"_index":476,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:26",{"_index":486,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:32",{"_index":510,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:43",{"_index":493,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:49",{"_index":501,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:60",{"_index":503,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:66",{"_index":480,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:72",{"_index":497,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:78",{"_index":485,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:84",{"_index":495,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:91",{"_index":508,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/posts.controller.ts",{"_index":522,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:48",{"_index":556,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:61",{"_index":538,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:74",{"_index":560,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:94",{"_index":547,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module.ts",{"_index":598,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/providers/posts.service.ts",{"_index":612,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/providers/posts.service.ts:116",{"_index":635,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:142",{"_index":627,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:15",{"_index":620,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:40",{"_index":631,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:58",{"_index":623,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/tags/dtos/create",{"_index":326,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["src/tags/providers/tags.service",{"_index":636,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/tags/providers/tags.service.ts",{"_index":756,"title":{},"body":{"injectables/TagsService.html":{},"coverage.html":{}}}],["src/tags/providers/tags.service.ts:20",{"_index":762,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:26",{"_index":765,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:36",{"_index":763,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:52",{"_index":767,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:9",{"_index":760,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tag.entity",{"_index":515,"title":{},"body":{"entities/Post.html":{}}}],["src/tags/tag.entity.ts",{"_index":714,"title":{},"body":{"entities/Tag.html":{},"coverage.html":{}}}],["src/tags/tag.entity.ts:15",{"_index":721,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:23",{"_index":722,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:31",{"_index":725,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:37",{"_index":719,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:43",{"_index":724,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:50",{"_index":720,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:55",{"_index":723,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:59",{"_index":716,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:62",{"_index":726,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:66",{"_index":718,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tags.controller.ts",{"_index":733,"title":{},"body":{"controllers/TagsController.html":{},"coverage.html":{}}}],["src/tags/tags.controller.ts:22",{"_index":736,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.controller.ts:27",{"_index":737,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.controller.ts:33",{"_index":740,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.module",{"_index":601,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/tags/tags.module.ts",{"_index":752,"title":{},"body":{"modules/TagsModule.html":{}}}],["src/users/dtos/create",{"_index":346,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dtos/get",{"_index":374,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["src/users/dtos/patch",{"_index":463,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["src/users/providers/users.service",{"_index":159,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["src/users/providers/users.service.ts",{"_index":870,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/providers/users.service.ts:19",{"_index":884,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:55",{"_index":890,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:80",{"_index":898,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:85",{"_index":888,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/user.entity",{"_index":514,"title":{},"body":{"entities/Post.html":{}}}],["src/users/user.entity.ts",{"_index":782,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/user.entity.ts:15",{"_index":785,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:21",{"_index":787,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:28",{"_index":784,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:34",{"_index":788,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:38",{"_index":791,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:9",{"_index":786,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.controller.ts",{"_index":802,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:53",{"_index":824,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:62",{"_index":807,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:72",{"_index":827,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":140,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostsModule.html":{}}}],["src/users/users.module.ts",{"_index":861,"title":{},"body":{"modules/UsersModule.html":{}}}],["start",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"injectables/PostsService.html":{},"index.html":{}}}],["start:dev",{"_index":989,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":991,"title":{},"body":{"index.html":{}}}],["started",{"_index":971,"title":{"index.html":{}},"body":{}}],["starter",{"_index":981,"title":{},"body":{"index.html":{}}}],["statements",{"_index":921,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":189,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["status.enum",{"_index":288,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["status.enum.ts",{"_index":966,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["stay",{"_index":1056,"title":{},"body":{"index.html":{}}}],["steps",{"_index":1001,"title":{},"body":{"index.html":{}}}],["story",{"_index":225,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["straightforward",{"_index":1016,"title":{},"body":{"index.html":{}}}],["string",{"_index":116,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["structured",{"_index":498,"title":{},"body":{"entities/Post.html":{}}}],["success",{"_index":548,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["successful",{"_index":675,"title":{},"body":{"injectables/PostsService.html":{}}}],["successfully",{"_index":580,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["successfully'})@apiresponse({status",{"_index":533,"title":{},"body":{"controllers/PostsController.html":{}}}],["summary",{"_index":577,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["support",{"_index":1036,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":1156,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["table",{"_index":871,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["tables",{"_index":608,"title":{},"body":{"modules/PostsModule.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":942,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":264,"title":{"entities/Tag.html":{}},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"coverage.html":{}}}],["tag.dto",{"_index":742,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["tag.dto.ts",{"_index":327,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["tag.dto.ts:19",{"_index":334,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:29",{"_index":343,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:34",{"_index":330,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:39",{"_index":336,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:45",{"_index":332,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.entity",{"_index":754,"title":{},"body":{"modules/TagsModule.html":{},"injectables/TagsService.html":{}}}],["tag.posts",{"_index":506,"title":{},"body":{"entities/Post.html":{}}}],["tags",{"_index":190,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"index.html":{}}}],["tags.controller",{"_index":753,"title":{},"body":{"modules/TagsModule.html":{}}}],["tags/providers/tags",{"_index":768,"title":{},"body":{"injectables/TagsService.html":{}}}],["tags/soft",{"_index":746,"title":{},"body":{"controllers/TagsController.html":{}}}],["tags/tags.module",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["tagscontroller",{"_index":732,"title":{"controllers/TagsController.html":{}},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{},"coverage.html":{}}}],["tagsmodule",{"_index":33,"title":{"modules/TagsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules.html":{},"overview.html":{}}}],["tagsrepository",{"_index":761,"title":{},"body":{"injectables/TagsService.html":{}}}],["tagsservice",{"_index":619,"title":{"injectables/TagsService.html":{}},"body":{"injectables/PostsService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"coverage.html":{},"overview.html":{}}}],["take",{"_index":1002,"title":{},"body":{"index.html":{}}}],["test",{"_index":904,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["test:covdeployment",{"_index":996,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":995,"title":{},"body":{"index.html":{}}}],["tests",{"_index":992,"title":{},"body":{"index.html":{}}}],["text",{"_index":479,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["thanks",{"_index":1069,"title":{},"body":{"index.html":{}}}],["this.metaoptionrepository.create(createmetaoptiondto",{"_index":444,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionrepository.save(metaoption",{"_index":446,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionsservice.create(createpostmetaoptiondto",{"_index":422,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["this.postsrepository.create",{"_index":653,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.delete(id",{"_index":713,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.find",{"_index":642,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.findone",{"_index":666,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.findoneby",{"_index":696,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.manager.connection.createqueryrunner",{"_index":661,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.save(post",{"_index":656,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsservice.create(createpostdto",{"_index":582,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.delete(id",{"_index":594,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.findall(userid",{"_index":579,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.update(patchpostdto",{"_index":585,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.tagsrepository.create(createtagdto",{"_index":770,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.delete(id",{"_index":780,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.find",{"_index":772,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.findone",{"_index":778,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.save(tag",{"_index":771,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.softdelete(id",{"_index":781,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsservice.create(createtagdto",{"_index":744,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.tagsservice.delete(id",{"_index":745,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.tagsservice.findmultipletags(createpostdto.tags",{"_index":646,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.tagsservice.findmultipletags(patchpostdto.tags",{"_index":695,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.tagsservice.softremove(id",{"_index":748,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.usersrepository.create(createuserdto",{"_index":917,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findone",{"_index":913,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findoneby",{"_index":911,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.save(newuser",{"_index":918,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.createuser(createuserdto",{"_index":856,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall(getuserparamdto",{"_index":852,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findonebyid(1234",{"_index":167,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findonebyid(createpostdto.authorid",{"_index":645,"title":{},"body":{"injectables/PostsService.html":{}}}],["throw",{"_index":667,"title":{},"body":{"injectables/PostsService.html":{}}}],["time",{"_index":496,"title":{},"body":{"entities/Post.html":{},"index.html":{}}}],["timestamp",{"_index":494,"title":{},"body":{"entities/Post.html":{},"injectables/TagsService.html":{}}}],["title",{"_index":191,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["token",{"_index":168,"title":{},"body":{"injectables/AuthService.html":{}}}],["touch",{"_index":1077,"title":{},"body":{"index.html":{}}}],["transaction",{"_index":657,"title":{},"body":{"injectables/PostsService.html":{}}}],["transformer",{"_index":294,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"dependencies.html":{}}}],["triggers",{"_index":1109,"title":{},"body":{"index.html":{}}}],["true",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"entities/User.html":{}}}],["true})@jointable",{"_index":507,"title":{},"body":{"entities/Post.html":{}}}],["true})@type(undefined",{"_index":217,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["try",{"_index":663,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{}}}],["tsconfig.json",{"_index":1118,"title":{},"body":{"index.html":{}}}],["tts",{"_index":1116,"title":{},"body":{"index.html":{}}}],["twitter",{"_index":1081,"title":{},"body":{"index.html":{}}}],["type",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["type.enum",{"_index":287,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["type.enum.ts",{"_index":967,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["typees",{"_index":793,"title":{},"body":{"entities/User.html":{}}}],["typeorm",{"_index":404,"title":{},"body":{"entities/MetaOption.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([metaoption",{"_index":428,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["typeormmodule.forfeature([post",{"_index":605,"title":{},"body":{"modules/PostsModule.html":{}}}],["typeormmodule.forfeature([tag",{"_index":755,"title":{},"body":{"modules/TagsModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":868,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":466,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":830,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["undefined",{"_index":492,"title":{},"body":{"entities/Post.html":{}}}],["undefined})@isarray()@isoptional()@isint({each",{"_index":267,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["undefined})@isoptional()@validatenested({each",{"_index":216,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["unique",{"_index":487,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["unit",{"_index":993,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":440,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["unlicensed",{"_index":1164,"title":{},"body":{"properties.html":{}}}],["unused",{"_index":832,"title":{},"body":{"controllers/UsersController.html":{}}}],["up",{"_index":692,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{}}}],["update",{"_index":617,"title":{},"body":{"injectables/PostsService.html":{}}}],["update(@body",{"_index":694,"title":{},"body":{"injectables/PostsService.html":{}}}],["update(patchpostdto",{"_index":634,"title":{},"body":{"injectables/PostsService.html":{}}}],["updated",{"_index":457,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updatedate",{"_index":385,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["updatedatecolumn",{"_index":398,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["updatepost",{"_index":527,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(@body",{"_index":584,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(patchpostdto",{"_index":557,"title":{},"body":{"controllers/PostsController.html":{}}}],["updates",{"_index":558,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"index.html":{}}}],["updating",{"_index":449,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["url",{"_index":206,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{}}}],["url\"'})@maxlength(512",{"_index":342,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["urls",{"_index":256,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["use",{"_index":252,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["used",{"_index":255,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["usefactory",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["user",{"_index":83,"title":{"entities/User.html":{}},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["user'})@apiparam({name",{"_index":552,"title":{},"body":{"controllers/PostsController.html":{}}}],["user.dto",{"_index":467,"title":{},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":347,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:15",{"_index":353,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:21",{"_index":355,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:26",{"_index":351,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:35",{"_index":368,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.entity",{"_index":864,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["user.posts",{"_index":474,"title":{},"body":{"entities/Post.html":{}}}],["userid",{"_index":553,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["username",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["users",{"_index":375,"title":{},"body":{"classes/GetUsersParamDto.html":{},"modules/PostsModule.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["users.controller",{"_index":862,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/users.module",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":801,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":34,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":881,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersservice",{"_index":149,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["uses",{"_index":340,"title":{},"body":{"classes/CreateTagDto.html":{},"injectables/UsersService.html":{}}}],["using",{"_index":796,"title":{},"body":{"entities/User.html":{},"index.html":{}}}],["validated",{"_index":318,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validatenested",{"_index":284,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validation",{"_index":854,"title":{},"body":{"controllers/UsersController.html":{}}}],["validationpipe",{"_index":836,"title":{},"body":{"controllers/UsersController.html":{}}}],["validator",{"_index":285,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"dependencies.html":{}}}],["value",{"_index":324,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":223,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["varchar",{"_index":482,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["variable",{"_index":924,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1165,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["vars",{"_index":833,"title":{},"body":{"controllers/UsersController.html":{}}}],["verbose",{"_index":1096,"title":{},"body":{"index.html":{}}}],["version",{"_index":1162,"title":{},"body":{"properties.html":{}}}],["video",{"_index":1044,"title":{},"body":{"index.html":{}}}],["view",{"_index":603,"title":{},"body":{"modules/PostsModule.html":{}}}],["visit",{"_index":1033,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":1047,"title":{},"body":{"index.html":{}}}],["want",{"_index":822,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["watch",{"_index":987,"title":{},"body":{"index.html":{}}}],["we're",{"_index":795,"title":{},"body":{"entities/User.html":{}}}],["website",{"_index":799,"title":{},"body":{"entities/User.html":{},"index.html":{}}}],["well",{"_index":1132,"title":{},"body":{"index.html":{}}}],["whenever",{"_index":1137,"title":{},"body":{"index.html":{}}}],["within",{"_index":775,"title":{},"body":{"injectables/TagsService.html":{},"index.html":{}}}],["without",{"_index":341,"title":{},"body":{"classes/CreateTagDto.html":{},"entities/MetaOption.html":{},"controllers/UsersController.html":{}}}],["working",{"_index":1032,"title":{},"body":{"index.html":{}}}],["world",{"_index":119,"title":{},"body":{"injectables/AppService.html":{}}}],["write",{"_index":106,"title":{},"body":{"modules/AppModule.html":{}}}],["writing",{"_index":1139,"title":{},"body":{"index.html":{}}}],["x",{"_index":1059,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":1073,"title":{},"body":{"index.html":{}}}],["you're",{"_index":997,"title":{},"body":{"index.html":{}}}],["z0",{"_index":248,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["z\\d@$!%*?&]{8,16",{"_index":359,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*?&])[a",{"_index":358,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["za",{"_index":357,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            MetaOptionsModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            TagsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UsersModule } from './users/users.module';\nimport { PostsModule } from './posts/posts.module';\nimport { AuthModule } from './auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { TagsModule } from './tags/tags.module';\nimport { MetaOptionsModule } from './meta-options/meta-options.module';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport appConfig from './config/app.config'; // Since it's imported as a default\nimport databaseConfig from './config/database.config';\n\nconst ENV = process.env.NODE_ENV;\n\n// Run this in cmd pg_ctl start -D \"C:\\users\\mfabouatmeh\\Desktop\\CodesDar\\more\\Postgre\\data\"\n@Module({\n  imports: [\n    UsersModule,\n    PostsModule,\n    AuthModule,\n    ConfigModule.forRoot({\n      isGlobal: true,\n      envFilePath: !ENV ? '.env' : `.env.${ENV}`,\n      load: [appConfig, databaseConfig],\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule], // Makes ConfigService available\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        type: 'postgres',\n        // entities: [User],\n        autoLoadEntities: configService.get('database.autoLoadEntities'),\n        synchronize: configService.get('database.synchronize'), // If this setting is set to false, we would have to manually perform migrations\n        port: configService.get('database.port'),\n        username: configService.get('database.user'),\n        password: configService.get('database.pass'),\n        host: configService.get('database.host'),\n        database: configService.get('database.name'),\n      }),\n    }),\n    TagsModule,\n    MetaOptionsModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n//npx prettier --write .\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { AuthService } from './providers/auth.service';\n// nest generate controller auth --no-spec\n@Controller('auth')\nexport class AuthController {\n  constructor(\n    // Injecting the auth service\n    private readonly authService: AuthService,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './providers/auth.service';\nimport { UsersModule } from 'src/users/users.module';\n// nest generate module auth\n@Module({\n  controllers: [AuthController],\n  providers: [AuthService],\n  // imports: [UsersModule], will cause a circular dependency\n  imports: [forwardRef(() => UsersModule)],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                isAuth\n                            \n                            \n                                    Public\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/auth.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isAuth\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAuth()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, forwardRef, Inject } from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users.service';\n// nest generate service auth/providers/auth --flat  --no-spec\n@Injectable()\nexport class AuthService {\n  constructor(\n    // Injecting the user service\n    // Add this to avoid circular dependency\n    @Inject(forwardRef(() => UsersService))\n    private readonly usersService: UsersService,\n  ) {}\n  public login(email: string, password: string) {\n    // Check user exists\n\n    const user = this.usersService.findOneById(1234);\n    // Login\n    // Return token\n    return 'SAMPLE_TOKEN';\n  }\n\n  public isAuth() {\n    return true;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dto/create-post.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for creating a new blog post.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                authorId\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                publishOn\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        authorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'integer', required: true, description: 'The ID of the author creating the post', example: 1})@IsNotEmpty()@IsInt()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:174\n                        \n                    \n\n            \n                \n                    The ID of the author creating the post.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The main content of the post', example: 'This is the content of the blog post.'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:87\n                        \n                    \n\n            \n                \n                    The main content of the post.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The URL of the featured image for the post', example: 'http://localhost.com/images/image1.jpg'})@IsOptional()@MinLength(4)@MaxLength(1024)@IsUrl()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:112\n                        \n                    \n\n            \n                \n                    The URL of the featured image for the post.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreatePostMetaOptionsDto | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'object', required: false, items: undefined})@IsOptional()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:161\n                        \n                    \n\n            \n                \n                    Additional meta options for the post.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: PostType, description: 'Possible values: 'post', 'page', 'story', 'series''})@IsEnum(PostType)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:48\n                        \n                    \n\n            \n                \n                    The type of post (e.g., 'post', 'page', 'story', 'series').\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The date on which the post is published', example: '2024-03-16T07:46:32+0000'})@IsISO8601()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:123\n                        \n                    \n\n            \n                \n                    The publication date of the post.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Serialized JSON object containing metadata', example: '{\n \"@context\": \"https://schema.org\",\n \"@type\": \"Person\"\n }'})@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:99\n                        \n                    \n\n            \n                \n                    JSON metadata for the post.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'A slug for the post (e.g., \"my-blog-post\")', example: 'my-blog-post'})@IsString()@IsNotEmpty()@MaxLength(256)@MinLength(4)@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'A slug should be all lowercase, use only \"-\", and have no spaces. Example: \"my-url\"'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:65\n                        \n                    \n\n            \n                \n                    A slug for the post, used in URLs.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: PostStatus, description: 'Possible values: 'draft', 'scheduled', 'review', 'published''})@IsEnum(PostStatus)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:76\n                        \n                    \n\n            \n                \n                    The publication status of the post (e.g., 'draft', 'scheduled', 'review', 'published').\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Array of tag IDs associated with the post', example: undefined})@IsArray()@IsOptional()@IsInt({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:135\n                        \n                    \n\n            \n                \n                    An array of tag IDs associated with the post.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'This is a title', description: 'The title for the blog post'})@IsString()@MinLength(4)@MaxLength(512)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:37\n                        \n                    \n\n            \n                \n                    The title of the blog post.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsArray,\n  IsEnum,\n  IsInt,\n  IsISO8601,\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MaxLength,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\nimport { PostType } from '../enums/post-type.enum';\nimport { PostStatus } from '../enums/post-status.enum';\nimport { CreatePostMetaOptionsDto } from '../../meta-options/dtos/create-post-meta-options.dto';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\n\n/**\n * DTO for creating a new blog post.\n */\nexport class CreatePostDto {\n  /**\n   * The title of the blog post.\n   */\n  @ApiProperty({\n    example: 'This is a title',\n    description: 'The title for the blog post',\n  })\n  @IsString()\n  @MinLength(4)\n  @MaxLength(512)\n  @IsNotEmpty()\n  title: string;\n\n  /**\n   * The type of post (e.g., 'post', 'page', 'story', 'series').\n   */\n  @ApiProperty({\n    enum: PostType,\n    description: \"Possible values: 'post', 'page', 'story', 'series'\",\n  })\n  @IsEnum(PostType)\n  @IsNotEmpty()\n  postType: PostType;\n\n  /**\n   * A slug for the post, used in URLs.\n   */\n  @ApiProperty({\n    description: 'A slug for the post (e.g., \"my-blog-post\")',\n    example: 'my-blog-post',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(256)\n  @MinLength(4)\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'A slug should be all lowercase, use only \"-\", and have no spaces. Example: \"my-url\"',\n  })\n  slug: string;\n\n  /**\n   * The publication status of the post (e.g., 'draft', 'scheduled', 'review', 'published').\n   */\n  @ApiProperty({\n    enum: PostStatus,\n    description: \"Possible values: 'draft', 'scheduled', 'review', 'published'\",\n  })\n  @IsEnum(PostStatus)\n  @IsNotEmpty()\n  status: PostStatus;\n\n  /**\n   * The main content of the post.\n   */\n  @ApiPropertyOptional({\n    description: 'The main content of the post',\n    example: 'This is the content of the blog post.',\n  })\n  @IsString()\n  @IsOptional()\n  content?: string;\n\n  /**\n   * JSON metadata for the post.\n   */\n  @ApiPropertyOptional({\n    description: 'Serialized JSON object containing metadata',\n    example:\n      '{\\r\\n \"@context\": \"https://schema.org\",\\r\\n \"@type\": \"Person\"\\r\\n }',\n  })\n  @IsOptional()\n  @IsJSON()\n  schema?: string;\n\n  /**\n   * The URL of the featured image for the post.\n   */\n  @ApiPropertyOptional({\n    description: 'The URL of the featured image for the post',\n    example: 'http://localhost.com/images/image1.jpg',\n  })\n  @IsOptional()\n  @MinLength(4)\n  @MaxLength(1024)\n  @IsUrl()\n  featuredImageUrl?: string;\n\n  /**\n   * The publication date of the post.\n   */\n  @ApiPropertyOptional({\n    description: 'The date on which the post is published',\n    example: '2024-03-16T07:46:32+0000',\n  })\n  @IsISO8601()\n  @IsOptional()\n  publishOn?: Date;\n\n  /**\n   * An array of tag IDs associated with the post.\n   */\n  @ApiPropertyOptional({\n    description: 'Array of tag IDs associated with the post',\n    example: [1, 2],\n  })\n  @IsArray()\n  @IsOptional()\n  @IsInt({ each: true })\n  tags?: number[];\n\n  /**\n   * Additional meta options for the post.\n   */\n  @ApiPropertyOptional({\n    type: 'object',\n    required: false,\n    items: {\n      type: 'object',\n      properties: {\n        metavalue: {\n          type: 'json',\n          description: 'A JSON string containing metadata options',\n          example: '{\"sidebarEnabled\": true}',\n        },\n      },\n    },\n  })\n  @IsOptional()\n  @ValidateNested({ each: true })\n  @Type(() => CreatePostMetaOptionsDto)\n  // Type decorator\n  // Matches the incoming req to the dto\n  // Creates an instance of the dto\n  // All the properties are validated against the dto\n  metaOptions?: CreatePostMetaOptionsDto | null;\n\n  /**\n   * The ID of the author creating the post.\n   */\n  @ApiProperty({\n    type: 'integer',\n    required: true,\n    description: 'The ID of the author creating the post',\n    example: 1,\n  })\n  @IsNotEmpty()\n  @IsInt()\n  authorId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostMetaOptionsDto.html":{"url":"classes/CreatePostMetaOptionsDto.html","title":"class - CreatePostMetaOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostMetaOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/dtos/create-post-meta-options.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for creating metadata options for a post.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                metaValue\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/dtos/create-post-meta-options.dto.ts:14\n                        \n                    \n\n            \n                \n                    The meta value as a JSON string.\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsJSON, IsNotEmpty, IsString } from 'class-validator';\n\n/**\n * DTO for creating metadata options for a post.\n */\nexport class CreatePostMetaOptionsDto {\n  /**\n   * The meta value as a JSON string.\n   *\n   * @example '{\"sidebarEnabled\": true}'\n   */\n  @IsNotEmpty()\n  @IsJSON()\n  metaValue: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTagDto.html":{"url":"classes/CreateTagDto.html","title":"class - CreateTagDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTagDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/dtos/create-tag.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                featuredImage\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        featuredImage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsUrl()@MaxLength(1024)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@MinLength(3)@IsNotEmpty()@MaxLength(256)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsNotEmpty()@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url\"'})@MaxLength(512)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:29\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateTagDto {\n  @ApiProperty()\n  @IsString()\n  @MinLength(3)\n  @IsNotEmpty()\n  @MaxLength(256)\n  name: string;\n\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url\"',\n  })\n  @MaxLength(512)\n  slug: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsString()\n  description: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsJSON()\n  schema: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsUrl()\n  @MaxLength(1024)\n  featuredImage: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MaxLength(96)@MinLength(8)@Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,16}$/, {message: 'Minimum 8 chars, include at least one letter, one number, and one special character.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\nexport class CreateUserDto {\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(96)\n  firstName: string;\n\n  @IsString()\n  @IsOptional()\n  @MinLength(3)\n  @MaxLength(96)\n  lastName?: string;\n\n  @IsEmail()\n  @IsNotEmpty()\n  @MaxLength(96)\n  email: string;\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(96)\n  @MinLength(8)\n  @Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,16}$/, {\n    message:\n      'Minimum 8 chars, include at least one letter, one number, and one special character.',\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersParamDto.html":{"url":"classes/GetUsersParamDto.html","title":"class - GetUsersParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-users-param.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Get user with a specific id', example: '1234'})@IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-users-param.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport { IsInt, IsOptional } from 'class-validator';\n\nexport class GetUsersParamDto {\n  @ApiPropertyOptional({\n    description: 'Get user with a specific id',\n    example: '1234',\n  })\n  @IsOptional()\n  @IsInt()\n  @Type(() => Number)\n  id?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/MetaOption.html":{"url":"entities/MetaOption.html","title":"entity - MetaOption","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  MetaOption\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-option.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createDate\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                metaValue\n                            \n                            \n                                    \n                                    \n                                post\n                            \n                            \n                                    \n                                updateDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'json', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        post\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, post => post.metaOptions, {onDelete: 'CASCADE'})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:25\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from 'src/posts/post.entity';\nimport {\n  Column,\n  CreateDateColumn,\n  Entity,\n  JoinColumn,\n  OneToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@Entity()\nexport class MetaOption {\n  @PrimaryGeneratedColumn()\n  id: number;\n  // Without needing to serialize the JSON object(unavailable in mysql)\n  @Column({\n    type: 'json',\n    nullable: false,\n  })\n  metaValue: string;\n  @CreateDateColumn()\n  createDate: Date;\n  @UpdateDateColumn()\n  updateDate: Date;\n\n  @OneToOne(() => Post, (post) => post.metaOptions, {\n    onDelete: 'CASCADE',\n  })\n  @JoinColumn()\n  post: Post;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MetaOptionsController.html":{"url":"controllers/MetaOptionsController.html","title":"controller - MetaOptionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MetaOptionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-options.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                meta-options\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createMetaOption\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createMetaOption\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMetaOption(createPostMetaOptionDto: CreatePostMetaOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/meta-options/meta-options.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostMetaOptionDto\n                                            \n                                                            CreatePostMetaOptionsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { CreatePostMetaOptionsDto } from './dtos/create-post-meta-options.dto';\nimport { MetaOptionsService } from './providers/meta-options.service';\n\n@Controller('meta-options')\nexport class MetaOptionsController {\n  constructor(private readonly metaOptionsService: MetaOptionsService) {}\n  @Post()\n  public createMetaOption(\n    @Body() createPostMetaOptionDto: CreatePostMetaOptionsDto,\n  ) {\n    return this.metaOptionsService.create(createPostMetaOptionDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MetaOptionsModule.html":{"url":"modules/MetaOptionsModule.html","title":"module - MetaOptionsModule","body":"\n                   \n\n\n\n\n    Modules\n    MetaOptionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/meta-options/meta-options.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MetaOptionsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MetaOptionsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MetaOptionsController } from './meta-options.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { MetaOption } from './meta-option.entity';\nimport { MetaOptionsService } from './providers/meta-options.service';\n\n@Module({\n  controllers: [MetaOptionsController],\n  imports: [TypeOrmModule.forFeature([MetaOption])],\n  providers: [MetaOptionsService],\n})\nexport class MetaOptionsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MetaOptionsService.html":{"url":"injectables/MetaOptionsService.html","title":"injectable - MetaOptionsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MetaOptionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/providers/meta-options.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(metaOptionRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/meta-options/providers/meta-options.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        metaOptionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createMetaOptionDto: CreatePostMetaOptionsDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/meta-options/providers/meta-options.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createMetaOptionDto\n                                            \n                                                            CreatePostMetaOptionsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { MetaOption } from '../meta-option.entity';\nimport { Repository } from 'typeorm';\nimport { CreatePostMetaOptionsDto } from '../dtos/create-post-meta-options.dto';\n\n@Injectable()\nexport class MetaOptionsService {\n  constructor(\n    /**\n     * Inject metaOptionsRepository\n     */\n    @InjectRepository(MetaOption)\n    private metaOptionRepository: Repository,\n  ) {}\n\n  public async create(createMetaOptionDto: CreatePostMetaOptionsDto) {\n    const metaOption = this.metaOptionRepository.create(createMetaOptionDto);\n    return await this.metaOptionRepository.save(metaOption);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchPostDto.html":{"url":"classes/PatchPostDto.html","title":"class - PatchPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dto/patch-post.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for updating an existing post.\nExtends CreatePostDto, making all fields optional except id.\n\n            \n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The ID of the post that needs to be updated', example: 1})@IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/patch-post.dto.ts:19\n                        \n                    \n\n            \n                \n                    The ID of the post to be updated.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsInt, IsNotEmpty } from 'class-validator';\nimport { CreatePostDto } from './create-post.dto';\n\n/**\n * DTO for updating an existing post.\n * Extends `CreatePostDto`, making all fields optional except `id`.\n */\nexport class PatchPostDto extends PartialType(CreatePostDto) {\n  /**\n   * The ID of the post to be updated.\n   */\n  @ApiProperty({\n    description: 'The ID of the post that needs to be updated',\n    example: 1,\n  })\n  @IsInt()\n  @IsNotEmpty()\n  id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/patch-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\n// Extend the create user dto to not repeat the code\nexport class PatchUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Post.html":{"url":"entities/Post.html","title":"entity - Post","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/post.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a blog post entity.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                author\n                            \n                            \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                postType\n                            \n                            \n                                    \n                                    Optional\n                                publishOn\n                            \n                            \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.posts, {eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:106\n                        \n                    \n\n            \n                \n                    Author of the post (many-to-one relationship with User).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:66\n                        \n                    \n\n            \n                \n                    Main content of the post (large string)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:78\n                        \n                    \n\n            \n                \n                    URL of the featured image.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:26\n                        \n                    \n\n            \n                \n                    Unique identifier for the post.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MetaOption\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, metaOptions => metaOptions.post, {cascade: true, eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:100\n                        \n                    \n\n            \n                \n                    Meta options associated with the post (one-to-one relationship bidirectional).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: PostType, default: undefined, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:43\n                        \n                    \n\n            \n                \n                    Type of the post (e.g., post, page, story, series.).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:84\n                        \n                    \n\n            \n                \n                    Date and time when the post is published.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:72\n                        \n                    \n\n            \n                \n                    JSON schema for structured data.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:49\n                        \n                    \n\n            \n                \n                    URL-friendly identifier for the post.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: PostStatus, default: undefined, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:60\n                        \n                    \n\n            \n                \n                    Status of the post (draft, published, etc.).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Tag[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, tag => tag.posts, {eager: true})@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:91\n                        \n                    \n\n            \n                \n                    Tags associated with the post (many-to-many relationship).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 512, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:32\n                        \n                    \n\n            \n                \n                    Title of the post.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  Entity,\n  JoinColumn,\n  JoinTable,\n  ManyToMany,\n  ManyToOne,\n  OneToOne,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport { PostType } from './enums/post-type.enum';\nimport { PostStatus } from './enums/post-status.enum';\nimport { MetaOption } from 'src/meta-options/meta-option.entity';\nimport { User } from 'src/users/user.entity';\nimport { Tag } from 'src/tags/tag.entity';\n\n/**\n * Represents a blog post entity.\n */\n@Entity()\nexport class Post {\n  /**\n   * Unique identifier for the post.\n   */\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  /**\n   * Title of the post.\n   */\n  @Column({ type: 'varchar', length: 512, nullable: false })\n  title: string;\n\n  /**\n   * Type of the post (e.g., post, page, story, series.).\n   */\n  @Column({\n    type: 'enum',\n    enum: PostType,\n    default: PostType.POST,\n    nullable: false,\n  })\n  postType: PostType;\n\n  /**\n   * URL-friendly identifier for the post.\n   */\n  @Column({ type: 'varchar', length: 256, nullable: false, unique: true })\n  slug: string;\n\n  /**\n   * Status of the post (draft, published, etc.).\n   */\n  @Column({\n    type: 'enum',\n    enum: PostStatus,\n    default: PostStatus.DRAFT,\n    nullable: false,\n  })\n  status: PostStatus;\n\n  /**\n   * Main content of the post (large string)\n   */\n  @Column({ type: 'text', nullable: true })\n  content?: string;\n\n  /**\n   * JSON schema for structured data.\n   */\n  @Column({ type: 'text', nullable: true })\n  schema?: string;\n\n  /**\n   * URL of the featured image.\n   */\n  @Column({ type: 'varchar', length: 1024, nullable: true })\n  featuredImageUrl?: string;\n\n  /**\n   * Date and time when the post is published.\n   */\n  @Column({ type: 'timestamp', nullable: true })\n  publishOn?: Date;\n\n  /**\n   * Tags associated with the post (many-to-many relationship).\n   */\n  @ManyToMany(() => Tag, (tag) => tag.posts, { eager: true })\n  @JoinTable()\n  tags?: Tag[];\n\n  /**\n   * Meta options associated with the post (one-to-one relationship bidirectional).\n   */\n  @OneToOne(() => MetaOption, (metaOptions) => metaOptions.post, {\n    cascade: true,\n    eager: true, // Will fetch posts AND metaOptions when getting posts\n  })\n  metaOptions?: MetaOption;\n\n  /**\n   * Author of the post (many-to-one relationship with User).\n   */\n  @ManyToOne(() => User, (user) => user.posts, { eager: true })\n  author: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n            \n                Description\n            \n            \n                Controller for managing posts.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                createPost\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                delete\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getPosts\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Creates a new blog post'})@ApiResponse({status: 201, description: 'Post created successfully'})@ApiResponse({status: 400, description: 'Invalid request data'})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:61\n                        \n                    \n\n\n            \n                \n                        Creates a new blog post.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data for the new post.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The created post.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Deletes a post by ID'})@ApiQuery({name: 'id', required: true, type: Number, description: 'Post ID to delete'})@ApiResponse({status: 200, description: 'Post deleted successfully'})@ApiResponse({status: 404, description: 'Post not found'})@Delete()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:94\n                        \n                    \n\n\n            \n                \n                        Deletes a post by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the post to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A success message.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                        getPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPosts(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:userId?')@ApiOperation({summary: 'Retrieves all posts for a specific user'})@ApiParam({name: 'userId', required: false, description: 'User ID (optional)'})@ApiResponse({status: 200, description: 'Returns the list of posts'})\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:48\n                        \n                    \n\n\n            \n                \n                        Retrieves all posts for a specific user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user (optional).\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A list of posts.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(patchPostDto: PatchPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Updates an existing blog post'})@ApiResponse({status: 201, description: 'Post updated successfully'})@ApiResponse({status: 404, description: 'Post not found'})@Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:74\n                        \n                    \n\n\n            \n                \n                        Updates an existing blog post.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                patchPostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe updated post data.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The updated post.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Query,\n} from '@nestjs/common';\nimport { PostsService } from './providers/posts.service';\nimport {\n  ApiOperation,\n  ApiResponse,\n  ApiTags,\n  ApiParam,\n  ApiQuery,\n} from '@nestjs/swagger';\nimport { CreatePostDto } from './dto/create-post.dto';\nimport { PatchPostDto } from './dto/patch-post.dto';\n\n/**\n * Controller for managing posts.\n */\n@Controller('posts')\n@ApiTags('Posts')\nexport class PostsController {\n  /**\n   * Creates an instance of PostsController.\n   * @param postsService - The posts service.\n   */\n  constructor(private readonly postsService: PostsService) {}\n\n  /**\n   * Retrieves all posts for a specific user.\n   * @param userId - The ID of the user (optional).\n   * @returns A list of posts.\n   */\n  @Get('/:userId?')\n  @ApiOperation({ summary: 'Retrieves all posts for a specific user' })\n  @ApiParam({\n    name: 'userId',\n    required: false,\n    description: 'User ID (optional)',\n  })\n  @ApiResponse({ status: 200, description: 'Returns the list of posts' })\n  public getPosts(@Param('userId') userId: string) {\n    return this.postsService.findAll(userId);\n  }\n\n  /**\n   * Creates a new blog post.\n   * @param createPostDto - The data for the new post.\n   * @returns The created post.\n   */\n  @ApiOperation({ summary: 'Creates a new blog post' })\n  @ApiResponse({ status: 201, description: 'Post created successfully' })\n  @ApiResponse({ status: 400, description: 'Invalid request data' })\n  @Post()\n  public createPost(@Body() createPostDto: CreatePostDto) {\n    return this.postsService.create(createPostDto);\n  }\n\n  /**\n   * Updates an existing blog post.\n   * @param patchPostDto - The updated post data.\n   * @returns The updated post.\n   */\n  @ApiOperation({ summary: 'Updates an existing blog post' })\n  @ApiResponse({ status: 201, description: 'Post updated successfully' })\n  @ApiResponse({ status: 404, description: 'Post not found' })\n  @Patch()\n  public updatePost(@Body() patchPostDto: PatchPostDto) {\n    return this.postsService.update(patchPostDto);\n  }\n\n  /**\n   * Deletes a post by its ID.\n   * @param id - The ID of the post to delete.\n   * @returns A success message.\n   */\n  @ApiOperation({ summary: 'Deletes a post by ID' })\n  @ApiQuery({\n    name: 'id',\n    required: true,\n    type: Number,\n    description: 'Post ID to delete',\n  })\n  @ApiResponse({ status: 200, description: 'Post deleted successfully' })\n  @ApiResponse({ status: 404, description: 'Post not found' })\n  // This method cascades and removes relevant relationships between posts and tags NOT the actual tags\n  @Delete()\n  public delete(@Query('id', ParseIntPipe) id: number) {\n    return this.postsService.delete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_imports\n\n\n\ncluster_PostsModule_providers\n\n\n\n\nTagsModule\n\nTagsModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nTagsModule->PostsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            TagsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsController } from './posts.controller';\nimport { PostsService } from './providers/posts.service';\nimport { UsersModule } from 'src/users/users.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Post } from './post.entity';\nimport { MetaOption } from 'src/meta-options/meta-option.entity';\nimport { TagsModule } from 'src/tags/tags.module';\n\n// Import entire module not only a service (view users module exports key)\n@Module({\n  controllers: [PostsController],\n  providers: [PostsService],\n  imports: [\n    UsersModule,\n    TagsModule,\n    TypeOrmModule.forFeature([Post, MetaOption]),\n  ], // Import the post entity, for feature is responsible to create tables corresponding to these entities inside the db\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/providers/posts.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service responsible for handling post-related operations.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, postsRepository: Repository, metaOptionsRepository: Repository, tagsService: TagsService)\n                    \n                \n                        \n                            \n                                Defined in src/posts/providers/posts.service.ts:15\n                            \n                        \n\n                \n                    \n                            Constructor to inject dependencies.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service to handle user-related operations.\n\n                                                        \n                                                \n                                                \n                                                        postsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Repository for managing Post entities.\n\n                                                        \n                                                \n                                                \n                                                        metaOptionsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Repository for managing MetaOption entities.\n\n                                                        \n                                                \n                                                \n                                                        tagsService\n                                                  \n                                                        \n                                                                        TagsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service for handling tag-related operations.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createPostDto: CreatePostDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:58\n                        \n                    \n\n\n            \n                \n                        Creates a new post.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    DTO containing post creation details.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The newly created post.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:142\n                        \n                    \n\n\n            \n                \n                        Deletes a post from the database.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the post to delete.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                An object indicating the deletion status.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:40\n                        \n                    \n\n\n            \n                \n                        Retrieves all posts along with their meta options.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the user requesting the posts.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                A list of posts with related meta options.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(patchPostDto: PatchPostDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:116\n                        \n                    \n\n\n            \n                \n                        Updates an existing post.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                patchPostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    DTO containing fields to update.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The updated post.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Body, Injectable } from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users.service';\nimport { CreatePostDto } from '../dto/create-post.dto';\nimport { Repository } from 'typeorm';\nimport { Post } from '../post.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { MetaOption } from 'src/meta-options/meta-option.entity';\nimport { TagsService } from 'src/tags/providers/tags.service';\nimport { PatchPostDto } from '../dto/patch-post.dto';\n\n/**\n * Service responsible for handling post-related operations.\n */\n@Injectable()\nexport class PostsService {\n  /**\n   * Constructor to inject dependencies.\n   * @param usersService Service to handle user-related operations.\n   * @param postsRepository Repository for managing Post entities.\n   * @param metaOptionsRepository Repository for managing MetaOption entities.\n   * @param tagsService Service for handling tag-related operations.\n   */\n  constructor(\n    private readonly usersService: UsersService,\n\n    @InjectRepository(Post)\n    private readonly postsRepository: Repository, // Only add repositories for 1-1 relationships so that it doesnt become crowded\n\n    @InjectRepository(MetaOption)\n    private readonly metaOptionsRepository: Repository,\n\n    private readonly tagsService: TagsService,\n  ) {}\n\n  /**\n   * Retrieves all posts along with their meta options.\n   * @param userId The ID of the user requesting the posts.\n   * @returns A list of posts with related meta options.\n   */\n  public async findAll(userId: string) {\n    return await this.postsRepository.find({\n      relations: { metaOptions: true },\n    });\n\n    // Get meta options along with the posts\n    // return await this.postsRepository.find({\n    //   relations: {\n    //     metaOptions: true,\n    //   },\n    // });\n  }\n\n  /**\n   * Creates a new post.\n   * @param createPostDto DTO containing post creation details.\n   * @returns The newly created post.\n   */\n  public async create(@Body() createPostDto: CreatePostDto) {\n    const author = await this.usersService.findOneById(createPostDto.authorId);\n    const tags = await this.tagsService.findMultipleTags(createPostDto.tags);\n\n    // Use the spread operator to create a shallow copy of createPostDto, meaning a new object is passed to create()\n    const post = this.postsRepository.create({\n      ...createPostDto,\n      author,\n      tags,\n    }); // Only use await for the save method because it returns a promise\n\n    return await this.postsRepository.save(post);\n  }\n\n  /*\n   public async delete(id: number) {\n    // Start a transaction to handle both deletes atomically\n    const queryRunner =\n      this.postsRepository.manager.connection.createQueryRunner();\n    await queryRunner.startTransaction();\n\n    try {\n      // Find the post (with related metaOptions loaded)\n      const post = await this.postsRepository.findOne({\n        where: { id },\n        relations: ['metaOptions'],\n      });\n      if (!post) {\n        throw new Error('Post not found');\n      }\n\n      // Delete the post (cascade will handle the metaOption deletion automatically)\n      await queryRunner.manager.delete(Post, id); // Use delete instead of remove\n\n      // Commit the transaction if everything is successful\n      await queryRunner.commitTransaction();\n\n      // Return a success response\n      return { deleted: true, id };\n    } catch (error) {\n      // If any error occurs, rollback the transaction\n      await queryRunner.rollbackTransaction();\n\n      // Log the error and return a failure response\n      console.error(error);\n      return { deleted: false, message: error.message };\n    } finally {\n      // Release the query runner (important for clean-up)\n      await queryRunner.release();\n    }\n  }\n*/\n\n  /**\n   * Updates an existing post.\n   * @param patchPostDto DTO containing fields to update.\n   * @returns The updated post.\n   */\n  public async update(@Body() patchPostDto: PatchPostDto) {\n    const tags = await this.tagsService.findMultipleTags(patchPostDto.tags);\n    const post = await this.postsRepository.findOneBy({ id: patchPostDto.id });\n\n    if (!post) {\n      throw new Error('Post not found');\n    }\n\n    post.title = patchPostDto.title ?? post.title;\n    post.content = patchPostDto.content ?? post.content;\n    post.status = patchPostDto.status ?? post.status;\n    post.postType = patchPostDto.postType ?? post.postType;\n    post.slug = patchPostDto.slug ?? post.slug;\n    post.featuredImageUrl =\n      patchPostDto.featuredImageUrl ?? post.featuredImageUrl;\n    post.publishOn = patchPostDto.publishOn ?? post.publishOn;\n    post.tags = tags;\n\n    return await this.postsRepository.save(post);\n  }\n\n  /**\n   * Deletes a post from the database.\n   * @param id The ID of the post to delete.\n   * @returns An object indicating the deletion status.\n   */\n  public async delete(id: number) {\n    await this.postsRepository.delete(id);\n    return { deleted: true, id };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Tag.html":{"url":"entities/Tag.html","title":"entity - Tag","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Tag\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tag.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createDate\n                            \n                            \n                                    \n                                deletedAt\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                featuredImage\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                posts\n                            \n                            \n                                    \n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                updateDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        featuredImage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, post => post.tags, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 512, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:62\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from 'src/posts/post.entity';\nimport {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  ManyToMany,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@Entity()\nexport class Tag {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 256,\n    nullable: false,\n    unique: true,\n  })\n  name: string;\n\n  @Column({\n    type: 'varchar',\n    length: 512,\n    nullable: false,\n    unique: true,\n  })\n  slug: string;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  description: string;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  schema: string;\n\n  @Column({\n    type: 'varchar',\n    length: 1024,\n    nullable: true,\n  })\n  featuredImage: string;\n\n  @ManyToMany(() => Post, (post) => post.tags, {\n    onDelete: 'CASCADE',\n  })\n  posts: Post[];\n\n  // https://orkhan.gitbook.io/typeorm/docs/decorator-reference\n  @CreateDateColumn()\n  createDate: Date;\n\n  @UpdateDateColumn()\n  updateDate: Date;\n\n  // Add this decorartor and column enables soft delete\n  @DeleteDateColumn()\n  deletedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TagsController.html":{"url":"controllers/TagsController.html","title":"controller - TagsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TagsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tags.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tags\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                create\n                            \n                            \n                                    \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    \n                                    Public\n                                    Async\n                                softDelete\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createTagDto: CreateTagDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createTagDto\n                                            \n                                                            CreateTagDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete()\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Async\n                        softDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    softDelete(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('soft-delete')\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  ParseIntPipe,\n  Post,\n  Query,\n} from '@nestjs/common';\nimport { TagsService } from './providers/tags.service';\nimport { CreateTagDto } from './dtos/create-tag.dto';\n\n@Controller('tags')\nexport class TagsController {\n  constructor(\n    /**\n     * Inject tag service\n     */\n    private readonly tagsService: TagsService,\n  ) {}\n\n  @Post()\n  public create(@Body() createTagDto: CreateTagDto) {\n    return this.tagsService.create(createTagDto);\n  }\n\n  @Delete()\n  public async delete(@Query('id', ParseIntPipe) id: number) {\n    return this.tagsService.delete(id);\n  }\n\n  // /tags/soft-delete\n  @Delete('soft-delete')\n  public async softDelete(@Query('id', ParseIntPipe) id: number) {\n    return this.tagsService.softRemove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TagsModule.html":{"url":"modules/TagsModule.html","title":"module - TagsModule","body":"\n                   \n\n\n\n\n    Modules\n    TagsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_exports\n\n\n\ncluster_TagsModule_providers\n\n\n\n\nTagsService \n\nTagsService \n\n\n\nTagsModule\n\nTagsModule\n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tags/tags.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TagsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TagsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TagsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TagsController } from './tags.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Tag } from './tag.entity';\nimport { TagsService } from './providers/tags.service';\n\n@Module({\n  controllers: [TagsController],\n  imports: [TypeOrmModule.forFeature([Tag])],\n  providers: [TagsService],\n  exports: [TagsService],\n})\nexport class TagsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TagsService.html":{"url":"injectables/TagsService.html","title":"injectable - TagsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TagsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/providers/tags.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                findMultipleTags\n                            \n                            \n                                    Public\n                                    Async\n                                softRemove\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tagsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/tags/providers/tags.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tagsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createTagDto: CreateTagDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:20\n                        \n                    \n\n\n            \n                \n                        Creating new tags\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createTagDto\n                                            \n                                                            CreateTagDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findMultipleTags\n                        \n                    \n                \n            \n            \n                \n                        \n                    findMultipleTags(tags: number[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tags\n                                            \n                                                        number[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        softRemove\n                        \n                    \n                \n            \n            \n                \n                        \n                    softRemove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateTagDto } from '../dtos/create-tag.dto';\nimport { In, Repository } from 'typeorm';\nimport { Tag } from '../tag.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n//npx nest generate service tags/providers/tags --flat --no-spec\n@Injectable()\nexport class TagsService {\n  constructor(\n    /**\n     * Inject tagsRepository\n     */\n    @InjectRepository(Tag)\n    private readonly tagsRepository: Repository,\n  ) {}\n  /**\n   * Creating new tags\n   */\n  public async create(createTagDto: CreateTagDto) {\n    const tag = this.tagsRepository.create(createTagDto);\n\n    return await this.tagsRepository.save(tag);\n  }\n\n  public async findMultipleTags(tags: number[]) {\n    const results = await this.tagsRepository.find({\n      where: {\n        id: In(tags), // Finds all the tags with ids within this array\n      },\n    });\n\n    return results;\n  }\n\n  public async delete(id: number) {\n    // Check if the tag exists before deleting\n    const tag = await this.tagsRepository.findOne({\n      where: { id },\n    });\n\n    if (!tag) {\n      return { deleted: false, message: 'Tag not found' };\n    }\n\n    // Proceed with deletion\n    await this.tagsRepository.delete(id);\n\n    return { deleted: true, id };\n  }\n\n  public async softRemove(id: number) {\n    // Soft delete creates a timestamp and not remove it from DB\n    await this.tagsRepository.softDelete(id);\n\n    return { deleted: true, id };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                posts\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, post => post.author)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:38\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from 'src/posts/post.entity';\nimport { Column, Entity, OneToMany, PrimaryGeneratedColumn } from 'typeorm';\n\n// Column typees differ if we're using SQL or PostgreSQL check typeorm website\n// Should match the DTO\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n  })\n  firstName: string;\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: true,\n  })\n  lastName: string;\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n    unique: true,\n  })\n  email: string;\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n  })\n  password: string;\n\n  // A user can have many posts\n  @OneToMany(() => Post, (post) => post.author)\n  posts: Post[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUsers\n                            \n                            \n                                    \n                                    Public\n                                patchUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUsers(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getUserParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id?')@ApiOperation({summary: 'Fetches a list of registered users on the application'})@ApiResponse({status: 200, description: 'Users fetched successfully based on the query'})@ApiQuery({name: 'limit', type: 'number', required: false, description: 'The number of entries returned per query', example: 10})@ApiQuery({name: 'page', type: 'number', required: false, description: 'The position of the page number that you want the API to return', example: 1})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        patchUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchUser(patchUserDto: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PatchUserDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        /* eslint-disable @typescript-eslint/no-unused-vars */\nimport {\n  Body,\n  Headers,\n  Controller,\n  Get,\n  Param,\n  Post,\n  Query,\n  ParseIntPipe,\n  DefaultValuePipe,\n  ValidationPipe,\n  Patch,\n} from '@nestjs/common';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { GetUsersParamDto } from './dtos/get-users-param.dto';\nimport { PatchUserDto } from './dtos/patch-user.dto';\nimport { UsersService } from './providers/users.service';\nimport { ApiOperation, ApiQuery, ApiResponse, ApiTags } from '@nestjs/swagger';\n\n// To make parameters optional, use the ? operator\n@Controller('users')\n@ApiTags('Users')\nexport class UsersController {\n  constructor(\n    // Injecting user service\n    private readonly usersService: UsersService,\n  ) {}\n  @Get('/:id?')\n  @ApiOperation({\n    summary: 'Fetches a list of registered users on the application',\n  })\n  // We can add multiple api response\n  @ApiResponse({\n    status: 200,\n    description: 'Users fetched successfully based on the query',\n  })\n  @ApiQuery({\n    name: 'limit',\n    type: 'number',\n    required: false,\n    description: 'The number of entries returned per query',\n    example: 10,\n  })\n  @ApiQuery({\n    name: 'page',\n    type: 'number',\n    required: false,\n    description:\n      'The position of the page number that you want the API to return',\n    example: 1,\n  })\n  public getUsers(\n    @Param() getUserParamDto: GetUsersParamDto,\n    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\n  ) {\n    return this.usersService.findAll(getUserParamDto, limit, page);\n  }\n\n  @Post()\n  public createUsers(\n    // Without the global validation\n    // @Body(new ValidationPipe()) createUserDto: CreateUserDto,\n\n    // With\n    @Body() createUserDto: CreateUserDto,\n  ) {\n    return this.usersService.createUser(createUserDto);\n  }\n  @Patch()\n  public patchUser(@Body() patchUserDto: PatchUserDto) {\n    return patchUserDto;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './providers/users.service';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './user.entity';\nimport { ConfigModule } from '@nestjs/config';\nimport profileConfig from './config/profile.config';\n\n// We can only export providers, never controllers\n@Module({\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService],\n  // imports: [AuthModule], will cause a circular dependency\n  imports: [\n    forwardRef(() => AuthModule),\n    TypeOrmModule.forFeature([User]),\n    ConfigModule.forFeature(profileConfig),\n  ],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for managing user-related operations in the Users table.\nThis service interacts with the Users table to perform CRUD operations.\nIt also uses the AuthService to handle authentication-related checks and\ndependencies while ensuring circular dependencies are avoided.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    Public\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findOneById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, usersRepository: Repository, profileConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/users.service.ts:19\n                            \n                        \n\n                \n                    \n                            Constructs the UsersService with necessary dependencies.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService for handling authentication-related operations.\n\n\n                                                        \n                                                \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        profileConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:85\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(getUserParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:55\n                        \n                    \n\n\n            \n                \n                        Retrieves a list of all users from the database.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing filters for user retrieval.\n\n\n                                            \n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe maximum number of users to return.\n\n\n                                            \n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe page number for pagination.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                Array of user objects containing basic details.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:80\n                        \n                    \n\n\n            \n                \n                        Retrieves a single user by their unique identifier.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe unique ID of the user to retrieve.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                A user object containing their details.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { GetUsersParamDto } from '../dtos/get-users-param.dto';\nimport { AuthService } from 'src/auth/providers/auth.service';\nimport { Repository } from 'typeorm';\nimport { User } from '../user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { CreateUserDto } from '../dtos/create-user.dto';\nimport { ConfigService, ConfigType } from '@nestjs/config';\nimport profileConfig from '../config/profile.config';\n\n/**\n * Service for managing user-related operations in the Users table.\n *\n * This service interacts with the Users table to perform CRUD operations.\n * It also uses the AuthService to handle authentication-related checks and\n * dependencies while ensuring circular dependencies are avoided.\n */\n@Injectable()\nexport class UsersService {\n  /**\n   * Constructs the UsersService with necessary dependencies.\n   *\n   * @param {AuthService} authService - Service for handling authentication-related operations.\n   */\n  constructor(\n    @Inject(forwardRef(() => AuthService))\n    private readonly authService: AuthService,\n\n    /**\n     * Injecting usersRepository\n     */\n    @InjectRepository(User)\n    private usersRepository: Repository,\n\n    // /**\n    //  * Injecting ConfigService\n    //  */\n    // private readonly configService: ConfigService,\n\n    /**\n     * Inject profileConfig\n     */\n    @Inject(profileConfig.KEY)\n    private readonly profileConfiguration: ConfigType,\n  ) {}\n\n  /**\n   * Retrieves a list of all users from the database.\n   *\n   * @param {GetUsersParamDto} getUserParamDto - DTO containing filters for user retrieval.\n   * @param {number} limit - The maximum number of users to return.\n   * @param {number} page - The page number for pagination.\n   * @returns {Array} Array of user objects containing basic details.\n   */\n  public findAll(\n    getUserParamDto: GetUsersParamDto,\n    limit: number,\n    page: number,\n  ) {\n    // Test the new config\n    console.log(this.profileConfiguration);\n    return [\n      {\n        firstName: 'John',\n        email: 'john@doe.com',\n      },\n      {\n        firstName: 'Alice',\n        email: 'alice@doe.com',\n      },\n    ];\n  }\n\n  /**\n   * Retrieves a single user by their unique identifier.\n   *\n   * @param {number} id - The unique ID of the user to retrieve.\n   * @returns {{ id: number; firstName: string; email: string }} A user object containing their details.\n   */\n  public async findOneById(id: number) {\n    return await this.usersRepository.findOneBy({\n      id,\n    });\n  }\n  public async createUser(createUserDto: CreateUserDto) {\n    // Check if email is unique\n    const existingUser = await this.usersRepository.findOne({\n      where: { email: createUserDto.email },\n    });\n    // Handle exception\n\n    // Create a new user\n    let newUser = this.usersRepository.create(createUserDto);\n\n    newUser = await this.usersRepository.save(newUser);\n\n    return newUser;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.module.ts\n            \n            variable\n            ENV\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/providers/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/meta-options/dtos/create-post-meta-options.dto.ts\n            \n            class\n            CreatePostMetaOptionsDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/meta-options/meta-option.entity.ts\n            \n            entity\n            MetaOption\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/meta-options/meta-options.controller.ts\n            \n            controller\n            MetaOptionsController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/meta-options/providers/meta-options.service.ts\n            \n            injectable\n            MetaOptionsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dto/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                100 %\n                (12/12)\n            \n        \n        \n            \n                \n                src/posts/dto/patch-post.dto.ts\n            \n            class\n            PatchPostDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/posts/post.entity.ts\n            \n            entity\n            Post\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/posts/providers/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/tags/dtos/create-tag.dto.ts\n            \n            class\n            CreateTagDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tags/providers/tags.service.ts\n            \n            injectable\n            TagsService\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                src/tags/tag.entity.ts\n            \n            entity\n            Tag\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tags/tags.controller.ts\n            \n            controller\n            TagsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dtos/get-users-param.dto.ts\n            \n            class\n            GetUsersParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/providers/users.service.ts\n            \n            injectable\n            UsersService\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/users/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.23\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.2.2\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/mapped-types : ^2.0.5\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.3.0\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            pg : ^8.11.5\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            PostStatus   (src/.../post-status.enum.ts)\n                        \n                        \n                            PostType   (src/.../post-type.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/posts/enums/post-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PostStatus\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n            \n        \n\n    src/posts/enums/post-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PostType\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\nCompodoc Documentation\nScript\nExample :$ npm run docLet me name this as doc.\nTo see the coverage\nExample :$ http://localhost:3001/coverage.htmlIt should be a comma over here.\nNow this script itself a little bit verbose and lengthy, and I'll try to explain all the parts of the\nscript as we go.\nSo first of all, we need to use NPCs and along with Compo Doc in order to generate the Compo Doc documentation.\nSo we use at the rate compo doc, which is the name of the package.\nSo compo doc slash compo doc.\nSo this basically triggers the compo doc package for us.\nAnd then we need to provide it certain configurations.\nThe first one is the path to the pts config file.\nSo hyphen path to the pts config file TTS config file is within the root of the project itself.\nSo we use tsconfig.json.\nSo it's going to pick up this particular config file which is there in the root of our project.\nSo this particular TTS config file over here.\nNow once we have provided the TTS config file, the next flag that we want to add is the s flag.\nNow what this flag does is that it instructs compared to serve generated documentation on a port.\nNow, having said that, I want to have a specific port number as well.\nSo I use hyphen hyphen port.\nAnd let's serve the documentation on port 3001.\nWith that, I also want to enable Compo doc to watch for changes within my code.\nSo whenever I'm writing any new code, it should watch for changes and regenerate the documentation\nwhenever needed.\nFinally, I want to give it a specific directory for generating the documentation so we can use a hyphen\nd flag, which instructs combo doc to generate the documentation within a specific directory, which\nwe can pass as an argument.\nSo here I'm saying within the root of my project, just use the documentation directory to generate\nyour documentation.\nThe details can be seen at localhost:3001\nAlways define both sides of the relationships in many to many relationships i.e tags and posts\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MetaOptionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TagsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_exports\n\n\n\ncluster_TagsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nPostsModule -->\n\nTagsModule->PostsModule\n\n\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nTagsService \n\nTagsService \n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        6 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    6 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    7 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ENV   (src/.../app.module.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENV\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.NODE_ENV\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
